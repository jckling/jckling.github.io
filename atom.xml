<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jckling&#39;s Blog</title>
  
  
  <link href="https://jckling.github.io/atom.xml" rel="self"/>
  
  <link href="https://jckling.github.io/"/>
  <updated>2021-08-16T06:59:39.264Z</updated>
  <id>https://jckling.github.io/</id>
  
  <author>
    <name>Jckling</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 静态分析相关论文</title>
    <link href="https://jckling.github.io/2021/07/28/Notes/Python%20%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/"/>
    <id>https://jckling.github.io/2021/07/28/Notes/Python%20%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/</id>
    <published>2021-07-28T11:01:13.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>翻了几篇 Python 静态分析相关的论文，看看有什么比较好的分析工具。</p><h2 id="静态分析工具"><a href="#静态分析工具" class="headerlink" title="静态分析工具"></a>静态分析工具</h2><h3 id="1-Survey-on-Static-Analysis-Tools-of-Python-Programs"><a href="#1-Survey-on-Static-Analysis-Tools-of-Python-Programs" class="headerlink" title="1. Survey on Static Analysis Tools of Python Programs"></a>1. Survey on Static Analysis Tools of Python Programs</h3><blockquote><p>SQAMIA 2019</p></blockquote><p>概述了 Python 代码库静态分析的现有方法和工具，并介绍了一些新的研究方向。</p><p>总结了常见的 Python 静态分析工具之间的关系，简单介绍了（几行概述） <a href="https://github.com/PyCQA/pylint">Pylint</a>、<a href="https://github.com/PyCQA/pyflakes">Pyflakes</a>、<a href="https://github.com/PyCQA/flake8">flake8</a>、<a href="https://github.com/timothycrosley/deprecated.frosted">Frosted</a>、<a href="https://github.com/PyCQA/pycodestyle">Pycodestyle</a>、<a href="https://github.com/python/mypy">Mypy</a>、<a href="https://github.com/bjodah/pysym">PySym</a>、<a href="https://github.com/thomasjball/PyExZ3">PyExZ3</a>。</p><img src="https://i.loli.net/2021/07/29/qpvM1iYNFXhLgTe.jpg" style="zoom:70%;" /><p>设计并测试了 6 种典型的逻辑漏洞（logical errors），用 PyLint、Pyflakes、Flake8、Mypy、Frosted 检测</p><ul><li>使用默认配置</li><li>逻辑错误会产生意外的输出或结果，但不一定会导致崩溃</li></ul><img src="https://i.loli.net/2021/07/29/G1Q8ETPtCyKoSxA.png" style="zoom:70%;" /><ol><li><p>引用未定义变量</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">message = <span class="string">&quot;Hello there!&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;greetMe&quot;</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">print(mesage) <span class="comment"># 变量名打错</span></span><br><span class="line">print(<span class="string">&quot;This code is fine, no problems.&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>太多位置参数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys <span class="comment"># 未使用的导入</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, first_name, last_name, age</span>):</span></span><br><span class="line">        self.first_name = first_name</span><br><span class="line">        self.last_name = last_name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Windows&quot;</span> <span class="keyword">in</span> platform.platform(): <span class="comment"># 未定义的 platform 变量</span></span><br><span class="line">    print(<span class="string">&quot;You’ re using Windows !&quot;</span>)</span><br><span class="line"></span><br><span class="line">    self.age = self.getAge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment"># 太多位置参数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAge</span>(<span class="params">this</span>):</span> <span class="comment"># 没有 self 参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;18&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>传递类型错误的参数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">x:<span class="built_in">int</span>, y:<span class="built_in">int</span></span>):</span> <span class="comment"># 类型注释</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">print(<span class="built_in">sum</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(<span class="built_in">sum</span>(<span class="number">3</span>, <span class="string">&quot;4&quot;</span>)) <span class="comment"># 传递错误类型的参数</span></span><br></pre></td></tr></table></figure></li><li><p>引用不存在的类属性</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">PERSON1 = Person(<span class="string">&quot;Hristina&quot;</span>, <span class="number">23</span>)</span><br><span class="line">print(PERSON1.age)</span><br><span class="line">print(PERSON1.height) <span class="comment"># 引用不存在的属性</span></span><br></pre></td></tr></table></figure></li><li><p>调用嵌套函数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x=<span class="number">3</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        print(x)</span><br><span class="line">    inner()</span><br><span class="line">outer()</span><br><span class="line">inner() <span class="comment"># 调用 outer 内部定义的函数</span></span><br></pre></td></tr></table></figure></li><li><p>闭包错误</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 闭包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x = <span class="number">3</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        y = <span class="number">3</span></span><br><span class="line">        result = x + y</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">a = outer()</span><br><span class="line">print(a()) <span class="comment"># 调用 inner()</span></span><br><span class="line">print(a.__name__) <span class="comment"># 打印 inner</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包错误，非预期结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">greet_word, name</span>) :</span></span><br><span class="line">print(greet_word, name)</span><br><span class="line">greeters = <span class="built_in">list</span>()</span><br><span class="line">names = [<span class="string">&quot;Kiki&quot;</span>, <span class="string">&quot;Riki&quot;</span>, <span class="string">&quot;Joe&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">greeters.append(<span class="keyword">lambda</span> x : greet(x, name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> greeter <span class="keyword">in</span> greeters:</span><br><span class="line">greeter(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="comment"># Hi Joe</span></span><br><span class="line"><span class="comment"># Hi Joe</span></span><br><span class="line"><span class="comment"># Hi Joe</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-Towards-More-Sophisticated-Static-Analysis-Methods-of-Python-Programs"><a href="#2-Towards-More-Sophisticated-Static-Analysis-Methods-of-Python-Programs" class="headerlink" title="2. Towards More Sophisticated Static Analysis Methods of Python Programs"></a>2. Towards More Sophisticated Static Analysis Methods of Python Programs</h3><blockquote><p>Informatics 2019 • IEEE 15th International Scientific Conference on Informatics</p></blockquote><p>和上一篇同样的作者，探讨了为 Python 开发更强大的静态分析工具的可能研究方向。</p><p>总结现有的静态分析方法：模式匹配、AST 匹配、符号执行、混合执行。对比基于 AST 的 Pylint 和实验性的符号执行工具 mini-mc（使用 Z3 约束求解器的 Python 接口）</p><ul><li>4 个代码片段测试 mini-mc 的检测能力，其中 2 个片段用于比较</li></ul><table><thead><tr><th></th><th>Pylint</th><th>mini-mc</th></tr></thead><tbody><tr><td>引用未定义变量</td><td>x</td><td>√</td></tr><tr><td>可能的除零异常（误报）</td><td>x</td><td>√</td></tr></tbody></table><ol><li><p>引用未定义变量</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>== arg):</span><br><span class="line">        print(<span class="string">&quot;branch11 &quot;</span>, os.getpid())</span><br><span class="line">        z = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span>!=arg):</span><br><span class="line">        print(<span class="string">&quot;branch21 &quot;</span>, os.getpid())</span><br><span class="line">        x = z</span><br><span class="line"></span><br><span class="line">arg = BitVec(arg, <span class="number">32</span>)</span><br><span class="line">func(arg)</span><br></pre></td></tr></table></figure></li><li><p>可能的除零异常</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">if</span> arg == <span class="number">41</span> :</span><br><span class="line">    print(<span class="string">&quot;branch21 &quot;</span>, os.getpid())</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 输入为 42 时确实会引起异常，但其他情况下没有问题</span></span><br><span class="line">        print(<span class="string">&quot;branch22 &quot;</span>, os.getpid())</span><br><span class="line">        z = arg - <span class="number">42</span></span><br><span class="line">        z = <span class="number">99</span> / z</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-Static-Value-Analysis-of-Python-Programs-by-Abstract-Interpretation"><a href="#3-Static-Value-Analysis-of-Python-Programs-by-Abstract-Interpretation" class="headerlink" title="3. Static Value Analysis of Python Programs by Abstract Interpretation"></a>3. Static Value Analysis of Python Programs by Abstract Interpretation</h3><blockquote><p>NASA Formal Methods Symposium</p></blockquote><p>通过 <strong>抽象解释</strong> 推断变量类型、运行时错误和未捕获异常，只支持一小部分内置对象和标准库的分析。</p><h2 id="调用图工具"><a href="#调用图工具" class="headerlink" title="调用图工具"></a>调用图工具</h2><h3 id="1-Empirical-Study-of-Python-Call-Graph"><a href="#1-Empirical-Study-of-Python-Call-Graph" class="headerlink" title="1. Empirical Study of Python Call Graph"></a>1. Empirical Study of Python Call Graph</h3><blockquote><p>2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)</p></blockquote><p>对现有的 Python 程序调用图生成工具进行比对（<a href="https://github.com/davidfraser/pyan">Pyan</a>、<a href="https://github.com/scottrogowski/code2flow">Code2flow</a>、<a href="https://github.com/gak/pycallgraph">Pycallgraph</a>、Understand），以 Pycallgraph 作为基准，用常见的模块源代码进行测试（scikit-learn、theano、networkx、numba、joblib、pandas）</p><ul><li>Pyan、Code2flow、Pycallgraph（6 年前停更）：Github 开源工具</li><li>Understand：商业软件</li></ul><p>针对 pandas 模块，各个工具生成的隐式节点数目有所不同，这造成了结果的巨大差异。</p><img src="https://i.loli.net/2021/07/29/nzaZEiHlMJWAuwc.jpg" style="zoom:70%;" /><p>结论：现有的 Python 静态调用图工具在构建效果上存在较大差异，仍有改进的空间。</p><h3 id="2-PyCG-Practical-Call-Graph-Generation-in-Python"><a href="#2-PyCG-Practical-Call-Graph-Generation-in-Python" class="headerlink" title="2. PyCG: Practical Call Graph Generation in Python"></a>2. PyCG: Practical Call Graph Generation in Python</h3><blockquote><p>2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)</p></blockquote><p>提出了一种实用的、静态的 Python 调用图生成方法。涉及上下文敏感的过程间分析，不动点迭代算法等。没有分析循环和条件语句，也不使用变量类型信息，只能分析有源码的模块。</p><p>编写如下 crypto 模块进行测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cryptops</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        self.key = key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span>(<span class="params">self, msg, func</span>):</span></span><br><span class="line"><span class="keyword">return</span> func(self.key, msg)</span><br><span class="line"></span><br><span class="line">crp = Crypto(<span class="string">&quot;secretkey&quot;</span>)</span><br><span class="line">encrypted = crp.apply(<span class="string">&quot;hello world&quot;</span>, cryptops.encrypt)</span><br><span class="line">decrypted = crp.apply(encrypted, cryptops.decrypt)</span><br></pre></td></tr></table></figure><p>(a) 是实际的调用图（人工绘制），(b) Pyan 没有进行过程间分析，(c) Depends 的策略非常保守，只有预期信息足够才生成调用边</p><img src="https://i.loli.net/2021/07/29/eoSfyqKCXFDuZwh.jpg" style="zoom:70%;" /><p>使用 PyCG 分析 crypto 模块，可以看到完整且正确的名称解析和调用</p><ul><li>橙色：模块</li><li>红色：类</li><li>黑色：函数</li><li>蓝色：变量</li></ul><img src="https://i.loli.net/2021/07/29/O7IoGZtEjwXup3A.jpg" style="zoom:70%;" /><p>微观基准测试套件（Micro-benchmark Suite）包含 112 个独特的小型代码，涵盖 Python 语言的各种特性，分为 16 个类别。</p><img src="https://i.loli.net/2021/07/29/pnfacBJVRN3TISA.jpg" style="zoom:70%;" /><p>宏观基准测试（Macro-benchmarks）使用 5 个流行的开源 Python 软件，平均用了 10h 为每个项目生成调用图</p><img src="https://i.loli.net/2021/07/29/Sqnl6K27FUxhcPk.jpg" style="zoom:70%;" /><p>PyCG 和 Pyan 对比，PyCG 基本为所有代码生成了完整的调用图（111/112），Sound 只覆盖了 103 是因为没有覆盖 Python 的星号赋值；Pyan 整体比较残念，在赋值相关的测试中表现良好。</p><img src="https://i.loli.net/2021/07/29/tq5ijGV2YyULTNP.jpg" style="zoom:70%;" /><p>这里的 complete 和 sound 是静态分析中的概念：</p><img src="https://i.loli.net/2021/07/29/MbHyi6CXpPJ4aTq.jpg" style="zoom:50%;" /><p>PyCG 和 Pyan、Depends 对比，在真实的 Python 项目上，PyCG 能够生成高精度的调用图，Recall 值较低是因为方法的局限和缺乏对 Python 某些功能特性的支持。</p><p>另外还比较了一下时间和内存的消耗（取 20 次的平均值）</p><img src="https://i.loli.net/2021/07/29/4jBnk5lyiJxMouS.jpg" style="zoom:70%;" /><h3 id="3-Qualitative-and-Quantitative-Analysis-of-Callgraph-Algorithms-for-Python"><a href="#3-Qualitative-and-Quantitative-Analysis-of-Callgraph-Algorithms-for-Python" class="headerlink" title="3. Qualitative and Quantitative Analysis of Callgraph Algorithms for Python"></a>3. Qualitative and Quantitative Analysis of Callgraph Algorithms for Python</h3><blockquote><p>2021 International Conference on Code Quality (ICCQ)</p></blockquote><p>提出了一个可扩展的 Python 调用图比较分析框架 eval_CG，包含微观测试和宏观测试</p><ul><li>微观测试：49 个小型代码，分为 13类</li><li>宏观测试：5 个开源 Python 项目，Python robotics、mitmproxy、cookiecutter、YouCompleteMe、The Fuck</li></ul><p>对不同的调用图构造工具进行系统的比较</p><ul><li>静态调用图（Code2flow、Pyan、WALA）</li><li>动态调用图（PyCallGraph）通过动态分析执行路径生成 Python 调用图，这种分析应该用另一种方法（例如模糊测试）来获得有意义的结果，否则会产生许多误报</li></ul><p>结论：这些工具生成的静态调用图都包含虚假边，而且都没有生成 sound 的调用图（没有漏报）</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>整理了几个可以用于生成调用图的工具，之后试试看：</p><ul><li><a href="https://github.com/davidfraser/pyan">Pyan3</a></li><li><a href="https://github.com/vitsalis/pycg">PyCG</a></li><li><a href="https://github.com/scottrogowski/code2flow">Code2flow</a></li><li><a href="https://pyre-check.org/docs/querying-pyre/#dump-call-graph">Pyre - Dump call graph</a></li></ul>]]></content>
    
    
    <summary type="html">概览</summary>
    
    
    
    <category term="Notes" scheme="https://jckling.github.io/categories/Notes/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly 主题预览</title>
    <link href="https://jckling.github.io/2021/07/22/Other/Butterfly%20%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/"/>
    <id>https://jckling.github.io/2021/07/22/Other/Butterfly%20%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/</id>
    <published>2021-07-22T09:02:46.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高亮文字（label）"><a href="#高亮文字（label）" class="headerlink" title="高亮文字（label）"></a>高亮文字（label）</h1><p>分行间距会很</p><mark class="hl-label default">灰色</mark> <p>大</p><mark class="hl-label blue">蓝色</mark> <mark class="hl-label pink">粉色</mark> <mark class="hl-label red">红色</mark> <mark class="hl-label purple">紫色</mark> <mark class="hl-label orange">橙色</mark> <mark class="hl-label green">绿色</mark> <h1 id="内联图片"><a href="#内联图片" class="headerlink" title="内联图片"></a>内联图片</h1><p>高度 150px 可选 <img class="inline-img" src="https://i.loli.net/2021/06/14/oSn9dxfYhEHClIe.jpg" style="height:150px"/> 但是后面接的文字到下一行了…</p><h1 id="相册（gallery）"><a href="#相册（gallery）" class="headerlink" title="相册（gallery）"></a>相册（gallery）</h1><div class="justified-gallery"><p><img src="https://i.loli.net/2021/06/14/2NXqsznriG8blc7.jpg"><br><img src="https://i.loli.net/2021/06/14/jcdZBHXx9TskmrM.jpg"></p>          </div><h1 id="选项卡（Tab）"><a href="#选项卡（Tab）" class="headerlink" title="选项卡（Tab）"></a>选项卡（Tab）</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">test 1</button></li><li class="tab"><button type="button" data-href="#test-2">test 2</button></li><li class="tab"><button type="button" data-href="#test-3">test 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>预设选择：</p><ul><li>默认显示第 3 个：<code>&#123;% tabs test, 3 %&#125;</code></li></ul><p>自定义名称：</p><ul><li>名称：<code>&lt;!-- tab 测试 --&gt;</code></li><li>图标：<code>&lt;!-- tab @fas fa-bomb --&gt;</code></li><li>图标+名称：<code>&lt;!-- tab 炸弹@fas fa-bomb --&gt;</code>（必须反过来写）</li></ul><h1 id="按钮（Button）"><a href="#按钮（Button）" class="headerlink" title="按钮（Button）"></a>按钮（Button）</h1><a class="btn-beautify button--animated " href="https://jckling.github.io/"   title="Jckling"><span>Jckling</span></a><a class="btn-beautify button--animated " href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline" href="https://jckling.github.io/"   title="Jckling"><span>Jckling</span></a><a class="btn-beautify button--animated outline" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><hr><a class="btn-beautify button--animated block" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated block center larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated block right outline larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><hr><a class="btn-beautify button--animated larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated blue larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated pink larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated red larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated purple larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated orange larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated green larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><hr><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline blue larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline pink larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline red larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline purple larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline orange larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline green larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a></div><h1 id="标签（Tag）"><a href="#标签（Tag）" class="headerlink" title="标签（Tag）"></a>标签（Tag）</h1><h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2><div class="note simple"><p>默认</p></div><div class="note default simple"><p>default</p></div><div class="note primary simple"><p>primary</p></div><div class="note success simple"><p>success</p></div><div class="note info simple"><p>info</p></div><div class="note warning simple"><p>warning</p></div><div class="note danger simple"><p>danger</p></div><h2 id="morden"><a href="#morden" class="headerlink" title="morden"></a>morden</h2><div class="note modern"><p>默认</p></div><div class="note default modern"><p>default</p></div><div class="note primary modern"><p>primary</p></div><div class="note success modern"><p>success</p></div><div class="note info modern"><p>info</p></div><div class="note warning modern"><p>warning</p></div><div class="note danger modern"><p>danger</p></div><h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2><div class="note flat"><p>默认</p></div><div class="note default flat"><p>default</p></div><div class="note primary flat"><p>primary</p></div><div class="note success flat"><p>success</p></div><div class="note info flat"><p>info</p></div><div class="note warning flat"><p>warning</p></div><div class="note danger flat"><p>danger</p></div><h2 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h2><div class="note disabled"><p>默认</p></div><div class="note default disabled"><p>default</p></div><div class="note primary disabled"><p>primary</p></div><div class="note success disabled"><p>success</p></div><div class="note info disabled"><p>info</p></div><div class="note warning disabled"><p>warning</p></div><div class="note danger disabled"><p>danger</p></div><h2 id="颜色和图标"><a href="#颜色和图标" class="headerlink" title="颜色和图标"></a>颜色和图标</h2><div class="note blue flat"><p>fas fa-bullhorn</p></div><div class="note icon flat"><i class="note-icon fas fa-bullhorn"></i><p>fas fa-bullhorn</p></div><div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>fas fa-bullhorn</p></div><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>翻文档：<a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安裝文檔(四) 主題配置-2</a></p>]]></content>
    
    
    <summary type="html">渲染一些会用到，但每次都得翻文档找的东西😅</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>Python ast 模块使用</title>
    <link href="https://jckling.github.io/2021/07/14/Other/Python%20ast%20%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    <id>https://jckling.github.io/2021/07/14/Other/Python%20ast%20%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-14T06:30:05.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-源码编译过程"><a href="#Python-源码编译过程" class="headerlink" title="Python 源码编译过程"></a>Python 源码编译过程</h1><p>Python 源码到机器码的过程，以 CPython 为例，编译过程如下：</p><ul><li>将源代码解析为解析树（Parser Tree）</li><li>将解析树转换为抽象语法树（Abstract Syntax Tree）</li><li>将抽象语法树转换到控制流图（Control Flow Graph）</li><li>根据流图将字节码（bytecode）发送给虚拟机（ceval）</li></ul><p>可以使用以下模块进行操作：</p><ul><li>ast 模块可以控制抽象语法树的生成和编译</li><li>py-compile 模块能够将源码换成字节码（编译），保存在 __pycache__ 文件夹，以 <code>.pyc</code> 结尾（不可读）</li><li>dis 模块通过反汇编支持对字节码的分析（可读）</li></ul><h1 id="ast-模块使用"><a href="#ast-模块使用" class="headerlink" title="ast 模块使用"></a>ast 模块使用</h1><p>ast 模块可以用于生成和编译 Python 代码的抽象语法树，许多静态分析工具都使用该模块生成抽象语法树。</p><p><code>ast.parse()</code> 函数可以用来生成抽象语法树，<code>ast.compile()</code> 可以将抽象语法树编译为代码。</p><p>用下列代码作为测试样例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nums</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;even: &quot;</span>, i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot; odd: &quot;</span>, i)</span><br><span class="line"></span><br><span class="line">nums()</span><br></pre></td></tr></table></figure><h2 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h2><p>代码对象是 CPython 实现的低级细节，涉及 code 模块，该模块是解释器基类，可用于自定义 Python 解释器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取源文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo.py&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成可以被 exec() 或 eval() 执行的代码对象</span></span><br><span class="line">cm = <span class="built_in">compile</span>(data, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">exec(cm)</span><br></pre></td></tr></table></figure><h2 id="生成-AST"><a href="#生成-AST" class="headerlink" title="生成 AST"></a>生成 AST</h2><p>直接从源码生成，Python 3.9 支持 <code>indent</code> 参数，打印输出更为友好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f_ast = ast.parse(data)</span><br><span class="line">print(ast.dump(f_ast, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>得到如下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Module( <span class="comment"># 第一级，模块</span></span><br><span class="line">    body=[</span><br><span class="line">        FunctionDef( <span class="comment"># 第二级，函数定义</span></span><br><span class="line">            name=<span class="string">&#x27;nums&#x27;</span>, <span class="comment"># 函数名称</span></span><br><span class="line">            args=arguments( <span class="comment"># 参数</span></span><br><span class="line">                posonlyargs=[],</span><br><span class="line">                args=[],</span><br><span class="line">                kwonlyargs=[],</span><br><span class="line">                kw_defaults=[],</span><br><span class="line">                defaults=[]),</span><br><span class="line">            body=[ <span class="comment"># 函数体</span></span><br><span class="line">                For( <span class="comment"># 循环</span></span><br><span class="line">                    target=Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Store()),</span><br><span class="line">                    iter=Call( <span class="comment"># 递归函数调用</span></span><br><span class="line">                        func=Name(id=<span class="string">&#x27;range&#x27;</span>, ctx=Load()),</span><br><span class="line">                        args=[</span><br><span class="line">                            Constant(value=2)], <span class="comment"># 参数</span></span><br><span class="line">                        keywords=[]),</span><br><span class="line">                    body=[ <span class="comment"># 循环体</span></span><br><span class="line">                        If( <span class="comment"># 条件判断</span></span><br><span class="line">                            <span class="built_in">test</span>=Compare(<span class="comment"># 比较</span></span><br><span class="line">                                left=BinOp( <span class="comment"># 左操作数</span></span><br><span class="line">                                    left=Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Load()), <span class="comment"># 左操作数</span></span><br><span class="line">                                    op=Mod(), <span class="comment"># 操作符</span></span><br><span class="line">                                    right=Constant(value=2)), <span class="comment"># 右操作数</span></span><br><span class="line">                                ops=[</span><br><span class="line">                                    Eq()],</span><br><span class="line">                                comparators=[ <span class="comment"># 右操作数</span></span><br><span class="line">                                    Constant(value=0)]),</span><br><span class="line">                            body=[ <span class="comment"># 为真</span></span><br><span class="line">                                Expr(</span><br><span class="line">                                    value=Call( <span class="comment"># 调用函数</span></span><br><span class="line">                                        func=Name(id=<span class="string">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class="line">                                        args=[</span><br><span class="line">                                            Constant(value=<span class="string">&#x27;even: &#x27;</span>),</span><br><span class="line">                                            Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Load())],</span><br><span class="line">                                        keywords=[]))],</span><br><span class="line">                            orelse=[ <span class="comment"># 为假</span></span><br><span class="line">                                Expr(</span><br><span class="line">                                    value=Call( <span class="comment"># 调用函数</span></span><br><span class="line">                                        func=Name(id=<span class="string">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class="line">                                        args=[</span><br><span class="line">                                            Constant(value=<span class="string">&#x27; odd: &#x27;</span>),</span><br><span class="line">                                            Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Load())],</span><br><span class="line">                                        keywords=[]))])],</span><br><span class="line">                    orelse=[])],</span><br><span class="line">            decorator_list=[]),</span><br><span class="line">        Expr( <span class="comment"># 第二级，表达式语句</span></span><br><span class="line">            value=Call( <span class="comment"># 调用函数</span></span><br><span class="line">                func=Name(id=<span class="string">&#x27;nums&#x27;</span>, ctx=Load()),</span><br><span class="line">                args=[],</span><br><span class="line">                keywords=[]))],</span><br><span class="line">    type_ignores=[])</span><br></pre></td></tr></table></figure><h2 id="遍历-AST"><a href="#遍历-AST" class="headerlink" title="遍历 AST"></a>遍历 AST</h2><h2 id="修改-AST"><a href="#修改-AST" class="headerlink" title="修改 AST"></a>修改 AST</h2><p>有两种方式：①修改 AST 节点；②替换 AST 节点。ast 模块提供了 <code>NodeVisitor</code> 和 <code>NodeTransformer</code> 实现这两种功能。</p><ol><li><p>将 <code>i%2 == 0</code>修改为 <code>i+2==0</code></p><ul><li><code>ast.NodeVisitor.visit</code> 如果没有实现对象的 <code>visit_classname</code> 方法，则调用 <code>generic_visit</code> 方法</li><li><code>ast.NodeVisitor.generic_visit</code> 在子节点上调用 <code>visit</code> 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeVisitor</span>(<span class="params">ast.NodeVisitor</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_BinOp</span>(<span class="params">self, node</span>):</span> <span class="comment"># 修改操作符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(node.op, ast.Mod):</span><br><span class="line">            node.op = ast.Add()</span><br><span class="line">        self.generic_visit(node) <span class="comment"># 遍历子节点</span></span><br><span class="line"></span><br><span class="line">visitor = NodeVisitor()</span><br><span class="line">visitor.visit(f_ast) <span class="comment"># 遍历</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">odd:  0</span><br><span class="line">odd:  1</span><br></pre></td></tr></table></figure></li><li><p>删除 <code>else</code> 节点</p><ul><li>调用 <code>compile()</code> 函数时缺失 <code>lineno</code> 和 <code>col_offset</code> 属性，使用 <code>ast.fix_missing_locations</code> 函数添加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeTransformer</span>(<span class="params">ast.NodeTransformer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_If</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">return</span> ast.If(</span><br><span class="line">            test=node.test,</span><br><span class="line">            body=node.body,</span><br><span class="line">            orelse=[]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">transformer = NodeTransformer()</span><br><span class="line">f_ast = transformer.visit(f_ast) <span class="comment"># 返回新的 AST</span></span><br><span class="line">ast.fix_missing_locations(f_ast)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">even:  0</span><br></pre></td></tr></table></figure></li></ol><h2 id="可视化-AST"><a href="#可视化-AST" class="headerlink" title="可视化 AST"></a>可视化 AST</h2><p>使用 graphviz 绘制，遍历 AST 节点，将每个节点对象的类型名称作为点，父节点和每个子节点都连一条边。</p><div class="note info flat"><ol><li><p>安装 graphviz 二进制程序 👉 <a href="https://graphviz.org/download/">https://graphviz.org/download/</a></p></li><li><p>pip 安装包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install graphviz</span><br></pre></td></tr></table></figure></li></ol></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span>(<span class="params">node, nodes, pindex, g</span>):</span></span><br><span class="line">    name = <span class="built_in">str</span>(<span class="built_in">type</span>(node).__name__)</span><br><span class="line">    index = <span class="built_in">len</span>(nodes)</span><br><span class="line">    nodes.append(index)</span><br><span class="line">    g.node(<span class="built_in">str</span>(index), name)</span><br><span class="line">    <span class="keyword">if</span> index != pindex:</span><br><span class="line">        g.edge(<span class="built_in">str</span>(index), <span class="built_in">str</span>(pindex))</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> ast.iter_child_nodes(node):</span><br><span class="line">        visit(n, nodes, index, g)</span><br><span class="line">    </span><br><span class="line">graph = Digraph(<span class="built_in">format</span>=<span class="string">&quot;png&quot;</span>)</span><br><span class="line">tree = ast.parse(data)</span><br><span class="line">visit(tree, [], <span class="number">0</span>, graph)</span><br><span class="line">graph.render(<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到的 test.png 如下：</p><img src="https://i.loli.net/2021/07/15/3lrJHjtdRuTW9oY.png"><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://kamneemaran45.medium.com/python-ast-5789a1b60300">Python AST</a></li><li><a href="https://devguide.python.org/compiler/">25. Design of CPython’s Compiler</a></li><li><a href="https://docs.python.org/zh-cn/3/c-api/code.html">代码对象</a></li><li><a href="https://docs.python.org/zh-cn/3/library/ast.html">ast — 抽象语法树</a></li><li><a href="https://docs.python.org/zh-cn/3/library/py_compile.html">py_compile — 编译 Python 源文件</a></li><li><a href="https://docs.python.org/zh-cn/3/library/dis.html">dis — Python 字节码反汇编器</a></li><li><a href="https://qiita.com/kaityo256/items/e83b369ba7518da0a519">Pythonの抽象構文木をGraphvizで可視化する</a></li></ul>]]></content>
    
    
    <summary type="html">使用 ast 模块操作抽象语法树，修改/替换节点。</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pyre 污点分析工具 Pysa 使用教程</title>
    <link href="https://jckling.github.io/2021/07/07/Security/Pysa%20Tutorial/"/>
    <id>https://jckling.github.io/2021/07/07/Security/Pysa%20Tutorial/</id>
    <published>2021-07-07T03:39:19.000Z</published>
    <updated>2021-08-16T06:59:39.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由 Facebook 开源的 <a href="https://github.com/facebook/pyre-check">Pyre</a> 是兼容 <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> 的 Python 性能类型检查器，可以增量分析大型代码库，能够迅速处理百万级别的代码。Pyre 附带了 Pysa，一个关注安全性的静态分析工具，Pysa 是 Python Static Analyzer 的缩写，Pysa 支持追踪和分析 Python 程序中的数据流（污点分析）。</p><p>此外还有一个 <a href="https://github.com/facebook/sapp">SAPP</a> (Static Analysis Post Processor) 静态分析后置处理器，提供命令行和 UI 检索 Pysa 的执行结果。</p><p>关于 Python 的类型（<a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a>），建议阅读 <a href="https://github.com/python/mypy">mypy</a> 的 <a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html">清单</a> 和 <a href="https://mypy.readthedocs.io/en/stable/builtin_types.html">类型参考</a> 。下面就是没有添加和添加了类型注释的两个函数，Python3.5 开始支持可选的类型注释，这个特性极大地方便了对 Python 程序进行静态分析，不过就我看到的开源工具很少有添加类型注释的…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unannotated</span>():</span>        <span class="comment"># implictly returns `Any`</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;&quot;</span> + <span class="string">&quot;&quot;</span>       <span class="comment"># function body is not checked</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">annotated</span>() -&gt; List:</span>  <span class="comment"># explicit return annotation means we type check `annotated`</span></span><br><span class="line">    <span class="built_in">any</span> = unannotated()</span><br><span class="line">    <span class="built_in">any</span>.attribute         <span class="comment"># `Any` has all possible attributes</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>              <span class="comment"># Error: returning `int` but expecting `List`</span></span><br></pre></td></tr></table></figure><p>Pysa 跟踪数据流，用户定义源点（产生数据的地方）和汇点（来自源点的数据不应该结束的地方），当源点和汇点相交时就产生了问题</p><ul><li>最常见的数据源点就是用户控制的输入</li><li>汇点比较多样，包括各种 API</li></ul><img src="https://i.loli.net/2021/07/08/wNPmpHqg1WKh9Cr.jpg" width=80%><p>Pysa 执行的是过程间分析，即跟踪跨函数调用的数据流（污点分析），使用代码中的所有可用信息，包括可选的静态类型信息。Pyre 能够为源码添加类型信息，它本身的作用就是静态类型检查器。</p><p>局限</p><ol><li><p>问题空间</p><p> Pysa 只能追踪从 admin_operation 到 delete_user 的数据流，无法检查 user_is_admin</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_operation</span>(<span class="params">request: HttpRequest</span>):</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> user_is_admin():</span><br><span class="line">      <span class="keyword">return</span> Http404</span><br><span class="line"> </span><br><span class="line">  delete_user(request.GET[<span class="string">&quot;user_to_delete&quot;</span>])</span><br></pre></td></tr></table></figure></li><li><p>Python 的动态特性</p><p> Pysa 无法识别动态导入的模块函数调用</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret_eval</span>(<span class="params">request: HttpRequest</span>):</span></span><br><span class="line">  os = importlib.import_module(<span class="string">&quot;os&quot;</span>)</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Pysa won&#x27;t know what &#x27;os&#x27; is, and thus won&#x27;t</span></span><br><span class="line">  <span class="comment"># catch this remote code execution issue</span></span><br><span class="line">  os.system(request.GET[<span class="string">&quot;command&quot;</span>])</span><br></pre></td></tr></table></figure></li><li><p>装饰器</p><p> 2020.8.7 Facebook 博客指出暂不支持在调用图中包括装饰器</p></li></ol><p>Facebook 提供了 Pysa 的教程 👉 <a href="https://github.com/facebook/pyre-check/tree/master/documentation/pysa_tutorial">Pysa Tutorial</a> ，涵盖几个主要的内容，进行实验的过程中遇到的一些问题也都磕磕绊绊地解决了。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>Pysa 使用 <code>pyre analyze</code> 调用，实验中涉及到以下几个配置文件和工具：</p><p><code>taint.config</code> </p><ul><li>定义污点的源（source）和汇（sink），还包括隐式的源和汇</li><li>检测规则（rule），例如，从某源点到某汇点是 XXX 攻击，一条规则中可以包含多个源和汇</li><li>特征（feature）：污点的附加元数据，可用于过滤误报</li></ul><p><code>.pysa</code> </p><ul><li>污点模型，表示哪里是源点和汇点（利用签名），使用完全限定名，格式必须匹配 <code>.pyi</code> 存根文件<ul><li><code>TaintSource[SOURCE_NAME]</code> 标记源点</li><li><code>TaintSink[SINK_NAME]</code> 标记汇点</li><li><code>TaintInTaintOut</code> 标记污点进入进出，指的是进入函数的污点传播到返回值中</li><li><code>PartialSink</code> 标记组合源，使用规则名称</li></ul></li><li>消毒器（Sanitizer）表示对象的变化，经过消毒器污点就被净化，不再跟踪<ul><li>使用装饰器声明函数为消毒器</li><li>可以限定范围：源（source）、汇（sink）、污点进污点出（taint-in-taint-out, TITO）</li></ul></li></ul><p><code>.pyre_configuration</code></p><ul><li>路径配置：源代码、存根文件等</li></ul><p>SAPP</p><ul><li>交互式命令行</li><li>Web 服务器</li></ul><p>动态生成污点模型</p><ul><li><a href="https://github.com/facebook/pyre-check/tree/master/tools/generate_taint_models">pyre-check/tools/generate_taint_models/get_*.py</a> 包含预定义的一些生成器</li><li>遵循模型领域特定语言（Domain Specific Language, DSL）</li></ul><h2 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h2><p>实验环境： Ubuntu 20.04 Server + Python 3.8.10 + pip 20.0.2</p><p>在 Python 虚拟环境中进行实验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/facebook/pyre-check.git</span><br><span class="line"><span class="built_in">cd</span> pyre-check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装虚拟环境</span></span><br><span class="line"><span class="built_in">cd</span> documentation/pysa_tutorial</span><br><span class="line">python -m venv tutorial</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> tutorial/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install pyre-check fb-sapp</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>如果这里遇到 Error 可以更新一下工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install wheel</span><br><span class="line">python -m pip install --upgrade setuptools</span><br></pre></td></tr></table></figure></div><h2 id="exercise1"><a href="#exercise1" class="headerlink" title="exercise1"></a>exercise1</h2><p>views.py 存在远程代码执行（Remote Code Execution, RCE）漏洞。Pysa 需要知道 <code>request.GET</code> 包含用户控制的数据，<code>eval</code> 可以执行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>taint.config 编写规则，告诉 Pysa 当 CustomUserControlled 源点数据到达 CodeExecution 汇点时会引发 RCE 。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CustomUserControlled&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate user input&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CodeExecution&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate execution of python code&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;code&quot;</span>: <span class="number">5001</span>,</span><br><span class="line">      <span class="attr">&quot;sources&quot;</span>: [ <span class="string">&quot;CustomUserControlled&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;sinks&quot;</span>: [ <span class="string">&quot;CodeExecution&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;message_format&quot;</span>: <span class="string">&quot;User specified data may reach a code execution sink&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sources_sinks.pysa 告诉 Pysa <code>request.Get</code> 是 <code>CustomUserControlled</code> 类型的污点源点 <code>TaintSource</code>，而 <code>eval</code> 是 <code>CodeExecution</code> 代码执行类型的污点汇点 <code>TaintSink</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.http.request.HttpRequest.GET: TaintSource[CustomUserControlled] &#x3D; ...</span><br><span class="line"></span><br><span class="line">def eval(__source: TaintSink[CodeExecution], __globals, __locals): ...</span><br></pre></td></tr></table></figure><p>.pyre_configuration 配置了搜索的路径。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;source_directories&quot;</span>: [ <span class="comment">// 查找源码的目录</span></span><br><span class="line">    <span class="string">&quot;.&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;taint_models_path&quot;</span>: [ <span class="comment">// 查找 .pysa/taint.config 文件的目录</span></span><br><span class="line">    <span class="string">&quot;.&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;search_path&quot;</span>: [  <span class="comment">// 查找存根文件</span></span><br><span class="line">    <span class="string">&quot;../../../stubs/&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;.*/integration_test/.*&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;use_command_v2&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的执行结果如下，最后输出的 JSON 数组给出了问题列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise1$ pyre analyze</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__eq__` has 82 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__init__` has 754 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__ne__` has 60 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__call__` has 131 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__init__` has 448 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__new__` has 75 overrides, this might slow down the analysis considerably.</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 12,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 12,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="exercise2"><a href="#exercise2" class="headerlink" title="exercise2"></a>exercise2</h2><p>views.py 三个函数都存在远程执行漏洞，前两个执行 python 代码，最后一个执行 shell 代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.POST[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_fours</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    result = subprocess.getoutput(<span class="string">f&quot;expr 4 <span class="subst">&#123;operator&#125;</span> 4&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>taint.config 规则中已经添加了名称为 <code>ShellExecution</code> 的汇点。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CustomUserControlled&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate user input&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CodeExecution&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate execution of python code&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ShellExecution&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate execution of shell scripts&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;code&quot;</span>: <span class="number">5001</span>,</span><br><span class="line">      <span class="attr">&quot;sources&quot;</span>: [ <span class="string">&quot;CustomUserControlled&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;sinks&quot;</span>: [ <span class="string">&quot;CodeExecution&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;message_format&quot;</span>: <span class="string">&quot;User specified data may reach a code execution sink&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 taint.config 中添加一个 <code>CustomUserControlled</code> 源点到 <code>ShellExecution</code> 汇点的规则，将 code 定义为 5002 。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;rules&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">5002</span>,</span><br><span class="line">    <span class="attr">&quot;sources&quot;</span>: [ <span class="string">&quot;CustomUserControlled&quot;</span> ],</span><br><span class="line">    <span class="attr">&quot;sinks&quot;</span>: [ <span class="string">&quot;ShellExecution&quot;</span> ],</span><br><span class="line">    <span class="attr">&quot;message_format&quot;</span>: <span class="string">&quot;User specified data may reach a shell execution sink&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>sources_sinks.pysa 包含带有污点注释的模型，这些模型必须匹配 <code>.pyi</code> 存根文件中的存根或源码。将 <code>.pyi</code> 存根或源码转换为模型时，必须确保：</p><ul><li>函数名不变</li><li>参数名不变</li><li>删除类型注释</li><li>函数或属性是完全限定的</li></ul><p>Pyre 的主要存根来自于 <a href="https://github.com/python/typeshed">typeshed</a>（包含 Python 标准库和 Python 内置包的外部类型注释，以及项目外部人员贡献的第三方包）。还有一部分是为 Pysa 编写的存根，涵盖 Django 等第三方库，不包含在 typeshed 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">django.http.request.HttpRequest.GET: TaintSource[CustomUserControlled] &#x3D; ...</span><br><span class="line"></span><br><span class="line">def eval(__source: TaintSink[CodeExecution], __globals, __locals): ...</span><br><span class="line"></span><br><span class="line">def subprocess.getoutput(cmd: TaintSink[ShellExecution]): ...</span><br></pre></td></tr></table></figure><p>添加规则，指明使用源点和汇点的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.http.request.HttpRequest.POST: TaintSource[CustomUserControlled] &#x3D; ...</span><br><span class="line"></span><br><span class="line">def exec(__source: TaintSink[CodeExecution], __globals, __locals): ...</span><br></pre></td></tr></table></figure><p>执行 <code>pyre analyze</code> ，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise2$ pyre analyze</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__eq__` has 82 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__init__` has 754 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__ne__` has 60 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__call__` has 131 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__init__` has 448 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__new__` has 75 overrides, this might slow down the analysis considerably.</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 56,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5002,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5002]: User specified data may reach a shell execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5002]: User specified data may reach a shell execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5002]: User specified data may reach a shell execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_fours&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 22,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 22,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 14,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 14,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="exercise3"><a href="#exercise3" class="headerlink" title="exercise3"></a>exercise3</h2><p>直接运行 <code>pyre analyze</code> 提示模型验证错误：<a href="https://github.com/facebook/pyre-check/issues/441">Found 93 model verification errors in exercise3 #441</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ƛ Finding taint models <span class="keyword">in</span> `/home/jck/pyre-check/stubs/taint, /home/jck/pyre-check/documentation/pysa_tutorial/exercise3`.ƛ Found 93 model verification errors!</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>添加 <code>--no-verify</code> 参数得到预期反馈，存在误报（假阳）问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 24,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 24,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Pysa 为许多 Python 标准库和开源库提供了预先编写的源点、汇点和规则。预先写好的 <code>taint.config</code> 和 <code>*.pysa</code> 文件在 <a href="https://github.com/facebook/pyre-check/tree/master/stubs/taint"><code>stubs/taint</code></a> 文件夹中。</p><p>views.py 所有函数都没有安全问题，但执行 <code>pyre analyze --no-verify</code> 出现误报。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_sanitizer</span>():</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_operator_safe</span>(<span class="params">request: HttpRequest</span>) -&gt; str:</span></span><br><span class="line">    operator = request.POST[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    <span class="keyword">assert</span> operator <span class="keyword">in</span> &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> operator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = get_operator_safe(request)</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    <span class="keyword">assert</span> operator <span class="keyword">in</span> &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br></pre></td></tr></table></figure><p>sanitizers.pysa 中定义了消毒器（Sanitizer），它们标记了 Pysa 对待整个可调用对象的方式变化，而不仅仅是返回值或参数，使用装饰器表示注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Sanitize</span><br><span class="line">def views.example_sanitizer(): ...</span><br></pre></td></tr></table></figure><p>对于 <code>operate_on_twos</code> 函数，因为有调用 <code>get_operator_safe</code> 过滤请求，所以后续调用 <code>eval()</code> 也是安全的，将 <code>get_operator_safe</code> 标记为消毒器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Sanitize</span><br><span class="line">def views.get_operator_safe(request: TaintSource[UserControlled]): ...</span><br></pre></td></tr></table></figure><p>再次执行 <code>pyre analyze --no-verify</code> 只剩一个误报：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>operate_on_threes</code> 函数本身就过滤了请求，这里添加一个 identity 函数调用，将参数原样返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    <span class="keyword">assert</span> operator <span class="keyword">in</span> &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">    operator = identity(operator)</span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br></pre></td></tr></table></figure><p>将 identity 函数标记为消毒器，指明经过该消毒器的污点源就不再是污点数据，不用继续跟踪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Sanitize</span><br><span class="line">def views.identity(x: TaintSource[UserControlled]): ...</span><br></pre></td></tr></table></figure><p>再次执行 <code>pyre analyze --no-verify</code>，不存在误报了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[]</span></span><br></pre></td></tr></table></figure><h2 id="exercise4"><a href="#exercise4" class="headerlink" title="exercise4"></a>exercise4</h2><p>使用 SAPP (Static Analysis Post Processor) 提供的交互式命令行。</p><p>views.py 函数同样不存在安全问题，但又产生了误报。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_feature</span>(<span class="params">argument: <span class="built_in">str</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assert_numeric</span>(<span class="params">operand: <span class="built_in">str</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> operand.isnumeric()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_and</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    left = <span class="built_in">bool</span>(request.GET[<span class="string">&quot;left&quot;</span>])</span><br><span class="line">    right = <span class="built_in">bool</span>(request.GET[<span class="string">&quot;right&quot;</span>])</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;<span class="subst">&#123;left&#125;</span> and <span class="subst">&#123;right&#125;</span>&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_or</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    left = request.GET[<span class="string">&quot;left&quot;</span>]</span><br><span class="line">    right = request.GET[<span class="string">&quot;right&quot;</span>]</span><br><span class="line">    assert_numeric(left)</span><br><span class="line">    assert_numeric(right)</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;<span class="subst">&#123;left&#125;</span> or <span class="subst">&#123;right&#125;</span>&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>taint.config 特征（feature）是与污点流相关的附加元数据，可用于过滤误报（不影响分析）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;example&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;Copy this feature and write your own. Don&#x27;t forget that JSON lists are comma seperated!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>features.pysa 使用了名称为 example 的特征。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def views.example_feature(argument: AddFeatureToArgument[Via[example]]): ...</span><br></pre></td></tr></table></figure><p>运行 Pysa 并在 SAPP 中打开结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyre analyze --no-verify --save-results-to .</span><br><span class="line">sapp analyze taint-output.json</span><br><span class="line">sapp explore</span><br></pre></td></tr></table></figure><p>使用 SAPP 交互式命令行查看安全问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[ run 1 ]</span><br><span class="line">&gt;&gt;&gt; issues <span class="comment"># 返回 2 个问题</span></span><br><span class="line">Issue 1</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: first-index:right</span><br><span class="line">                  always-via:format-string</span><br><span class="line">                  has:first-index</span><br><span class="line">                  first-index:left</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Issue 2</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_and</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: first-index:right</span><br><span class="line">                  always-type:bool</span><br><span class="line">                  always-type:scalar</span><br><span class="line">                  always-via:obscure</span><br><span class="line">                  always-via:format-string</span><br><span class="line">                  first-index:left</span><br><span class="line">                  has:first-index</span><br><span class="line">        Location: views.py:21|18|39</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 2 issues with run_id 1.</span><br><span class="line"></span><br><span class="line">[ run 1 ]</span><br><span class="line">&gt;&gt;&gt; issues(exclude_features=[<span class="string">&quot;always-type:bool&quot;</span>]) <span class="comment"># 过滤 do_and</span></span><br><span class="line">Issue 1</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: first-index:right</span><br><span class="line">                  always-via:format-string</span><br><span class="line">                  has:first-index</span><br><span class="line">                  first-index:left</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 1 issues with run_id 1.</span><br><span class="line"></span><br><span class="line">[ run 1 ]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exit</span> <span class="comment"># 退出</span></span><br><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise4$</span><br></pre></td></tr></table></figure><p>在 taint.config 中添加名称为 assert_numeric 的特征。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;example&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;Copy this feature and write your own. Don&#x27;t forget that JSON lists are comma seperated!&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;assert_numeric&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;via assert_numeric&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 features.pysa 中使用该特征，指明 views.assert_numeric 函数的 operand 参数带有该特征。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def views.assert_numeric(operand: AddFeatureToArgument[Via[assert_numeric]]): ...</span><br></pre></td></tr></table></figure><p>重新运行 Pysa 并在 SAPP 中打开结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyre analyze --no-verify --save-results-to .</span><br><span class="line">sapp analyze taint-output.json</span><br><span class="line">sapp explore</span><br></pre></td></tr></table></figure><p>可以看到新的特征，使用两个特征过滤，返回 0 个安全问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; issues</span><br><span class="line">Issue 3</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: always-via:format-string</span><br><span class="line">                  first-index:left</span><br><span class="line">                  always-via:assert_numeric  <span class="comment"># 新特征</span></span><br><span class="line">                  first-index:right</span><br><span class="line">                  has:first-index</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Issue 4</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_and</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: always-via:format-string</span><br><span class="line">                  always-via:obscure</span><br><span class="line">                  first-index:left</span><br><span class="line">                  always-type:scalar</span><br><span class="line">                  first-index:right</span><br><span class="line">                  has:first-index</span><br><span class="line">                  always-type:bool</span><br><span class="line">        Location: views.py:21|18|39</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 2 issues with run_id 2.</span><br><span class="line"></span><br><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; issues(exclude_features=[<span class="string">&quot;always-type:bool&quot;</span>]) <span class="comment"># 过滤 do_and</span></span><br><span class="line">Issue 3</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: always-via:format-string</span><br><span class="line">                  first-index:left</span><br><span class="line">                  always-via:assert_numeric</span><br><span class="line">                  first-index:right</span><br><span class="line">                  has:first-index</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 1 issues with run_id 2.</span><br><span class="line"></span><br><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; issues(exclude_features=[<span class="string">&quot;always-type:bool&quot;</span>, <span class="string">&quot;always-via:assert_numeric&quot;</span>]) <span class="comment"># 过滤 do_and、do_or</span></span><br><span class="line"></span><br><span class="line">Found 0 issues with run_id 2.</span><br><span class="line"></span><br><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exit</span></span><br><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise4$</span><br></pre></td></tr></table></figure><h2 id="exercise5"><a href="#exercise5" class="headerlink" title="exercise5"></a>exercise5</h2><p>动态模型生成器在 Pysa 之前运行，能够生成 <code>.pysa</code> 文件。官方仓库 <a href="https://github.com/facebook/pyre-check/tree/master/tools/generate_taint_models">pyre-check/tools/generate_taint_models/get_*.py</a> 中包含了生成器，说明文档见 <a href="https://pyre-check.org/docs/pysa-model-generators/">Dynamically Generating Models</a>。</p><p>直接运行 <code>pyre analyze --no-verify</code> 没有检测出安全问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[]</span></span><br></pre></td></tr></table></figure><p>views.py 和 urls.py 模仿 Django 处理请求的逻辑。views.py 两个函数都存在 RCE 漏洞，但 Pysa 产生了漏报。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Callable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_wrapper</span>(<span class="params">func: Callable</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request</span>):</span></span><br><span class="line">        func(request, **request.GET)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request, operator: <span class="built_in">str</span></span>):</span></span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request, operator: <span class="built_in">str</span></span>):</span></span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> operate_on_twos</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlPattern</span>:</span></span><br><span class="line">    path: <span class="built_in">str</span></span><br><span class="line">    callback: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [UrlPattern(<span class="string">r&quot;^operate_on_twos/(.*)&quot;</span>, operate_on_twos)]</span><br></pre></td></tr></table></figure><p>generate_models.py 能够为 views.py 动态生成污点注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> urls <span class="keyword">import</span> UrlPattern</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure we&#x27;re able to import dependencies in &#x27;pyre-check&#x27; repo, since they</span></span><br><span class="line"><span class="comment"># are not currently in the PyPI package for pyre-check</span></span><br><span class="line">current_file = Path(__file__).absolute()</span><br><span class="line">sys.path.append(<span class="built_in">str</span>(current_file.parents[<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Work around &#x27;-&#x27; in the name of &#x27;pyre-check&#x27;</span></span><br><span class="line">generate_taint_models = importlib.import_module(</span><br><span class="line">    <span class="string">&quot;pyre-check.tools.generate_taint_models&quot;</span></span><br><span class="line">)</span><br><span class="line">view_generator = importlib.import_module(</span><br><span class="line">    <span class="string">&quot;pyre-check.tools.generate_taint_models.view_generator&quot;</span></span><br><span class="line">)</span><br><span class="line">generator_specifications = importlib.import_module(</span><br><span class="line">    <span class="string">&quot;pyre-check.tools.generate_taint_models.generator_specifications&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ignore</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>() -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="comment"># Here, specify all the generators that you might want to call.</span></span><br><span class="line">    generators = &#123;</span><br><span class="line">        <span class="string">&quot;django_path_params&quot;</span>: generate_taint_models.RESTApiSourceGenerator(</span><br><span class="line">            django_urls=view_generator.DjangoUrls(</span><br><span class="line">                urls_module=<span class="string">&quot;urls&quot;</span>,</span><br><span class="line">                url_pattern_type=UrlPattern,</span><br><span class="line">                url_resolver_type=Ignore,</span><br><span class="line">            )</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment"># &quot;decorator_extracted_params&quot;: generate_taint_models.&lt;GENERATOR_NAME&gt;(</span></span><br><span class="line">        <span class="comment">#     root=&quot;.&quot;,</span></span><br><span class="line">        <span class="comment">#     annotation_specifications=[</span></span><br><span class="line">        <span class="comment">#         generate_taint_models.DecoratorAnnotationSpecification(</span></span><br><span class="line">        <span class="comment">#             decorator=&lt;DECORATOR_NAME_INCLUDING_PRECEEDING_@&gt;,</span></span><br><span class="line">        <span class="comment">#             annotations=generator_specifications.default_entrypoint_taint,</span></span><br><span class="line">        <span class="comment">#         )</span></span><br><span class="line">        <span class="comment">#     ],</span></span><br><span class="line">        <span class="comment"># ),</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># The `run_generators` function will take care of parsing command-line arguments, as</span></span><br><span class="line">    <span class="comment"># well as executing the generators specified in `default_modes` unless you pass in a</span></span><br><span class="line">    <span class="comment"># specific set from the command line.</span></span><br><span class="line">    generate_taint_models.run_generators(</span><br><span class="line">        generators,</span><br><span class="line">        default_modes=[</span><br><span class="line">            <span class="string">&quot;django_path_params&quot;</span>,</span><br><span class="line">            <span class="comment"># &quot;decorator_extracted_params&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>利用 generate_models.py 动态生成 <code>.pysa</code> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python generate_models.py --output-directory .</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>报错 graphql3 模块没有找到，将文件中的 <code>graphql3</code> 改为 <code>graphql</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /home/jck/pyre-check/tools/generate_taint_models/get_dynamic_graphql_sources.py</span><br><span class="line"><span class="comment"># from graphql import GraphQLSchema</span></span><br></pre></td></tr></table></figure></div><p>重新执行成功，输出如下，生成 generated_django_path_params.pysa 配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise5$ python generate_models.py --output-directory .</span><br><span class="line">2021-07-07 03:24:56 INFO Computing models <span class="keyword">for</span> `django_path_params`</span><br><span class="line">2021-07-07 03:24:56 INFO Getting all URLs from `urls`</span><br><span class="line">2021-07-07 03:24:56 INFO Computed models <span class="keyword">for</span> `django_path_params` <span class="keyword">in</span> 0.000 seconds.</span><br><span class="line">&#123;<span class="string">&quot;number of generated models&quot;</span>: 1&#125;</span><br></pre></td></tr></table></figure><p>generated_django_path_params.pysa 中指明了使用污点源点和汇点的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def views.operate_on_twos(request: TaintSource[UserControlled], operator: TaintSource[UserControlled]) -&gt; TaintSink[ReturnedToUser]: ...</span><br></pre></td></tr></table></figure><p>再次执行 <code>pyre analyze --no-verify</code>，得到 1 个安全问题，还有一个问题仍然漏报。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>扩展 generate_models.py 识别装饰器，使用注释的内容，只需要填入两项（生成器可以在 <a href="https://pyre-check.org/docs/pysa-model-generators/#example-model-generators">Example Model Generators</a> 里找）：</p><ul><li><code>&lt;GENERATOR_NAME&gt;</code>：<code>AnnotatedFreeFunctionWithDecoratorGenerator</code></li><li><code>&lt;DECORATOR_NAME_INCLUDING_PRECEEDING_@&gt;</code>：<code>&quot;@api_wrapper&quot;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>() -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="comment"># Here, specify all the generators that you might want to call.</span></span><br><span class="line">    generators = &#123;</span><br><span class="line">        <span class="string">&quot;django_path_params&quot;</span>: generate_taint_models.RESTApiSourceGenerator(</span><br><span class="line">            django_urls=view_generator.DjangoUrls(</span><br><span class="line">                urls_module=<span class="string">&quot;urls&quot;</span>,</span><br><span class="line">                url_pattern_type=UrlPattern,</span><br><span class="line">                url_resolver_type=Ignore,</span><br><span class="line">            )</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&quot;decorator_extracted_params&quot;</span>: generate_taint_models.AnnotatedFreeFunctionWithDecoratorGenerator(</span><br><span class="line">            root=<span class="string">&quot;.&quot;</span>,</span><br><span class="line">            annotation_specifications=[</span><br><span class="line">                generate_taint_models.DecoratorAnnotationSpecification(</span><br><span class="line">                    decorator=<span class="string">&quot;@api_wrapper&quot;</span>,</span><br><span class="line">                    annotations=generator_specifications.default_entrypoint_taint,</span><br><span class="line">                )</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># The `run_generators` function will take care of parsing command-line arguments, as</span></span><br><span class="line">    <span class="comment"># well as executing the generators specified in `default_modes` unless you pass in a</span></span><br><span class="line">    <span class="comment"># specific set from the command line.</span></span><br><span class="line">    generate_taint_models.run_generators(</span><br><span class="line">        generators,</span><br><span class="line">        default_modes=[</span><br><span class="line">            <span class="string">&quot;django_path_params&quot;</span>,</span><br><span class="line">            <span class="string">&quot;decorator_extracted_params&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>重新生成 <code>.pysa</code> 文件并执行分析：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python generate_models.py --output-directory .</span><br><span class="line">pyre analyze --no-verify</span><br></pre></td></tr></table></figure><p>检测出 2 个安全问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 25,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 25,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://engineering.fb.com/2020/08/07/security/pysa/">Pysa: An open source static analysis tool to detect and prevent security issues in Python code</a></li><li><a href="https://github.com/facebook/pyre-check/tree/master/documentation/pysa_tutorial">Pysa Tutorial</a></li><li><a href="https://pyre-check.org/docs/pysa-basics">Pysa QuickStart guide</a></li><li><a href="https://developers.facebook.com/blog/post/2021/04/29/eli5-pysa-security-focused-analysis-tool-python">ELI5: Pysa - A Security-Focused Static Analysis Tool for Python Code</a></li><li><a href="https://www.youtube.com/watch?v=8I3zlvtpOww">Workshop: Graham Bleaney - Pysa to Identify Python Vulnerabilities - DEF CON 28SM AppSec Village</a></li></ul>]]></content>
    
    
    <summary type="html">做了做官方提供的 5 个练习教程</summary>
    
    
    
    <category term="Security" scheme="https://jckling.github.io/categories/Security/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 组件源码阅读</title>
    <link href="https://jckling.github.io/2021/07/02/OpenStack/OpenStack%20%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://jckling.github.io/2021/07/02/OpenStack/OpenStack%20%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</id>
    <published>2021-07-02T12:22:24.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这段时间都在读 OpenStack 组件源码，主要依赖官方文档和《OpenStack 设计与实现》，目前这部分的工作告一段落，稍微整理一下阅读源码的方法，主要是如何找到程序的入口。</p><p>Kolla-Ansible 搭建环境使用的是 Victoria 版本的源码，主要包含以下几个组件：</p><ul><li>Keystone</li><li>Glance</li><li>Nova</li><li>Neutron</li><li>Heat</li></ul><h1 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h1><p>实际上，程序的入口从 setup.cfg 文件就可以看出来了，如何处理请求会涉及到 paste.ini 配置文件。有些组件比较复杂（比如 nova、neutron），组件本身包含多个子组件，有 wsgi 应用、OS-Ken 应用等，启动方式也并不统一，因此需要深入源码才能找到真正的启动位置和启动方式。</p><p>此外，组件不仅有对外提供的 RESTful API 接口，组件内部和组件之间还有 RPC 调用，会涉及消息队列（一般是 rabbitmq）和 socket 通信，而这也是需要深入源码才能理清的。</p><h2 id="setup-cfg"><a href="#setup-cfg" class="headerlink" title="setup.cfg"></a>setup.cfg</h2><p>上述 OpenStack 组件都包含 setup.cfg 文件，<a href="https://setuptools.readthedocs.io/en/latest/index.html">Setuptools</a> 工具使用该配置文件设置包的元数据和其他选项，具体的配置项可以在 <a href="https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html#configuring-setup-using-setup-cfg-files">文档</a> 中查阅。</p><p>这里主要关注的是 <code>entry_points</code> 小节，可以找到代码的入口点，组件启动的方式包括 <code>console_scripts</code> 和 <code>wsgi_scripts</code> ，分别表示命令行脚本和 wsgi 脚本，通常 wsgi 脚本通过 Apache + mod_wsgi 调用。</p><p>以 glance 为例，glance-api 可以使用命令行脚本启动也可以使用 wsgi 脚本启动，不过官方建议在生产环境中使用命令行脚本启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[entry_points]</span><br><span class="line">console_scripts &#x3D;</span><br><span class="line">    glance-api &#x3D; glance.cmd.api:main</span><br><span class="line">    glance-cache-prefetcher &#x3D; glance.cmd.cache_prefetcher:main</span><br><span class="line">    glance-cache-pruner &#x3D; glance.cmd.cache_pruner:main</span><br><span class="line">    glance-cache-manage &#x3D; glance.cmd.cache_manage:main</span><br><span class="line">    glance-cache-cleaner &#x3D; glance.cmd.cache_cleaner:main</span><br><span class="line">    glance-control &#x3D; glance.cmd.control:main</span><br><span class="line">    glance-manage &#x3D; glance.cmd.manage:main</span><br><span class="line">    glance-replicator &#x3D; glance.cmd.replicator:main</span><br><span class="line">    glance-scrubber &#x3D; glance.cmd.scrubber:main</span><br><span class="line">    glance-status &#x3D; glance.cmd.status:main</span><br><span class="line">wsgi_scripts &#x3D;</span><br><span class="line">    glance-wsgi-api &#x3D; glance.common.wsgi_app:init_app</span><br></pre></td></tr></table></figure><p>等号右边可以理解为调用的函数，以 <code>glance-api = glance.cmd.api:main</code> 为例，定位源码 glance/cmd/api.py 中的 main 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        config.parse_args()             <span class="comment"># 读取配置</span></span><br><span class="line">        config.set_config_defaults()    <span class="comment"># 设置默认配置</span></span><br><span class="line">        wsgi.set_eventlet_hub()         <span class="comment"># 设置 eventlet.hub</span></span><br><span class="line">        logging.setup(CONF, <span class="string">&#x27;glance&#x27;</span>)   <span class="comment"># 日志</span></span><br><span class="line">        gmr.TextGuruMeditation.setup_autorun(version)</span><br><span class="line">        notifier.set_defaults()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.enabled: <span class="comment"># OSProfiler</span></span><br><span class="line">            osprofiler.initializer.init_from_conf(</span><br><span class="line">                conf=CONF,</span><br><span class="line">                context=&#123;&#125;,</span><br><span class="line">                project=<span class="string">&quot;glance&quot;</span>,</span><br><span class="line">                service=<span class="string">&quot;api&quot;</span>,</span><br><span class="line">                host=CONF.bind_host</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># NOTE(danms): Configure system-wide threading model to use eventlet</span></span><br><span class="line">        glance.async_.set_threadpool_model(<span class="string">&#x27;eventlet&#x27;</span>) <span class="comment"># 设置同步线程池模型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># NOTE(abhishekk): Added initialize_prefetcher KW argument to Server</span></span><br><span class="line">        <span class="comment"># object so that prefetcher object should only be initialized in case</span></span><br><span class="line">        <span class="comment"># of API service and ignored in case of registry. Once registry is</span></span><br><span class="line">        <span class="comment"># removed this parameter should be removed as well.</span></span><br><span class="line">        initialize_prefetcher = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> CONF.paste_deploy.flavor == <span class="string">&#x27;keystone+cachemanagement&#x27;</span>:</span><br><span class="line">            initialize_prefetcher = <span class="literal">True</span></span><br><span class="line">        server = wsgi.Server(initialize_glance_store=<span class="literal">True</span>,  <span class="comment"># wsgi 应用</span></span><br><span class="line">                             initialize_prefetcher=initialize_prefetcher)</span><br><span class="line">        server.start(config.load_paste_app(<span class="string">&#x27;glance-api&#x27;</span>), default_port=<span class="number">9292</span>) <span class="comment"># 启动 wsgi 应用</span></span><br><span class="line">        server.wait() <span class="comment"># 等待启动完成</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        fail(e)</span><br></pre></td></tr></table></figure><p>再来看一下 wsgi 脚本 <code>glance-wsgi-api = glance.common.wsgi_app:init_app</code>，定位源码 glance/common/wsgi_app.py 的 init_app 函数。重点关注的是最后使用 Paste Deploy 加载 wsgi 应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_app</span>():</span></span><br><span class="line">    config.set_config_defaults()</span><br><span class="line">    config_files = _get_config_files()</span><br><span class="line">    CONF([], project=<span class="string">&#x27;glance&#x27;</span>, default_config_files=config_files)</span><br><span class="line">    logging.setup(CONF, <span class="string">&quot;glance&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(danms): We are running inside uwsgi or mod_wsgi, so no eventlet;</span></span><br><span class="line">    <span class="comment"># use native threading instead.</span></span><br><span class="line">    glance.async_.set_threadpool_model(<span class="string">&#x27;native&#x27;</span>)</span><br><span class="line">    atexit.register(drain_threadpools)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(danms): Change the default threadpool size since we</span></span><br><span class="line">    <span class="comment"># are dealing with native threads and not greenthreads.</span></span><br><span class="line">    <span class="comment"># Right now, the only pool of default size is tasks_pool,</span></span><br><span class="line">    <span class="comment"># so if others are created this will need to change to be</span></span><br><span class="line">    <span class="comment"># more specific.</span></span><br><span class="line">    common.DEFAULT_POOL_SIZE = CONF.wsgi.task_pool_threads</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> CONF.enabled_backends:</span><br><span class="line">        <span class="keyword">if</span> store_utils.check_reserved_stores(CONF.enabled_backends):</span><br><span class="line">            msg = _(<span class="string">&quot;&#x27;os_glance_&#x27; prefix should not be used in &quot;</span></span><br><span class="line">                    <span class="string">&quot;enabled_backends config option. It is reserved &quot;</span></span><br><span class="line">                    <span class="string">&quot;for internal use only.&quot;</span>)</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(msg)</span><br><span class="line">        glance_store.register_store_opts(CONF, reserved_stores=RESERVED_STORES)</span><br><span class="line">        glance_store.create_multi_stores(CONF, reserved_stores=RESERVED_STORES)</span><br><span class="line">        glance_store.verify_store()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        glance_store.register_opts(CONF)</span><br><span class="line">        glance_store.create_stores(CONF)</span><br><span class="line">        glance_store.verify_default_store()</span><br><span class="line"></span><br><span class="line">    run_staging_cleanup()</span><br><span class="line"></span><br><span class="line">    _setup_os_profiler()</span><br><span class="line">    <span class="keyword">return</span> config.load_paste_app(<span class="string">&#x27;glance-api&#x27;</span>)  <span class="comment"># Paste Deploy</span></span><br></pre></td></tr></table></figure><h2 id="paste-ini"><a href="#paste-ini" class="headerlink" title="paste.ini"></a>paste.ini</h2><p>paste.ini 文件是 wsgi 应用的配置文件，根据该文件可以知道应用程序是如何映射 URL 以及如何处理请求。</p><p>paste-ini 配置文件类似 ini 配置，每个 Section 的格式均为 <code>[type:name]</code> ，有以下几个小节</p><ul><li>  composite：收到请求后通过的第一个 Section，表示需要将 HTTP URL Request 调度到一个或者多个应用中</li><li>  app：实现主要功能的具体应用</li><li>  pipeline：过滤器管道，最后一个必须是 app 类型</li><li>  filter：实现过滤器功能的中间件，用于过滤请求和响应</li></ul><p>仍然以 glance 为例，启动 glance 服务时需要指定 paste.ini 配置文件，源码中的 etc/glance-api-paste.ini 配置文件如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use this pipeline for no auth or image caching - DEFAULT</span></span><br><span class="line"><span class="section">[pipeline:glance-api]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler unauthenticated-context rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for image caching and no auth</span></span><br><span class="line"><span class="section">[pipeline:glance-api-caching]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler unauthenticated-context cache rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for caching w/ management interface but no auth</span></span><br><span class="line"><span class="section">[pipeline:glance-api-cachemanagement]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler unauthenticated-context cache cachemanage rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for keystone auth</span></span><br><span class="line"><span class="section">[pipeline:glance-api-keystone]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler authtoken context  rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for keystone auth with image caching</span></span><br><span class="line"><span class="section">[pipeline:glance-api-keystone+caching]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler authtoken context cache rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for keystone auth with caching and cache management</span></span><br><span class="line"><span class="section">[pipeline:glance-api-keystone+cachemanagement]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler authtoken context cache cachemanage rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for authZ only. This means that the registry will treat a</span></span><br><span class="line"><span class="comment"># user as authenticated without making requests to keystone to reauthenticate</span></span><br><span class="line"><span class="comment"># the user.</span></span><br><span class="line"><span class="section">[pipeline:glance-api-trusted-auth]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler context rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for authZ only. This means that the registry will treat a</span></span><br><span class="line"><span class="comment"># user as authenticated without making requests to keystone to reauthenticate</span></span><br><span class="line"><span class="comment"># the user and uses cache management</span></span><br><span class="line"><span class="section">[pipeline:glance-api-trusted-auth+cachemanagement]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler context cache cachemanage rootapp</span><br><span class="line"></span><br><span class="line"><span class="section">[composite:rootapp]</span></span><br><span class="line"><span class="attr">paste.composite_factory</span> = glance.api:root_app_factory</span><br><span class="line">/: apiversions</span><br><span class="line">/v2: apiv2app</span><br><span class="line"></span><br><span class="line"><span class="section">[app:apiversions]</span></span><br><span class="line"><span class="attr">paste.app_factory</span> = glance.api.versions:create_resource</span><br><span class="line"></span><br><span class="line"><span class="section">[app:apiv2app]</span></span><br><span class="line"><span class="attr">paste.app_factory</span> = glance.api.v2.router:API.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:healthcheck]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = oslo_middleware:Healthcheck.factory</span><br><span class="line"><span class="attr">backends</span> = disable_by_file</span><br><span class="line"><span class="attr">disable_by_file_path</span> = /etc/glance/healthcheck_disable</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:versionnegotiation]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.version_negotiation:VersionNegotiationFilter.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:cache]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.cache:CacheFilter.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:cachemanage]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.cache_manage:CacheManageFilter.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:context]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.context:ContextMiddleware.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:unauthenticated-context]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.context:UnauthenticatedContextMiddleware.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:authtoken]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = keystonemiddleware.auth_token:filter_factory</span><br><span class="line"><span class="attr">delay_auth_decision</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[filter:gzip]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.gzip:GzipMiddleware.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:osprofiler]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = osprofiler.web:WsgiMiddleware.factory</span><br><span class="line"><span class="attr">hmac_keys</span> = SECRET_KEY  <span class="comment">#DEPRECATED</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">yes</span>  <span class="comment">#DEPRECATED</span></span><br><span class="line"></span><br><span class="line"><span class="section">[filter:cors]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> =  oslo_middleware.cors:filter_factory</span><br><span class="line"><span class="attr">oslo_config_project</span> = glance</span><br><span class="line"><span class="attr">oslo_config_program</span> = glance-api</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:http_proxy_to_wsgi]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = oslo_middleware:HTTPProxyToWSGI.factory</span><br></pre></td></tr></table></figure><p>可以看到 pipeline 最后的总是 rootapp 应用，<code>paste.composite_factory</code> 设置应用的工厂函数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:rootapp]</span></span><br><span class="line"><span class="attr">paste.composite_factory</span> = glance.api:root_app_factory</span><br><span class="line">/: apiversions</span><br><span class="line">/v2: apiv2app</span><br></pre></td></tr></table></figure><p>定位源码 glance/api.py 的 root_app_factory 函数，显然是用于设置 url 映射的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">root_app_factory</span>(<span class="params">loader, global_conf, **local_conf</span>):</span></span><br><span class="line">    <span class="keyword">return</span> paste.urlmap.urlmap_factory(loader, global_conf, **local_conf)</span><br></pre></td></tr></table></figure><p>由于我主要关注的是服务的启动方式，因此 URL 映射具体是如何实现的并没有了解。通过 paste.ini 文件可以知道请求到达真正的应用前经过了什么中间件（过滤器）的处理，这些中间件的源码也可以看一看。</p><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/glance/latest/admin/apache-httpd.html">Running Glance in HTTPD</a></li><li><a href="https://pastedeploy.readthedocs.io/en/latest/">Paste Deployment</a></li><li><a href="https://blog.csdn.net/Jmilk/article/details/52081748">Openstack Paste.ini 文件详解</a></li></ul>]]></content>
    
    
    <summary type="html">通过 setup.cfg 配置文件找到组件服务的启动入口</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>FF14 光之摄影师养成计划✨</title>
    <link href="https://jckling.github.io/2021/06/24/Game/FFXIV/FF14-%E5%85%89%E4%B9%8B%E6%91%84%E5%BD%B1%E5%B8%88%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%92/"/>
    <id>https://jckling.github.io/2021/06/24/Game/FFXIV/FF14-%E5%85%89%E4%B9%8B%E6%91%84%E5%BD%B1%E5%B8%88%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%92/</id>
    <published>2021-06-24T08:11:35.000Z</published>
    <updated>2021-08-16T06:59:39.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>陆陆续续存了不少截图相关的链接，虽然没有都看过xd</p><p>趁着摸鱼的时候稍微理一理。</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><h2 id="NGA"><a href="#NGA" class="headerlink" title="NGA"></a>NGA</h2><p><strong><a href="https://bbs.nga.cn/thread.php?key=%5B%E5%B9%BB%E5%8C%96%E6%B0%B5%5D&fid=-362960">NGA 搜索 - 幻化氵</a></strong><br>搜索 <code>幻化</code> 或 <code>幻化氵</code> 查找相关帖子</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=20459393">[幻化外观整理] 人偶兵装使用说明书</a></strong><br>装备一览，包括套装、武器等，给出了装备的出处</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=16198912">[FF143Areal补丁联动]拍照打光教程</a></strong><br>打光教程，平时用的 GShade 不是 3Areal，打光可以学习</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=14869355">[光之暖暖][投影][幻化]如何找外观，获得、预览外观，看买家秀</a></strong><br>如题</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=12931368">[光之摄影] 迟到而冗长的打光练习课</a></strong><br>时间比较早的一个打光教程</p><h2 id="微博"><a href="#微博" class="headerlink" title="微博"></a>微博</h2><p><strong><a href="https://weibo.com/u/2448465132?sudaref=bbs.nga.cn&is_all=1">最终幻想14_秘银之眼杂志社</a></strong><br>只接受多图投稿，我感觉大多都是精修啊x</p><p><strong><a href="https://weibo.com/ffxivnge?refer_flag=1005055013_&is_all=1">艾欧泽亚地理频道</a></strong><br>貌似主要是场景摄影，质量都很高（一直都不知道是怎么拍的qwq）</p><p><strong><a href="https://weibo.com/u/6532495419?refer_flag=1005055013_&is_all=1">今天有人男吸吗</a></strong><br>不要 cos 号:( 也有其他种族的 bot ，请自行搜索</p><p><strong><a href="https://weibo.com/u/6410821334?refer_flag=1005055013_&is_all=1">艾欧泽亚投影图鉴</a></strong><br>每天精选一些鉴赏站点 <a href="https://mirapri.com/">MIRAPRI SNAP</a> 上的幻化搭配，同时接受玩家投稿</p><hr><p>大家分享的截图场景，当然也推荐关注这些用户啦</p><ul><li><a href="https://weibo.com/ttarticle/p/show?id=2309404649531215052981#_0">FF14个人常用截图地点分享-1</a></li><li><a href="https://weibo.com/3181607480/KiF9aD8TT?type=comment#_rnd1624526720401">Gshade 滤镜分享</a></li><li><a href="https://weibo.com/ttarticle/p/show?id=2309404634681193923044#_0">【FF14】Mia的截图地点整理（6）</a></li><li><a href="https://weibo.com/ttarticle/p/show?id=2309404648464289235597#_0">【Gshade】简单的预设安利2+使用进阶</a></li></ul><h2 id="鉴赏站点"><a href="#鉴赏站点" class="headerlink" title="鉴赏站点"></a>鉴赏站点</h2><p><strong><a href="https://www.ffxivcollection.com/">FFXIV ARMOURY COLLECTION</a></strong><br>和人偶兵装相同，游戏套装展示</p><p><strong><a href="https://mirapri.com/">MIRAPRI SNAP</a></strong><br>玩家幻化投稿（日文）</p><p><strong><a href="https://www.ffxivsc.cn/">光之收藏家</a></strong><br>玩家幻化投稿（中文）</p><p><strong><a href="https://ffxiv.eorzeacollection.com/">Eorzea Collection</a></strong><br><a href="https://ffxiv.eorzeacollection.com/gearsets">gearsets</a> 也是游戏套装展示，<a href="https://ffxiv.eorzeacollection.com/glamours">glamours</a> 是玩家投稿</p><h1 id="Discord-群组"><a href="#Discord-群组" class="headerlink" title="Discord 群组"></a>Discord 群组</h1><p><strong><a href="https://discord.gg/thncM4An">GPOSERS</a></strong><br>Gshade 软件的官方群组，可以在里面提问和分享截图 </p><p><strong><a href="https://discord.gg/ffxivtextools">FFXIV TEXTOOLS &amp; MODDING</a></strong><br>RT，用于 TexTools 的模型分享，也有玩家截图分享</p><p><strong><a href="https://discord.gg/xivmalemods">FFXIV MALE MODS</a></strong><br>同上，但只是有男性模型xd</p><h1 id="TBC"><a href="#TBC" class="headerlink" title="TBC"></a>TBC</h1>]]></content>
    
    
    <summary type="html">摸鱼时收集的截图技巧链接整理(･ω&lt;)☆</summary>
    
    
    
    <category term="Game" scheme="https://jckling.github.io/categories/Game/"/>
    
    
    <category term="FFXIV" scheme="https://jckling.github.io/tags/FFXIV/"/>
    
  </entry>
  
  <entry>
    <title>Kolla-Ansible 本地仓库部署</title>
    <link href="https://jckling.github.io/2021/06/14/OpenStack/Kolla-Ansible%20%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2/"/>
    <id>https://jckling.github.io/2021/06/14/OpenStack/Kolla-Ansible%20%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2/</id>
    <published>2021-06-14T13:17:43.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>在 <a href="https://jckling.github.io/2021/05/31/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20Kolla-Ansible/">OpenStack 单机部署 —— Kolla-Ansible</a> 的基础上，改用本地镜像仓库，从源码构建镜像并部署 OpenStack all-in-one。</p><h1 id="部署本地仓库-Docker-Registry"><a href="#部署本地仓库-Docker-Registry" class="headerlink" title="部署本地仓库 Docker Registry"></a>部署本地仓库 Docker Registry</h1><p><code>kolla-ansible -i all-in-one bootstrap-servers</code> 会改变 docker 的网络配置，需要删除桥接配置，即启用桥接，否则构建镜像的过程中无法下载依赖库。</p><p>另外，还可以添加国内的镜像源，最终 /etc/docker/daemon.json 配置文件的内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;10.112.247.246:4000&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;iptables&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;max-file&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;max-size&quot;</span>: <span class="string">&quot;50m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件后需要重启 docker 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker 网络配置</span></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 删除 bridge: &quot;none&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 docker 服务</span></span><br><span class="line">sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前用户加入 docker 用户组</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><p>运行本地镜像仓库，由于 Keystone 使用了 5000 端口，因此这里指定映射到 4000 端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地镜像仓库</span></span><br><span class="line">docker run -d \</span><br><span class="line"> --name registry \</span><br><span class="line"> --restart=always \</span><br><span class="line"> -p 4000:5000 \</span><br><span class="line"> -v registry:/var/lib/registry \</span><br><span class="line"> registry:2</span><br></pre></td></tr></table></figure><h1 id="使用本地仓库"><a href="#使用本地仓库" class="headerlink" title="使用本地仓库"></a>使用本地仓库</h1><p>使用 tox 创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 tox</span></span><br><span class="line">pip install tox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="built_in">cd</span> kolla</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/kolla/kolla-build.conf /etc/kolla/</span><br></pre></td></tr></table></figure><p>下载 Keystone 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/keystone.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>修改配置文件，假设本机 ip 为 10.1.0.240，openstack_release 有要求（随便填会出错）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置源码路径</span></span><br><span class="line">sudo vim /etc/kolla/kolla-build.conf</span><br><span class="line"><span class="comment">#[DEFAULT]</span></span><br><span class="line"><span class="comment">#base = ubuntu</span></span><br><span class="line"><span class="comment">#network_mode = host</span></span><br><span class="line"><span class="comment">#push = true</span></span><br><span class="line"><span class="comment">#registry = 10.1.0.240:4000</span></span><br><span class="line"><span class="comment">#[keystone-base]</span></span><br><span class="line"><span class="comment">#type = local</span></span><br><span class="line"><span class="comment">#location = /home/jck/keystone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用本地仓库</span></span><br><span class="line">sudo vim /etc/kolla/globals.yml</span><br><span class="line"><span class="comment">#docker_registry: 10.1.0.240:4000</span></span><br><span class="line"><span class="comment">#openstack_release: &quot;12.1.0&quot;</span></span><br></pre></td></tr></table></figure><p>构建镜像，使用 <code>&amp;&gt;</code> 将输出重定向到文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码构建 Keystone 镜像</span></span><br><span class="line">kolla-build -t <span class="built_in">source</span> --config-file /etc/kolla/kolla-build.conf keystone &amp;&gt; keystone-build.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地仓库</span></span><br><span class="line">curl -X GET 10.1.0.240:4000/v2/_catalog</span><br></pre></td></tr></table></figure><p>构建完毕后，使用新镜像更新当前环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible upgrade</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>kolla-ansible 相关操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">kolla-ansible/tools/cleanup-containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有镜像</span></span><br><span class="line">kolla-ansible/tools/cleanup-images --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">kolla-ansible pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新环境</span></span><br><span class="line">kolla-ansible upgrade</span><br></pre></td></tr></table></figure><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dockerfile 相关</span></span><br><span class="line">~/kolla/docker  <span class="comment"># jinjia2 模板文件</span></span><br><span class="line">/etc/kolla      <span class="comment"># 镜像配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">/etc/kolla/kolla-build.conf</span><br><span class="line">/etc/kolla/globals.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line">/var/<span class="built_in">log</span>/kolla/ <span class="comment"># 链接 /var/lib/docker/volumes/kolla_logs/_data/</span></span><br></pre></td></tr></table></figure><p>清除容器重新部署，通常不用 <code>./kolla-ansibletools/cleanup-host</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./kolla-ansible/tools/cleanup-containers</span><br><span class="line">kolla-ansible -i ./all-in-one prechecks</span><br><span class="line">kolla-ansible -i ./all-in-one deploy</span><br><span class="line">kolla-ansible post-deploy</span><br></pre></td></tr></table></figure><h1 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h1><h2 id="nova-compute-注册失败"><a href="#nova-compute-注册失败" class="headerlink" title="nova-compute 注册失败"></a>nova-compute 注册失败</h2><p>查看日志信息说是连接不上 libvirt</p><img src="https://i.loli.net/2021/06/15/Pknj9uaUCoq2bgI.jpg"><p>配置并重启 libvirt</p><ul><li><a href="https://askubuntu.com/questions/423425/i-cant-use-libvirt-with-listen-tcp/610350#610350">I can’t use libvirt with listen TCP</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/libvirt/libvirtd.conf</span><br><span class="line"><span class="comment">#listen_tls = 0</span></span><br><span class="line"><span class="comment">#listen_tcp = 1</span></span><br><span class="line"><span class="comment">#auth_tcp = &quot;none&quot;</span></span><br><span class="line"><span class="comment">#tcp_port = &quot;16509&quot;</span></span><br><span class="line"></span><br><span class="line">systemctl restart libvirtd</span><br><span class="line"><span class="comment">#sudo chmod -R 777 /var/run/libvirt</span></span><br><span class="line"></span><br><span class="line">ps aux | grep libvirtd</span><br></pre></td></tr></table></figure><p>重新部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">kolla-ansible/tools/cleanup-containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kolla-ansible -i ./all-in-one deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新生成认证文件</span></span><br><span class="line">kolla-ansible post-deploy</span><br></pre></td></tr></table></figure><p>不安装和配置 libvirt，且 /etc/kolla/globals.yml 也不配置 <code>nova_compute_virt_type</code> 也能正常执行。</p><p>安装完毕后注释该配置，重新 upgrade 正常，不注释貌似也行（玄学）。</p><p>官方指出，由于技术原因，配置 qemu 后使用 <code>kolla-ansible upgrade</code> 可能出错。</p><ul><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/operating-kolla.html">Operating Kolla</a></li></ul><h2 id="数据库迁移出错"><a href="#数据库迁移出错" class="headerlink" title="数据库迁移出错"></a>数据库迁移出错</h2><p>尝试多次无果，回退快照后执行 <code>kolla-ansible upgrade</code> 没有遇到该问题，清除后重新部署应该也可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR keystone migrate.exceptions.InvalidRepositoryError: &#x2F;var&#x2F;lib&#x2F;kolla&#x2F;venv&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;keystone&#x2F;common&#x2F;sql&#x2F;migrate_repo</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/06/15/AC5EoBvLWgfnIml.jpg"><h2 id="请求超时"><a href="#请求超时" class="headerlink" title="请求超时"></a>请求超时</h2><p>再次执行 <code>kolla-ansible upgrade</code> 没有再遇到该问题。实验过程中发现时不时就会请求超时，通常就重复执行指令，再不行就清除后重新部署。</p><img src="https://i.loli.net/2021/06/15/LZuw58IqzsJQ6cA.jpg"><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/multinode.html">Multinode Deployment of Kolla - Option 1: local registry</a></li><li><a href="https://docs.docker.com/registry/">Docker Registry</a></li><li><a href="https://askubuntu.com/questions/420981/how-do-i-save-terminal-output-to-a-file">How do I save terminal output to a file?</a></li><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/operating-kolla.html">Operating Kolla</a></li><li><a href="https://docs.openstack.org/kolla/ussuri/admin/image-building.html">Building Container Images</a></li></ul>]]></content>
    
    
    <summary type="html">Ubuntu 20.04 + OpenStack (Victoria)</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 单机部署 —— Kolla-Ansible</title>
    <link href="https://jckling.github.io/2021/05/31/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20Kolla-Ansible/"/>
    <id>https://jckling.github.io/2021/05/31/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20Kolla-Ansible/</id>
    <published>2021-05-31T11:02:50.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>Kolla-Ansible 只支持列表 <a href="https://docs.openstack.org/kolla-ansible/latest/user/support-matrix">Supported Operating Systems</a> 中的操作系统，这里选用 Ubuntu 20.04 。</p><p>主机配置</p><ul><li>CPU：4 Cores</li><li>内存：16 GB</li><li>硬盘：512 GB</li><li>网卡：<ul><li>NAT-Network</li><li>未指定</li></ul></li></ul><h2 id="更换-pip-源（可选）"><a href="#更换-pip-源（可选）" class="headerlink" title="更换 pip 源（可选）"></a>更换 pip 源（可选）</h2><p>在用户根目录创建文件夹 <code>.pip</code> ，添加配置文件 <code>pip.conf</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">cd</span> &amp;&amp; mkdir .pip &amp;&amp; <span class="built_in">cd</span> .pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并编辑配置文件</span></span><br><span class="line">sudo vim pip.conf</span><br></pre></td></tr></table></figure><p>pip 源配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout &#x3D; 6000</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">trusted-host &#x3D; mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h2 id="更换-Ubuntu-源（可选）"><a href="#更换-Ubuntu-源（可选）" class="headerlink" title="更换 Ubuntu 源（可选）"></a>更换 Ubuntu 源（可选）</h2><p>备份源文件，再替换成清华的镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置镜像源</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">sudo apt dist-upgrade -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>镜像源设置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Python 构建依赖</span></span><br><span class="line">sudo apt install python3-dev libffi-dev gcc libssl-dev -y</span><br></pre></td></tr></table></figure><p>安装 <code>venv</code>，创建并使用虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 venv</span></span><br><span class="line">sudo apt install python3-venv -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkdir code</span><br><span class="line">python -m venv /home/jck/code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> /home/jck/code/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Ansible</span></span><br><span class="line">pip install -U pip</span><br><span class="line">pip install <span class="string">&#x27;ansible&lt;3.0&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="部署-OpenStack"><a href="#部署-OpenStack" class="headerlink" title="部署 OpenStack"></a>部署 OpenStack</h1><h2 id="安装-Kolla-Ansible"><a href="#安装-Kolla-Ansible" class="headerlink" title="安装 Kolla-Ansible"></a>安装 Kolla-Ansible</h2><p>使用 git 克隆仓库，<code>-b</code> 参数指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/kolla -b stable/victoria</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/kolla-ansible -b stable/victoria</span><br></pre></td></tr></table></figure><p>在虚拟环境中安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install ./kolla</span><br><span class="line">pip install ./kolla-ansible</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir -p /etc/kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">sudo chown <span class="variable">$USER</span>:<span class="variable">$USER</span> /etc/kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">cp -r kolla-ansible/etc/kolla/* /etc/kolla</span><br><span class="line">cp kolla-ansible/ansible/inventory/* .</span><br></pre></td></tr></table></figure><h2 id="配置-Ansible"><a href="#配置-Ansible" class="headerlink" title="配置 Ansible"></a>配置 Ansible</h2><p>创建并编辑 Ansible 配置文件 ansible.cfg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">sudo touch /etc/ansible/ansible.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑</span></span><br><span class="line">sudo vim /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure><p>添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">host_key_checking&#x3D;False</span><br><span class="line">pipelining&#x3D;True</span><br><span class="line">forks&#x3D;100</span><br></pre></td></tr></table></figure><h2 id="准备初始配置"><a href="#准备初始配置" class="headerlink" title="准备初始配置"></a>准备初始配置</h2><h3 id="Inventory"><a href="#Inventory" class="headerlink" title="Inventory"></a>Inventory</h3><p>两个示例文件：all-in-one 和 multinode，单机部署不需要做额外的修改。</p><h3 id="Kolla-密码"><a href="#Kolla-密码" class="headerlink" title="Kolla 密码"></a>Kolla 密码</h3><p>部署过程中使用的密码存储在 <code>/etc/kolla/passwords.yml</code> 文件，初始为空白，需要手动设置或随机生成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> kolla-ansible/tools</span><br><span class="line">./generate_passwords.py</span><br></pre></td></tr></table></figure><h3 id="Kolla-globals-yml"><a href="#Kolla-globals-yml" class="headerlink" title="Kolla globals.yml"></a>Kolla globals.yml</h3><p><code>globals.yml</code> 是 Kolla-Ansible 的主要配置文件，以下选项需要进行配置：</p><ul><li>Image options：指定用于部署的镜像，支持 <code>centos</code>、<code>ubuntu</code>、<code>debian</code>、<code>rhel</code><ul><li>type：只影响 OpenStack 服务<ul><li><code>binary</code>：使用存储仓库，例如 apt 或 dnf；基础设施服务通常使用这个选项</li><li><code>source</code>：使用原始源存档，例如 git 仓库或本地源目录；比 <code>binary</code> 稍微可靠些</li></ul></li></ul></li><li>Networking：网络配置<ul><li><code>network_interface</code>：管理网络</li><li><code>external_interface</code>：Neutron 外部网络，没有 ip 的网卡</li><li><code>internal_vip_address</code>：浮动 IP 范围，与管理网络同网段</li></ul></li><li>Enable additional services：安装额外的服务组件<ul><li>例如，<code>enable_cinder: &quot;yes&quot;</code> 表示启用块存储服务，支持的服务参见 <a href="https://github.com/openstack/kolla-ansible/blob/master/README.rst#openstack-services">a list of available services</a></li></ul></li><li>Multiple globals files：使用额外的配置文件启用服务，在 <code>etc/kolla/globals.d</code> 目录下创建</li><li>Virtual environment：建议在远程主机上使用虚拟环境执行</li></ul><p>编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/kolla/globals.yml</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 操作系统</span></span><br><span class="line"><span class="attr">kolla_base_distro:</span> <span class="string">&quot;ubuntu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装方式</span></span><br><span class="line"><span class="attr">kolla_install_type:</span> <span class="string">&quot;source&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络</span></span><br><span class="line"><span class="attr">kolla_internal_vip_address:</span> <span class="string">&quot;10.1.0.250&quot;</span> <span class="comment"># network_interface 同网段</span></span><br><span class="line"></span><br><span class="line"><span class="attr">network_interface:</span> <span class="string">&quot;ens192&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">neutron_external_interface:</span> <span class="string">&quot;ens160&quot;</span> <span class="comment"># 空闲网卡</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#enable_cinder: &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#enable_cinder_backend_nfs: &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算</span></span><br><span class="line"><span class="attr">nova_compute_virt_type:</span> <span class="string">&quot;qemu&quot;</span></span><br></pre></td></tr></table></figure><p>因为不支持虚拟化，所以配置为 <code>qemu</code> <del>，需要额外安装 libvirt</del>（应该不用装）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 libvirt</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu-kvm libvirt-daemon-system -y</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>配置文件准备完毕后即可进行部署，首先进行基础的主机级依赖设置，Kolla-Ansible 提供了一个安装所有必需服务的 playbook</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据 Kolla 部署依赖创建服务器</span></span><br><span class="line">kolla-ansible -i all-in-one bootstrap-servers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署前检查主机</span></span><br><span class="line">kolla-ansible -i all-in-one prechecks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 OpenStack</span></span><br><span class="line">kolla-ansible -i all-in-one deploy</span><br></pre></td></tr></table></figure><h2 id="使用-OpenStack"><a href="#使用-OpenStack" class="headerlink" title="使用 OpenStack"></a>使用 OpenStack</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 OpenStack CLI 客户端</span></span><br><span class="line">pip install python-openstackclient</span><br></pre></td></tr></table></figure><p>OpenStack 需要 openrc 文件，其中设置了 admin 用户的凭据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 openrc 文件</span></span><br><span class="line">kolla-ansible post-deploy</span><br><span class="line">. /etc/kolla/admin-openrc.sh</span><br></pre></td></tr></table></figure><p>执行脚本生成示例网络、镜像、实例等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code/share/kolla-ansible/init-runonce</span><br></pre></td></tr></table></figure><p>创建实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip install python-openstackclient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例</span></span><br><span class="line">openstack server create \</span><br><span class="line">    --image cirros \</span><br><span class="line">    --flavor m1.tiny \</span><br><span class="line">    --network demo-net \</span><br><span class="line">    demo1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认实例状态</span></span><br><span class="line">openstack server list</span><br></pre></td></tr></table></figure><p>访问 ip 地址可进入 horizon 登录界面</p><ul><li>用户名：<code>admin</code></li><li>密码：查看 <code>/etc/kolla/passwords.yml</code></li></ul><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/support-matrix.html">Support Matrix</a></li><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html">OpenStack Docs: Quick Start</a></li></ul>]]></content>
    
    
    <summary type="html">Ubuntu 20.04 + OpenStack (Victoria)</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04 计算节点源码安装 nova-compute (Victoria)</title>
    <link href="https://jckling.github.io/2021/05/31/OpenStack/Ubuntu20.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20nova-compute%20(Victoria)/"/>
    <id>https://jckling.github.io/2021/05/31/OpenStack/Ubuntu20.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20nova-compute%20(Victoria)/</id>
    <published>2021-05-31T07:52:19.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>由于安装的是 Victoria 版本，计算节点要使用 Ubuntu 20.04 。</p><p>Ubuntu 18.04 控制节点</p><ul><li>2 处理器</li><li>4 GB 内存</li><li>100 GB 硬盘</li></ul><p>Ubuntu 20.04 计算节点</p><ul><li>2 处理器</li><li>4 GB 内存</li><li>100 GB 硬盘</li></ul><p>各使用两块网卡</p><ul><li>NAT Network 虚拟机组网</li><li>Host-Only 宿主机 ssh 连接</li></ul><img src="https://i.loli.net/2021/06/06/8n3hsxDb4LKXOdf.png" width="60%"/><p>修改主机名称，控制节点 <code>controller</code>、计算节点 <code>compute</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hostnamectl set-hostname controller</span><br></pre></td></tr></table></figure><p>配置静态 ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/netplan/00-installer-config.yaml</span><br><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">enp0s3:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">10.0</span><span class="number">.2</span><span class="number">.28</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>]</span><br><span class="line">    <span class="attr">enp0s8:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.56</span><span class="number">.115</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">to:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.1</span><span class="string">/24</span></span><br><span class="line">        <span class="attr">via:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">metric:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>修改 hosts 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.0.2.28 controller</span></span><br><span class="line"><span class="comment"># 10.0.2.29 compute</span></span><br></pre></td></tr></table></figure><p>每个主机的用户都是 jck ，最后的网络配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制节点</span></span><br><span class="line">10.0.2.28</span><br><span class="line">192.168.56.115</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算节点</span></span><br><span class="line">10.0.2.29</span><br><span class="line">192.168.56.116</span><br></pre></td></tr></table></figure><h1 id="控制节点"><a href="#控制节点" class="headerlink" title="控制节点"></a>控制节点</h1><h2 id="Keystone"><a href="#Keystone" class="headerlink" title="Keystone"></a>Keystone</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/keystone.git -b stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> keystone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install bindep</span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment">#pip install -e .</span></span><br><span class="line">pip install tox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">git init</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库，密码设置为 mysql_db</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE keystone;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">sudo mkdir /etc/keystone</span><br><span class="line">sudo cp etc/keystone.conf.sample /etc/keystone/keystone.conf</span><br><span class="line">sudo vim /etc/keystone/keystone.conf</span><br><span class="line"><span class="comment">#[database]</span></span><br><span class="line"><span class="comment">#connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo python setup.py install</span><br><span class="line">keystone-manage db_sync</span><br><span class="line"><span class="comment">#.tox/genconfig/bin/pip3 install opentracing</span></span><br><span class="line"><span class="comment">#.tox/genconfig/bin/keystone-manage db_sync</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 令牌</span></span><br><span class="line">sudo mkdir -p /etc/keystone/fernet-keys</span><br><span class="line"><span class="comment"># sudo rm -rf /etc/keystone/fernet-keys/</span></span><br><span class="line">sudo keystone-manage fernet_setup --keystone-user jck --keystone-group jck</span><br><span class="line">sudo keystone-manage credential_setup --keystone-user jck --keystone-group jck</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">keystone-manage bootstrap --bootstrap-password ADMIN_PASS \</span><br><span class="line">  --bootstrap-admin-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-internal-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-public-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-region-id RegionOne</span><br><span class="line">  </span><br><span class="line"><span class="comment"># apache</span></span><br><span class="line">sudo apt install apache2 libapache2-mod-wsgi-py3 -y</span><br><span class="line">sudo cp httpd/wsgi-keystone.conf /etc/apache2/conf-available/wsgi-keystone.conf</span><br><span class="line">sudo vim /etc/apache2/conf-available/wsgi-keystone.conf</span><br><span class="line"><span class="comment"># 修改 user 和 group 为 jck</span></span><br><span class="line">sudo ln -s /etc/apache2/conf-available/wsgi-keystone.conf /etc/apache2/conf-enabled/wsgi-keystone.conf</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装客户端</span></span><br><span class="line">pip install python-openstackclient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建脚本</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt; admin-openrc</span></span><br><span class="line"><span class="string">export OS_USERNAME=admin</span></span><br><span class="line"><span class="string">export OS_PASSWORD=ADMIN_PASS</span></span><br><span class="line"><span class="string">export OS_PROJECT_NAME=admin</span></span><br><span class="line"><span class="string">export OS_USER_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_PROJECT_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_AUTH_URL=http://controller:5000/v3</span></span><br><span class="line"><span class="string">export OS_IDENTITY_API_VERSION=3</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">openstack user list</span><br></pre></td></tr></table></figure><h2 id="Glance"><a href="#Glance" class="headerlink" title="Glance"></a>Glance</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码 mysql_db</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE glance;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">openstack project create --domain default --description <span class="string">&quot;Service Project&quot;</span> service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 glance</span></span><br><span class="line">openstack user create --domain default --password-prompt glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user glance admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name glance --description <span class="string">&quot;OpenStack Image&quot;</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne image public http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne image internal http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne image admin http://controller:9292</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/glance.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line">.tox/genconfig/bin/pip3 install opentracing</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">sudo mkdir /etc/glance</span><br><span class="line">sudo cp etc/glance-api.conf /etc/glance/glance-api.conf</span><br><span class="line">sudo cp etc/glance-api-paste.ini /etc/glance/glance-api-paste.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/glance/glance-api.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span>  = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = glance</span><br><span class="line"><span class="attr">password</span> = glance</span><br><span class="line"><span class="comment">#memcached_servers = controller:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[paste_deploy]</span></span><br><span class="line"><span class="attr">flavor</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[glance_store]</span></span><br><span class="line"><span class="attr">stores</span> = file,http</span><br><span class="line"><span class="attr">default_store</span> = file</span><br><span class="line"><span class="attr">filesystem_store_datadir</span> = /var/lib/glance/images/</span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/genconfig/bin/glance-manage db_sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务（后台）</span></span><br><span class="line">sudo glance-api --config-file=/etc/glance/glance-api.conf --config-file=/etc/glance/glance-api-paste.ini --debug</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源镜像</span></span><br><span class="line">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传镜像到镜像服务，公开可见（所有项目都可以访问）</span></span><br><span class="line">openstack image create <span class="string">&quot;cirros&quot;</span> \</span><br><span class="line">  --file cirros-0.4.0-x86_64-disk.img \</span><br><span class="line">  --disk-format qcow2 --container-format bare \</span><br><span class="line">  --public</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">openstack image list</span><br></pre></td></tr></table></figure><h2 id="Placement"><a href="#Placement" class="headerlink" title="Placement"></a>Placement</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码 mysql_db</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE placement;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 placement</span></span><br><span class="line">openstack user create --domain default --password-prompt placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user placement admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name placement --description <span class="string">&quot;Placement API&quot;</span> placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne placement public http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement internal http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement admin http://controller:8778</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/placement.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line"><span class="comment"># .tox/shared/bin/pip3 install -r requirements.txt</span></span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>配置文件 /etc/placement/placement.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo mkdir /etc/placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/placement/placement.conf.sample /etc/placement/placement.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/placement/placement.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[placement_database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement</span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br><span class="line"><span class="comment">#memcached_servers = 127.0.0.1:11211</span></span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/shared/bin/placement-manage db sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">sudo service apache2 restart</span><br><span class="line">sudo placement-api --port 8778</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. admin-openrc</span><br><span class="line">placement-status upgrade check</span><br></pre></td></tr></table></figure><h2 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 RabbitMQ</span></span><br><span class="line">sudo apt install rabbitmq-server -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 openstack 用户</span></span><br><span class="line">sudo rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">sudo rabbitmqctl set_permissions openstack <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置，密码 mysql_db</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE nova_api;</span></span><br><span class="line"><span class="comment">#CREATE DATABASE nova;</span></span><br><span class="line"><span class="comment">#CREATE DATABASE nova_cell0;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 nova</span></span><br><span class="line">openstack user create --domain default --password-prompt nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user nova admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name nova --description <span class="string">&quot;OpenStack Compute&quot;</span> compute</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">sudo mkdir /etc/nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/nova/nova.conf.sample /etc/nova/nova.conf</span><br><span class="line">sudo cp etc/nova/api-paste.ini /etc/nova/api-paste.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[api_database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api</span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova</span><br><span class="line"></span><br><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class="number">5672</span>/</span><br><span class="line"><span class="attr">my_ip</span> = <span class="number">10.0</span>.<span class="number">2.28</span></span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = nova</span><br><span class="line"><span class="attr">password</span> = nova</span><br><span class="line"><span class="comment">#memcached_servers = 127.0.0.1:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[vnc]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">server_listen</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">server_proxyclient_address</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">novncproxy_base_url</span> = http://controller:<span class="number">6080</span>/vnc_auto.html</span><br><span class="line"></span><br><span class="line"><span class="section">[glance]</span></span><br><span class="line"><span class="attr">api_servers</span> = http://controller:<span class="number">9292</span></span><br><span class="line"></span><br><span class="line"><span class="section">[oslo_concurrency]</span></span><br><span class="line"><span class="attr">lock_path</span> = /var/lib/nova/tmp</span><br><span class="line"></span><br><span class="line"><span class="section">[placement]</span></span><br><span class="line"><span class="attr">region_name</span> = RegionOne</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># novnc</span></span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/novnc/noVNC.git /usr/share/novnc/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line"><span class="comment">#.tox/shared/bin/pip3 install opentracing</span></span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf api_db sync</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 map_cell0</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 create_cell --name=cell1 --verbose</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf db sync</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 list_cells</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务 nova-api、nova-scheduler、nova-conductor</span></span><br><span class="line">sudo nova-api --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br><span class="line">sudo nova-scheduler --config-file=/etc/nova/nova.conf --debug</span><br><span class="line">sudo nova-conductor --config-file=/etc/nova/nova.conf --debug</span><br><span class="line"><span class="comment"># sudo nova-novncproxy --config-file=/etc/nova/nova.conf --debug</span></span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出计算服务</span></span><br><span class="line">openstack compute service list</span><br><span class="line"></span><br><span class="line"><span class="comment"># API 状态</span></span><br><span class="line">nova-status upgrade check</span><br></pre></td></tr></table></figure><h1 id="计算节点"><a href="#计算节点" class="headerlink" title="计算节点"></a>计算节点</h1><p>PS：这里连 mysql 都装了，其实没必要。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install bindep</span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="comment"># sudo apt-get install libpq-dev</span></span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># pip install -e .</span></span><br><span class="line">pip install tox</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>编辑配置文件 /etc/nova/nova.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo mkdir /etc/nova</span><br><span class="line"><span class="comment">#sudo mkdir /var/lib/nova/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/nova/nova.conf.sample /etc/nova/nova.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line"><span class="attr">my_ip</span> = <span class="number">10.0</span>.<span class="number">2.29</span></span><br><span class="line"><span class="attr">compute_driver</span>=libvirt.LibvirtDriver</span><br><span class="line"><span class="comment">#firewall_driver = nova.virt.firewall.NoopFirewallDriver</span></span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = nova</span><br><span class="line"><span class="attr">password</span> = nova</span><br><span class="line"><span class="comment">#memcached_servers = controller:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[vnc]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">server_listen</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">server_proxyclient_address</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">novncproxy_base_url</span> = http://controller:<span class="number">6080</span>/vnc_auto.html</span><br><span class="line"></span><br><span class="line"><span class="section">[glance]</span></span><br><span class="line"><span class="attr">api_servers</span> = http://controller:<span class="number">9292</span></span><br><span class="line"></span><br><span class="line"><span class="section">[oslo_concurrency]</span></span><br><span class="line"><span class="attr">lock_path</span> = /var/lib/nova/tmp</span><br><span class="line"></span><br><span class="line"><span class="section">[placement]</span></span><br><span class="line"><span class="attr">region_name</span> = RegionOne</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br><span class="line"></span><br><span class="line"><span class="section">[libvirt]</span></span><br><span class="line"><span class="attr">virt_type</span> = qemu</span><br></pre></td></tr></table></figure><p>计算主机本身不支持虚拟化，按照官方教程应该配置 <code>virt_type=qemu</code> ，但提示需要配置 <code>compute_driver</code> 查阅 <a href="https://docs.openstack.org//nova/latest/doc-nova.pdf">nova 文档</a>（p322）找到支持的虚拟化驱动</p><ul><li>libvirt.LibvirtDriver</li><li>ironic.IronicDriver</li><li>vmwareapi.VMwareVCDriver</li><li>hyperv.HyperVDriver</li><li>powervm.PowerVMDriver</li><li>zvm.ZVMDriver</li><li>fake.FakeDriver</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 libvirt</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu-kvm libvirt-daemon-system -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询版本</span></span><br><span class="line">virsh</span><br><span class="line">version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">sudo nova-compute --config-file=/etc/nova/nova.conf --debug</span><br></pre></td></tr></table></figure><h2 id="控制节点-1"><a href="#控制节点-1" class="headerlink" title="控制节点"></a>控制节点</h2><p>添加到 cell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 身份认证</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认计算节点</span></span><br><span class="line">openstack compute service list --service nova-compute</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现计算节点</span></span><br><span class="line"><span class="comment">#su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova</span></span><br><span class="line">~/nova/.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 discover_hosts --verbose</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出计算服务</span></span><br><span class="line">openstack compute service list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出镜像服务中的镜像，验证和镜像服务的连接</span></span><br><span class="line">openstack image list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 cells 和 placement API 是否成功运行</span></span><br><span class="line">nova-status upgrade check</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://askubuntu.com/questions/984445/netplan-configuration-on-ubuntu-17-04-virtual-machine">netplan configuration on Ubuntu 17.04 virtual machine</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-allow-remote-access-to-mysql">How To Allow Remote Access to MySQL</a></li></ul>]]></content>
    
    
    <summary type="html">记录部署流程</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>OSProfiler 源码分析</title>
    <link href="https://jckling.github.io/2021/05/25/OpenStack/OSProfiler%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://jckling.github.io/2021/05/25/OpenStack/OSProfiler%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2021-05-25T05:55:52.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支持-OSProfiler-的核心组件"><a href="#支持-OSProfiler-的核心组件" class="headerlink" title="支持 OSProfiler 的核心组件"></a>支持 OSProfiler 的核心组件</h1><p>OSProfiler 支持的组件的起始版本，6 个核心组件</p><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>Keystone</td><td><a href="https://docs.openstack.org/releasenotes/keystone/newton.html">Newton</a></td></tr><tr><td>Glance</td><td><a href="https://docs.openstack.org/performance-docs/latest/test_plans/keystone/plan.html">Juno</a></td></tr><tr><td>Nova</td><td><a href="https://docs.openstack.org/releasenotes/nova/ocata.html">Ocata</a></td></tr><tr><td>Neutron</td><td><a href="https://docs.openstack.org/releasenotes/neutron/newton.html">Newton</a></td></tr><tr><td>Swift</td><td><a href="https://blueprints.launchpad.net/swift/+spec/osprofiler-support-in-swift">Blueprint Not started</a></td></tr><tr><td>Cinder</td><td><a href="https://docs.openstack.org/performance-docs/latest/test_plans/keystone/plan.html">Juno</a></td></tr></tbody></table><p>从 3.0.0 版本开始 OSProfiler 弃用 Python2 支持，至少得使用 Python3.6 。每个 OpenStack 都有对应的稳定版 OSProfiler ，主要用于性能测试。</p><img src="https://i.loli.net/2021/06/06/g34prsFtyhVnS5Y.png" width="60%"><h2 id="Keystone"><a href="#Keystone" class="headerlink" title="Keystone"></a>Keystone</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keystone/conf/__init__.py      <span class="comment"># 设置默认配置</span></span><br><span class="line">keystone/common/profiler.py    <span class="comment"># 读取配置文件，设置通知驱动，启用中间件</span></span><br><span class="line">keystone/common/sql/core.py    <span class="comment"># 包装数据库会话</span></span><br><span class="line">keystone/server/flask/core.py  <span class="comment"># 初始化，调用 common/profiler.py</span></span><br><span class="line">setup.cfg                      <span class="comment"># 设置中间件 WsgiMiddleware</span></span><br></pre></td></tr></table></figure><p><code>keystone/conf/__init__.py</code> 设置 OSProfiler 默认配置，不启用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_external_opts_defaults</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Update default configuration options for oslo.middleware.&quot;&quot;&quot;</span></span><br><span class="line">    cors.set_defaults(</span><br><span class="line">        allow_headers=[<span class="string">&#x27;X-Auth-Token&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Openstack-Request-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Subject-Token&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Name&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Domain-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Domain-Name&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Domain-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Domain-Name&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;Openstack-Auth-Receipt&#x27;</span>],</span><br><span class="line">        expose_headers=[<span class="string">&#x27;X-Auth-Token&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;X-Openstack-Request-Id&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;X-Subject-Token&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;Openstack-Auth-Receipt&#x27;</span>],</span><br><span class="line">        allow_methods=[<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;PATCH&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># configure OSprofiler options</span></span><br><span class="line">    profiler.set_defaults(CONF, enabled=<span class="literal">False</span>, trace_sqlalchemy=<span class="literal">False</span>)          <span class="comment"># 设置 OSProfiler 默认配置</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>keystone/common/profiler.py</code> 读取配置文件启用 OSProfiler ，设置驱动，添加日志信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">name, host=<span class="string">&#x27;0.0.0.0&#x27;</span></span>):</span>  <span class="comment"># nosec</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Setup OSprofiler notifier and enable profiling.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: name of the service that will be profiled</span></span><br><span class="line"><span class="string">    :param host: hostname or host IP address that the service will be</span></span><br><span class="line"><span class="string">                 running on. By default host will be set to 0.0.0.0, but more</span></span><br><span class="line"><span class="string">                 specified host name / address usage is highly recommended.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(</span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=&#123;&#125;,</span><br><span class="line">            project=<span class="string">&quot;keystone&quot;</span>,</span><br><span class="line">            service=name,</span><br><span class="line">            host=host</span><br><span class="line">        )</span><br><span class="line">        LOG.info(<span class="string">&quot;OSProfiler is enabled.\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;Traces provided from the profiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;can only be subscribed to using the same HMAC keys that &quot;</span></span><br><span class="line">                 <span class="string">&quot;are configured in Keystone&#x27;s configuration file &quot;</span></span><br><span class="line">                 <span class="string">&quot;under the [profiler] section. \n To disable OSprofiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;set in /etc/keystone/keystone.conf:\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;[profiler]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;enabled=false&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>setup.cfg</code> 设置 server 中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keystone.server_middleware &#x3D;</span><br><span class="line">    cors &#x3D; oslo_middleware:CORS</span><br><span class="line">    sizelimit &#x3D; oslo_middleware:RequestBodySizeLimiter</span><br><span class="line">    http_proxy_to_wsgi &#x3D; oslo_middleware:HTTPProxyToWSGI</span><br><span class="line">    osprofiler &#x3D; osprofiler.web:WsgiMiddleware          &lt;--- 使用 osprofiler 的 WSGI 中间件</span><br><span class="line">    request_id &#x3D; oslo_middleware:RequestId</span><br><span class="line">    debug &#x3D; oslo_middleware:Debug</span><br></pre></td></tr></table></figure><p><code>keystone/server/flask/core.py</code> 服务器中间件按以下顺序处理请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NOTE(morgan): ORDER HERE IS IMPORTANT! The middleware will process the</span></span><br><span class="line"><span class="comment"># request in this list&#x27;s order.</span></span><br><span class="line">_APP_MIDDLEWARE = (</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">                conf=&#123;<span class="string">&#x27;oslo_config_project&#x27;</span>: <span class="string">&#x27;keystone&#x27;</span>&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;sizelimit&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;http_proxy_to_wsgi&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,     <span class="comment"># OSProfiler 提供的 WSGI 中间件</span></span><br><span class="line">                ep=<span class="string">&#x27;osprofiler&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;request_id&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>keystone/common/sql/core.py</code> 包装数据库引擎会话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 osprofiler 模块包装会话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_wrap_session</span>(<span class="params">sess</span>):</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line">        sess = osprofiler.sqlalchemy.wrap_session(sql, sess)</span><br><span class="line">    <span class="keyword">return</span> sess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_read</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        reader = enginefacade.reader</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        reader = _get_main_context_manager().reader</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(reader.using(_get_context()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_write</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        writer = enginefacade.writer</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        writer = _get_main_context_manager().writer</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(writer.using(_get_context()))</span><br></pre></td></tr></table></figure><h2 id="Cinder"><a href="#Cinder" class="headerlink" title="Cinder"></a>Cinder</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cinder/db/sqlalchemy/api.py     <span class="comment"># 添加数据库追踪</span></span><br><span class="line">cinder/rpc.py                   <span class="comment"># 上下文序列化/反序列化</span></span><br><span class="line">cinder/service.py               <span class="comment"># 启用 OSProfiler；添加 RPC 追踪</span></span><br></pre></td></tr></table></figure><p><code>cinder/db/sqlalchemy/api.py</code> 添加数据库追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">conf</span>):</span></span><br><span class="line">    main_context_manager.configure(**<span class="built_in">dict</span>(conf.database))</span><br><span class="line">    <span class="comment"># NOTE(geguileo): To avoid a cyclical dependency we import the</span></span><br><span class="line">    <span class="comment"># group here.  Dependency cycle is objects.base requires db.api,</span></span><br><span class="line">    <span class="comment"># which requires db.sqlalchemy.api, which requires service which</span></span><br><span class="line">    <span class="comment"># requires objects.base</span></span><br><span class="line">    CONF.import_group(<span class="string">&quot;profiler&quot;</span>, <span class="string">&quot;cinder.service&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.trace_sqlalchemy:      <span class="comment"># 添加数据库追踪</span></span><br><span class="line">            <span class="keyword">lambda</span> eng: osprofiler_sqlalchemy.add_tracing(sqlalchemy,</span><br><span class="line">                                                          eng, <span class="string">&quot;db&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>cinder/rpc.py</code> 请求上下文类，对上下文进行序列化和反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContextSerializer</span>(<span class="params">messaging.Serializer</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, base</span>):</span></span><br><span class="line">        self._base = base</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_entity</span>(<span class="params">self, context, entity</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._base:</span><br><span class="line">            <span class="keyword">return</span> entity</span><br><span class="line">        <span class="keyword">return</span> self._base.serialize_entity(context, entity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_entity</span>(<span class="params">self, context, entity</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._base:</span><br><span class="line">            <span class="keyword">return</span> entity</span><br><span class="line">        <span class="keyword">return</span> self._base.deserialize_entity(context, entity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        _context = context.to_dict()</span><br><span class="line">        <span class="keyword">if</span> profiler <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            prof = profiler.get()</span><br><span class="line">            <span class="keyword">if</span> prof:</span><br><span class="line">                trace_info = &#123;</span><br><span class="line">                    <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">                    <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">                    <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">                &#125;</span><br><span class="line">                _context.update(&#123;<span class="string">&quot;trace_info&quot;</span>: trace_info&#125;)</span><br><span class="line">        <span class="keyword">return</span> _context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        trace_info = context.pop(<span class="string">&quot;trace_info&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_info:</span><br><span class="line">            <span class="keyword">if</span> profiler <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                profiler.init(**trace_info)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cinder.context.RequestContext.from_dict(context)</span><br></pre></td></tr></table></figure><p><code>cinder/service.py</code> 读取配置文件启用 OSProfiler ，设置驱动，添加日志信息；使用类装饰器追踪 RPC 调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">CONF = cfg.CONF</span><br><span class="line">CONF.register_opts(service_opts)</span><br><span class="line"><span class="keyword">if</span> profiler_opts:</span><br><span class="line">    profiler_opts.set_defaults(CONF)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_profiler</span>(<span class="params">binary, host</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (osprofiler_initializer <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span></span><br><span class="line">            profiler <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span></span><br><span class="line">            profiler_opts <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">        LOG.debug(<span class="string">&#x27;osprofiler is not present&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler_initializer.init_from_conf(</span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=context.get_admin_context().to_dict(),</span><br><span class="line">            project=<span class="string">&quot;cinder&quot;</span>,</span><br><span class="line">            service=binary,</span><br><span class="line">            host=host</span><br><span class="line">        )</span><br><span class="line">        LOG.warning(</span><br><span class="line">            <span class="string">&quot;OSProfiler is enabled.\nIt means that person who knows &quot;</span></span><br><span class="line">            <span class="string">&quot;any of hmac_keys that are specified in &quot;</span></span><br><span class="line">            <span class="string">&quot;/etc/cinder/cinder.conf can trace his requests. \n&quot;</span></span><br><span class="line">            <span class="string">&quot;In real life only operator can read this file so there &quot;</span></span><br><span class="line">            <span class="string">&quot;is no security issue. Note that even if person can &quot;</span></span><br><span class="line">            <span class="string">&quot;trigger profiler, only admin user can retrieve trace &quot;</span></span><br><span class="line">            <span class="string">&quot;information.\n&quot;</span></span><br><span class="line">            <span class="string">&quot;To disable OSProfiler set in cinder.conf:\n&quot;</span></span><br><span class="line">            <span class="string">&quot;[profiler]\nenabled=false&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span>(<span class="params">service.Service</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Service object for binaries running on hosts.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A service takes a manager and enables rpc by listening to queues based</span></span><br><span class="line"><span class="string">    on topic. It also periodically runs tasks on the manager and reports</span></span><br><span class="line"><span class="string">    it state to the database services table.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Make service_id a class attribute so it can be used for clean up</span></span><br><span class="line">    service_id = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, binary, topic, manager, report_interval=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 periodic_interval=<span class="literal">None</span>, periodic_fuzzy_delay=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_name=<span class="literal">None</span>, coordination=<span class="literal">False</span>, cluster=<span class="literal">None</span>, *args,</span></span></span><br><span class="line"><span class="function"><span class="params">                 **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Service, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rpc.initialized():</span><br><span class="line">            rpc.init(CONF)</span><br><span class="line"></span><br><span class="line">        self.cluster = cluster</span><br><span class="line">        self.host = host</span><br><span class="line">        self.binary = binary</span><br><span class="line">        self.topic = topic</span><br><span class="line">        self.manager_class_name = manager</span><br><span class="line">        self.coordination = coordination</span><br><span class="line">        manager_class = importutils.import_class(self.manager_class_name)</span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">            manager_class = profiler.trace_cls(<span class="string">&quot;rpc&quot;</span>)(manager_class)    <span class="comment"># 类装饰器</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="Glance"><a href="#Glance" class="headerlink" title="Glance"></a>Glance</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">glance/opts.py                  <span class="comment"># 添加 OSProfiler 选项</span></span><br><span class="line">glance/db/sqlalchemy/api.py     <span class="comment"># 添加数据库追踪</span></span><br><span class="line">glance/cmd/api.py               <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">glance/common/client.py         <span class="comment"># 更新 http 请求头中的追踪信息</span></span><br><span class="line">glance/common/wsgi.py           <span class="comment"># 设置 OSProfiler 默认配置</span></span><br><span class="line">glance/common/wsgi_app.py       <span class="comment"># 启用 OSProfiler</span></span><br></pre></td></tr></table></figure><p><code>glance/opts.py</code> 包含 OSProfiler 选项，作为 oslo_config 的选项，通过 Glance API 获得选项列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">_api_opts = [</span><br><span class="line">    (<span class="literal">None</span>, <span class="built_in">list</span>(itertools.chain(</span><br><span class="line">        glance.api.middleware.context.context_opts,</span><br><span class="line">        glance.api.versions.versions_opts,</span><br><span class="line">        glance.common.config.common_opts,</span><br><span class="line">        glance.common.location_strategy.location_strategy_opts,</span><br><span class="line">        glance.common.property_utils.property_opts,</span><br><span class="line">        glance.common.wsgi.bind_opts,</span><br><span class="line">        glance.common.wsgi.eventlet_opts,</span><br><span class="line">        glance.common.wsgi.socket_opts,</span><br><span class="line">        glance.common.wsgi.wsgi_opts,</span><br><span class="line">        glance.common.wsgi.store_opts,</span><br><span class="line">        glance.image_cache.drivers.sqlite.sqlite_opts,</span><br><span class="line">        glance.image_cache.image_cache_opts,</span><br><span class="line">        glance.notifier.notifier_opts,</span><br><span class="line">        glance.scrubber.scrubber_opts))),</span><br><span class="line">    (<span class="string">&#x27;image_format&#x27;</span>, glance.common.config.image_format_opts),</span><br><span class="line">    (<span class="string">&#x27;task&#x27;</span>, glance.common.config.task_opts),</span><br><span class="line">    (<span class="string">&#x27;taskflow_executor&#x27;</span>, <span class="built_in">list</span>(itertools.chain(</span><br><span class="line">        glance.async_.taskflow_executor.taskflow_executor_opts,</span><br><span class="line">        glance.async_.flows.convert.convert_task_opts))),</span><br><span class="line">    (<span class="string">&#x27;store_type_location_strategy&#x27;</span>,</span><br><span class="line">     glance.common.location_strategy.store_type.store_type_opts),</span><br><span class="line">    profiler.list_opts()[<span class="number">0</span>],        <span class="comment"># 添加 OSProfiler 选项</span></span><br><span class="line">    (<span class="string">&#x27;paste_deploy&#x27;</span>, glance.common.config.paste_deploy_opts),</span><br><span class="line">    (<span class="string">&#x27;wsgi&#x27;</span>, glance.common.config.wsgi_opts),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>glance/db/sqlalchemy/api.py</code> 添加数据库追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_facade_lazily</span>():</span></span><br><span class="line">    <span class="keyword">global</span> _LOCK, _FACADE</span><br><span class="line">    <span class="keyword">if</span> _FACADE <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">with</span> _LOCK:</span><br><span class="line">            <span class="keyword">if</span> _FACADE <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                _FACADE = session.EngineFacade.from_config(CONF)</span><br><span class="line">                <span class="comment"># 添加数据库追踪</span></span><br><span class="line">                <span class="keyword">if</span> CONF.profiler.enabled <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line">                    osprofiler.sqlalchemy.add_tracing(sqlalchemy,</span><br><span class="line">                                                      _FACADE.get_engine(),</span><br><span class="line">                                                      <span class="string">&quot;db&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> _FACADE</span><br></pre></td></tr></table></figure><p><code>glance/cmd/api.py</code> 启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        config.parse_args()</span><br><span class="line">        config.set_config_defaults()</span><br><span class="line">        wsgi.set_eventlet_hub()</span><br><span class="line">        logging.setup(CONF, <span class="string">&#x27;glance&#x27;</span>)</span><br><span class="line">        gmr.TextGuruMeditation.setup_autorun(version)</span><br><span class="line">        notifier.set_defaults()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">            osprofiler.initializer.init_from_conf(      <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">                conf=CONF,</span><br><span class="line">                context=&#123;&#125;,</span><br><span class="line">                project=<span class="string">&quot;glance&quot;</span>,</span><br><span class="line">                service=<span class="string">&quot;api&quot;</span>,</span><br><span class="line">                host=CONF.bind_host</span><br><span class="line">            )</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>glance/common/wsgi.py</code> 设置 OSProfiler 默认配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profiler_opts.set_defaults(CONF)    <span class="comment"># OSProfiler 默认配置</span></span><br></pre></td></tr></table></figure><p><code>glance/common/wsgi_app.py</code> 初始化应用时启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_setup_os_profiler</span>():</span></span><br><span class="line">    notifier.set_defaults()</span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(conf=CONF,</span><br><span class="line">                                              context=&#123;&#125;,</span><br><span class="line">                                              project=<span class="string">&#x27;glance&#x27;</span>,</span><br><span class="line">                                              service=<span class="string">&#x27;api&#x27;</span>,</span><br><span class="line">                                              host=CONF.bind_host)</span><br></pre></td></tr></table></figure><p><code>glance/common/client.py</code> 更新请求头中的追踪信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClient</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A base client class&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @handle_redirects</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_do_request</span>(<span class="params">self, method, url, body, headers</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Connects to the server and issues a request.  Handles converting</span></span><br><span class="line"><span class="string">        any returned HTTP error status codes to OpenStack/Glance exceptions</span></span><br><span class="line"><span class="string">        and closing the server connection. Returns the result data, or</span></span><br><span class="line"><span class="string">        raises an appropriate exception.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param method: HTTP method (&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, etc...)</span></span><br><span class="line"><span class="string">        :param url: urlparse.ParsedResult object with URL information</span></span><br><span class="line"><span class="string">        :param body: data to send (as string, filelike or iterable),</span></span><br><span class="line"><span class="string">                     or None (default)</span></span><br><span class="line"><span class="string">        :param headers: mapping of key/value pairs to add as headers</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :note</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If the body param has a read attribute, and method is either</span></span><br><span class="line"><span class="string">        POST or PUT, this method will automatically conduct a chunked-transfer</span></span><br><span class="line"><span class="string">        encoding and use the body as a file object or iterable, transferring</span></span><br><span class="line"><span class="string">        chunks of data using the connection&#x27;s send() method. This allows large</span></span><br><span class="line"><span class="string">        objects to be transferred efficiently without buffering the entire</span></span><br><span class="line"><span class="string">        body in memory.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> url.query:</span><br><span class="line">            path = url.path + <span class="string">&quot;?&quot;</span> + url.query</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            path = url.path</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            connection_type = self.get_connection_type()</span><br><span class="line">            headers = self._encode_headers(headers <span class="keyword">or</span> &#123;&#125;)</span><br><span class="line">            headers.update(osprofiler.web.get_trace_id_headers())   <span class="comment"># 更新请求头</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">nova/config.py             <span class="comment"># 根据配置文件设置 osprofiler</span></span><br><span class="line">nova/service.py            <span class="comment"># 根据配置文件设置驱动，启用 WSGI 中间件</span></span><br><span class="line">nova/profiler.py           <span class="comment"># 重写 WSGI 中间件、类追踪装饰器</span></span><br><span class="line">nova/manager.py            <span class="comment"># 元类</span></span><br><span class="line">nova/rpc.py                <span class="comment"># 追踪上下文序列化/反序列化</span></span><br><span class="line">nova/utils.py              <span class="comment"># spawn/spawn_n 装饰器</span></span><br><span class="line">nova/db/sqlalchemy/api.py  <span class="comment"># 追踪数据库调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承抽象基类</span></span><br><span class="line">nova/compute/manager.py</span><br><span class="line">nova/conductor/manager.py</span><br><span class="line">nova/scheduler/manager.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类装饰器 @profiler.trace_cls(&quot;&quot;)</span></span><br><span class="line">nova/compute/api.py                 <span class="comment"># compute_api</span></span><br><span class="line">nova/compute/rpcapi.py              <span class="comment"># rpc</span></span><br><span class="line">nova/conductor/manager.py           <span class="comment"># rpc</span></span><br><span class="line">nova/conductor/rpcapi.py            <span class="comment"># rpc</span></span><br><span class="line">nova/scheduler/rpcapi.py            <span class="comment"># rpc</span></span><br><span class="line">nova/image/glance.py                <span class="comment"># nova_image</span></span><br><span class="line">nova/network/neutron.py             <span class="comment"># neutron_api</span></span><br><span class="line">nova/virt/libvirt/volume/volume.py  <span class="comment"># volume_api</span></span><br><span class="line">nova/virt/libvirt/vif.py            <span class="comment"># vif_driver</span></span><br></pre></td></tr></table></figure><p><code>nova/config.py</code> 设置 OSProfiler 默认配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_args</span>(<span class="params">argv, default_config_files=<span class="literal">None</span>, configure_db=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               init_rpc=<span class="literal">True</span></span>):</span></span><br><span class="line">    log.register_options(CONF)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(sean-k-mooney): this filter addresses bug #1825584</span></span><br><span class="line">    <span class="comment"># https://bugs.launchpad.net/nova/+bug/1825584</span></span><br><span class="line">    <span class="comment"># eventlet monkey-patching breaks AMQP heartbeat on uWSGI</span></span><br><span class="line">    rabbit_logger = logging.getLogger(<span class="string">&#x27;oslo.messaging._drivers.impl_rabbit&#x27;</span>)</span><br><span class="line">    rabbit_logger.addFilter(rabbit_heartbeat_filter)</span><br><span class="line"></span><br><span class="line">    set_lib_defaults()</span><br><span class="line">    <span class="keyword">if</span> profiler:</span><br><span class="line">        profiler.set_defaults(CONF)     <span class="comment"># 设置默认配置</span></span><br><span class="line"></span><br><span class="line">    CONF(argv[<span class="number">1</span>:],</span><br><span class="line">         project=<span class="string">&#x27;nova&#x27;</span>,</span><br><span class="line">         version=version.version_string(),</span><br><span class="line">         default_config_files=default_config_files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> init_rpc:</span><br><span class="line">        rpc.init(CONF)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> configure_db:</span><br><span class="line">        sqlalchemy_api.configure(CONF)</span><br></pre></td></tr></table></figure><p><code>nova/service.py</code> 根据配置文件启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_profiler</span>(<span class="params">binary, host</span>):</span></span><br><span class="line">    <span class="keyword">if</span> osprofiler <span class="keyword">and</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(</span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=context.get_admin_context().to_dict(),</span><br><span class="line">            project=<span class="string">&quot;nova&quot;</span>,</span><br><span class="line">            service=binary,</span><br><span class="line">            host=host)</span><br><span class="line">        LOG.info(<span class="string">&quot;OSProfiler is enabled.&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>nova/profiler.py</code> 重写 OSProfiler 装饰器类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写 WSGI 中间件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WsgiMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, application, **kwargs</span>):</span></span><br><span class="line">        self.application = application</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span>(<span class="params">cls, global_conf, **local_conf</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler_web:    <span class="comment"># 调用 osprofiler</span></span><br><span class="line">            <span class="keyword">return</span> profiler_web.WsgiMiddleware.factory(global_conf,</span><br><span class="line">                                                       **local_conf)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">filter_</span>(<span class="params">app</span>):</span></span><br><span class="line">            <span class="keyword">return</span> cls(app, **local_conf)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filter_</span><br><span class="line"></span><br><span class="line"><span class="meta">    @webob.dec.wsgify</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> request.get_response(self.application)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_traced_meta</span>():</span></span><br><span class="line">    <span class="keyword">if</span> profiler <span class="keyword">and</span> <span class="string">&#x27;profiler&#x27;</span> <span class="keyword">in</span> CONF <span class="keyword">and</span> CONF.profiler.enabled:</span><br><span class="line">        <span class="keyword">return</span> profiler.TracedMeta</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># NOTE(rpodolyaka): if we do not return a child of type, then Python</span></span><br><span class="line">        <span class="comment"># fails to build a correct MRO when osprofiler is not installed</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">NoopMeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> NoopMeta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包装 osprofiler 类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace_cls</span>(<span class="params">name, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Wrap the OSProfiler trace_cls decorator so that it will not try to</span></span><br><span class="line"><span class="string">    patch the class unless OSProfiler is present and enabled in the config</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: The name of action. E.g. wsgi, rpc, db, etc..</span></span><br><span class="line"><span class="string">    :param kwargs: Any other keyword args used by profiler.trace_cls</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler <span class="keyword">and</span> <span class="string">&#x27;profiler&#x27;</span> <span class="keyword">in</span> CONF <span class="keyword">and</span> CONF.profiler.enabled:</span><br><span class="line">            trace_decorator = profiler.trace_cls(name, kwargs)</span><br><span class="line">            <span class="keyword">return</span> trace_decorator(cls)</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p><code>nova/manager.py</code> 使用元类实现类支持追踪，nova 组件内部的模块都继承该类（<code>ComputeManager</code>、<code>ConductorManager</code>、<code>SchedulerManager</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerMeta</span>(<span class="params">profiler.get_traced_meta(<span class="params"></span>), <span class="built_in">type</span>(<span class="params">PeriodicTasks</span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Metaclass to trace all children of a specific class.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This metaclass wraps every public method (not starting with _ or __)</span></span><br><span class="line"><span class="string">    of the class using it. All children classes of the class using ManagerMeta</span></span><br><span class="line"><span class="string">    will be profiled as well.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Adding this metaclass requires that the __trace_args__ attribute be added</span></span><br><span class="line"><span class="string">    to the class we want to modify. That attribute is a dictionary</span></span><br><span class="line"><span class="string">    with one mandatory key: &quot;name&quot;. &quot;name&quot; defines the name</span></span><br><span class="line"><span class="string">    of the action to be traced (for example, wsgi, rpc, db).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The OSprofiler-based tracing, although, will only happen if profiler</span></span><br><span class="line"><span class="string">    instance was initiated somewhere before in the thread, that can only happen</span></span><br><span class="line"><span class="string">    if profiling is enabled in nova.conf and the API call to Nova API contained</span></span><br><span class="line"><span class="string">    specific headers.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>(<span class="params">base.Base, PeriodicTasks, metaclass=ManagerMeta</span>):</span></span><br><span class="line">    __trace_args__ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;rpc&quot;</span>&#125;    <span class="comment"># 必须</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>nova/rpc.py</code> 实现追踪上下文的序列化（并更新上下文）和反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilerRequestContextSerializer</span>(<span class="params">RequestContextSerializer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        _context = <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                         self).serialize_context(context)</span><br><span class="line"></span><br><span class="line">        prof = profiler.get()       <span class="comment"># 获取 osprofiler 实例</span></span><br><span class="line">        <span class="keyword">if</span> prof:</span><br><span class="line">            <span class="comment"># FIXME(DinaBelova): we&#x27;ll add profiler.get_info() method</span></span><br><span class="line">            <span class="comment"># to extract this info -&gt; we&#x27;ll need to update these lines</span></span><br><span class="line">            trace_info = &#123;</span><br><span class="line">                <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">                <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">                <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">            &#125;</span><br><span class="line">            _context.update(&#123;<span class="string">&quot;trace_info&quot;</span>: trace_info&#125;) <span class="comment"># 添加追踪信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        trace_info = context.pop(<span class="string">&quot;trace_info&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_info:</span><br><span class="line">            profiler.init(**trace_info)     <span class="comment"># 初始新的化 osprofiler 实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                     self).deserialize_context(context)</span><br></pre></td></tr></table></figure><p><code>nova/utils.py</code> 实现 spawn 和 spawn_n 装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回追踪信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_serialize_profile_info</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> profiler:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    prof = profiler.get()   <span class="comment"># 获取实例</span></span><br><span class="line">    trace_info = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> prof:</span><br><span class="line">        <span class="comment"># FIXME(DinaBelova): we&#x27;ll add profiler.get_info() method</span></span><br><span class="line">        <span class="comment"># to extract this info -&gt; we&#x27;ll need to update these lines</span></span><br><span class="line">        trace_info = &#123;</span><br><span class="line">            <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">            <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">            <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> trace_info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Passthrough method for eventlet.spawn.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This utility exists so that it can be stubbed for testing without</span></span><br><span class="line"><span class="string">    interfering with the service spawns.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It will also grab the context from the threadlocal store and add it to</span></span><br><span class="line"><span class="string">    the store on the new thread.  This allows for continuity in logging the</span></span><br><span class="line"><span class="string">    context when using this method to spawn a new thread.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    _context = common_context.get_current()     <span class="comment"># 当前线程</span></span><br><span class="line">    profiler_info = _serialize_profile_info()   <span class="comment"># 追踪信息</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">context_wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> If update_store is not called after spawn it won&#x27;t be</span></span><br><span class="line">        <span class="comment"># available for the logger to pull from threadlocal storage.</span></span><br><span class="line">        <span class="keyword">if</span> _context <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            _context.update_store()</span><br><span class="line">        <span class="keyword">if</span> profiler_info <span class="keyword">and</span> profiler:</span><br><span class="line">            profiler.init(**profiler_info)      <span class="comment"># 初始化 osprofiler 实例</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventlet.spawn(context_wrapper, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn_n</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Passthrough method for eventlet.spawn_n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This utility exists so that it can be stubbed for testing without</span></span><br><span class="line"><span class="string">    interfering with the service spawns.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It will also grab the context from the threadlocal store and add it to</span></span><br><span class="line"><span class="string">    the store on the new thread.  This allows for continuity in logging the</span></span><br><span class="line"><span class="string">    context when using this method to spawn a new thread.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    _context = common_context.get_current()</span><br><span class="line">    profiler_info = _serialize_profile_info()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">context_wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> If update_store is not called after spawn_n it won&#x27;t be</span></span><br><span class="line">        <span class="comment"># available for the logger to pull from threadlocal storage.</span></span><br><span class="line">        <span class="keyword">if</span> _context <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            _context.update_store()</span><br><span class="line">        <span class="keyword">if</span> profiler_info <span class="keyword">and</span> profiler:</span><br><span class="line">            profiler.init(**profiler_info)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    eventlet.spawn_n(context_wrapper, *args, **kwargs)</span><br></pre></td></tr></table></figure><p><code>nova/db/sqlalchemy/api.py</code> 添加数据库追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追踪数据库调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">conf</span>):</span></span><br><span class="line">    main_context_manager.configure(**_get_db_conf(conf.database))</span><br><span class="line">    api_context_manager.configure(**_get_db_conf(conf.api_database))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> profiler_sqlalchemy <span class="keyword">and</span> CONF.profiler.enabled \</span><br><span class="line">            <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line"></span><br><span class="line">        main_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br><span class="line">        api_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br></pre></td></tr></table></figure><h2 id="Neutron"><a href="#Neutron" class="headerlink" title="Neutron"></a>Neutron</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">neutron/manager.py          <span class="comment"># 元类</span></span><br><span class="line">neutron/common/profiler.py  <span class="comment"># 根据配置文件设置驱动，启用 WSGI 中间件</span></span><br><span class="line">neutron/common/utils.py     <span class="comment"># spawn/spawn_n 装饰器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 neutron/common/profiler.py 设置 OSProfiler</span></span><br><span class="line">neutron/service.py</span><br><span class="line">neutron/server/__init__.py</span><br><span class="line">neutron/plugins/ml2/drivers/openvswitch/agent/main.py</span><br><span class="line">neutron/plugins/ml2/drivers/linuxbridge/agent/linuxbridge_neutron_agent.py</span><br><span class="line">neutron/plugins/ml2/drivers/mec_sriov/agent/sriov_nic_agent.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类装饰器 @profiler.trace_cls(&quot;&quot;)</span></span><br><span class="line">neutron/agent/l3/agent.py   <span class="comment"># l3-agent</span></span><br><span class="line">neutron/plugins/ml2/drivers/openvswitch/agent/ovs_dvr_neutron_agent.py  <span class="comment"># ovs_dvr_agent</span></span><br><span class="line">neutron/plugins/ml2/drivers/agent/_common_agent.py  <span class="comment"># rpc</span></span><br><span class="line">neutron/plugins/ml2/drivers/mec_sriov/agent/sriov_nic_agent.py  <span class="comment"># rpc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数装饰器 @profiler.trace(&quot;&quot;)</span></span><br><span class="line">neutron/plugins/ml2/drivers/openvswitch/agent/ovs_neutron_agent.py  <span class="comment"># rpc</span></span><br><span class="line">neutron/plugins/ml2/rpc.py  <span class="comment"># rpc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cProfile</span></span><br><span class="line">conf/profiling.py</span><br><span class="line">neutron/profiling/profiled_decorator.py</span><br></pre></td></tr></table></figure><p><code>neutron/manager.py</code> 和 Nova 同样的实现思路，使用元类实现类追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerMeta</span>(<span class="params">profiler.TracedMeta, <span class="built_in">type</span>(<span class="params">periodic_task.PeriodicTasks</span>)</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>(<span class="params">periodic_task.PeriodicTasks, metaclass=ManagerMeta</span>):</span></span><br><span class="line">    __trace_args__ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;rpc&quot;</span>&#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>neutron/common/profiler.py</code> 启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">name, host=<span class="string">&#x27;0.0.0.0&#x27;</span></span>):</span>  <span class="comment"># nosec</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Setup OSprofiler notifier and enable profiling.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: name of the service, that will be profiled</span></span><br><span class="line"><span class="string">    :param host: host (either host name or host address) the service will be</span></span><br><span class="line"><span class="string">                 running on. By default host will be set to 0.0.0.0, but more</span></span><br><span class="line"><span class="string">                 specified host name / address usage is highly recommended.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(      <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=context.get_admin_context().to_dict(),</span><br><span class="line">            project=<span class="string">&quot;neutron&quot;</span>,</span><br><span class="line">            service=name,</span><br><span class="line">            host=host</span><br><span class="line">        )</span><br><span class="line">        LOG.info(<span class="string">&quot;OSProfiler is enabled.\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;Traces provided from the profiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;can only be subscribed to using the same HMAC keys that &quot;</span></span><br><span class="line">                 <span class="string">&quot;are configured in Neutron&#x27;s configuration file &quot;</span></span><br><span class="line">                 <span class="string">&quot;under the [profiler] section.\n To disable OSprofiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;set in /etc/neutron/neutron.conf:\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;[profiler]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;enabled=false&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>neutron/common/utils.py</code> 返回追踪信息，实现 spawn 和 spawn_n 装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回追踪信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collect_profiler_info</span>():</span></span><br><span class="line">    p = profiler.get()</span><br><span class="line">    <span class="keyword">if</span> p:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;hmac_key&quot;</span>: p.hmac_key,</span><br><span class="line">            <span class="string">&quot;base_id&quot;</span>: p.get_base_id(),</span><br><span class="line">            <span class="string">&quot;parent_id&quot;</span>: p.get_id(),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;As eventlet.spawn() but with osprofiler initialized in the new threads</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    osprofiler stores the profiler instance in thread local storage, therefore</span></span><br><span class="line"><span class="string">    in new threads (including eventlet threads) osprofiler comes uninitialized</span></span><br><span class="line"><span class="string">    by default. This spawn() is a stand-in replacement for eventlet.spawn()</span></span><br><span class="line"><span class="string">    but we re-initialize osprofiler in threads spawn()-ed.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    profiler_info = collect_profiler_info()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler_info:</span><br><span class="line">            profiler.init(**profiler_info)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventlet.spawn(wrapper, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn_n</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;See spawn() above&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    profiler_info = collect_profiler_info()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler_info:</span><br><span class="line">            profiler.init(**profiler_info)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventlet.spawn_n(wrapper, *args, **kwargs)</span><br></pre></td></tr></table></figure><p><code>neutron/server/__init__.py</code> 启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_application</span>():</span></span><br><span class="line">    _init_configuration()</span><br><span class="line">    profiler.setup(<span class="string">&#x27;neutron-server&#x27;</span>, cfg.CONF.host)     <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">    <span class="keyword">return</span> config.load_paste_app(<span class="string">&#x27;neutron&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="OSProfiler-使用"><a href="#OSProfiler-使用" class="headerlink" title="OSProfiler 使用"></a>OSProfiler 使用</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>在 <a href="https://jckling.github.io/2020/12/25/OpenStack/CentOS7+OpenStack(Rocky)-0/">CentOS 7 安装 Openstack Rocky 版本 - 环境搭建</a> 一系列文章的基础上进行实验，整体架构如下：</p><img src="https://i.loli.net/2021/06/06/R5mAHUtLlM1eyhb.jpg"><p>修改控制节点上相关组件的配置文件，启用 OSProfiler </p><p>Controller</p><ul><li>Keystone</li><li>Glance</li><li>Nova*</li><li>Neutron*</li><li>Cinder</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[profiler]</span><br><span class="line">enabled &#x3D; True</span><br><span class="line"></span><br><span class="line">trace_sqlalchemy &#x3D; True</span><br><span class="line">trace_wsgi_transport  &#x3D; True</span><br><span class="line">trace_message_store  &#x3D; True</span><br><span class="line">trace_management_store  &#x3D; True</span><br><span class="line"></span><br><span class="line">hmac_keys &#x3D; 123</span><br><span class="line"></span><br><span class="line">connection_string &#x3D; mongodb:&#x2F;&#x2F;10.112.116.249:27017</span><br></pre></td></tr></table></figure><p>使用 MongoDB 作为后端，如果用 Elasticsearch 或 Jaeger 会产生错误，暂时没有找到解决方案，可能是版本不兼容。</p><img src="https://i.loli.net/2021/06/06/Gm1ycfj5qprEzBD.png" width="80%"><p>在 Gateway 上使用 Docker 部署 MongoDB ，存储追踪信息。</p><img src="https://i.loli.net/2021/06/06/x7PacO2MGholgHu.png"><h2 id="追踪服务组件"><a href="#追踪服务组件" class="headerlink" title="追踪服务组件"></a>追踪服务组件</h2><p>显式指定追踪的调用命令</p><h3 id="Keystone-1"><a href="#Keystone-1" class="headerlink" title="Keystone"></a>Keystone</h3><p>身份认证服务，列出所有用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有用户</span></span><br><span class="line">openstack user list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html fdfa1e7a-0863-470b-8ae2-169b21b0fbe5 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test1.html&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Glance-1"><a href="#Glance-1" class="headerlink" title="Glance"></a>Glance</h3><p>镜像服务，列出可用镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. demo-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出可用镜像</span></span><br><span class="line">openstack image list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html 04c4f7b5-e22f-40f7-8248-162247642cb5 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test2.html&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Nova-1"><a href="#Nova-1" class="headerlink" title="Nova"></a>Nova</h3><p>计算服务，查询实例状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. demo-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看实例</span></span><br><span class="line">openstack server list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html 8cce121c-adf1-4061-96eb-950bb4a75db8 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test3.html&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Cinder-1"><a href="#Cinder-1" class="headerlink" title="Cinder"></a>Cinder</h3><p>卷服务，查看卷状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. demo-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看卷</span></span><br><span class="line">openstack volume list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html 71760b3d-df04-4fec-bc26-dfc9b909f518 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test4.html&quot;</span></span><br></pre></td></tr></table></figure><h2 id="元数据分析"><a href="#元数据分析" class="headerlink" title="元数据分析"></a>元数据分析</h2><p>trace point 可以理解为 span</p><table><thead><tr><th>字段</th><th>格式</th><th>含义</th></tr></thead><tbody><tr><td>info</td><td><code>&lt;dict&gt;</code></td><td>在调用 profiler 的 <code>start()</code> 和 <code>stop()</code> 方法时传递的用户信息，数据库语句、请求参数等</td></tr><tr><td>name</td><td>`<point_name>-(start</td><td>stop)`</td></tr><tr><td>service</td><td><code>&lt;service_name&gt;</code></td><td>public / api / osapi_compute</td></tr><tr><td>timestamp</td><td><code>&lt;timestamp&gt;</code></td><td>时间戳</td></tr><tr><td>trace_id</td><td><code>&lt;uuid&gt;</code></td><td>当前追踪点id</td></tr><tr><td>project</td><td><code>&lt;project_name&gt;</code></td><td>服务组件</td></tr><tr><td>parent_id</td><td><code>&lt;uuid&gt;</code></td><td>父级追踪点id</td></tr><tr><td>base_id</td><td><code>&lt;uuid&gt;</code></td><td>所有属于一条追踪链的追踪点都拥有相同的id</td></tr></tbody></table><h1 id="OSProfiler-源码分析"><a href="#OSProfiler-源码分析" class="headerlink" title="OSProfiler 源码分析"></a>OSProfiler 源码分析</h1><p>用 git 拉取源码 <a href="https://github.com/openstack/osprofiler">openstack/osprofiler</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">├─devstack    <span class="comment"># DevStack 脚本，安装和配置 osprofiler</span></span><br><span class="line">├─doc         <span class="comment"># 文档</span></span><br><span class="line">├─osprofiler  <span class="comment"># 主要代码</span></span><br><span class="line">│  │  exc.py          <span class="comment"># cmd 错误类</span></span><br><span class="line">│  │  initializer.py  <span class="comment"># （读取配置文件）初始化</span></span><br><span class="line">│  │  notifier.py     <span class="comment"># 通知消息</span></span><br><span class="line">│  │  opts.py         <span class="comment"># 配置选项</span></span><br><span class="line">│  │  profiler.py     <span class="comment"># osprofiler 实例，函数/类装饰器，元数据类</span></span><br><span class="line">│  │  sqlalchemy.py   <span class="comment"># 追踪数据库调用</span></span><br><span class="line">│  │  web.py          <span class="comment"># 追踪 WSGI 调用</span></span><br><span class="line">│  │  _utils.py       <span class="comment"># 工具函数</span></span><br><span class="line">│  │  __init__.py</span><br><span class="line">│  ├─cmd      <span class="comment"># cmd 接口</span></span><br><span class="line">│  │      cliutils.py   <span class="comment"># 参数装饰、绑定</span></span><br><span class="line">│  │      commands.py   <span class="comment"># 显示和保存指定跟踪（html/json/dot），列出所有跟踪</span></span><br><span class="line">│  │      shell.py      <span class="comment"># 处理命令行</span></span><br><span class="line">│  │      template.html <span class="comment"># html 模板</span></span><br><span class="line">│  │      __init__.py</span><br><span class="line">│  ├─drivers  <span class="comment"># 驱动</span></span><br><span class="line">│  │      base.py   <span class="comment"># 基类</span></span><br><span class="line">│  │      elasticsearch_driver.py</span><br><span class="line">│  │      jaeger.py</span><br><span class="line">│  │      loginsight.py</span><br><span class="line">│  │      messaging.py</span><br><span class="line">│  │      mongodb.py</span><br><span class="line">│  │      redis_driver.py</span><br><span class="line">│  │      sqlalchemy_driver.py</span><br><span class="line">│  │      __init__.py</span><br><span class="line">│  ├─hacking  <span class="comment"># 针对 osprofiler 编写的测试</span></span><br><span class="line">│  └─tests    <span class="comment"># 测试</span></span><br><span class="line">├─playbooks     <span class="comment"># Ansible 剧本</span></span><br><span class="line">├─releasenotes  <span class="comment"># 发行说明</span></span><br><span class="line">└─tools         <span class="comment"># 代码风格检查，tox 虚拟环境</span></span><br></pre></td></tr></table></figure><p><strong>_utils.py（工具函数）</strong></p><ul><li>私有模块</li><li>公有函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">text, strip=<span class="literal">True</span></span>):</span>                    <span class="comment"># 分割逗号分隔的文本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_encode</span>(<span class="params">text, encoding=<span class="string">&quot;utf-8&quot;</span></span>):</span>      <span class="comment"># 将文本转换为二进制编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_decode</span>(<span class="params">data, encoding=<span class="string">&quot;utf-8&quot;</span></span>):</span>      <span class="comment"># 将二进制编码转换为文本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_hmac</span>(<span class="params">data, hmac_key</span>):</span>              <span class="comment"># 用 key 产生 HMAC</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signed_pack</span>(<span class="params">data, hmac_key</span>):</span>                <span class="comment"># 用 key 打包和签名数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signed_unpack</span>(<span class="params">data, hmac_data, hmac_keys</span>):</span>  <span class="comment"># 解包数据并验证签名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">itersubclasses</span>(<span class="params">cls, _seen=<span class="literal">None</span></span>):</span>            <span class="comment"># 判断是否为子类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_modules_from_package</span>(<span class="params">package</span>):</span>       <span class="comment"># 从包导入模块并加入系统模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shorten_id</span>(<span class="params">span_id</span>):</span>                        <span class="comment"># UUID 转换为 64 位 ID</span></span><br></pre></td></tr></table></figure><p><strong>notifier.py（通知消息）</strong></p><ul><li>默认使用基本的驱动程序</li><li>根据参数设置驱动</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_noop_notifier</span>(<span class="params">info, context=<span class="literal">None</span></span>):</span>         <span class="comment"># 使用基本的驱动程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notify</span>(<span class="params">info</span>):</span>                               <span class="comment"># 传递信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span>                                      <span class="comment"># 返回可调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">notifier</span>):</span>                              <span class="comment"># 设置可调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">connection_string, *args, **kwargs</span>):</span> <span class="comment"># 根据参数设置驱动</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_notifier_cache</span>():</span>                     <span class="comment"># 清除缓存</span></span><br></pre></td></tr></table></figure><p><strong>profiler.py（osprofiler 实例，函数/类装饰器，元数据类）</strong></p><ul><li>函数装饰器 </li><li>类装饰器</li><li>元数据类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span>():</span>                                            <span class="comment"># 清除全局 ThreadLocal 对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ensure_no_multiple_traced</span>(<span class="params">traceable_attrs</span>):</span>        <span class="comment"># 确保不重复跟踪</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>(<span class="params">hmac_key, base_id=<span class="literal">None</span>, parent_id=<span class="literal">None</span></span>):</span>       <span class="comment"># 初始化 osprofiler 线程实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span>                                              <span class="comment"># 获取 osprofiler 实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">name, info=<span class="literal">None</span></span>):</span>                             <span class="comment"># 启动 osprofiler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">info=<span class="literal">None</span></span>):</span>                                    <span class="comment"># 停止 osprofiler</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数追踪装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace</span>(<span class="params">name, info=<span class="literal">None</span>, hide_args=<span class="literal">False</span>, hide_result=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">          allow_multiple_trace=<span class="literal">True</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类追踪装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace_cls</span>(<span class="params">name, info=<span class="literal">None</span>, hide_args=<span class="literal">False</span>, hide_result=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              trace_private=<span class="literal">False</span>, allow_multiple_trace=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              trace_class_methods=<span class="literal">False</span>, trace_static_methods=<span class="literal">False</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TracedMeta</span>(<span class="params"><span class="built_in">type</span></span>):</span>                                 <span class="comment"># 元数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trace</span>(<span class="params"><span class="built_in">object</span></span>):</span>                                    <span class="comment"># 封装 osprofiler 线程实例，使用 with 语句调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Profiler</span>(<span class="params"><span class="built_in">object</span></span>):</span>                                <span class="comment"># 私有类（测试用）</span></span><br></pre></td></tr></table></figure><p><strong>sqlalchemy.py（追踪数据库调用）</strong></p><ul><li>监听调用（调用前、调用后、调用错误）</li><li>包装数据库会话连接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_tracing</span>(<span class="params">sqlalchemy, engine, name, hide_result=<span class="literal">True</span></span>):</span>    <span class="comment"># 追踪数据库调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包装会话</span></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap_session</span>(<span class="params">sqlalchemy, sess</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_before_cursor_execute</span>(<span class="params">name</span>):</span>                               <span class="comment"># 传递语句及参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_after_cursor_execute</span>(<span class="params">hide_result=<span class="literal">True</span></span>):</span>                    <span class="comment"># 传递执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_error</span>(<span class="params">exception_context</span>):</span>                            <span class="comment"># 传递错误信息</span></span><br></pre></td></tr></table></figure><p><strong>web.py（追踪 WSGI 调用）</strong></p><ul><li>签名和打包请求头</li><li>WSGI 中间件类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace_id_headers</span>():</span>     <span class="comment"># 签名请求头并添加到字典</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WsgiMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span>   <span class="comment"># WSGI 中间件类</span></span><br></pre></td></tr></table></figure><p><strong>initializer.py（读取配置文件初始化）</strong></p><ul><li>读取配置文件</li><li>设置通知驱动</li><li>启用中间件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务配置文件，请求上下文，项目名称，服务名称，主机名称/IP，通知参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_from_conf</span>(<span class="params">conf, context, project, service, host, **kwargs</span>):</span></span><br></pre></td></tr></table></figure><p><strong>opts.py（配置选项）</strong></p><ul><li>设置默认配置 </li><li>判断配置选项</li><li>列出配置选项</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认配置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_defaults</span>(<span class="params">conf, enabled=<span class="literal">None</span>, trace_sqlalchemy=<span class="literal">None</span>, hmac_keys=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 connection_string=<span class="literal">None</span>, es_doc_type=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 es_scroll_time=<span class="literal">None</span>, es_scroll_size=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 socket_timeout=<span class="literal">None</span>, sentinel_service_name=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_trace_enabled</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_db_trace_enabled</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enable_web_trace</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disable_web_trace</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_opts</span>():</span></span><br></pre></td></tr></table></figure><h1 id="Keystone-启用-OSProfiler"><a href="#Keystone-启用-OSProfiler" class="headerlink" title="Keystone 启用 OSProfiler"></a>Keystone 启用 OSProfiler</h1><ol><li>数据库会话包装</li><li>flask WSGI 中间件包装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">common/profiler.py    <span class="comment"># 读取配置文件，设置通知驱动，启用中间件</span></span><br><span class="line">common/sql/core.py    <span class="comment"># 包装数据库会话</span></span><br><span class="line">conf/__init__.py      <span class="comment"># 默认配置</span></span><br><span class="line">server/flask/core.py  <span class="comment"># 初始化，调用 common/profiler.py</span></span><br><span class="line">setup.cfg             <span class="comment"># 设置中间件 WsgiMiddleware</span></span><br></pre></td></tr></table></figure><p>common/sql/core.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 osprofiler 模块包装会话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_wrap_session</span>(<span class="params">sess</span>):</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line">        sess = osprofiler.sqlalchemy.wrap_session(sql, sess)</span><br><span class="line">    <span class="keyword">return</span> sess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_read</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        reader = enginefacade.reader</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        reader = _get_main_context_manager().reader</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(reader.using(_get_context()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_write</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        writer = enginefacade.writer</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        writer = _get_main_context_manager().writer</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(writer.using(_get_context()))</span><br></pre></td></tr></table></figure><p>setup.cfg 设置 server 中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keystone.server_middleware &#x3D;</span><br><span class="line">    cors &#x3D; oslo_middleware:CORS</span><br><span class="line">    sizelimit &#x3D; oslo_middleware:RequestBodySizeLimiter</span><br><span class="line">    http_proxy_to_wsgi &#x3D; oslo_middleware:HTTPProxyToWSGI</span><br><span class="line">    osprofiler &#x3D; osprofiler.web:WsgiMiddleware          &lt;--- 使用 osprofiler 的 WSGI 中间件</span><br><span class="line">    request_id &#x3D; oslo_middleware:RequestId</span><br><span class="line">    debug &#x3D; oslo_middleware:Debug</span><br></pre></td></tr></table></figure><h1 id="Nova-启用-OSProfiler"><a href="#Nova-启用-OSProfiler" class="headerlink" title="Nova 启用 OSProfiler"></a>Nova 启用 OSProfiler</h1><ol><li>追踪数据库调用</li><li>类追踪装饰器 @profiler.trace_cls</li><li>公有方法装饰器</li></ol><ul><li>组件之间 REST API 并遵循 AMQP 协议</li><li>组件内部 RPC</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config.py             <span class="comment"># 根据配置文件设置 osprofiler</span></span><br><span class="line">service.py            <span class="comment"># 根据配置文件设置驱动，启用 WSGI 中间件</span></span><br><span class="line">profiler.py           <span class="comment"># 重写 WSGI 中间件类、类追踪装饰器x</span></span><br><span class="line">manager.py            <span class="comment"># 公有方法装饰器（抽象基类）</span></span><br><span class="line">rpc.py                <span class="comment"># 追踪上下文序列化/反序列化</span></span><br><span class="line">utils.py              <span class="comment"># spawn/spawn_n 装饰器，传递上下文</span></span><br><span class="line">db/sqlalchemy/api.py  <span class="comment"># 追踪数据库调用</span></span><br></pre></td></tr></table></figure><p>db/sqlalchemy/api.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追踪数据库调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">conf</span>):</span></span><br><span class="line">    main_context_manager.configure(**_get_db_conf(conf.database))</span><br><span class="line">    api_context_manager.configure(**_get_db_conf(conf.api_database))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> profiler_sqlalchemy <span class="keyword">and</span> CONF.profiler.enabled \</span><br><span class="line">            <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line"></span><br><span class="line">        main_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br><span class="line">        api_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br></pre></td></tr></table></figure><p>使用 osprofiler 类装饰器（compute/api.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@profiler.trace_cls(<span class="params"><span class="string">&quot;compute_api&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">API</span>(<span class="params">base.Base</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;API for interacting with the compute manager.&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>公有方法装饰器（抽象类），nova 组件内部的模块都继承 <code>Manager</code> 类，支持追踪</p><ul><li><code>ComputeManager</code>、<code>ConductorManager</code>、<code>SchedulerManager</code></li></ul><img src="https://i.loli.net/2021/06/06/RDOdQhbYyL1oPvm.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 公有方法装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerMeta</span>(<span class="params">profiler.get_traced_meta(<span class="params"></span>), <span class="built_in">type</span>(<span class="params">PeriodicTasks</span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Metaclass to trace all children of a specific class.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This metaclass wraps every public method (not starting with _ or __)</span></span><br><span class="line"><span class="string">    of the class using it. All children classes of the class using ManagerMeta</span></span><br><span class="line"><span class="string">    will be profiled as well.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Adding this metaclass requires that the __trace_args__ attribute be added</span></span><br><span class="line"><span class="string">    to the class we want to modify. That attribute is a dictionary</span></span><br><span class="line"><span class="string">    with one mandatory key: &quot;name&quot;. &quot;name&quot; defines the name</span></span><br><span class="line"><span class="string">    of the action to be traced (for example, wsgi, rpc, db).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The OSprofiler-based tracing, although, will only happen if profiler</span></span><br><span class="line"><span class="string">    instance was initiated somewhere before in the thread, that can only happen</span></span><br><span class="line"><span class="string">    if profiling is enabled in nova.conf and the API call to Nova API contained</span></span><br><span class="line"><span class="string">    specific headers.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>(<span class="params">base.Base, PeriodicTasks, metaclass=ManagerMeta</span>):</span></span><br><span class="line">    __trace_args__ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;rpc&quot;</span>&#125;    <span class="comment"># 必须</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>线程间传递上下文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追踪请求上下文</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilerRequestContextSerializer</span>(<span class="params">RequestContextSerializer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        _context = <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                         self).serialize_context(context)</span><br><span class="line"></span><br><span class="line">        prof = profiler.get()       <span class="comment"># 获取 osprofiler 实例</span></span><br><span class="line">        <span class="keyword">if</span> prof:</span><br><span class="line">            <span class="comment"># FIXME(DinaBelova): we&#x27;ll add profiler.get_info() method</span></span><br><span class="line">            <span class="comment"># to extract this info -&gt; we&#x27;ll need to update these lines</span></span><br><span class="line">            trace_info = &#123;</span><br><span class="line">                <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">                <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">                <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">            &#125;</span><br><span class="line">            _context.update(&#123;<span class="string">&quot;trace_info&quot;</span>: trace_info&#125;) <span class="comment"># 添加追踪信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        trace_info = context.pop(<span class="string">&quot;trace_info&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_info:</span><br><span class="line">            profiler.init(**trace_info)     <span class="comment"># 初始化 osprofiler 实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                     self).deserialize_context(context)</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://learnku.com/articles/31681">使用 OSProfiler 对 OpenStack 进行性能测量</a></li><li><a href="https://docs.openstack.org/zaqar/latest/admin/OSprofiler.html">OSprofiler Guide</a></li><li><a href="https://docs.openstack.org/ironic/pike/contributor/osprofiler-support.html">About OSProfiler</a></li><li><a href="https://github.com/openstack/osprofiler">openstack/osprofiler</a></li><li><a href="https://openstack.nimeyo.com/117882/openstack-dev-tracing-all-the-places">[openstack-dev] Tracing (all the places)</a></li></ul>]]></content>
    
    
    <summary type="html">结合 Keystone、Glance（Rockey）等组件测试</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack Nova 架构及源码分析</title>
    <link href="https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/"/>
    <id>https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/</id>
    <published>2021-05-23T08:40:09.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><ul><li>nova 和其他组件之间的交互使用 HTTP 请求</li><li>内部组件之间使用 <a href="https://github.com/openstack/oslo.messaging">oslo_messaging</a> 库实现 RPC 调用，这里还涉及消息队列 RabbitMQ ，遵循 AMQP 协议</li><li>大部分 nova 组件都可以运行在多个服务器上，然后使用一个管理器监听 RPC 消息</li><li>而 nova-compute 是运行在计算主机上的单进程，用于管理计算资源</li><li>nova 内部组件共享本地数据库，通过对象层访问，确保兼容性和安全性<ul><li>nova-compute 访问数据库由 nova-conductor 代理</li></ul></li></ul><img src="https://i.loli.net/2021/06/06/K51XMdUyPrRmupT.png"><p>当用户发起一个新的请求时，该请求会先在 nova-api 中处理。nova-api 会对请求进行一系列检查，包括请求是否合法，配额是否足够等；当检查用过后，nova-api 就会为该请求分配一个唯一的虚拟机 ID ，并在数据库中新建对应的项来记录虚拟机的状态；然后，nova-api 会将请求发送给 nova-conductor 处理。</p><p>nova-conductor 主要管理服务之间的通信并进行任务处理。它在接收到请求之后，会为 nova-scheduler 创建一个 RequestSpec 对象用来包装与调度相关的所有请求信息，然后调用 nova-scheduler 服务的 select_destination 接口。</p><p>nova-scheduler 通过接收到的 RequestSpec 对象，首先将 RequestSpec  对象转换成 ResourceRequest 对象，并将该对象发送给 Placement 进行一次预筛选，然后会根据数据库中最新的系统状态做出调度决定，并告诉 nova-conductor 把该请求调度到合适的计算节点上。</p><p>nova-conductor 在得知调度决定后，会把请求发送给对应的 nova-compute 服务。</p><p>每个 nova-compute 服务都有独立的资源监视器（Resource Tracker）用来监视本地主机的资源使用情况。当计算节点接收到请求时，资源监视器能够检查主机是否有足够的资源。</p><ul><li>如果对应的资源足够，nova-compute 就会允许在当前主机中启动所要求的虚拟机，并在数据库中更新虚拟机状态，同时将最新的主机资源情况更新到数据库</li><li>如果当前主机不符合请求的资源要求，nova-compute 会拒绝启动虚拟机，并将请求重新发给 nova-conductor 服务，重试整个调度过程</li></ul><img src="https://i.loli.net/2021/06/06/DizGwcpYRQhWKqS.jpg"><h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><ol><li><p>nova-api</p><p>接受和响应用户的计算 API 调用</p></li><li><p>nova-api-metadata</p><p> 接受来自实例的元数据请求</p><p> <a href="https://docs.openstack.org/nova/latest/admin/metadata-service.html">Metadata service</a></p></li><li><p>nova-compute</p><p> 通过 hypervisor API 创建和终止虚拟机实例的守护进程。例如 KVM/QEMU 的 libvirt、VMware 的 VMwareAPI 。</p><p> 运行在它所管理的 hypervisor 机器上，管理与虚拟机管理程序和虚拟机的通信。</p></li><li><p>nova-scheduler</p><p> 从消息队列中获取虚拟机实例请求，并决定在哪个服务器上运行。</p></li><li><p>nova-conductor</p><p> 处理需要协调的请求（构建/调整）、充当数据库代理或处理对象转换。用于连接 nova-api、nova-scheduler、nova-compute 服务。</p></li><li><p>nova-novncproxy</p><p> 协调 nova-compute 服务和数据库之间的交互。避免 nova-compute 直接访问数据库，为了提供更好的 API 兼容性。建议不要部署在 nova-compute 服务所在的节点上。</p></li><li><p>nova-spicehtml5proxy</p><p> 提供通过 SPICE 连接访问运行实例的代理，支持基于浏览器的 HTML5 客户端。</p></li><li><p>The queue</p><p> 在守护进程之间传递消息的中央消息队列，通常使用 RabbitMQ 。</p></li><li><p>SQL database</p><p> 存储云基础设施的大多数构建时和运行时状态，包括：可用的实例类型、在使用的实例、可用的网络、项目。</p></li></ol><h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>消息代理（RabbitMQ AMQP broker）允许 nova 内部组件以低耦合的方式进行通信，建立在发布/订阅（publish/subscribe）模式上</p><ul><li>解耦客户端和服务端</li><li>同步客户端和服务端</li><li>平衡远程调用</li></ul><p>nova 使用 AMQP 中的直连（direct）、扇型（fanout）、主题（topic）交换；</p><p>nova 使用适配器类（adapter）将消息封装和解封从而调用函数，实现了两种 RPC 调用</p><ul><li><code>rpc.call</code>：请求 + 响应，api 作为消费者（consumer）</li><li><code>rpc.cast</code>：单向，api 作为发布者（publisher）</li></ul><p>每个 nova 服务在初始化时创建两个队列</p><ul><li>接受路由键 <code>NODE-TYPE.NODE-ID</code>（例如，<code>compute.hostname</code>）：nova-api 需要重定向到特定节点</li><li>接受路由键 <code>NODE-TYPE</code>（例如，<code>compute</code>）：</li></ul><img src="https://i.loli.net/2021/06/06/ZvNb61tfPTlF9or.png"><p>每个 nova 内部组件都连接到消息代理，根据不同的作用，把消息队列作为：</p><ul><li>调用者（Invoker）：nova-api、nova-scheduler；通过 <code>rpc.call</code> 和 <code>rpc.cast</code> 向消息队列发送消息</li><li>工作者（Worker）：nova-compute；从消息队列接收消息，根据 <code>rpc.call</code> 进行响应</li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p><strong>主题发布者（Topic Publisher）</strong></p><p>执行 <code>rpc.call</code> 或 <code>rpc.cast</code> 操作将实例化一个主题发布者，用于将消息发送到消息队列。每个发布者总是连接到相同的主题交换机（topic-based exchange）；生命周期仅限于消息传递。</p><p><strong>直连消费者（Direct Consumer）</strong></p><p>执行 <code>rpc.call</code> 操作将实例化一个直连消费者，用于从消息队列接收响应消息。每个消费者连接到唯一的直连交换机（direct-based exchange）；生命周期仅限于消息传递。</p><p><strong>主题消费者（Topic Consumer）</strong></p><p>当工作者被实例化后将实例化一个主题消费者，并存在于工作者的整个生命周期；主题消费者用于从消息队列接收消息，并调用工作者定义的操作。主题消费者通过共享/排他队列（shared/exclusive queue）连接到相同的主体交换机。每个工作者都有两个主题消费者，一个处理 <code>rpc.cast</code>  ，连接到交换键是 <code>topic</code> 的共享队列；另一个处理 <code>rpc.call</code> ，连接到交换键是 <code>topic.host</code> 的独立队列。</p><p><strong>直连发布者（Direct Publisher）</strong></p><p>执行 <code>rpc.call</code> 操作将实例化一个直连发布者，用于返回请求/响应操作所需的消息，连接到直连交换机。</p><p><strong>主题交换机（Topic Exchange）</strong></p><p>存在于虚拟机上下文中的路由表；类型（主题/直连）决定了路由策略；对于 nova 中的每个主题，消息代理节点只有一个主题交换机。</p><p><strong>直连交换机（Direct Exchange）</strong></p><p>在 <code>rpc.call</code> 操作中创建的路由表，消息代理节点的生命周期中有许多该实例，对应每个 <code>rpc.call</code> 调用。</p><p><strong>队列元素（Queue Element）</strong></p><p>消息桶，消息一直保存在队列中，直到消费者（主题/直连）连接到队列获取消息。队列可以是共享的也可以是独立的；路由键是 <code>topic</code> 的队列在相同类型的工作者中共享。</p><h2 id="rpc-call"><a href="#rpc-call" class="headerlink" title="rpc.call"></a>rpc.call</h2><ol><li><p>实例化主题发布者，将请求发送到消息队列；在发布操作之前，实例化直连消费者等待响应信息</p></li><li><p>一旦消息被交换器分派（dispatch），它就会被路由键（例如，<code>topic.host</code>）指定的主题消费者获取，并传递给负责该任务的工作者</p></li><li><p>任务完成后，将分配一个直连发布者将响应消息发送到消息队列</p></li><li><p>一旦消息被交换器分派，它就会被路由键（例如，<code>msg_id</code>）指定的直连消费者获取，并传递给调用者</p></li></ol><img src="https://i.loli.net/2021/06/06/ApK1vCySXhQE3mW.png"><h2 id="rpc-cast"><a href="#rpc-cast" class="headerlink" title="rpc.cast"></a>rpc.cast</h2><ol><li><p> 实例化主题发布者，将请求发送到消息队列</p></li><li><p> 一旦消息被交换器分派（dispatch），它就会被路由键（例如，<code>topic</code>）指定的主题消费者获取，并传递给负责该任务的工作者</p></li></ol><img src="https://i.loli.net/2021/06/06/3nUaoMlKdHg9BQv.png"><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>从 github 下载 Victoria 版本的 Nova 源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>nova/ 文件夹下的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">accelerator/    <span class="comment"># Cyborg 加速器</span></span><br><span class="line">api/            <span class="comment"># Nova API 服务</span></span><br><span class="line">cmd/            <span class="comment"># 各个 Nova 服务的入口程序</span></span><br><span class="line">compute/        <span class="comment"># Nova Compute 服务</span></span><br><span class="line">conductor/      <span class="comment"># Nova Conductor 服务</span></span><br><span class="line">conf/           <span class="comment"># 所有的配置选项</span></span><br><span class="line">console/        <span class="comment"># nova-console 服务</span></span><br><span class="line">db/             <span class="comment"># 封装数据库操作</span></span><br><span class="line">hacking/        <span class="comment"># 编码规范检查</span></span><br><span class="line">image/          <span class="comment"># 封装镜像操作，Glance 接口抽象</span></span><br><span class="line">keymgr/         <span class="comment"># 密钥管理器实现</span></span><br><span class="line">locale/         <span class="comment"># 国际化相关文件</span></span><br><span class="line">network/        <span class="comment"># nova-network 服务</span></span><br><span class="line">notifications/  <span class="comment"># 通知相关功能</span></span><br><span class="line">objects/        <span class="comment"># 封装实体对象的 CURD 操作</span></span><br><span class="line">pci/            <span class="comment"># PCI/SR-IOV 支持</span></span><br><span class="line">policies/       <span class="comment"># 所有 Policy 的默认规则</span></span><br><span class="line">privsep/        <span class="comment"># oslo_privsep 相关</span></span><br><span class="line">scheduler/      <span class="comment"># Nova Scheduler 服务</span></span><br><span class="line">servicegroup/   <span class="comment"># 成员服务（membership），服务组</span></span><br><span class="line">storage/        <span class="comment"># Ceph 存储支持</span></span><br><span class="line">tests/          <span class="comment"># 单元测试</span></span><br><span class="line">virt/           <span class="comment"># 支持的 hypervisor 驱动</span></span><br><span class="line">volume/         <span class="comment"># 封装卷访问接口，Cinder 接口抽象</span></span><br></pre></td></tr></table></figure><p>nova/ 文件夹下的 python 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__init__.py</span><br><span class="line">availability_zones.py   <span class="comment"># 区域设置的工具函数</span></span><br><span class="line">baserpc.py              <span class="comment"># 基础 RPC 客户端/服务端实现</span></span><br><span class="line">block_device.py         <span class="comment"># 块设备映射</span></span><br><span class="line">cache_utils.py          <span class="comment"># oslo_cache 封装</span></span><br><span class="line">config.py               <span class="comment"># 解析命令行参数</span></span><br><span class="line">context.py              <span class="comment"># 贯穿 Nova 的所有请求的上下文</span></span><br><span class="line">crypto.py               <span class="comment"># 包装标准加密数据元素</span></span><br><span class="line">debugger.py             <span class="comment"># pydev 调试</span></span><br><span class="line">exception.py            <span class="comment"># 基础异常类</span></span><br><span class="line">exception_wrapper.py    <span class="comment"># 封装异常类</span></span><br><span class="line">filters.py              <span class="comment"># 基础过滤器</span></span><br><span class="line">i18n.py                 <span class="comment"># 集成 oslo_i18n</span></span><br><span class="line">loadables.py            <span class="comment"># 可加载类</span></span><br><span class="line">manager.py              <span class="comment"># 基础 Manager 类</span></span><br><span class="line">middleware.py           <span class="comment"># 更新 oslo_middleware 的默认配置选项</span></span><br><span class="line">monkey_patch.py         <span class="comment"># eventlet 猴子补丁</span></span><br><span class="line">policy.py               <span class="comment"># 策略引擎</span></span><br><span class="line">profiler.py             <span class="comment"># 调用 OSProfiler</span></span><br><span class="line">quota.py                <span class="comment"># 每个项目的资源配额</span></span><br><span class="line">rpc.py                  <span class="comment"># RPC 操作相关的工具函数</span></span><br><span class="line">safe_utils.py           <span class="comment"># 不会导致循环导入的工具函数</span></span><br><span class="line">service.py              <span class="comment"># 通用节点基类，用于在主机上运行的所有工作者</span></span><br><span class="line">service_auth.py         <span class="comment"># 身份认证插件</span></span><br><span class="line">test.py                 <span class="comment"># 单元测试基础类</span></span><br><span class="line">utils.py                <span class="comment"># 工具函数</span></span><br><span class="line">version.py              <span class="comment"># 版本号管理</span></span><br><span class="line">weights.py              <span class="comment"># 权重插件</span></span><br><span class="line">wsgi.py                 <span class="comment"># 管理 WSGI 应用的服务器类</span></span><br></pre></td></tr></table></figure><p>setup.cfg 配置文件，<code>[entry_points]</code> 小节指定了 nova 各个组件入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">console_scripts &#x3D;</span><br><span class="line">    nova-api &#x3D; nova.cmd.api:main</span><br><span class="line">    nova-api-metadata &#x3D; nova.cmd.api_metadata:main</span><br><span class="line">    nova-api-os-compute &#x3D; nova.cmd.api_os_compute:main</span><br><span class="line">    nova-compute &#x3D; nova.cmd.compute:main</span><br><span class="line">    nova-conductor &#x3D; nova.cmd.conductor:main</span><br><span class="line">    nova-manage &#x3D; nova.cmd.manage:main</span><br><span class="line">    nova-novncproxy &#x3D; nova.cmd.novncproxy:main</span><br><span class="line">    nova-policy &#x3D; nova.cmd.policy:main</span><br><span class="line">    nova-rootwrap &#x3D; oslo_rootwrap.cmd:main</span><br><span class="line">    nova-rootwrap-daemon &#x3D; oslo_rootwrap.cmd:daemon</span><br><span class="line">    nova-scheduler &#x3D; nova.cmd.scheduler:main</span><br><span class="line">    nova-serialproxy &#x3D; nova.cmd.serialproxy:main</span><br><span class="line">    nova-spicehtml5proxy &#x3D; nova.cmd.spicehtml5proxy:main</span><br><span class="line">    nova-status &#x3D; nova.cmd.status:main</span><br><span class="line">wsgi_scripts &#x3D;</span><br><span class="line">    nova-api-wsgi &#x3D; nova.api.openstack.compute.wsgi:init_application</span><br><span class="line">    nova-metadata-wsgi &#x3D; nova.api.metadata.wsgi:init_application</span><br></pre></td></tr></table></figure><h2 id="nova-api"><a href="#nova-api" class="headerlink" title="nova-api"></a>nova-api</h2><p>nova-api 对外提供 RESTful API，没有对内的 RPC 。</p><p>nova/api/ 目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__init__.py</span><br><span class="line">auth.py             <span class="comment"># 身份认证中间件</span></span><br><span class="line">compute_req_id.py   <span class="comment"># x-compute-request-id 中间件（oslo_middleware）</span></span><br><span class="line">metadata/           <span class="comment"># Metadata API</span></span><br><span class="line">openstack/          <span class="comment"># Nova v2.1 API</span></span><br><span class="line">validation/         <span class="comment"># 请求体验证</span></span><br><span class="line">wsgi.py             <span class="comment"># WSGI 原语（请求、应用、中间件、路由、加载器）</span></span><br></pre></td></tr></table></figure><p>openstack 目录中包含 WSGI 基础架构的代码，一些 WSGI 中间件，以及如何解析请求与分发请求的核心代码。</p><p>nova/api/openstack/compute/ 包含 Controller 实现，Resource 对象将 API 映射到相应的 Controller 方法上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__init__.py</span><br><span class="line">api_version_request.py  <span class="comment"># 版本验证</span></span><br><span class="line">auth.py                 <span class="comment"># noauth 中间件</span></span><br><span class="line">common.py               <span class="comment"># 信息查询的工具函数</span></span><br><span class="line">compute/                <span class="comment"># 每个 API 的入口点</span></span><br><span class="line">identity.py             <span class="comment"># 验证项目是否存在</span></span><br><span class="line">requestlog.py           <span class="comment"># 请求日志中间件</span></span><br><span class="line">urlmap.py               <span class="comment"># url 映射</span></span><br><span class="line">versioned_method.py     <span class="comment"># 版本信息</span></span><br><span class="line">wsgi.py                 <span class="comment"># WSGI 相关抽象类</span></span><br><span class="line">wsgi_app.py             <span class="comment"># WSGI 应用程序初始化方法</span></span><br></pre></td></tr></table></figure><h3 id="API-请求路由"><a href="#API-请求路由" class="headerlink" title="API 请求路由"></a>API 请求路由</h3><p>nova-api 读取 etc/nova/api-paste.ini 并加载 WSGI 程序，最终 API 入口点都位于 nova.api.openstack.compute 中</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:osapi_compute]</span></span><br><span class="line"><span class="attr">use</span> = call:nova.api.openstack.urlmap:urlmap_factory</span><br><span class="line">/: oscomputeversions                # version API</span><br><span class="line">/v2: oscomputeversion_legacy_v2     # v2 API</span><br><span class="line">/v2.1: oscomputeversion_v2          # v2.1 API</span><br><span class="line"><span class="comment"># v21 is an exactly feature match for v2, except it has more stringent</span></span><br><span class="line"><span class="comment"># input validation on the wsgi surface (prevents fuzzing early on the</span></span><br><span class="line"><span class="comment"># API). It also provides new features via API microversions which are</span></span><br><span class="line"><span class="comment"># opt into for clients. Unaware clients will receive the same frozen</span></span><br><span class="line"><span class="comment"># v2 API feature set, but with some relaxed validation</span></span><br><span class="line">/v2/+: openstack_compute_api_v21_legacy_v2_compatible</span><br><span class="line">/v2.1/+: openstack_compute_api_v21</span><br><span class="line"></span><br><span class="line"><span class="section">[composite:openstack_compute_api_v21]</span></span><br><span class="line"><span class="attr">use</span> = call:nova.api.auth:pipeline_factory_v21       <span class="comment"># 加载中间件</span></span><br><span class="line"><span class="attr">keystone</span> = cors http_proxy_to_wsgi compute_req_id faultwrap request_log sizelimit osprofiler bees_profiler authtoken keystonecontext osapi_compute_app_v21</span><br><span class="line"><span class="comment"># DEPRECATED: The [api]auth_strategy conf option is deprecated and will be</span></span><br><span class="line"><span class="comment"># removed in a subsequent release, whereupon this pipeline will be unreachable.</span></span><br><span class="line"><span class="attr">noauth2</span> = cors http_proxy_to_wsgi compute_req_id faultwrap request_log sizelimit osprofiler bees_profiler noauth2 osapi_compute_app_v21</span><br><span class="line"></span><br><span class="line"><span class="section">[app:osapi_compute_app_v21]</span></span><br><span class="line"><span class="attr">paste.app_factory</span> = nova.api.openstack.compute:APIRouterV21.factory  <span class="comment"># 入口</span></span><br></pre></td></tr></table></figure><p>nova/api/openstack/compute/routes.py 中的 APIRouterV21 主要用来完成路由规则的创建，其中 ROUTE_LIST 保存了 URL 与 Controller 之间的映射关系。</p><p>APIRouterV21 基于 ROUTE_LIST，使用 Routes 模块作为 URL 映射的工具，将各个模块所实现的 API 对应的 URL 注册到 mapper 中，并把每个资源都封装成 nova.api.openstack.wsgi.Resource 对象，当解析 URL 请求时，可以通过 URL 映射找到 API 对应的 Resource 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Router 类对 WSGI routes 模块进行了简单的封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIRouterV21</span>(<span class="params">base_wsgi.Router</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Routes requests on the OpenStack API to the appropriate controller</span></span><br><span class="line"><span class="string">    and method. The URL mapping based on the plain list `ROUTE_LIST` is built</span></span><br><span class="line"><span class="string">    at here.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, custom_routes=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;:param custom_routes: the additional routes can be added by this</span></span><br><span class="line"><span class="string">               parameter. This parameter is used to test on some fake routes</span></span><br><span class="line"><span class="string">               primarily.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(APIRouterV21, self).__init__(nova.api.openstack.ProjectMapper())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> custom_routes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            custom_routes = <span class="built_in">tuple</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> path, methods <span class="keyword">in</span> ROUTE_LIST + custom_routes:</span><br><span class="line">            <span class="comment"># NOTE(alex_xu): The variable &#x27;methods&#x27; is a dict in normal, since</span></span><br><span class="line">            <span class="comment"># the dict includes all the methods supported in the path. But</span></span><br><span class="line">            <span class="comment"># if the variable &#x27;method&#x27; is a string, it means a redirection.</span></span><br><span class="line">            <span class="comment"># For example, the request to the &#x27;&#x27; will be redirect to the &#x27;/&#x27; in</span></span><br><span class="line">            <span class="comment"># the Nova API. To indicate that, using the target path instead of</span></span><br><span class="line">            <span class="comment"># a dict. The route entry just writes as &quot;(&#x27;&#x27;, &#x27;/)&quot;.</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(methods, six.string_types):</span><br><span class="line">                self.<span class="built_in">map</span>.redirect(path, methods)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> method, controller_info <span class="keyword">in</span> methods.items():</span><br><span class="line">                <span class="comment"># TODO(alex_xu): In the end, I want to create single controller</span></span><br><span class="line">                <span class="comment"># instance instead of create controller instance for each</span></span><br><span class="line">                <span class="comment"># route.</span></span><br><span class="line">                controller = controller_info[<span class="number">0</span>]()</span><br><span class="line">                action = controller_info[<span class="number">1</span>]</span><br><span class="line">                self.<span class="built_in">map</span>.create_route(path, method, controller, action)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span>(<span class="params">cls, global_config, **local_config</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Simple paste factory, :class:`nova.wsgi.Router` doesn&#x27;t have one.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cls()</span><br></pre></td></tr></table></figure><p>nova/api/wsgi.py 解析 URL 映射，通过 _dispatch 回调，调用 Resource 对象的 __call__ 方法，最终通过请求调用 API 对应的模块中的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;WSGI middleware that maps incoming requests to WSGI apps.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, mapper</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Create a router for the given routes.Mapper.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Each route in `mapper` must specify a &#x27;controller&#x27;, which is a</span></span><br><span class="line"><span class="string">        WSGI app to call.  You&#x27;ll probably want to specify an &#x27;action&#x27; as</span></span><br><span class="line"><span class="string">        well and have your controller be an object that can route</span></span><br><span class="line"><span class="string">        the request to the action-specific method.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Examples:</span></span><br><span class="line"><span class="string">          mapper = routes.Mapper()</span></span><br><span class="line"><span class="string">          sc = ServerController()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          # Explicit mapping of one route to a controller+action</span></span><br><span class="line"><span class="string">          mapper.connect(None, &#x27;/svrlist&#x27;, controller=sc, action=&#x27;list&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          # Actions are all implicitly defined</span></span><br><span class="line"><span class="string">          mapper.resource(&#x27;server&#x27;, &#x27;servers&#x27;, controller=sc)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          # Pointing to an arbitrary WSGI app.  You can specify the</span></span><br><span class="line"><span class="string">          # &#123;path_info:.*&#125; parameter so the target app can be handed just that</span></span><br><span class="line"><span class="string">          # section of the URL.</span></span><br><span class="line"><span class="string">          mapper.connect(None, &#x27;/v1.0/&#123;path_info:.*&#125;&#x27;, controller=BlogApp())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.<span class="built_in">map</span> = mapper</span><br><span class="line">        <span class="comment"># 使用 routes 模块关联 mapper 和 _dispatch</span></span><br><span class="line">        <span class="comment"># routes.middleware.RoutesMiddleware 设置 environ 信息</span></span><br><span class="line">        self._router = routes.middleware.RoutesMiddleware(self._dispatch,</span><br><span class="line">                                                          self.<span class="built_in">map</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @webob.dec.wsgify(<span class="params">RequestClass=Request</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, req</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Route the incoming request to a controller based on self.map.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If no match, return a 404.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 根据 mapper 将请求路由到 WSGI 应用（资源）</span></span><br><span class="line">        <span class="comment"># 每个资源会在 __call__ 方法中根据 HTTP 请求的 URL 路由到对应 Controller 上的方法（Action）</span></span><br><span class="line">        <span class="keyword">return</span> self._router</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line"><span class="meta">    @webob.dec.wsgify(<span class="params">RequestClass=Request</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_dispatch</span>(<span class="params">req</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Dispatch the request to the appropriate controller.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Called by self._router after matching the incoming request to a route</span></span><br><span class="line"><span class="string">        and putting the information into req.environ.  Either returns 404</span></span><br><span class="line"><span class="string">        or the routed WSGI app&#x27;s response.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 根据 HTTP 请求的 environ 信息找到 URL 对应的 Controller</span></span><br><span class="line">        match = req.environ[<span class="string">&#x27;wsgiorg.routing_args&#x27;</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match:</span><br><span class="line">            <span class="keyword">return</span> webob.exc.HTTPNotFound()</span><br><span class="line">        app = match[<span class="string">&#x27;controller&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><h3 id="API-实现"><a href="#API-实现" class="headerlink" title="API 实现"></a>API 实现</h3><p>nova/api/openstack/compute/ 目录包含每个 API 对应的 Controller 实现，Resource 对象将请求的 API 映射到相应的 Controller 方法上。</p><p>以 keypairs.py （密钥对管理扩展）为例，公共方法包含 create、delete、show、index，多个实现对应不同的 Microversion（使用 <code>@wsgi.Controller.api_version</code> 装饰器）</p><ul><li><code>@wsgi.expected_errors</code>：API 允许的错误返回码</li><li><code>@validation.query_schema</code>：请求对应的 json schema</li><li><code>@wsgi.response</code>：API 请求正常返回码</li><li><code>@wsgi.action</code>：注册 action</li></ul><p>Microversion 用于实现兼容性。</p><p>nova/api/openstack/compute/schemas 包含允许的 json schema，表示接受的键值对及其类型。</p><p>通过方法接口可以得到 webob.Request 对象，从 Request 对象中可以获取其他请求参数，用于执行对应的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeypairController</span>(<span class="params">wsgi.Controller</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Keypair API controller for the OpenStack API.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    _view_builder_class = keypairs_view.ViewBuilder</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(KeypairController, self).__init__()</span><br><span class="line">        self.api = compute_api.KeypairAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wsgi.Controller.api_version(<span class="params"><span class="string">&quot;2.10&quot;</span></span>)</span></span><br><span class="line"><span class="meta">    @wsgi.response(<span class="params"><span class="number">201</span></span>)</span></span><br><span class="line"><span class="meta">    @wsgi.expected_errors(<span class="params">(<span class="params"><span class="number">400</span>, <span class="number">403</span>, <span class="number">409</span></span>)</span>)</span></span><br><span class="line"><span class="meta">    @validation.schema(<span class="params">keypairs.create_v210</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, req, body</span>):</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wsgi.Controller.api_version(<span class="params"><span class="string">&quot;2.2&quot;</span>, <span class="string">&quot;2.9&quot;</span></span>)  </span><span class="comment"># noqa</span></span><br><span class="line"><span class="meta">    @wsgi.response(<span class="params"><span class="number">201</span></span>)</span></span><br><span class="line"><span class="meta">    @wsgi.expected_errors(<span class="params">(<span class="params"><span class="number">400</span>, <span class="number">403</span>, <span class="number">409</span></span>)</span>)</span></span><br><span class="line"><span class="meta">    @validation.schema(<span class="params">keypairs.create_v22</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, req, body</span>):</span>  <span class="comment"># noqa</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h2 id="nova-conductor"><a href="#nova-conductor" class="headerlink" title="nova-conductor"></a>nova-conductor</h2><p>使用 RPC 的子组件通常包含以下文件：</p><ul><li>api.py 对 RPC 接口进行封装，类似提供 SDK</li><li>rpcapi.py 暴露给其他内部组件的 RPC 接口，RPC 客户端</li><li>manager.py 处理 RPC API 调用</li></ul><p>nova-compute 访问数据库的操作都要由 nova-conductor 代理，用 nova/conductor/manager.py 的 ConductorManager 类完成，出于安全性考虑，nova-conductor 和 nova-compute 不能部署在同一服务器上。</p><p>nova/objects 定义了 nova object，封装数据库 CURD 操作，每个类对应数据库中的一张表。</p><h2 id="nova-scheduler"><a href="#nova-scheduler" class="headerlink" title="nova-scheduler"></a>nova-scheduler</h2><p>nova-scheduler 执行调度决策，nova-compute 收集并更新主机数据，实时写入数据库（周期任务）。</p><p>nova/scheduler/filters 包含所有的过滤器实现，用于过滤不符合条件的主机；nova/scheduler/weights 包含所有的权重实现，用于计算权重并排序。</p><h1 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h1><p><strong>nova-api</strong> 启动入口 <code>nova.cmd.api:main</code></p><ul><li><a href="https://docs.openstack.org/nova/queens/reference/gmr.html">Guru Meditation Reports</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    config.parse_args(sys.argv) <span class="comment"># 解析参数</span></span><br><span class="line">    logging.setup(CONF, <span class="string">&quot;nova&quot;</span>) <span class="comment"># 设置日志</span></span><br><span class="line">    objects.register_all()      <span class="comment"># 注册 nova object</span></span><br><span class="line">    gmr_opts.set_defaults(CONF) <span class="comment"># 设置 oslo_reports</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;osapi_compute&#x27;</span> <span class="keyword">in</span> CONF.enabled_apis:</span><br><span class="line">        <span class="comment"># NOTE(mriedem): This is needed for caching the nova-compute service</span></span><br><span class="line">        <span class="comment"># version.</span></span><br><span class="line">        objects.Service.enable_min_version_cache()</span><br><span class="line">    log = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成报告的机制 Guru Meditation Report (GMR)</span></span><br><span class="line">    gmr.TextGuruMeditation.setup_autorun(version, conf=CONF)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># oslo_service.ProcessLauncher</span></span><br><span class="line">    launcher = service.process_launcher()</span><br><span class="line">    started = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 根据 paste-ini 文件创建 WSGI 应用</span></span><br><span class="line">    <span class="keyword">for</span> api <span class="keyword">in</span> CONF.enabled_apis:</span><br><span class="line">        should_use_ssl = api <span class="keyword">in</span> CONF.enabled_ssl_apis</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># nova.service.WSGIService 初始化 WSGI 程序</span></span><br><span class="line">            server = service.WSGIService(api, use_ssl=should_use_ssl)</span><br><span class="line">            <span class="comment"># oslo_service.ProcessLauncher 创建子进程启动服务</span></span><br><span class="line">            launcher.launch_service(server, workers=server.workers <span class="keyword">or</span> <span class="number">1</span>)</span><br><span class="line">            started += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> exception.PasteAppNotFound <span class="keyword">as</span> ex:</span><br><span class="line">            log.warning(<span class="string">&quot;%s. ``enabled_apis`` includes bad values. &quot;</span></span><br><span class="line">                        <span class="string">&quot;Fix to remove this warning.&quot;</span>, ex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> started == <span class="number">0</span>:</span><br><span class="line">        log.error(<span class="string">&#x27;No APIs were started. &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Check the enabled_apis config option.&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待子进程终止</span></span><br><span class="line">    launcher.wait()</span><br></pre></td></tr></table></figure><p>nova.service.WSGIService 的初始化函数实例化 nova.wsgi.Server ，启动函数实际调用了 nova.wsgi.Server 的 start 方法。</p><p>其中的 self._socket 使用 <code>eventlet.listen</code> 创建，最后使用 utils 中封装的 spawn 函数启动 WSGI 程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>(<span class="params">service.ServiceBase</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Server class to manage a WSGI server, serving a WSGI application.&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Start serving a WSGI application.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :returns: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># The server socket object will be closed after server exits,</span></span><br><span class="line">        <span class="comment"># but the underlying file descriptor will remain open, and will</span></span><br><span class="line">        <span class="comment"># give bad file descriptor error. So duplicating the socket object,</span></span><br><span class="line">        <span class="comment"># to keep file descriptor usable.</span></span><br><span class="line"></span><br><span class="line">        dup_socket = self._socket.dup()</span><br><span class="line">        dup_socket.setsockopt(socket.SOL_SOCKET,</span><br><span class="line">                              socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># sockets can hang around forever without keepalive</span></span><br><span class="line">        dup_socket.setsockopt(socket.SOL_SOCKET,</span><br><span class="line">                              socket.SO_KEEPALIVE, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        self._server = utils.spawn(**wsgi_kwargs)</span><br></pre></td></tr></table></figure><p><strong>nova-conductor</strong> 启动入口 <code>nova.cmd.conductor:main</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    config.parse_args(sys.argv)</span><br><span class="line">    logging.setup(CONF, <span class="string">&quot;nova&quot;</span>)</span><br><span class="line">    objects.register_all()</span><br><span class="line">    gmr_opts.set_defaults(CONF)</span><br><span class="line">    objects.Service.enable_min_version_cache()</span><br><span class="line"></span><br><span class="line">    gmr.TextGuruMeditation.setup_autorun(version, conf=CONF)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># nova.service.Service 实例化 Service 对象</span></span><br><span class="line">    server = service.Service.create(binary=<span class="string">&#x27;nova-conductor&#x27;</span>,</span><br><span class="line">                                    topic=rpcapi.RPC_TOPIC)</span><br><span class="line">    workers = CONF.conductor.workers <span class="keyword">or</span> processutils.get_worker_count()</span><br><span class="line">    <span class="comment"># oslo_service.launch 创建 launcher</span></span><br><span class="line">    service.serve(server, workers=workers)</span><br><span class="line">    <span class="comment"># 调用 launcher.wait 等待子进程终止</span></span><br><span class="line">    service.wait()</span><br></pre></td></tr></table></figure><p>nova.service.Service 初始化函数接受 manager 对象，通过监听消息队列启用 RPC 服务；设置定期任务报告状态，并写入数据库。</p><ul><li>nova-compute</li><li>nova-conductor</li><li>nova-scheduler</li></ul><p>RPC 服务启动时创建 rpc_client 用于发送消息，创建 rpc_server 用于接收消息，分派执行。</p><p><strong>1. rpc_client</strong></p><p>nova/cmd/conductor.py 实际创建 Service 实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server = service.Service.create(binary=<span class="string">&#x27;nova-conductor&#x27;</span>,</span><br><span class="line">                                topic=rpcapi.RPC_TOPIC)</span><br></pre></td></tr></table></figure><p>nova/service.py 初始化函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 _driver</span></span><br><span class="line">self.servicegroup_api = servicegroup.API()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态导入 manager 类</span></span><br><span class="line">manager_class = importutils.import_class(self.manager_class_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> objects_base.NovaObject.indirection_api:</span><br><span class="line">    <span class="comment"># 创建 RPCClient</span></span><br><span class="line">    conductor_api = conductor.API()</span><br><span class="line">    <span class="comment"># 等待 nova-conductor 启动</span></span><br><span class="line">    conductor_api.wait_until_ready(context.get_admin_context())</span><br></pre></td></tr></table></figure><p>nova/servicegroup/api.py 创建 _driver</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver_class = _driver_name_class_mapping[CONF.servicegroup_driver]</span><br><span class="line">self._driver = importutils.import_object(driver_class,</span><br><span class="line">                                         *args, **kwargs)</span><br></pre></td></tr></table></figure><p>nova/conductor/api.py 实际调用 rpcapi.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.conductor_rpcapi = rpcapi.ConductorAPI()</span><br><span class="line">    self.base_rpcapi = baserpc.BaseAPI(topic=rpcapi.RPC_TOPIC)</span><br></pre></td></tr></table></figure><p>nova/conductor/rpcapi.py 设置 rpc_client</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">super</span>(ConductorAPI, self).__init__()</span><br><span class="line">    target = messaging.Target(topic=RPC_TOPIC, version=<span class="string">&#x27;3.0&#x27;</span>)</span><br><span class="line">    version_cap = self.VERSION_ALIASES.get(CONF.upgrade_levels.conductor,</span><br><span class="line">                                           CONF.upgrade_levels.conductor)</span><br><span class="line">    serializer = objects_base.NovaObjectSerializer()</span><br><span class="line">    <span class="comment"># rpc client</span></span><br><span class="line">    self.client = rpc.get_client(target,</span><br><span class="line">                                 version_cap=version_cap,</span><br><span class="line">                                 serializer=serializer)</span><br></pre></td></tr></table></figure><p>nova/baserpc.py 设置 rpc_client</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, topic</span>):</span></span><br><span class="line">    <span class="built_in">super</span>(BaseAPI, self).__init__()</span><br><span class="line">    target = messaging.Target(topic=topic,</span><br><span class="line">                              namespace=_NAMESPACE,</span><br><span class="line">                              version=<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">    version_cap = self.VERSION_ALIASES.get(CONF.upgrade_levels.baseapi,</span><br><span class="line">                                           CONF.upgrade_levels.baseapi)</span><br><span class="line">    self.client = rpc.get_client(target, version_cap=version_cap)</span><br></pre></td></tr></table></figure><p><strong>2. rpc_server</strong></p><p>nova/cmd/conductor.py 使用 Service 实例启动服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oslo_service.launch 创建 launcher</span></span><br><span class="line">service.serve(server, workers=workers)</span><br><span class="line"><span class="comment"># 调用 launcher.wait 等待子进程终止</span></span><br><span class="line">service.wait()</span><br></pre></td></tr></table></figure><p>nova/service.py 实际调用 <a href="https://github.com/openstack/oslo.service">oslo_service</a> 的 launch 函数，创建绿色线程（greenthread）或进程，最终调用 Service 实例的 start 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span>(<span class="params">server, workers=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">global</span> _launcher</span><br><span class="line">    <span class="keyword">if</span> _launcher:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_(<span class="string">&#x27;serve() can only be called once&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    _launcher = service.launch(CONF, server, workers=workers,</span><br><span class="line">                               restart_method=<span class="string">&#x27;mutate&#x27;</span>)</span><br></pre></td></tr></table></figure><p>nova/service.py Service 实例的 start 方法创建 rpc_server 和 dispatcher；设置周期任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 rpc server 以及 dispatcher</span></span><br><span class="line">self.rpcserver = rpc.get_server(target, endpoints, serializer)</span><br><span class="line">self.rpcserver.start()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.periodic_enable:</span><br><span class="line">    <span class="keyword">if</span> self.periodic_fuzzy_delay:</span><br><span class="line">        initial_delay = random.randint(<span class="number">0</span>, self.periodic_fuzzy_delay)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        initial_delay = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    self.tg.add_dynamic_timer(self.periodic_tasks,</span><br><span class="line">                             initial_delay=initial_delay,</span><br><span class="line">                             periodic_interval_max=</span><br><span class="line">                                self.periodic_interval_max)</span><br></pre></td></tr></table></figure><p>收到消息后主要由 <a href="https://github.com/openstack/oslo.messaging">oslo_messaging</a> 进行解析和处理，核心是 oslo_messaging/rpc/dispatcher.py</p><p>incoming 是 AMQP 消息格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, incoming</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Dispatch an RPC message to the appropriate endpoint method.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param incoming: incoming message</span></span><br><span class="line"><span class="string">    :type incoming: IncomingMessage</span></span><br><span class="line"><span class="string">    :raises: NoSuchMethod, UnsupportedVersion</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    message = incoming.message</span><br><span class="line">    ctxt = incoming.ctxt</span><br><span class="line"></span><br><span class="line">    method = message.get(<span class="string">&#x27;method&#x27;</span>)</span><br><span class="line">    args = message.get(<span class="string">&#x27;args&#x27;</span>, &#123;&#125;)</span><br><span class="line">    namespace = message.get(<span class="string">&#x27;namespace&#x27;</span>)</span><br><span class="line">    version = message.get(<span class="string">&#x27;version&#x27;</span>, <span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(danms): This event and watchdog thread are used to send</span></span><br><span class="line">    <span class="comment"># call-monitoring heartbeats for this message while the call</span></span><br><span class="line">    <span class="comment"># is executing if it runs for some time. The thread will wait</span></span><br><span class="line">    <span class="comment"># for the event to be signaled, which we do explicitly below</span></span><br><span class="line">    <span class="comment"># after dispatching the method call.</span></span><br><span class="line">    completion_event = eventletutils.Event()</span><br><span class="line">    watchdog_thread = threading.Thread(target=self._watchdog,</span><br><span class="line">                                       args=(completion_event, incoming))</span><br><span class="line">    <span class="keyword">if</span> incoming.client_timeout:</span><br><span class="line">        <span class="comment"># NOTE(danms): The client provided a timeout, so we start</span></span><br><span class="line">        <span class="comment"># the watchdog thread. If the client is old or didn&#x27;t send</span></span><br><span class="line">        <span class="comment"># a timeout, we just never start the watchdog thread.</span></span><br><span class="line">        watchdog_thread.start()</span><br><span class="line"></span><br><span class="line">    found_compatible = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> endpoint <span class="keyword">in</span> self.endpoints:</span><br><span class="line">        target = <span class="built_in">getattr</span>(endpoint, <span class="string">&#x27;target&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> target:</span><br><span class="line">            target = self._default_target</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (self._is_namespace(target, namespace) <span class="keyword">and</span></span><br><span class="line">                self._is_compatible(target, version)):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(endpoint, method):</span><br><span class="line">            <span class="keyword">if</span> self.access_policy.is_allowed(endpoint, method):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 分派，调用函数</span></span><br><span class="line">                    <span class="keyword">return</span> self._do_dispatch(endpoint, method, ctxt, args)</span><br><span class="line">                <span class="keyword">finally</span>:</span><br><span class="line">                    completion_event.<span class="built_in">set</span>()</span><br><span class="line">                    <span class="keyword">if</span> incoming.client_timeout:</span><br><span class="line">                        watchdog_thread.join()</span><br><span class="line"></span><br><span class="line">        found_compatible = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> found_compatible:</span><br><span class="line">        <span class="keyword">raise</span> NoSuchMethod(method)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> UnsupportedVersion(version, method=method)</span><br></pre></td></tr></table></figure><p>oslo_messaging/rpc/dispatcher.py 调用函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_do_dispatch</span>(<span class="params">self, endpoint, method, ctxt, args</span>):</span></span><br><span class="line">    ctxt = self.serializer.deserialize_context(ctxt)</span><br><span class="line">    new_args = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> argname, arg <span class="keyword">in</span> args.items():</span><br><span class="line">        new_args[argname] = self.serializer.deserialize_entity(ctxt, arg)</span><br><span class="line">    func = <span class="built_in">getattr</span>(endpoint, method)</span><br><span class="line">    result = func(ctxt, **new_args)</span><br><span class="line">    <span class="keyword">return</span> self.serializer.serialize_entity(ctxt, result)</span><br></pre></td></tr></table></figure><p>发送消息的实现都在 nova/conductor/rpcapi.py 中，cctxt.call 同步调用，cctxt.cast 异步调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">object_class_action_versions</span>(<span class="params">self, context, objname, objmethod,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 object_versions, args, kwargs</span>):</span></span><br><span class="line">    cctxt = self.client.prepare()</span><br><span class="line">    <span class="keyword">return</span> cctxt.call(context, <span class="string">&#x27;object_class_action_versions&#x27;</span>,</span><br><span class="line">                      objname=objname, objmethod=objmethod,</span><br><span class="line">                      object_versions=object_versions,</span><br><span class="line">                      args=args, kwargs=kwargs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cache_images</span>(<span class="params">self, ctxt, aggregate, image_ids</span>):</span></span><br><span class="line">    version = <span class="string">&#x27;1.21&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.client.can_send_version(version):</span><br><span class="line">        <span class="keyword">raise</span> exception.NovaException(<span class="string">&#x27;Conductor RPC version pin does not &#x27;</span></span><br><span class="line">                                      <span class="string">&#x27;allow cache_images() to be called&#x27;</span>)</span><br><span class="line">    cctxt = self.client.prepare(version=version)</span><br><span class="line">    cctxt.cast(ctxt, <span class="string">&#x27;cache_images&#x27;</span>, aggregate=aggregate,</span><br><span class="line">               image_ids=image_ids)</span><br></pre></td></tr></table></figure><p>由 oslo_messaging/rpc/client.py 实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cast</span>(<span class="params">self, ctxt, method, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Invoke a method and return immediately. See RPCClient.cast().&quot;&quot;&quot;</span></span><br><span class="line">    msg = self._make_message(ctxt, method, kwargs)</span><br><span class="line">    msg_ctxt = self.serializer.serialize_context(ctxt)</span><br><span class="line"></span><br><span class="line">    self._check_version_cap(msg.get(<span class="string">&#x27;version&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.transport._send(self.target, msg_ctxt, msg,</span><br><span class="line">                             retry=self.retry,</span><br><span class="line">                             transport_options=self.transport_options)</span><br><span class="line">    <span class="keyword">except</span> driver_base.TransportDriverError <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="keyword">raise</span> ClientSendError(self.target, ex)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, ctxt, method, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Invoke a method and wait for a reply. See RPCClient.call().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> self.target.fanout:</span><br><span class="line">        <span class="keyword">raise</span> exceptions.InvalidTarget(<span class="string">&#x27;A call cannot be used with fanout&#x27;</span>,</span><br><span class="line">                                       self.target)</span><br><span class="line"></span><br><span class="line">    msg = self._make_message(ctxt, method, kwargs)</span><br><span class="line">    msg_ctxt = self.serializer.serialize_context(ctxt)</span><br><span class="line"></span><br><span class="line">    timeout = self.timeout</span><br><span class="line">    <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        timeout = self.conf.rpc_response_timeout</span><br><span class="line"></span><br><span class="line">    cm_timeout = self.call_monitor_timeout</span><br><span class="line"></span><br><span class="line">    self._check_version_cap(msg.get(<span class="string">&#x27;version&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = \</span><br><span class="line">            self.transport._send(self.target, msg_ctxt, msg,</span><br><span class="line">                                 wait_for_reply=<span class="literal">True</span>, timeout=timeout,</span><br><span class="line">                                 call_monitor_timeout=cm_timeout,</span><br><span class="line">                                 retry=self.retry,</span><br><span class="line">                                 transport_options=self.transport_options)</span><br><span class="line">    <span class="keyword">except</span> driver_base.TransportDriverError <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="keyword">raise</span> ClientSendError(self.target, ex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.serializer.deserialize_entity(ctxt, result)</span><br></pre></td></tr></table></figure><p>关于周期任务，nova/scheduler/manager.py 中使用 <code>@periodic_task.periodic_task</code> 装饰的方法将会被周期调用，从 scheduler 的调试日志可以看到周期任务的运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">********************************************************************* log_opt_values /home/jck/.<span class="built_in">local</span>/lib/python3.6/site-packages/oslo_config/cfg.py:2591</span><br><span class="line">2021-05-18 05:53:17.030 3501 DEBUG oslo_service.periodic_task [req-66b43add-49c7-4f33-8f6b-1e33cb9f0123 - - - - -] Running periodic task SchedulerManager._run_periodic_tasks run_periodic_tasks /home/jck/.<span class="built_in">local</span>/lib/python3.6/site-packages/oslo_service/periodic_task.py:211</span><br><span class="line">2021-05-18 05:53:39.072 3500 DEBUG oslo_service.periodic_task [req-8436b3e2-96d1-4f15-8ae8-b596cee05536 - - - - -] Running periodic task SchedulerManager._run_periodic_tasks run_periodic_tasks /home/jck/.<span class="built_in">local</span>/lib/python3.6/site-packages/oslo_service/periodic_task.py:211</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>对应于 nova/scheduler/manager.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@periodic_task.periodic_task(<span class="params">spacing=CONF.scheduler.periodic_task_interval,</span></span></span><br><span class="line"><span class="meta"><span class="params">                             run_immediately=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_periodic_tasks</span>(<span class="params">self, context</span>):</span></span><br><span class="line">    self.driver.run_periodic_tasks(context)</span><br></pre></td></tr></table></figure><p>执行周期任务的有 nova-scheduler 和 nova-compute ，主要功能是计算节点 nova-compute 上报资源信息，nova-scheduler 读取数据库，更新资源信息缓存。</p><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/nova/latest/user/architecture.html">Nova System Architecture</a></li><li><a href="https://docs.openstack.org/nova/latest/install/get-started-compute.html">Compute service overview</a></li><li><a href="https://docs.openstack.org/nova/latest/reference/rpc.html">AMQP and Nova</a></li><li><a href="https://docs.openstack.org/nova/latest/reference/scheduling.html">Scheduling</a></li><li><a href="https://docs.openstack.org/nova/latest/user/cellsv2-layout.html">Cells Layout (v2)</a></li><li><a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html">AMQP 0-9-1 Model Explained</a></li><li><a href="https://rabbitmq.mr-ping.com/AMQP/AMQP_0-9-1_Model_Explained.html">AMQP 0-9-1 简介</a></li><li><a href="https://docs.openstack.org/nova/latest/admin/metadata-service.html">Metadata service</a></li><li><a href="https://docs.openstack.org/nova/queens/reference/gmr.html">Guru Meditation Reports</a></li></ul>]]></content>
    
    
    <summary type="html">Victoria 版本 Nova 整体架构概览，源码阅读，启动流程分析</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 源码安装 Placement + Nova (Victoria)</title>
    <link href="https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Nova%20(Victoria)/"/>
    <id>https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Nova%20(Victoria)/</id>
    <published>2021-05-13T07:52:19.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>在源码部署 Keystone 和 Glance 之后，继续进行 Nova 的部署。环境设定和 Keystone 部署相关操作见 <a href="https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Keystone%20%28Victoria%29/">Ubuntu 18.04 源码安装 Keystone (Victoria)</a> 。</p><h1 id="Placement"><a href="#Placement" class="headerlink" title="Placement"></a>Placement</h1><p>Placement 用于管理资源，核心功能是帮助用户寻找满足资源需求的设备，Placement 提供 REST API，并使用 json 格式交换数据。使用 Placement 服务的包括 Nova、Neutron 等组件，因此在部署 Nova 前需要部署 Placement ，管理计算资源（主机）。</p><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>MySQL 数据库配置，密码 mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> placement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> placement.* <span class="keyword">TO</span> <span class="string">&#x27;placement&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> placement.* <span class="keyword">TO</span> <span class="string">&#x27;placement&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="身份认证和-API-配置"><a href="#身份认证和-API-配置" class="headerlink" title="身份认证和 API 配置"></a>身份认证和 API 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 placement</span></span><br><span class="line">openstack user create --domain default --password-prompt placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user placement admin</span><br><span class="line"><span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure><p>创建服务实体和服务 API 端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name placement --description <span class="string">&quot;Placement API&quot;</span> placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne placement public http://127.0.0.1:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement internal http://127.0.0.1:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement admin http://127.0.0.1:8778</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>下载 Placement 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/placement.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>进入 Placement 目录安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br></pre></td></tr></table></figure><p>使用 pip 安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git init</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>使用 tox 生成配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tox -e genconfig</span><br></pre></td></tr></table></figure><p>手动创建目录，将配置文件拷贝过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo mkdir /etc/placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/placement/placement.conf.sample /etc/placement/placement.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">sudo vim /etc/placement/placement.conf</span><br></pre></td></tr></table></figure><p>在相应小节添加配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[placement_database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://placement:PLACEMENT_DBPASS@<span class="number">127.0</span>.<span class="number">0.1</span>/placement</span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">auth_url</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/v3</span><br><span class="line"><span class="comment">#memcached_servers = 127.0.0.1:11211</span></span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br></pre></td></tr></table></figure><h2 id="部署-Placement"><a href="#部署-Placement" class="headerlink" title="部署 Placement"></a>部署 Placement</h2><p>安装 Placement</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>启用服务</p><p><em>PS：打印的日志信息提示在生产环境中不要使用 <code>placement-api</code></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/shared/bin/placement-manage db sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Apache</span></span><br><span class="line">service apache2 restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">placement-api --port 8778</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>验证服务正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询服务状态</span></span><br><span class="line">placement-status upgrade check</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/06/06/GiYVxod6LCSTstw.png"><h1 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h1><p>Nova 本身包含多个组件，对外提供 RESTful API，内部组件使用 RPC 和消息队列传递消息。而且每个内部组件都可以横向扩展，部署多个。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>安装 rabbitmq（官方推荐，也支持其他几个消息队列）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install rabbitmq-server -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 openstack 用户</span></span><br><span class="line">sudo rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">sudo rabbitmqctl set_permissions openstack <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure><p>MySQL 数据库配置，密码 mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> nova_api;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> nova;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> nova_cell0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_api.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_api.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_cell0.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_cell0.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>身份认证和 API 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 nova</span></span><br><span class="line">openstack user create --domain default --password-prompt nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user nova admin</span><br><span class="line"><span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure><p>创建服务实体和服务 API 端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name nova --description <span class="string">&quot;OpenStack Compute&quot;</span> compute</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne compute public http://127.0.0.1:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute internal http://127.0.0.1:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute admin http://127.0.0.1:8774/v2.1</span><br></pre></td></tr></table></figure><h2 id="部署-Nova"><a href="#部署-Nova" class="headerlink" title="部署 Nova"></a>部署 Nova</h2><p>下载 Nova 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>进入 Nova 目录安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br></pre></td></tr></table></figure><p>使用 pip 安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git init</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br></pre></td></tr></table></figure><p>使用 tox 生成配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tox -e genconfig</span><br></pre></td></tr></table></figure><p>手动创建目录，将配置文件拷贝过去，paste-ini 文件用于配置 WSGI 程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo mkdir /etc/nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/nova/nova.conf.sample /etc/nova/nova.conf</span><br><span class="line">sudo cp etc/nova/api-paste.ini /etc/nova/api-paste.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">sudo vi /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>在相应的小节添加配置，同样，没有安装 memcached 所以对应的配置注释掉了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[api_database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@<span class="number">127.0</span>.<span class="number">0.1</span>/nova_api</span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@<span class="number">127.0</span>.<span class="number">0.1</span>/nova</span><br><span class="line"></span><br><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">transport_url</span> = rabbit://openstack:RABBIT_PASS@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5672</span>/</span><br><span class="line"><span class="attr">my_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_url</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/</span><br><span class="line"><span class="comment">#memcached_servers = 127.0.0.1:11211</span></span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = nova</span><br><span class="line"><span class="attr">password</span> = nova</span><br><span class="line"></span><br><span class="line"><span class="section">[vnc]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">server_listen</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">server_proxyclient_address</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">novncproxy_base_url</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6080</span>/vnc_auto.html</span><br><span class="line"></span><br><span class="line"><span class="section">[glance]</span></span><br><span class="line"><span class="attr">api_servers</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9292</span></span><br><span class="line"></span><br><span class="line"><span class="section">[oslo_concurrency]</span></span><br><span class="line"><span class="attr">lock_path</span> = /var/lib/nova/tmp</span><br><span class="line"></span><br><span class="line"><span class="section">[placement]</span></span><br><span class="line"><span class="attr">region_name</span> = RegionOne</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">auth_url</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br></pre></td></tr></table></figure><p>nova-novncproxy 依赖 novnc ，直接克隆到相应目录，该组件用于协调 nova-compute 服务和数据库之间的交互。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://github.com/novnc/noVNC.git /usr/share/novnc/</span><br></pre></td></tr></table></figure><p>安装 Nova</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>启用服务 nova-api、nova-scheduler、nova-conductor、nova-novncproxy 。nova-novncproxy 是可选的，它用于协调 nova-compute 服务和数据库之间的交互。</p><p><em>PS：这里使用 .tox 文件夹下的工具，否则会报错，最终的结果是写入数据库，所以这个问题还是暂时不管</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf api_db sync</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 map_cell0</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 create_cell --name=cell1 --verbose</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf db sync</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 list_cells</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">sudo nova-api --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br><span class="line">sudo nova-scheduler --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br><span class="line">sudo nova-conductor --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br><span class="line">sudo nova-novncproxy --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br></pre></td></tr></table></figure><h2 id="nova-compute"><a href="#nova-compute" class="headerlink" title="nova-compute"></a>nova-compute</h2><p>由于本地测试环境是单机（Ubuntu 18.04 虚拟机），而且通常 nova-compute 不会装在控制节点上，因此没有进行配置。因为没有使用 nova-compute 所以 nova-novncproxy 和 Placement 都是可选的（应该）。</p><p>计算节点，启用 nova-compute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟机硬件加速（0 表示不支持，需要配置 virt_type=qemu）</span></span><br><span class="line">egrep -c <span class="string">&#x27;(vmx|svm)&#x27;</span> /proc/cpuinfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> libvirtd.service openstack-nova-compute.service</span><br><span class="line">systemctl start libvirtd.service openstack-nova-compute.service</span><br></pre></td></tr></table></figure><p>配置文件 /etc/nova/nova-compute.conf</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[libvirt]</span></span><br><span class="line"><span class="attr">virt_type</span> = qemu</span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nova-compute restart</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>验证服务正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 API 状态</span></span><br><span class="line">nova-status upgrade check</span><br></pre></td></tr></table></figure><p>使用 OpenStack Client 执行与计算服务有关的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出计算服务</span></span><br><span class="line">openstack compute service list</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><p><a href="https://docs.openstack.org/placement/latest/contributor/quick-dev.html">Quick Placement Development</a></p></li><li><p><a href="https://docs.openstack.org/placement/latest/install/install-ubuntu.html#configure-user-and-endpoints">Install and configure Placement for Ubuntu</a></p></li><li><p><a href="https://docs.openstack.org/placement/latest/install/verify.html">Verify Installation</a></p></li><li><p><a href="https://docs.openstack.org/nova/latest/install/controller-install-ubuntu.html">Install and configure controller node for Ubuntu</a></p></li><li><p><a href="https://docs.openstack.org/nova/latest/install/compute-install-ubuntu.html">Install and configure a compute node for Ubuntu</a></p></li><li><p><a href="https://docs.openstack.org/nova/latest/install/verify.html">Verify operation</a></p></li><li><p><a href="https://bugs.launchpad.net/fuel/+bug/1433894">novncproxy: code 404, message File not found</a></p></li></ul>]]></content>
    
    
    <summary type="html">记录部署流程</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 源码安装 Glance (Victoria)</title>
    <link href="https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Glance%20(Victoria)/"/>
    <id>https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Glance%20(Victoria)/</id>
    <published>2021-05-13T03:40:14.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>在源码部署 Keystone 之后，继续进行 Glance 的部署。环境设定和 Keystone 部署相关操作见 <a href="https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Keystone%20%28Victoria%29/">Ubuntu 18.04 源码安装 Keystone (Victoria)</a> 。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>MySQL 数据库配置，密码 mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> glance;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户 glance</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> glance.* <span class="keyword">TO</span> <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> glance.* <span class="keyword">TO</span> <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建完毕退出</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="身份认证和-API-配置"><a href="#身份认证和-API-配置" class="headerlink" title="身份认证和 API 配置"></a>身份认证和 API 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建脚本</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt; admin-openrc</span></span><br><span class="line"><span class="string">export OS_USERNAME=admin</span></span><br><span class="line"><span class="string">export OS_PASSWORD=ADMIN_PASS</span></span><br><span class="line"><span class="string">export OS_PROJECT_NAME=admin</span></span><br><span class="line"><span class="string">export OS_USER_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_PROJECT_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_AUTH_URL=http://127.0.0.1:5000/v3</span></span><br><span class="line"><span class="string">export OS_IDENTITY_API_VERSION=3</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">openstack project create --domain default --description <span class="string">&quot;Service Project&quot;</span> service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 glance</span></span><br><span class="line">openstack user create --domain default --password-prompt glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user glance admin</span><br><span class="line"><span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure><p>创建服务实体和服务 API 端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name glance --description <span class="string">&quot;OpenStack Image&quot;</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne image public http://127.0.0.1:9292</span><br><span class="line">openstack endpoint create --region RegionOne image internal http://127.0.0.1:9292</span><br><span class="line">openstack endpoint create --region RegionOne image admin http://127.0.0.1:9292</span><br></pre></td></tr></table></figure><h1 id="Glance-部署"><a href="#Glance-部署" class="headerlink" title="Glance 部署"></a>Glance 部署</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>下载 Glance 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/glance.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>进入 Glance 目录安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br></pre></td></tr></table></figure><p>使用 pip 安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>使用 tox 生成配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tox -e genconfig</span><br></pre></td></tr></table></figure><p>手动创建目录，将配置文件拷贝过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir /etc/glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/glance-api.conf /etc/glance/glance-api.conf</span><br><span class="line">sudo cp etc/glance-api-paste.ini /etc/glance/glance-api-paste.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/glance/glance-api.conf</span><br></pre></td></tr></table></figure><p>在相应的小节添加配置，没有安装 memcached 所以对应的配置注释掉了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://glance:GLANCE_DBPASS@localhost/glance</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span>  = http://localhost:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_url</span> = http://localhost:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = glance</span><br><span class="line"><span class="attr">password</span> = glance</span><br><span class="line"><span class="comment">#memcached_servers = localhost:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[paste_deploy]</span></span><br><span class="line"><span class="attr">flavor</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[glance_store]</span></span><br><span class="line"><span class="attr">stores</span> = file,http</span><br><span class="line"><span class="attr">default_store</span> = file</span><br><span class="line"><span class="attr">filesystem_store_datadir</span> = /var/lib/glance/images/</span><br></pre></td></tr></table></figure><h2 id="启用服务"><a href="#启用服务" class="headerlink" title="启用服务"></a>启用服务</h2><p>安装 Glance</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>启用 Glance 镜像服务</p><p><em>PS：这里使用 .tox 文件夹下的工具，否则会报错，反正最终的结果是写入数据库，所以这里的问题暂时不管</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/genconfig/bin/glance-manage db_sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务（后台）</span></span><br><span class="line">sudo glance-api --config-file=/etc/glance/glance-api.conf --config-file=/etc/glance/glance-api-paste.ini &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug 直接输出</span></span><br><span class="line">sudo glance-api --config-file=/etc/glance/glance-api.conf --config-file=/etc/glance/glance-api-paste.ini --debug</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>使用 OpenStack Client 执行一些和镜像有关的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">openstack image list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源镜像</span></span><br><span class="line">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传镜像到镜像服务，公开可见（所有项目都可以访问）</span></span><br><span class="line">openstack image create <span class="string">&quot;cirros&quot;</span> \</span><br><span class="line">  --file cirros-0.4.0-x86_64-disk.img \</span><br><span class="line">  --disk-format qcow2 --container-format bare \</span><br><span class="line">  --public</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">openstack image list</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/glance/latest/index.html">Glance’s documentation</a></li><li><a href="https://docs.openstack.org/glance/latest/install/">Glance Installation</a></li><li><a href="https://docs.openstack.org/glance/ocata/installing.html#installing-from-git">Installing from Git</a></li><li><a href="https://docs.rackspace.com/blog/install-openstack-from-source2/">Install OpenStack from source - part 2</a></li></ul>]]></content>
    
    
    <summary type="html">记录部署流程</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 源码安装 Keystone (Victoria)</title>
    <link href="https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Keystone%20(Victoria)/"/>
    <id>https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Keystone%20(Victoria)/</id>
    <published>2021-05-13T02:49:37.000Z</published>
    <updated>2021-08-16T06:59:39.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>VirtualBox 搭建 Ubuntu 18.04 虚拟机</p><ul><li>4 处理器</li><li>8 GB 内存</li><li>100 GB 硬盘</li></ul><p>使用两块网卡</p><ul><li>NAT 提供网络服务</li><li>Host-Only 提供宿主机 ssh 连接</li></ul><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>设置 Python3 和 pip3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1</span><br></pre></td></tr></table></figure><p>下载 Keystone 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/keystone.git -b stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>Keystone 的各种依赖可以根据代码目录下提供的 bindep.txt 进行安装。 <code>bindep</code> 即 Binary dependency management ，通过 <code>pip</code> 安装 bindep</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bindep</span><br></pre></td></tr></table></figure><p>进入 Keystone 目录安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> keystone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br></pre></td></tr></table></figure><p>因为 Keystone 使用 Flask 提供 WSGI 接口，依赖 Apache 驱动，所以还需要安装支持 python3 的 WSGI 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apache2 libapache2-mod-wsgi-py3</span><br></pre></td></tr></table></figure><p>OpenStack 客户端用于和 Keystone 进行交互，使用 pip 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-openstackclient</span><br></pre></td></tr></table></figure><h1 id="部署-Keystone"><a href="#部署-Keystone" class="headerlink" title="部署 Keystone"></a>部署 Keystone</h1><p>上面的步骤做好了准备，接下来执行 Keystone 的部署。</p><p>源码目录中有两个依赖包文件（都安装），或直接用 <code>-e</code> 参数安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><p>安装 tox 测试工具，生成配置文件，相关文件 <code>tox.ini</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 tox</span></span><br><span class="line">pip install tox</span><br><span class="line">tox -e genconfig</span><br></pre></td></tr></table></figure><p>设置 MySQL 数据库 root 用户密码，这里设置为 <code>mysql</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 MySQL</span></span><br><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>创建数据库和 keystone 用户，并授予相关权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> keystone;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 授予权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> keystone.* <span class="keyword">TO</span> <span class="string">&#x27;keystone&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;KEYSTONE_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> keystone.* <span class="keyword">TO</span> <span class="string">&#x27;keystone&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;KEYSTONE_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>手动创建目录，将配置文件拷贝过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir /etc/keystone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/keystone.conf.sample /etc/keystone/keystone.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">sudo vim /etc/keystone/keystone.conf</span><br></pre></td></tr></table></figure><p>在 <code>[database]</code> 小节中添加数据库连接配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://keystone:KEYSTONE_DBPASS@localhost/keystone</span><br></pre></td></tr></table></figure><p>安装 Keystone，创建令牌时如果报错提示 /etc/keystone/fernet-keys 文件夹中已有文件，删除后再重新执行指令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Keystone</span></span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">keystone-manage db_sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 令牌</span></span><br><span class="line">sudo mkdir -p /etc/keystone/fernet-keys</span><br><span class="line">sudo keystone-manage fernet_setup --keystone-user jck --keystone-group jck</span><br><span class="line">sudo keystone-manage credential_setup --keystone-user jck --keystone-group jck</span><br></pre></td></tr></table></figure><p>启动 Keystone 服务，设置管理员密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">keystone-manage bootstrap --bootstrap-password ADMIN_PASS \</span><br><span class="line">  --bootstrap-admin-url http://127.0.0.1:5000/v3/ \</span><br><span class="line">  --bootstrap-internal-url http://127.0.0.1:5000/v3/ \</span><br><span class="line">  --bootstrap-public-url http://127.0.0.1:5000/v3/ \</span><br><span class="line">  --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure><p>配置 Apache 服务，拷贝 Keystone 源码目录下的配置文件到 Apache 文件夹中，修改 <code>user</code> 和 <code>group</code> 字段为当前用户，启用该配置文件并重启 Apache 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝</span></span><br><span class="line">sudo cp httpd/wsgi-keystone.conf /etc/apache2/conf-available/wsgi-keystone.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/apache2/conf-available/wsgi-keystone.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用</span></span><br><span class="line">sudo ln -s /etc/apache2/conf-available/wsgi-keystone.conf /etc/apache2/conf-enabled/wsgi-keystone.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Apache</span></span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/06/06/xOyfkLrbKFqCnXh.png"><p>重新部署只需要重新执行安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>配置环境变量后可访问 Keystone 服务，使用管理员帐号，并指定认证使用的 url 和版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">export</span> OS_USERNAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=ADMIN_PASS</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://127.0.0.1:5000/v3</span><br><span class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</span><br></pre></td></tr></table></figure><h2 id="OpenStack-Client"><a href="#OpenStack-Client" class="headerlink" title="OpenStack Client"></a>OpenStack Client</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询用户列表</span></span><br><span class="line">openstack user list</span><br></pre></td></tr></table></figure><h2 id="OpenStack-API"><a href="#OpenStack-API" class="headerlink" title="OpenStack API"></a>OpenStack API</h2><p>设置环境变量后才能正确执行以下命令行语句。</p><ol><li><p>获取 API 信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://localhost:5000 \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>获取 token ，指定 project/domain 范围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Unscoped</span></span><br><span class="line">curl -i <span class="string">&quot;http://localhost:5000/v3/auth/tokens&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;auth&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;identity&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;methods&quot;: [&quot;password&quot;],</span></span><br><span class="line"><span class="string">      &quot;password&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;name&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">          &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;,</span></span><br><span class="line"><span class="string">          &quot;password&quot;: &quot;ADMIN_PASS&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Project-Scoped</span></span><br><span class="line">curl -i <span class="string">&quot;http://localhost:5000/v3/auth/tokens&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;auth&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;identity&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;methods&quot;: [&quot;password&quot;],</span></span><br><span class="line"><span class="string">      &quot;password&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;name&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">          &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;,</span></span><br><span class="line"><span class="string">          &quot;password&quot;: &quot;ADMIN_PASS&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;scope&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;project&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">        &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Domain-Scoped（前提：角色绑定到域上）</span></span><br><span class="line">curl -i <span class="string">&quot;http://localhost:5000/v3/auth/tokens&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;auth&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;identity&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;methods&quot;: [&quot;password&quot;],</span></span><br><span class="line"><span class="string">      &quot;password&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;name&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">          &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;,</span></span><br><span class="line"><span class="string">          &quot;password&quot;: &quot;ADMIN_PASS&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;scope&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;domain&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;id&quot;: &quot;default&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 token 获取新的 token</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># X-Subject-Token 字段就是 token</span></span><br><span class="line"><span class="built_in">export</span> OS_TOKEN=gAAAAABgdpLGBSoQy0KT68qlRT_i7BPdN67KVUg2To53yxPJFcSwNucacaNxVNT_Ca11ASIovOFsyw8OZfCkgLDC7YHA-h5--DvUZ8JX8cLv340-jE2mc1YFZmRmzocnNXS3i-TQ2X6Czk2CNSPeNqbpw7wWV3X3qg</span><br><span class="line"></span><br><span class="line">curl -i <span class="string">&quot;http://localhost:5000/v3/auth/tokens&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;auth&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;identity&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;methods&quot;: [&quot;token&quot;],</span></span><br><span class="line"><span class="string">      &quot;token&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;id&quot;: &quot;&#x27;</span><span class="variable">$OS_TOKEN</span><span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>删除 token（返回 204）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X DELETE \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;X-Subject-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/auth/tokens&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>列出 domain（项目范围的 token）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/domains&quot;</span>\</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>创建 domain</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/domains&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;domain&quot;: &#123; &quot;name&quot;: &quot;newdomain&quot; &#125; &#125;&#x27;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>更新 domain 状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># domain_id</span></span><br><span class="line">curl -s -X PATCH \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;domain&quot;: &#123; &quot;enabled&quot;: false &#125; &#125;&#x27;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/domains/d94c8df6149146ae9fd3aa50544789b4&quot;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>删除 domain（返回 204）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># domain_id</span></span><br><span class="line">curl -i -X DELETE \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/domains/d94c8df6149146ae9fd3aa50544789b4&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>列出 project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/projects&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>创建 project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/projects&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;project&quot;: &#123; &quot;name&quot;: &quot;newproject&quot; &#125; &#125;&#x27;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>禁用 project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># project_id</span></span><br><span class="line">curl -s -X PATCH \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;project&quot;: &#123; &quot;enabled&quot;: false &#125; &#125;&#x27;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/projects/7f926f22b2784dfba2687aad2e2d1283&quot;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>删除 project（返回 204）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># project_id</span></span><br><span class="line">curl -i -X DELETE \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/projects/7f926f22b2784dfba2687aad2e2d1283&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>列出服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/services&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>列出端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/endpoints&quot;</span>\</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>列出用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/users&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/users&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123;&quot;user&quot;: &#123;&quot;name&quot;: &quot;newuser&quot;, &quot;password&quot;: &quot;pwd&quot;&#125;&#125;&#x27;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>查看用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user_id</span></span><br><span class="line">curl -s \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line"><span class="string">&quot;http://localhost:5000/v3/users/629169d123244d269d8b39538fc8f872&quot;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码（返回 204）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user_id</span></span><br><span class="line">curl -i \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123; &quot;user&quot;: &#123;&quot;password&quot;: &quot;password&quot;, &quot;original_password&quot;: &quot;pwd&quot;&#125; &#125;&#x27;</span> \</span><br><span class="line"><span class="string">&quot;http://localhost:5000/v3/users/629169d123244d269d8b39538fc8f872/password&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>更新用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user_id</span></span><br><span class="line">curl -s -X PATCH \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123; &quot;user&quot;: &#123;&quot;password&quot;: &quot;pwd&quot;&#125; &#125;&#x27;</span> \</span><br><span class="line"><span class="string">&quot;http://localhost:5000/v3/users/629169d123244d269d8b39538fc8f872&quot;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>删除用户（返回 204）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user_id</span></span><br><span class="line">curl -i -X DELETE \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/users/629169d123244d269d8b39538fc8f872&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><p><a href="https://docs.openstack.org/keystone/latest/install/keystone-install-ubuntu.html#prerequisites">Install and configure</a></p></li><li><p><a href="https://docs.openstack.org/project-team-guide/project-setup/python.html">Python Project Guide</a></p></li><li><p><a href="https://docs.openstack.org/keystone/latest/contributor/set-up-keystone.html">Setting up Keystone</a></p></li><li><p><a href="https://kairen.gitbooks.io/openstack-ubuntu-newton/content/ubuntu-binary/keystone/">Keystone 安裝與設定</a></p></li><li><p><a href="https://docs.openstack.org/keystone/latest/api_curl_examples.html">API Examples using Curl</a></p></li><li><p><a href="https://docs.openstack.org/api-ref/identity/v3/">Identity API v3 (CURRENT)</a></p></li><li><p><a href="https://docs.openstack.org/keystone/victoria/getting-started/policy_mapping.html">Mapping of policy target to API</a></p></li></ul>]]></content>
    
    
    <summary type="html">记录部署流程</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 部署 Jaeger + Elasticsearch + Kibana</title>
    <link href="https://jckling.github.io/2021/05/10/Jaeger/Jaeger%20+%20Elasticsearch%20+%20Kibana/"/>
    <id>https://jckling.github.io/2021/05/10/Jaeger/Jaeger%20+%20Elasticsearch%20+%20Kibana/</id>
    <published>2021-05-10T11:42:08.000Z</published>
    <updated>2021-08-16T06:59:39.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jaeger-持久化存储"><a href="#Jaeger-持久化存储" class="headerlink" title="Jaeger 持久化存储"></a>Jaeger 持久化存储</h1><p>all-in-one 包含 Jaeger UI（query）、收集器（collector）、查询（query）和代理（agent）， 它将收集到的追踪数据存储在内存中，因此，重启容器后会丢失所有的数据。</p><p>为了便于后续的数据分析，需要将追踪数据进行持久化存储，Jaeger 支持 cassandra、elasticsearch、kafka（缓存）、grpc-plugin、badger（仅适用 all-in-one）、memory（仅适用 all-in-one）。对于大规模的生产部署，Jaeger 团队推荐 Elasticsearch 后端，而不是 Cassandra 。</p><p>根据 Jaeger 架构，没有缓存的情况下收集器（collector）直接将数据写入存储。</p><img src="https://i.loli.net/2021/06/06/GYDWAdzw7t4PiCB.png" width="80%"/><p>也可以将 kafka 作为初始缓存区，这个之后再加。</p><img src="https://i.loli.net/2021/06/06/N87rt1HTcqMkV4g.png" width="80%"/><p>这里使用 elasticsearch(+kibana) 作为存储后端：</p><ol><li>直接使用 all-in-one 容器部署</li><li>单独部署 Jaeger 的各个组件<ul><li>agent：Jaeger 客户端要求 jaeger-agent 进程在每个主机上本地运行。</li><li>collector：收集器是无状态的，可以并行运行多个 jaeger-collector 实例。</li><li>query：jaeger-query 服务于 API 端点和 React/Javascript UI。该服务是无状态的，通常运行在负载均衡器之后，比如 NGINX。</li><li>ingester：jaeger-ingester 能够从 Kafka 读取数据，然后将其写入存储后端（Elasticsearch/Cassandra）。</li></ul></li></ol><p>使用 docker 容器运行，并挂载卷（将数据存储到本机而不是容器内）；从 elasticsearch 获取数据，使用 kibana 查看数据情况。</p><h1 id="all-in-one"><a href="#all-in-one" class="headerlink" title="all-in-one"></a>all-in-one</h1><p>按顺序创建容器，使用 <code>--link</code> 进行链接，非常容易构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elasticsearch</span></span><br><span class="line">docker run -d --name=elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e <span class="string">&quot;xpack.security.enabled=false&quot;</span> docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># kibana</span></span><br><span class="line">docker run -d --name=kibana --link=elasticsearch -p 5601:5601</span><br><span class="line">docker.elastic.co/kibana/kibana:7.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># all-in-one</span></span><br><span class="line">docker run -d --name jaeger \</span><br><span class="line">  --link=elasticsearch \</span><br><span class="line">  -e SPAN_STORAGE_TYPE=elasticsearch \</span><br><span class="line">  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \</span><br><span class="line">  -e ES_SERVER_URLS=http://elasticsearch:9200 \</span><br><span class="line">  -e ES_TAGS_AS_FIELDS_ALL=<span class="literal">true</span> \</span><br><span class="line">  -p 5775:5775/udp \</span><br><span class="line">  -p 6831:6831/udp \</span><br><span class="line">  -p 6832:6832/udp \</span><br><span class="line">  -p 5778:5778 \</span><br><span class="line">  -p 16686:16686 \</span><br><span class="line">  -p 14268:14268 \</span><br><span class="line">  -p 14250:14250 \</span><br><span class="line">  -p 9411:9411 \</span><br><span class="line">  jaegertracing/all-in-one</span><br></pre></td></tr></table></figure><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>查看容器内目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it elasticsearch bash</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/06/06/x3DLFaGgRbOcWM9.png" width="80%"><p><del>1. 挂载本地目录</del></p><p>本地的空目录会覆盖容器内有数据的目录，导致容器无法正常启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir -p /usr/share/elasticsearch/config /usr/share/elasticsearch/data /usr/share/elasticsearch/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">docker run -d --name=<span class="built_in">test</span> \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;xpack.security.enabled=false&quot;</span> \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/usr/share/elasticsearch/config,target=/usr/share/elasticsearch/config \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/usr/share/elasticsearch/data,target=/usr/share/elasticsearch/data \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/usr/share/elasticsearch/logs,target=/usr/share/elasticsearch/logs \</span><br><span class="line">docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><ol start="2"><li>挂载卷</li></ol><p>卷空时不会覆盖掉容器内原有的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建卷</span></span><br><span class="line">docker volume create my-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看卷</span></span><br><span class="line">docker inspect my-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除卷</span></span><br><span class="line">docker volume rm my-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载卷</span></span><br><span class="line">docker volume create es-config</span><br><span class="line">docker volume create es-data</span><br><span class="line">docker volume create es-logs</span><br><span class="line"></span><br><span class="line">docker run -d --name=<span class="built_in">test</span> \</span><br><span class="line">-p 9201:9200 -p 9301:9300 \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;xpack.security.enabled=false&quot;</span> \</span><br><span class="line">--mount <span class="built_in">source</span>=es-config,target=/usr/share/elasticsearch/config \</span><br><span class="line">--mount <span class="built_in">source</span>=es-data,target=/usr/share/elasticsearch/data \</span><br><span class="line">--mount <span class="built_in">source</span>=es-logs,target=/usr/share/elasticsearch/logs \</span><br><span class="line">docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">curl -X GET <span class="string">&quot;localhost:9201/_cat/nodes?v=true&amp;pretty&quot;</span></span><br></pre></td></tr></table></figure><p>挂载后，容器内的数据直接写到本地的卷中。</p><img src="https://i.loli.net/2021/06/06/Gg3tJNCSiaQKM2B.png"><h1 id="单独部署组件"><a href="#单独部署组件" class="headerlink" title="单独部署组件"></a>单独部署组件</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用启动容器名称 <code>elasticsearch</code> 或 localhost 作为访问地址，无法启动 jaeger-collector</p><ul><li>提示无法访问 Elasticsearch ，但是本地使用 curl 语句正常访问</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2021/05/09 10:58:46 maxprocs: Leaving GOMAXPROCS=4: CPU quota undefined</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557926.8695443,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;flags/service.go:117&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Mounting metrics handler on admin server&quot;</span>,<span class="string">&quot;route&quot;</span>:<span class="string">&quot;/metrics&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557926.8699071,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;flags/service.go:123&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Mounting expvar handler on admin server&quot;</span>,<span class="string">&quot;route&quot;</span>:<span class="string">&quot;/debug/vars&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557926.8716085,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;flags/admin.go:105&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Mounting health check on admin server&quot;</span>,<span class="string">&quot;route&quot;</span>:<span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557926.8717675,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;flags/admin.go:111&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Starting admin HTTP server&quot;</span>,<span class="string">&quot;http-addr&quot;</span>:<span class="string">&quot;:14269&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557926.8733315,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;flags/admin.go:97&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Admin server started&quot;</span>,<span class="string">&quot;http.host-port&quot;</span>:<span class="string">&quot;[::]:14269&quot;</span>,<span class="string">&quot;health-status&quot;</span>:<span class="string">&quot;unavailable&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;fatal&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557932.8956766,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;command-line-arguments/main.go:75&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Failed to init storage factory&quot;</span>,<span class="string">&quot;error&quot;</span>:<span class="string">&quot;failed to create primary Elasticsearch client: Head \&quot;http://elasticsearch2:9200\&quot;: context deadline exceeded&quot;</span>,<span class="string">&quot;stacktrace&quot;</span>:<span class="string">&quot;main.main.func1\n\tcommand-line-arguments/main.go:75\ngithub.com/spf13/cobra.(*Command).execute\n\tgithub.com/spf13/cobra@v0.0.7/command.go:838\ngithub.com/spf13/cobra.(*Command).ExecuteC\n\tgithub.com/spf13/cobra@v0.0.7/command.go:943\ngithub.com/spf13/cobra.(*Command).Execute\n\tgithub.com/spf13/cobra@v0.0.7/command.go:883\nmain.main\n\tcommand-line-arguments/main.go:137\nruntime.main\n\truntime/proc.go:225&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用 <code>publish_address</code> 作为访问地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 publish_address</span></span><br><span class="line">curl -XGET <span class="string">&#x27;0.0.0.0:9200/_nodes/http?pretty&#x27;</span> | grep publish_address</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>根据 Jaeger 提供的标志，转换为 <code>大写+下划线</code> 的形式，使用环境变量进行设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elasticsearch</span></span><br><span class="line">docker run -d --name=elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e <span class="string">&quot;xpack.security.enabled=false&quot;</span> -e ES_JAVA_OPTS=<span class="string">&quot;-Xms512m -Xmx512m&quot;</span>  docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># jaeger-collector 注意地址</span></span><br><span class="line">docker run -d --name=jaeger-collector --link elasticsearch2 -p 9411:9411 -p 14250:14250 -p 14268:14268 -p 14269:14269 -e SPAN_STORAGE_TYPE=elasticsearch -e ES_SERVER_URLS=http://172.17.0.2:9200 jaegertracing/jaeger-collector</span><br><span class="line"></span><br><span class="line"><span class="comment"># jaeger-agent</span></span><br><span class="line">docker run -d --name=jaeger-agent -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778/tcp -p 5775:5775/udp -e REPORTER_GRPC_HOST_PORT=172.17.0.3:14250 -e LOG_LEVEL=debug jaegertracing/jaeger-agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># jaeger-query 注意地址</span></span><br><span class="line">docker run -d --name=jaeger-query --link elasticsearch2 -p 16686:16686 -p 16687:16687 -e SPAN_STORAGE_TYPE=elasticsearch -e ES_SERVER_URLS=http://172.17.0.2:9200 jaegertracing/jaeger-query</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出容器</span></span><br><span class="line">docker container ls</span><br><span class="line"></span><br><span class="line">openstack user list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试日志</span></span><br><span class="line">docker inspect jaeger-agent | grep LogPath</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止并删除容器</span></span><br><span class="line">docker container stop jaeger-collector jaeger-agent jaeger-query</span><br><span class="line">docker container rm jaeger-collector jaeger-agent jaeger-query</span><br></pre></td></tr></table></figure><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><h2 id="Jaeger-UI"><a href="#Jaeger-UI" class="headerlink" title="Jaeger UI"></a>Jaeger UI</h2><p>直接使用 Jaeger UI 查询，可以自定义日期范围。</p><img src="https://i.loli.net/2021/06/06/BkVQqY167WsbSXw.png"><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>用 curl 查询 elasticsearch ，可以使用不同的参数过滤查询数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回索引信息</span></span><br><span class="line">curl -X GET <span class="string">&quot;localhost:9200/_cat/indices?v&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询索引包含 jaeger 的信息</span></span><br><span class="line">curl -X GET <span class="string">&quot;localhost:9200/jaeger*/_search?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;match_all&quot;: &#123;&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="elasticdump"><a href="#elasticdump" class="headerlink" title="elasticdump"></a>elasticdump</h2><p>使用 elasticdump 导出数据，并保存为 json 格式的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 elasticdump</span></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line">sudo npm install elasticdump -g</span><br><span class="line">elasticdump</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 json 格式导出数据</span></span><br><span class="line">elasticdump --input=<span class="string">&quot;http://localhost:9200/jaeger-service-05-08&quot;</span> --output=service.json</span><br><span class="line"></span><br><span class="line">elasticdump --input=<span class="string">&quot;http://localhost:9200/jaeger-span-05-08&quot;</span> --output=span.json</span><br></pre></td></tr></table></figure><h2 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h2><p>用 kibana 可视化查询数据。</p><img src="https://i.loli.net/2021/06/06/Mj6AFV58XfzadPb.png"><p>将数据进行可视化后，可以整理在一个面板中。</p><img src="https://i.loli.net/2021/06/06/1AIm9p3Z2Kdf4DQ.png"><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><p><a href="https://www.jaegertracing.io/docs/1.22/getting-started/">Getting Started – Jaeger documention</a></p></li><li><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html">Install Elasticsearch with Docker</a></p></li><li><p><a href="https://www.elastic.co/guide/en/kibana/current/docker.html">Install Kibana with Docker</a></p></li><li><p><a href="https://stackoverflow.com/questions/51785812/how-to-configure-jaeger-with-elasticsearch">How to configure Jaeger with elasticsearch?</a></p></li><li><p><a href="https://logz.io/blog/jaeger-and-the-elk-stack/">Distributed Tracing with Jaeger and the ELK Stack</a></p></li><li><p><a href="https://stackoverflow.com/questions/47519309/mount-an-empty-folder-in-host-to-a-non-empty-folder-in-docker">Mount an empty folder in host to a non-empty folder in Docker</a></p></li><li><p><a href="https://www.jianshu.com/p/277f609eb969">Go无法连接docker中es</a></p></li><li><p><a href="https://www.jaegertracing.io/docs/1.22/cli/#jaeger-agent">CLI flags – Jaeger documention</a></p></li><li><p><a href="https://www.jaegertracing.io/docs/1.22/deployment/">Deployment – Jaeger documention</a></p></li><li><p><a href="https://stackoverflow.com/questions/51785812/how-to-configure-jaeger-with-elasticsearch">How to configure Jaeger with elasticsearch?</a></p></li><li><p><a href="https://blog.csdn.net/meijinmeng/article/details/107537706">Jeager+cat+ELK 快速构建分布式调用链跟踪系统</a></p></li><li><p><a href="https://medium.com/jaegertracing/jaeger-elasticsearch-and-kibana-7ecb846137b6">Jaeger Elasticsearch and Kibana</a></p></li><li><p><a href="https://logz.io/blog/jaeger-and-the-elk-stack/">Distributed Tracing with Jaeger and the ELK Stack</a></p></li><li><p><a href="https://github.com/elasticsearch-dump/elasticsearch-dump">elasticsearch-dump/elasticsearch-dump</a></p></li></ul>]]></content>
    
    
    <summary type="html">使用 Elasticsearch 作为持久化存储，部署 all-in-one 镜像/单独部署 Jaeger 组件；elasticdump 导出数据，Kibana 可视化追踪信息。</summary>
    
    
    
    <category term="Jaeger" scheme="https://jckling.github.io/categories/Jaeger/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>FF14 GShade 使用教程</title>
    <link href="https://jckling.github.io/2021/05/02/Game/FFXIV/FF14-GShade%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://jckling.github.io/2021/05/02/Game/FFXIV/FF14-GShade%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-05-02T14:50:01.000Z</published>
    <updated>2021-08-16T06:59:39.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>GShade 是我用得最久的工具了，而且现在打游戏也都开着（加一层滤镜）。最近学会用 CMTool 和 TexTools ，再结合 GShade 就可以更加愉快地截图了wwww</p><p>有些滤镜的计算量大不适合打本的时候开，截图的时候用用就好了；另一些资源消耗少的滤镜可以开着打本，通常名称中带 <code>Gameplay</code> 。我只用预设的滤镜，因为选项实在是太多了懒得研究了 😂</p><h1 id="0x01-安装"><a href="#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h1><p>从 <a href="https://gposers.com/gshade/">GShade - GPOSERS</a> 下载 Windows 安装文件（下载不了的留言我发给你.jpg），然后双击运行。</p><img src="https://i.loli.net/2021/06/06/dgfbjE4oxIcRBDt.jpg" width="100%"/><p>具体的安装过程如下：</p><ol><li>选择中文安装</li><li>同意服务条款</li><li>定位到游戏安装目录选择 ffxiv_dx11.exe</li><li>默认选项安装（勾选 DirectX 11）</li><li>开始安装</li><li>选择截图保存位置</li><li>安装完毕</li></ol><img src="https://www.z4a.net/images/2021/05/03/install.gif" width="80%"/><h1 id="0x02-功能介绍"><a href="#0x02-功能介绍" class="headerlink" title="0x02 功能介绍"></a>0x02 功能介绍</h1><p>进入游戏后 <code>Ctrl+F2</code> 打开 GShade 界面（首页）</p><p>点击最上方的方框可以选择预设滤镜，中间是各种效果，下方是效果细节调整。自定义滤镜时记得开启 <code>FFKeepUI</code> 和 <code>FFRestoreUI</code> 保存，然后用 <strong>置顶激活</strong> 把开启的移至最前，默认按名称字母顺序排列。</p><img src="https://i.loli.net/2021/06/06/NKtS3G4FnbPDWkw.png" width="80%" /><p>注意不要覆盖预设滤镜，使用 <code>＋</code> 创建新的文件，最上方显示当前文件夹。</p><img src="https://i.loli.net/2021/06/06/KZYWL6RxzwNcvsD.png" width="80%" /><p>设置</p><ul><li>快捷键设置，我把 <code>屏幕快照热键</code> 设置成和游戏相同的 <code>Print Screen</code> 了（默认是啥不记得了hhh），因此每次截图都会得到两张，一张原始的另一张加了滤镜的。</li><li>保存路径设置，可以自定义截图存放路径。</li><li>其他的没用过xd</li></ul><img src="https://i.loli.net/2021/06/06/lfNbaCW5sFy4kgc.png" width="80%" /><p>平时我就用 OkamiGamePlay 滤镜玩游戏，资源消耗不大可以开着打本；截图的时候再换别的滤镜，有些滤镜支持鼠标对焦，所以只适合截图。</p><img src="https://www.z4a.net/images/2021/05/03/gshade.gif"/><h1 id="0x03-gpose-模式"><a href="#0x03-gpose-模式" class="headerlink" title="0x03 gpose 模式"></a>0x03 gpose 模式</h1><p>游戏中的 gpose 模式就是 <code>集体动作</code>，可以在技能里找到（快捷键 P）；也可以在输入框发送 <code>/gpose</code> 进入。</p><img src="https://i.loli.net/2021/06/06/kIwKscf4qthYaVG.png" width="50%" /><p>最上方一栏从左往右分别是（括号内表示快捷键）：</p><ul><li>角色面朝镜头方向（空格）</li><li>镜头位置点亮灯光1（X）</li><li>全体动作暂停（1）</li><li>目标动作暂停（2）</li><li>时刻/天气停止：开启表示停止</li><li>显示/隐藏战斗特效：开启表示显示</li><li>显示/隐藏说明：开启表示显示</li><li>重置临边昏暗</li><li>重置镜头（Z）<ul><li>调整镜头（Q、W、E、A、S、D）</li></ul></li></ul><h2 id="整体设置"><a href="#整体设置" class="headerlink" title="整体设置"></a>整体设置</h2><ul><li>镜头调整最近可以拉到 200，超近的距离，用鼠标滚轮拉不到这么近！</li><li>旋转以 45° 为基本单位</li><li>自带一些滤镜和特效</li><li>支持手动调节亮度、景深、对焦、临边昏暗</li></ul><img src="https://i.loli.net/2021/06/06/kTrxb8niNwE4tvq.png" width="50%"/><h2 id="特效-边框设置"><a href="#特效-边框设置" class="headerlink" title="特效/边框设置"></a>特效/边框设置</h2><p>状态一共有五种，就是副本中遇到过的那些：</p><ul><li>冻结、石化、热病、睡眠、魅惑</li></ul><p>右侧三个符号分别表示：</p><ul><li>附加/解除状态（仅目标）</li><li>附加状态（全体）</li><li>重置状态</li></ul><p>湿衣效果就是下雨和下水时的效果，可以手动开启（一键黑皮）</p><p>提供了许多边框，包括拍立得、电影等等</p><p>贴纸模式没有用过也…</p><img src="https://i.loli.net/2021/06/06/ePfhvF4qpBanXz3.png" width="50%"/><h2 id="灯光亮度-扩展设置"><a href="#灯光亮度-扩展设置" class="headerlink" title="灯光亮度/扩展设置"></a>灯光亮度/扩展设置</h2><p>灯光共有三种类型，一共可以打三个光，灯光照亮的范围按照类型 123 的顺序逐渐增加</p><p>右侧符号分别表示：</p><ul><li>灯光全解除</li><li>重置灯光细节设置</li></ul><img src="https://i.loli.net/2021/06/06/OWAyBtKGJDRqu59.png" width="50%"/><h2 id="动作设置"><a href="#动作设置" class="headerlink" title="动作设置"></a>动作设置</h2><p>虽然可以让角色面向镜头，但是有些动作不受这个限制，视线同理。</p><ul><li>角色面朝镜头方向：面部转向镜头，考虑实际人头转动的能力，镜头太偏转不过去的</li><li>视线看向镜头方向：简单理解为眼动</li><li>反复做动作：重复执行动作</li></ul><p>移动动作</p><ul><li>前进行走</li><li>前进奔跑</li><li>前进冲刺</li><li>向左平移行走</li><li>向左平移奔跑</li><li>向右平移行走</li><li>向右平移奔跑</li><li>后退行走</li></ul><p>口型动作一共有三种，都是在说话的动作，嘴巴张开的幅度 123 逐渐递增。</p><img src="https://i.loli.net/2021/06/06/J2InCrShjgB4tLa.png" width="50%"/><p>情感动作只能用在自己身上，选中目标没用。情感动作和表情都能使用，情感动作+表情有奇效🥴</p><img src="https://i.loli.net/2021/06/06/Fn1J3Icdpoqwf7C.png" width="50%"/><h2 id="角色显示设置"><a href="#角色显示设置" class="headerlink" title="角色显示设置"></a>角色显示设置</h2><p>预设了多种过滤选项，通常我就用操作角色中的 <code>自己</code> 和 <code>其他玩家</code> ，组队之后的玩家就属于操作角色，画面中的路人玩家属于不操作角色。</p><img src="https://i.loli.net/2021/06/06/kB3UwFMervxj5WY.png" width="50%"/><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://gposers.com/gshade/">GShade - GPOSERS</a></li></ul>]]></content>
    
    
    <summary type="html">一键上滤镜</summary>
    
    
    
    <category term="Game" scheme="https://jckling.github.io/categories/Game/"/>
    
    
    <category term="FFXIV" scheme="https://jckling.github.io/tags/FFXIV/"/>
    
  </entry>
  
  <entry>
    <title>FF14 TexTools 使用教程</title>
    <link href="https://jckling.github.io/2021/04/29/Game/FFXIV/FF14-TexTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://jckling.github.io/2021/04/29/Game/FFXIV/FF14-TexTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-04-29T07:29:35.000Z</published>
    <updated>2021-08-16T06:59:39.256Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning flat"><p>2021.8.15 已更新 2.3.6.2 版，国服 5.5 可用<br><em>PS：评论审核需要时间，不要重复刷评论</em> 🆘</p></div><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>摸了一天 CMTool 之后，想了想这玩意儿只能修改姿势和使用游戏原本就有的道具，后来找了半天发现一个叫 TexTools 的工具，我的简单认知就是可以修改贴图材料的工具（在原来的身体、装备基础上进行覆盖）。</p><h1 id="0x01-安装"><a href="#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h1><p>TexTools 也是 Github 上开源的软件，所以直接下载就好啦：<a href="https://github.com/TexTools/FFXIV_TexTools_UI/releases">TexTools/FFXIV_TexTools_UI</a> ，下不了的朋友留言我发给你（还是那句，能访问我的博客应该不会遇到这个问题 🥴</p><p>这里选择下载 exe 执行安装，也可以下载 zip 压缩包解压到想要安装的目录。</p><img src="https://i.loli.net/2021/06/06/wAo4v58a3eYRDul.png" /><p>2.3.5.8 版本安装完毕后包含以下文件，FFXIV_TexTools 就是咱们要用的工具。</p><p>PS：这图标干嘛非要和游戏本体的图标一样啊！</p><img src="https://i.loli.net/2021/06/06/7b8p3GKhwlWrvMj.png" /><p><strong>注意</strong>：和 CMTool 不同，这个工具必须在启动 FF14 前使用，然后进入游戏才能看到变化，而且游戏中是无法实时修改的。</p><h1 id="0x02-功能介绍"><a href="#0x02-功能介绍" class="headerlink" title="0x02 功能介绍"></a>0x02 功能介绍</h1><p>我用 DirectX 11 玩的游戏，所以用这个工具的时候需要选择 DX11 ，每次打开这个工具都得手动切换（不切换好像也没问题¿）。</p><p>工具自带了三个 Mod 下载网址，我只在第二个网站下过 Mod 👇</p><ul><li><a href="https://prettykittyemporium.blogspot.com/">PrettyKitty Emporium</a></li><li><a href="https://www.xivmodarchive.com/">XIV Mod Archive</a></li><li><a href="https://www.nexusmods.com/finalfantasy14">Nexus Mods</a></li></ul><img src="https://i.loli.net/2021/06/06/mfX78bPgqioxtJA.png" /><p>菜单栏提供的各个选项我还没摸明白，目前会的就只是导入和启用 Mod ，用 Textools 修改装备纹理细节之类还没研究过（也不知道会不会去研究就是了）。</p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ol><li><p>在玩崩了的时候，用 <code>初始化</code> 还原游戏文件，同时也会清除导入的 Mod；</p></li><li><p>导入 Mod 不起作用的时候，用 <code>Cache Operations - Rebuild Cache</code> 重新构建。</p></li></ol><img src="https://i.loli.net/2021/06/06/GtAMjwzTuq5mPey.png" width="80%"/><h2 id="Mods"><a href="#Mods" class="headerlink" title="Mods"></a>Mods</h2><ol><li><p><code>Manage Mod List</code> 管理导入的 Mod，启用、禁用、删除、预览；</p></li><li><p><code>Clean up Modlist</code> 更新 Mod 列表，确保所有修改的文件都正确标注；</p></li><li><p><code>Recover Unused Space</code> 整理 DAT 文件碎片。</p></li></ol><img src="https://i.loli.net/2021/06/06/jMUmahvWrFDgGyH.png" width="80%"/><p>Mod 列表这里可以按照道具或者 Mod 包选择，按名称或日期排序。</p><ul><li>按道具排列可以查看每个身体部位都有什么 Mod 依赖在什么道具上；</li><li>按 Mod 包排列可以查看导入的 ttmp/ttmp2 都来自什么 Mod 包。</li></ul><img src="https://i.loli.net/2021/06/06/AH2MgJGNS9TP7mW.png" width="80%"/><ol><li><p><code>禁用所有Mod</code> ，不知道自己都启用了什么 Mod 的时候用它关闭挺方便的；</p></li><li><p><code>启用所有Mod</code> ，因为我下载的 Mod 很多，所以不用这个选项，直接用 <code>Mod列表 - Manage Mod List</code> 手动启用。</p></li></ol><img src="https://i.loli.net/2021/06/06/7Ep3WP2sXiTnFuH.png" width="50%"/><h1 id="0x03-Mod-使用方式"><a href="#0x03-Mod-使用方式" class="headerlink" title="0x03 Mod 使用方式"></a>0x03 Mod 使用方式</h1><p>知道上面几个简单操作就可以开始玩 Mod 了，默认的文件存放路径是 <code>C:\用户名\Documents\TexTools</code>（<code>此电脑\文档\TexTools</code>），把下载的 Mod 放到 <code>ModPacks</code> 文件夹中方便整理。</p><img src="https://i.loli.net/2021/06/06/Jqe5EBvlauCVKtz.png" width="80%"/><p>我只在 <a href="https://www.xivmodarchive.com/">XIV Mod Archive</a> 上下载过 Mod ，而且都是 ttmp 或者 ttmp2 后缀的文件。那些名称里带 <code>TB2.0</code> 的 Mod 需要先打上 <a href="https://www.xivmodarchive.com/modid/17279">The Body 2.0</a> （<strong>NSFW</strong>）的 Mod 然后才能用，否则用起来就是下面这样 😶</p><img src="https://i.loli.net/2021/06/06/DtEBSgIzmc8FNAe.png" width="35%"/><ol><li>下载 <a href="https://www.xivmodarchive.com/modid/17279">The Body 2.0</a> ，解压到 ModPacks 文件夹；</li></ol><img src="https://i.loli.net/2021/06/06/lSTPgdHCUsW32Fp.png" width="80%"/><ol start="2"><li>导入最基础的 Mod （<code>Mods - 导入Mod包</code> ，导入后默认启用）<ul><li>TB_Type1/TB_Type1_SFW.ttmp2</li><li>Type1_Legacy patch/Type1_Legacy_A.ttmp2）</li></ul></li></ol><img src="https://i.loli.net/2021/06/06/7XglqsOPFca2TNY.png" width="80%"/><p>由于导入的是身体，意味着穿上装备（衣服、裤子、鞋子）就会遮盖掉效果，脱下的效果如下图所示。刚才消失的腿实际上图面第三张图那样，这是另一个 Mod（<a href="https://www.xivmodarchive.com/modid/29502">BNS to FF Thavnairian legs port (TB2.0)</a>），依赖 TB2.0 并且绑定在萨维奈垮裤上。</p><div class="justified-gallery"><p><img src="https://i.loli.net/2021/06/06/zmWlIoBEHZ3K87x.png"><br><img src="https://i.loli.net/2021/06/06/J4x61NdWeTikICS.png"><br><img src="https://i.loli.net/2021/06/06/bXItoEVGDiCqfkr.png"></p>          </div><p>使用 Mod 就这三步：下载 -&gt; 导入 -&gt; 启用。</p><p>有些 Mod 是依赖于基础的身体 Mod 和装备 Mod，上面的就是得先打上 TB2.0 的身体 Mod 再穿上萨维奈垮裤才能显示出来，所以之前提到的 CMTool （<a href="https://jckling.github.io/2021/04/26/FFXIV/FF14-CMTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">FF14 CMTool 使用教程</a>）就可以结合起来用了wwww</p><p>装备直接用 <a href="https://ff14.huijiwiki.com/wiki/ItemSearch">物品检索器</a> 搜索英文名称就好了，不过国服没有 5.5 的装备😢</p><img src="https://i.loli.net/2021/06/06/SKHlFsVxJ8u2eiQ.png" /><h1 id="0x04-Mod-搜索姿势"><a href="#0x04-Mod-搜索姿势" class="headerlink" title="0x04 Mod 搜索姿势"></a>0x04 Mod 搜索姿势</h1><p>简单讲一下 <a href="https://www.xivmodarchive.com/">XIV Mod Archive</a> 的搜索选项，点击 <code>Show More Search Options</code> 会多出红框里的选项。另外，需要点击页面右上角 Log In with Discord 用 <a href="https://discord.com/">Discord</a> 账号授权登录才能查看 NSFW 相关内容。 </p><ul><li><strong>NSFW</strong>：Not Safe For Work 工作场所不宜（简单理解：R18）</li><li><strong>Mod Types</strong>：模型类型，分为 TexTool mods 和 Other mods</li><li><strong>Races</strong>：种族，Midlander, Highlander, Miqo’te, Elezen, Au Ra, Viera, ……</li><li><strong>Gender</strong>：性别，Any、Male、Female、Unisex</li><li><strong>Sort by</strong><ul><li>排序依据，Relevance、Last Version Update、Release Date、Name、Views、Views Today、Downloads、Followers</li><li>升序降序，Descending、Ascending</li></ul></li></ul><img src="https://i.loli.net/2021/06/06/D6FmWo5TyXuOQrs.png" /><p>Mod Types 模型类型，我一般就直接用 Textools 和 Concept Matrix Pose 这俩搜索。 </p><img src="https://i.loli.net/2021/06/06/dSzUrFbVINiCJXa.png" width="80%"/><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://github.com/TexTools/FFXIV_TexTools_UI">TexTools/FFXIV_TexTools_UI</a></li><li><a href="https://ngabbs.com/read.php?tid=21744373">[幻想科技]如何使用Textools更改Mod模型的光效、颜色、金属质感 - 更新v1.1</a></li><li><a href="https://docs.google.com/document/d/1M04dbdV1qUt0EzRalvwbB1oI3aPT6t8KEf9KgQfGn6E/edit#">TexTools Item Metadata Settings Guide</a></li></ul>]]></content>
    
    
    <summary type="html">材质、贴图等，也就是通常说的 Mod</summary>
    
    
    
    <category term="Game" scheme="https://jckling.github.io/categories/Game/"/>
    
    
    <category term="FFXIV" scheme="https://jckling.github.io/tags/FFXIV/"/>
    
  </entry>
  
  <entry>
    <title>FF14 CMTool 使用教程</title>
    <link href="https://jckling.github.io/2021/04/26/Game/FFXIV/FF14-CMTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://jckling.github.io/2021/04/26/Game/FFXIV/FF14-CMTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-04-26T13:00:14.000Z</published>
    <updated>2021-08-16T06:59:39.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>在群里看到一张公式光的截图 👇 然后从群友那里得知是用动作调整工具 CMT 弄出来的。</p><img src="https://i.loli.net/2021/06/06/6aeNRXEhLdGKfP5.jpg" width="50%" /><p>立马 Google 了起来，相关的中文资料真的少，搜索 <code>CMT FF14</code> 出来几个结果；然后又看到 Github 开源项目（果然是你）。</p><p>结合几年前的中文教程和最新的软件包，周末花了一整天的时间研究怎么用这工具（另一天研究 TexTool 去了），感谢油管教程🙏 视频链接附在文末了！</p><p>CMTool 的功能十分强大，包括但不限于：</p><ul><li>人物修改（捏人）</li><li>装备替换</li><li>动作替换</li><li>时间天气修改</li></ul><p>现在的 CMTool 支持中文，所以还是很好弄明白的！</p><h1 id="0x01-安装"><a href="#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h1><p>CMTool 是开源软件，所以直接上 Github 下载就好啦：<a href="https://github.com/imchillin/CMTool/releases">imchillin/CMTool</a> ，需要帮助的朋友可以留言我发给你（不过能访问我的博客应该没有这个问题😂</p><p>直接下载 zip 压缩包然后解压到想要安装的目录即可。</p><img src="https://i.loli.net/2021/06/06/CrDgwxQfsHtza5o.png" width="80%"/><p>2.0.14.2 版本解压之后包含以下文件，ConceptMatrix 就是咱们要用的工具了。</p><img src="https://i.loli.net/2021/06/06/RrZMwpqXVHvyt4N.png" width="80%"/><p><strong>注意：</strong> 这个工具要在登录 FF14 之后再启动，否则确认之后一堆弹窗（选择 yes/no 都无所谓）。</p><img src="https://www.z4a.net/images/2021/05/03/crash.gif" /><h1 id="0x02-功能介绍"><a href="#0x02-功能介绍" class="headerlink" title="0x02 功能介绍"></a>0x02 功能介绍</h1><p>我就用了几个小时，理解不对的地方还麻烦兄弟们指正了。</p><h2 id="目标基本设置"><a href="#目标基本设置" class="headerlink" title="目标基本设置"></a>目标基本设置</h2><p><strong>Gpose 模式</strong> 就是游戏里的 <code>/gpose</code> 指令，直接点并不会切换为观景模式😂</p><p><strong>目标模式</strong> 用于对选中的目标修改渲染，例如人物数据、装备等，意思是可以把画面中选中的人物修改成设定的样子（不仅可以修改自己，也可以修改别人）。</p><p>PS：用 CMTool 所做的所有修改仅自己可见。</p><p><strong>保存外观</strong> 可以保存玩家角色的当前外观（人物数据、装备），如果开启目标模式，就可以保存选中人物的当前外观，也就是说可以保存别人的外观然后刷新到自己身上。</p><p>保存状态和读取状态暂时还没搞明白。</p><p><strong>模型列表</strong> 里可以选择替换成任意模型（坐骑、宠物、野怪、NPC 等等）。</p><p><strong>强制动作</strong> 可以让角色做出动作和表情，但我一直没用成功xd</p><p>通常的使用方式是保存外观后再修改人物数据，然后读取恢复；或者直接重载进程。</p><img src="https://i.loli.net/2021/06/06/ASkzNj9qIbwLB5Q.png" /><h2 id="目标属性"><a href="#目标属性" class="headerlink" title="目标属性"></a>目标属性</h2><p>目标属性包括人物数据的颜色部分，大小和高级设置没有用过，湿衣效果和 Gpose 模式中的相同。</p><img src="https://i.loli.net/2021/06/06/riDGl4BIQ5ztnXx.png" /><h2 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h2><p>包括到 5.4 的装备、商城装备以及 NPC 装备，非常适合 COS（当然也可以直接用 <code>目标基本设置 - 模型列表</code> 变成 NPC），还提供染色功能。当前试穿的装备可以一键保存，之后再直接读取即可。</p><img src="https://i.loli.net/2021/06/06/ydL1viTzCr4N6ph.png" /><h2 id="动作矩阵"><a href="#动作矩阵" class="headerlink" title="动作矩阵"></a>动作矩阵</h2><p>只能在 Gpose 模式下使用，通常用目标模式选中需要修改动作的人物，然后 <strong>启用编辑</strong>，<strong>加载CMP文件</strong> 就能显示动作了，不过需要用 <code>目标基本设置 - X/Y/Z轴位置</code> 调整目标位置，还要用图中下半部分的选项调整肢体位置，否则经常悬空穿模什么的…</p><p>右边选择身体部位，左边一般用角色模型属性中的旋转。</p><p>注意：启用编辑后所有目标都被强行固定，不过还是会在漂移，所以启用前一定要暂停目标动作。</p><img src="https://i.loli.net/2021/06/06/yWpaeus5IwGko8C.png" /><h2 id="世界"><a href="#世界" class="headerlink" title="世界"></a>世界</h2><p>进入 Gpose 模式前可以修改时间和天气，进入 Gpose 模式后只能改变天气。<strong>解除角色渲染限制</strong> 应该是用来匹配修改时间天气后的环境，通常有改就启用。<strong>刷新按钮</strong> 用于读取当前游戏中的天气。</p><p>左侧镜头设置可以在 Gpose 模式下精细地调整镜头，但是遇到立体模型（无法穿透）还是会被挤过去，类似于对着墙壁可以怼脸截图那样。</p><p><strong>gpose滤镜</strong> 提供了一些简单的修图功能，自带一些残念的滤镜，不过滤镜一般就直接用 <a href="https://gposers.com/gshade/">GShade</a> 。</p><p>这里的镜头设置和滤镜都可以保存之后再读取，因为感觉不通用所以一直没用过保存功能xd</p><img src="https://i.loli.net/2021/06/06/TOZ6NRJ8sfVta2X.png" /><h1 id="0x03-实例"><a href="#0x03-实例" class="headerlink" title="0x03 实例"></a>0x03 实例</h1><h2 id="单人"><a href="#单人" class="headerlink" title="单人"></a>单人</h2><p>这是 <a href="https://www.xivmodarchive.com/modid/29432">Hugo Boss</a> 中的一个动作，呆——</p><img src="https://i.loli.net/2021/06/06/fFpgoV91hGTx3AP.jpg" width="50%"/><h2 id="双人"><a href="#双人" class="headerlink" title="双人"></a>双人</h2><p>首先，叫上一个黑皮人男，然后给不同的目标加载不同的姿势，调整位置和转向，完成。</p><p>我忘记是哪两个动作了233333</p><img src="https://i.loli.net/2021/06/06/Yurzqd2CsQviTt6.jpg" /><h2 id="多人（暂无）"><a href="#多人（暂无）" class="headerlink" title="多人（暂无）"></a>多人（暂无）</h2><p>我就是亲友少qwq</p><h1 id="0x04-CMP下载"><a href="#0x04-CMP下载" class="headerlink" title="0x04 CMP下载"></a>0x04 CMP下载</h1><p>我只在 <a href="https://www.xivmodarchive.com/search?sortby=rank&sortorder=desc&types=11">XIV Mod Archive</a> 下载过动作（cmp 文件后缀），搜索方法见 <a href="https://jckling.github.io/2021/04/29/Game/FFXIV/FF14-TexTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">FF14 TexTools 使用教程</a> 。</p><img src="https://i.loli.net/2021/06/06/1g4XqyrGvxoN3ed.png" /><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://github.com/imchillin/CMTool">imchillin/CMTool</a></li><li><a href="https://www.gamemale.com/thread-71758-1-1.html">[资源] FF14拓展工具CMTool入门指引</a></li><li><a href="https://www.gamemale.com/thread-77507-1-1.html">[问题] 各位大佬FF14的CMT的姿势是从哪下载的？</a></li><li><a href="https://www.youtube.com/watch?v=KeyWlQl-RRU&t=618s">How to use CMTools in FFXIV</a></li></ul>]]></content>
    
    
    <summary type="html">国服玩家将其简称为 CMT（大概吧）</summary>
    
    
    
    <category term="Game" scheme="https://jckling.github.io/categories/Game/"/>
    
    
    <category term="FFXIV" scheme="https://jckling.github.io/tags/FFXIV/"/>
    
  </entry>
  
  <entry>
    <title>OpenTelemetry 规范阅读</title>
    <link href="https://jckling.github.io/2021/04/02/Jaeger/OpenTelemetry%20%E8%A7%84%E8%8C%83%E9%98%85%E8%AF%BB/"/>
    <id>https://jckling.github.io/2021/04/02/Jaeger/OpenTelemetry%20%E8%A7%84%E8%8C%83%E9%98%85%E8%AF%BB/</id>
    <published>2021-04-02T02:29:21.000Z</published>
    <updated>2021-08-16T06:59:39.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Open Tracing 和 OpenCensus 已经合并为 OpenTelemetry ，<a href="https://github.com/open-telemetry/opentelemetry-specification">OpenTelemetry specification</a> 规定了所有实现需要遵循的要求。</p><h2 id="OpenTelemetry-客户端架构"><a href="#OpenTelemetry-客户端架构" class="headerlink" title="OpenTelemetry 客户端架构"></a>OpenTelemetry 客户端架构</h2><p>面向切面的程序设计（Aspect-Oriented Programming, AOP）</p><ul><li>横切关注点（cross-cutting concern）</li></ul><img src="https://i.loli.net/2021/06/06/zU48tmThR1yJHKi.png" width="70%"/><p>OpenTelemetry 被设计为一系列独立的观察性（Observability）工具，称为信号（Signal），在共享机制上下文传播（context propagation）的基础上设计。</p><p>信号作为横切关注点（cross-cutting concern），被整合到许多库中。</p><p>每个信号作为横切关注点的部分都和应用程序独立管理的部分是分离的。每个信号都提供特殊形式的可观察性，例如，tracing、metrics、baggage 就是三种独立的信号。信号共享通用的子系统——上下文传播。</p><p>OpenTelemetry 客户端被设计为将信号的作为横切关注点导入的部分与可以独立管理的部分分离，同时也被设计为一个扩展框架。为了实现这些目标，每个信号都包含四种类型的包：API、SDK、语义约定（Semantic Conventions）、贡献包（Contrib）</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>API 包由用于检测的横切公共接口组成，导入到第三方库和应用程序代码的 OpenTelemetry 客户端的任何部分都被认为是 API 的一部分</p><h3 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h3><p>SDK 是 OpenTelemetry 项目提供的 API 实现。在一个应用中，由应用程序所有者安装和管理 SDK 。SDK 包含额外的公共接口，不属于 API 包，因为它们不是横切关注点。这些公共接口被定义为构造器和插件。应用程序所有者使用 SDK 构造器，插件作者使用 SDK 插件接口。根据 OpenTelemetry API 编写 OpenTelemetry 仪器的维护者（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/glossary.md#instrumentation-author">Instrumentation Author</a>）不能直接引用任何 SDK 包，只能引用 API。</p><ul><li>构造器（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/glossary.md#constructors">Constructors</a>）：应用程序所有者用来初始化和配置 OpenTelemetry SDK 和 贡献包的公共代码。例如，配置对象、环境变量、生成器。</li><li>插件（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/glossary.md#sdk-plugins">SDK Plugins</a>）：拓展 OpenTelemetry SDK 的库。插件接口如 <code>SpanProcessor</code>、<code>Exporter</code>、<code>Sampler</code> 。</li></ul><h3 id="语义约定（Semantic-Conventions）"><a href="#语义约定（Semantic-Conventions）" class="headerlink" title="语义约定（Semantic Conventions）"></a>语义约定（Semantic Conventions）</h3><p>语义约定定义了键值，用于描述应用程序的可观察概念、协议和操作。</p><ul><li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/README.md">Resource Conventions</a></li><li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/README.md">Span Conventions</a></li><li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/semantic_conventions/README.md">Metrics Conventions</a></li></ul><h3 id="贡献包（Contrib-Packages）"><a href="#贡献包（Contrib-Packages）" class="headerlink" title="贡献包（Contrib Packages）"></a>贡献包（Contrib Packages）</h3><p>OpenTelemetry 项目维护了流行开源软件（Open Source Software, OSS）项目的集成，API 集成包括 Web 框架、数据库客户端、消息队列，SDK 集成包含导出至分析工具和存储系统的插件。</p><p>OpenTelemetry 规范必需的插件都包含在 SDK 中，例如 OTLP Exporters 和 TraceContext Propagators 。</p><p>可选的、与 SDK 分离的插件和工具包被称为贡献包。API Contrib 指的是仅依赖于 API 的包；SDK Contrib 指的是依赖 SDK 的包。</p><p>术语 Contrib 特指 OpenTelemetry 项目维护的插件和工具集合，不涉及第三方插件。</p><h3 id="版本控制和稳定性（Versioning-amp-Stability）"><a href="#版本控制和稳定性（Versioning-amp-Stability）" class="headerlink" title="版本控制和稳定性（Versioning &amp; Stability）"></a>版本控制和稳定性（Versioning &amp; Stability）</h3><p>OpenTelemetry 重视稳定性和向后兼容性（backward compatibility）。</p><ul><li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/versioning-and-stability.md">Versioning and stability for OpenTelemetry clients</a></li></ul><h2 id="Tracing-Signal"><a href="#Tracing-Signal" class="headerlink" title="Tracing Signal"></a>Tracing Signal</h2><p>分布式追踪是一组事件，由单个逻辑操作触发，并跨应用程序中的各个组件合并。一个分布式追踪包含跨进程、网络和安全边界的事件。</p><h3 id="Traces"><a href="#Traces" class="headerlink" title="Traces"></a>Traces</h3><p>Trace 由 Span 隐式定义，可以认为是 Span 的有向无环图（Directed Acyclic Graph, DAG）。</p><h3 id="Spans"><a href="#Spans" class="headerlink" title="Spans"></a>Spans</h3><p>Span 代表了事务中的操作，每个 Span 封装了以下状态：</p><ul><li>操作名称</li><li>起止时间戳</li><li>属性（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/common.md#attributes">Attributes</a>）：一系列键值对</li><li>0 个或多个事件（Events）的集合，每个都是一个元组（时间戳，名称，属性），名称必须是字符串</li><li>父 Span 的标识</li><li>与 0 个或多个具有因果关系的 Span 链接（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#links-between-spans">Links</a>），通过相关 Span 的 SpanContext</li><li>引用 Span 所需的 SpanContext 信息</li></ul><h3 id="SpanContext"><a href="#SpanContext" class="headerlink" title="SpanContext"></a>SpanContext</h3><p>表示标识 Trace 中的 Span 的所有信息，必须传播到子 Span 和跨进程边界。一个 SpanContext 包含从父 Span 传播到子 Span 的跟踪标识符和选项。</p><ul><li>TraceId：trace 的标识符。全局唯一，随机生成 16 个字节。TraceId 用于将跨进程的特定 trace 的所有 span 分组在一起。</li><li>SpanId：span 的标识符。全局唯一，随机生成 8 个字节。当传递给子 Span 时，该标识符将成为子 Span 的父 span id 。</li><li>TraceFlags：trace 的选项。表示为一字节（位图 bitmap）<ul><li>Sampling bit：表示 trace 是否被采样的比特（掩码 <code>0x1</code>）</li></ul></li><li>Tracestate：在一个键值对列表中携带特定于追踪系统的上下文。Tracestate 允许不同的供应商传播额外的信息，用它们的遗留的 Id 格式进行互操作。</li></ul><h3 id="Span-之间的链接（Links）"><a href="#Span-之间的链接（Links）" class="headerlink" title="Span 之间的链接（Links）"></a>Span 之间的链接（Links）</h3><p>一个 Span 必须和 0 个或多个因果关联的其他 Span 链接（由 SpanContext 定义）。链接可以指向一个 Trace 内的 Span 或跨 Trace 。</p><p>当 Trace 进入服务的可信边界，并且服务策略要求生成新的 Trace 而不信任传入的 Trace 上下文时，可以用来表示原始 trace 和接下来的 trace 之间的关系。新链接的 Trace 还可以表示一个长时间运行的异步数据处理操作，由传入的许多请求之一发起。</p><h2 id="Metric-Signal"><a href="#Metric-Signal" class="headerlink" title="Metric Signal"></a>Metric Signal</h2><p>OpenTelemetry 允许用预定义的聚合和标签集记录原始测量或度量。</p><p>使用 OpenTelemetry API 记录原始测量允许最终用户决定应该为这个度量用什么聚合算法，以及定义标签（维度）。它将被用于像 gRPC 的客户端库，记录原始测量 server_latency 和 received_bytes 。因此最终用户将决定应该从这些原始测量数据中收集哪种类型的聚合值，也可能是简单的平均值或精细的直方图计算。</p><p>使用 OpenTelemetry API 记录预定义聚合的度量同样重要。它允许收集 CPU 和内存使用，或者是像队列长度这样的简单度量。</p><h3 id="记录原始测量"><a href="#记录原始测量" class="headerlink" title="记录原始测量"></a>记录原始测量</h3><p>用于记录原始测量的主要类是 <code>Measure</code> 和 <code>Measurement</code> 。可以使用 OpenTelemetry API 记录附加上下文的 <code>Measurement</code> 列表。因此，用户可以通过定义来聚合这些 <code>Measurement</code> ，并使用传递上下文来定义结果度量的额外维度。</p><h4 id="Measure"><a href="#Measure" class="headerlink" title="Measure"></a>Measure</h4><p><code>Measure</code> 描述库记录的单个值的类型。定义了公开测量方法的库和聚合独立测量到 <code>Metric</code> 中的应用之间的关系。<code>Measure</code> 由名称、描述和一个值的单位标识。</p><h4 id="Measurement"><a href="#Measurement" class="headerlink" title="Measurement"></a>Measurement</h4><p><code>Measurement</code> 描述为 <code>Measure</code> 收集的单一值，<code>Measuremrnt</code> 是一个空接口，在 SDK 中定义。</p><h3 id="使用预定义聚合记录度量"><a href="#使用预定义聚合记录度量" class="headerlink" title="使用预定义聚合记录度量"></a>使用预定义聚合记录度量</h3><p>所有类型的预定义聚合度量的基类称为 <code>Metric</code> ，它定义了基本的度量属性，例如名称和标签。继承 <code>Metric</code> 的类定义自己的聚合类型和单个测量或点的结构。API 定义了以下类型的预定义聚合度量：</p><ul><li>Counter metric 报告瞬时测量。Counter 值可以上升或保持不变，但不可能下降也不可能为负，Counter 度量值有两种类型：<code>double</code> 和 <code>long</code> 。</li><li>Gauge metric 报告数字值的瞬时测量。Gauge 值可以上升或下降，也可以为负值。Gauge 度量值有两种类型：<code>double</code> 和 <code>long</code> 。</li></ul><p>API 允许构造选定类型的 <code>Metric</code> ，SDK 定义了要导出的 <code>Metric</code> 值的查询方式。</p><p>每种类型的 <code>Metric</code> 拥有自己的 API 记录将要聚合的值。API 支持推拉模型（push and pull model）来设置 <code>Metric</code> 值。</p><h3 id="度量数据模型和-SDK"><a href="#度量数据模型和-SDK" class="headerlink" title="度量数据模型和 SDK"></a>度量数据模型和 SDK</h3><p>基于 <a href="https://github.com/open-telemetry/opentelemetry-proto/blob/master/opentelemetry/proto/metrics/v1/metrics.proto">metrics.proto</a> 建立度量数据模型（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/datamodel.md">Metrics Data Model</a>），这个数据模型定义了三种语义：API 使用的事件模型（Event model）、SDK 和 OTLP 使用的 in-flight 数据模型、表示导出工具如何解释 in-flight 数据模型时间序列模型（TimeSeries model）。</p><p>不同的导出工具有不同的能力（例如，支持的数据模型）和约束（例如，哪些字符允许作为标签键）。所有导出工具都通过 OpenTelemetry SDK 中定义的度量生产者接口（Metric Producer interface）从度量数据模型中消费数据。</p><p>因此，Metrics 对数据的约束最小（例如，键中允许哪些字符），处理 Metrics 的代码应该避免对其进行验证和清洗。相反，将数据传递给后端，依赖后端执行验证，并从后端返回错误。</p><ul><li> <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/datamodel.md">Metrics Data Model Specification</a></li></ul><h2 id="Log-Signal"><a href="#Log-Signal" class="headerlink" title="Log Signal"></a>Log Signal</h2><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>数据模型定义了 OpenTelemetry 如何理解日志和事件</p><ul><li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md">Log Data Model</a></li></ul><h2 id="Baggage-Signal"><a href="#Baggage-Signal" class="headerlink" title="Baggage Signal"></a>Baggage Signal</h2><p>除了 trace 的传播，OpenTelemetry 还提供了 <code>Baggage</code> 来传播键值对。<code>Baggage</code> 用于索引一个服务中的可观察事件，该服务包含同一事务中先前的服务提供的属性，有助于在事件之间建立因果关系。</p><p>虽然 <code>Baggage</code> 可以用作其他横切关注点的原型，但这种机制主要是为了传递 OpenTelemetry 可观测性系统的值。</p><p>这些值可以从 <code>Baggage</code> 中消费，并作为度量的附加维度，或日志和跟踪的附加上下文使用。一些例子:</p><ul><li>web 服务可以从包含发送请求的服务的上下文中获益</li><li>SaaS 提供商可以包含有关负责该请求的 API 用户或令牌的上下文</li><li>确定特定浏览器版本与图像处理服务中的故障相关联</li></ul><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p><code>Resources</code> 获取关于被记录的遥测数据实体信息。例如，Kubernetes 容器公开的度量可以链接到指定集群、名称空间、pod 和容器名称的资源。<code>Resources</code> 可以捕获实体标识的整个层次结构，它可以描述云中的主机和特定的容器或进程中运行的应用程序。</p><h2 id="上下文传播（Context-Propagation）"><a href="#上下文传播（Context-Propagation）" class="headerlink" title="上下文传播（Context Propagation）"></a>上下文传播（Context Propagation）</h2><p>所有 OpenTelemetry 横切关注点，例如 trace 和 metric ，共享底层的 <code>Context</code> 机制，用于在分布式追踪中存储状态和访问跨 Span 生命周期的数据。</p><ul><li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/context.md">Context</a></li></ul><h2 id="传播器（Propagators）"><a href="#传播器（Propagators）" class="headerlink" title="传播器（Propagators）"></a>传播器（Propagators）</h2><p>OpenTelemetry 使用 <code>Propagators</code> 来序列化和反序列话横切关注点的值，例如 <code>Span</code> （通常只有 SpanContext 的部分）和 <code>Baggage</code> 。不同的 <code>Propagators</code> 类型定义了特定传输和绑定到数据类型的限制。</p><p>传播器 API 定义了一个 <code>Propagator</code> 类型</p><ul><li><code>TextMapPropagator</code> 将值注入载体并从载体中提取值为文本。</li></ul><h2 id="收集器（Collector）"><a href="#收集器（Collector）" class="headerlink" title="收集器（Collector）"></a>收集器（Collector）</h2><p>OpenTelemetry 收集器是一套组件，可以从 OpenTelementry 或其他监测/追踪库（Jaeger、Prometheus 等）执行的进程收集 traces、metrics 和其他遥测数据（例如，日志），并进行聚合和智能采样，导出 traces 和 metrics 到一个或多个监控/追踪后端。收集器允许丰富和转换所收集的遥测数据（例如，添加额外的属性或删除个人信息）。</p><p>OpenTelemetry 收集器有两种主要的操作模式：代理（与应用程序一起在本地运行的守护进程），收集器（独立运行的服务）。</p><h2 id="工具库（Instrumentation-Library）"><a href="#工具库（Instrumentation-Library）" class="headerlink" title="工具库（Instrumentation Library）"></a>工具库（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/glossary.md#instrumentation-library">Instrumentation Library</a>）</h2><p>被调用为另一个库启用 OpenTelemetry 可观测性的库称为工具库。</p><h1 id="API-规范"><a href="#API-规范" class="headerlink" title="API 规范"></a>API 规范</h1><h2 id="上下文（Context）"><a href="#上下文（Context）" class="headerlink" title="上下文（Context）"></a>上下文（Context）</h2><p><code>Context</code>是一种传播机制，在 API 边界和逻辑关联的执行单元之间承载执行范围（execution-scoped）的值。横切关注点使用相同的共享 <code>Context</code> 对象访问进程内的数据。</p><p><code>Context</code> 必须是不可变的，写操作必须导致创建一个新的 <code>Context</code> ，包含原始值和更新值。</p><p>一个 <code>Context</code> 预期包含以下操作：</p><h3 id="生成键"><a href="#生成键" class="headerlink" title="生成键"></a>生成键</h3><p>键允许横切关注点控制对其本地状态的访问。它们是唯一的，这样其他可能使用相同上下文的库就不会使用相同的键。建议关注点通过 API 中介数据访问，而不是提供对键的直接访问。</p><p>API 必须接受以下参数：</p><ul><li>键名。键名的存在是为了调试，它不能唯一地标识键。使用相同名称多次调用 <code>CreateKey</code> 不应该返回相同的值，除非语言约束另有规定。</li></ul><p>API 必须返回一个表示新创建的键的不透明对象。</p><h3 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h3><p>关注点可以在 <code>Context</code> 表示的当前执行状态中访问它们的本地状态。</p><p>API 必须接受以下参数：</p><ul><li><code>Context</code></li><li>键</li></ul><p>API 必须返回在 <code>Context</code> 中指定键的值。</p><h3 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h3><p>关注点可以在 <code>Context</code> 表示的当前执行状态中记录它们的本地状态。</p><p>API 必须接受以下参数：</p><ul><li><code>Context</code></li><li>键</li><li>设置的值</li></ul><p>API 必须返回包含新值的新的 <code>Context</code> 。</p><h3 id="可选的通用操作"><a href="#可选的通用操作" class="headerlink" title="可选的通用操作"></a>可选的通用操作</h3><p>这些操作预计只能通过隐式使用 <code>Context</code> 实现，因此是可选的。这些操作应该只用于实现自动范围切换，并通过 SDK 组件和 OpenTelemetry 工具库定义更高级别的 API。</p><h4 id="获取当前-Context"><a href="#获取当前-Context" class="headerlink" title="获取当前 Context"></a>获取当前 <code>Context</code></h4><p>API 必须返回与调用者的当前执行单元相关的 <code>Context</code> 。</p><h4 id="附加到-Context"><a href="#附加到-Context" class="headerlink" title="附加到 Context"></a>附加到 <code>Context</code></h4><p>将 <code>Context</code> 与调用者的当前执行单元相关联。</p><p>API 必须接受以下参数：</p><ul><li><code>Context</code></li></ul><p>API 必须返回一个可以用作 <code>Token</code> 的值，可用于恢复先前的 <code>Context</code> 。</p><p>注意，对该操作的每次调用都应该导致对分离 <code>Context</code> 的相应调用。</p><h4 id="分离-Context"><a href="#分离-Context" class="headerlink" title="分离 Context"></a>分离 <code>Context</code></h4><p>与调用者的当前执行单元相关的 <code>Context</code> 重置为附加到指定 <code>Context </code> 前的值。该操作用于帮助确保正确的 <code>Context</code> 与调用者的当前执行单元相关联。用户可以依靠它来识别错误的调用顺序，例如，试图分离不是当前实例的 <code>Context</code> 。在这种情况下，操作可以发出信号，警告用户错误的调用顺序，例如，记录错误或返回错误值。</p><p>API 必须接受以下参数：</p><ul><li> 附加到 <code>Context</code> 时返回的 <code>Token</code></li></ul><p>API 可能会返回一个用于检查操作是否成功的值。</p><h2 id="传播器（Propagators）-1"><a href="#传播器（Propagators）-1" class="headerlink" title="传播器（Propagators）"></a>传播器（Propagators）</h2><p>横切关注点使用 <code>Propagator</code> 将其状态发送到下一个进程，<code>Propagator</code> 定义为用于向应用程序交换的消息读写上下文数据的对象。每个关注点为每种支持的 <code>Propagators</code> 类型创建一组 <code>Propagators</code>。</p><p><code>Propagators</code> 利用 <code>Context</code> 为每个横切关注点注入和提取数据，例如 trace 和 <code>Baggage</code> 。</p><p>传播通常通过特定于库的请求拦截器和传播器的协作实现，其中拦截器检测传入请求和传出请求，并分别使用传播器的提取和注入操作。</p><p>预计编写插装库的用户将利用传播器 API 。</p><h3 id="传播器类型"><a href="#传播器类型" class="headerlink" title="传播器类型"></a>传播器类型</h3><p><code>Propagator</code> 类型定义了特定传输的限制，并绑定到数据类型，为了跨进程边界传播带内上下文数据。</p><p>Propagators API 目前定义了一个 <code>Propagator</code> 类型：</p><ul><li><code>TextMapPropagator</code> 是一种使用字符串键值对的形式向载体注入和提取值的类型。</li></ul><p>未来将添加二进制 <code>Propagator</code>。</p><h4 id="载体（Carrier）"><a href="#载体（Carrier）" class="headerlink" title="载体（Carrier）"></a>载体（Carrier）</h4><p>载体是 <code>Propagator</code> 用来读取值和写入值的媒介，每个特定的 <code>Propagator</code> 类型定义了预期的载体类型，例如字符串映射或字节数组。</p><p>用于注入的载体预期是可变的。</p><h4 id="操作（Operations）"><a href="#操作（Operations）" class="headerlink" title="操作（Operations）"></a>操作（Operations）</h4><p><code>Propagator</code> 必须定义 <code>Inject</code> 和 <code>Extract</code> 操作，以便向载体写入值和从载体读取值。每个 <code>Propagator</code> 类型必须定义特殊的载体类型，并且可以定义格外的参数。</p><ol><li>注入（Inject）</li></ol><p>向载体注入值，例如，向 HTTP 请求头注入。</p><p>必须的参数：</p><ul><li><code>Context</code> 。传播其器必须首先从 <code>Context</code> 检索适当的值，例如 <code>SpanContext</code>、<code>Baggage</code> 或其他横切关注点上下文。</li><li>保存传播器字段的载体。例如，传出的消息或 HTTP 请求。</li></ul><ol start="2"><li>提取（Extract）</li></ol><p>从传入的请求中提取值，例如，从 HTTP 请求头提取。</p><p>如果无法从载体中解析值，从横切关注点考虑，实现不能抛出异常，也不能在 <code>Context</code> 中存储新的值，这是为了保存先前存在的任何有效值。</p><p>必须的参数：</p><ul><li><code>Context</code> 。</li><li>保存传播器字段的载体。例如，传入的消息或 HTTP 响应。</li></ul><p>返回从作为参数传递的 <code>Context</code> 派生的新的 <code>Context</code>，其中包含提取的值，该值可以是 <code>SpanContext</code>、<code>Baggage</code> 或其他横切关注点上下文.</p><h3 id="TextMap-传播器"><a href="#TextMap-传播器" class="headerlink" title="TextMap 传播器"></a>TextMap 传播器</h3><p><code>TextMapPropagator</code> 将横切关注点的值作为字符串键值对注入和提取到跨进程边界的带内传输的载体中。</p><p>传播数据的载体在客户端（injector）和服务端（extractor）通常是 HTTP 请求。为了增加兼容性，键值对必须只包含根据 <a href="https://tools.ietf.org/html/rfc7230#section-3.2">RFC 7230</a> 构成有效 HTTP 头部字段的 US-ASCII 字符。</p><p><code>Getter</code> 和 <code>Setter</code> 是可选的帮助组件，分别用于提取和注入，它们被定义为与载体分离的对象，避免了运行时分配（runtime allocations）不需要额外的借接口实现对象来包装载体以访问其内容。</p><p><code>Getter</code> 和 <code>Setter</code> 必须是无状态的，并且允许存储为常量，为了有效避免运行时分配。</p><h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><p>预定义的传播器字段，如果载体被重用，应该在调用注入前删除这里的字段。</p><p>字段被定义为字符串键，用于标识载体中特定格式的组件。</p><p>例如，如果载体是一个单次使用或不可变的请求对象，则不需要清除字段；如果是可变的、可重用的对象，则后续调用应该首先请求这些字段。</p><p>用例：</p><ul><li>允许预先分配字段，特别是在 gRPC 元数据这样的系统中</li><li>允许在迭代器上进行单次传递</li></ul><p>返回 <code>TextMapPropagator</code> 将使用的字段列表。</p><p>注意，除了返回值之外，一些 <code>Propagator</code> 还可能定义带有变量名的附加字段。要获得一个特定载体对象的完整字段列表，使用 <code>Keys</code> 操作。</p><h4 id="TextMap-注入"><a href="#TextMap-注入" class="headerlink" title="TextMap 注入"></a>TextMap 注入</h4><p>向载体注入值。必须的参数和注入（Inject）操作相同。</p><p>可选的参数：</p><ul><li>用于设置传播的键值对的<code>Setter</code> 。传播器可以多次调用它来设置多个键值对。</li></ul><p>Setter 参数</p><p>Setter 是 <code>Inject</code> 中的一个参数，它将值设置到给定的字段中。</p><p><code>Setter</code> 允许 <code>TextMapPropagator</code> 将传播字段设置到载体中。</p><p>实现方法之一是使用 <code>Set</code> 方法的 <code>Setter</code> 类。</p><p>Set</p><p>用给定的值替换传播的字段。</p><p>必需的参数：</p><ul><li>保存传播字段的载体。例如，传出消息或 HTTP 请求。</li><li>字段的键</li><li>字段的值</li></ul><p>如果所使用的协议不区分大小写，实现应该保留大小写，否则必须保留大小写。</p><h4 id="TextMap-提取"><a href="#TextMap-提取" class="headerlink" title="TextMap 提取"></a>TextMap 提取</h4><p>从传入的请求中提取值。必须的参数和提取（Extract）操作相同。</p><p>可选的参数：</p><ul><li>用于获取每个传播的键的 <code>Getter</code> 。</li></ul><p>返回从作为参数传递的 <code>Context</code> 派生的新的 <code>Context</code> 。</p><p><strong>Getter 参数</strong></p><p>Getter 是从给定字段中获取值的 <code>Extract</code> 的参数。</p><p><code>Getter</code> 允许 <code>TextMapPropagator</code> 从载体中读取传播的字段。</p><p>实现方法之一是使用 <code>Get</code> 和<code>Keys</code> 方法的 <code>Getter</code> 类。</p><p><strong>Keys</strong></p><p><code>Keys</code> 方法必须返回载体中所有的键的列表。</p><p>必须的参数：</p><ul><li>传播字段的载体，例如 HTTP 请求。</li></ul><p><code>Keys</code> 方法可以被使用可变键名的 <code>Propagator</code> 调用，以遍历指定载体中的所有键。例如，它可以用来检测所有遵循 Jaeger 传输格式（<a href="https://www.jaegertracing.io/docs/1.18/client-libraries/#baggage">Jaeger Propagation Format</a>）定义的 <code>uberctx-&#123;user-defined-key&#125;</code> 模式的键。</p><p><strong>Get</strong></p><p>Get 方法必须返回给定传播的键的第一个值，如果该键不存在则返回 null 。</p><p>必需的参数</p><ul><li>传播字段的载体，例如 HTTP 请求。</li><li>字段的键</li></ul><p>Get 方法负责处理大小写。如果 Getter 用于处理 HTTP 请求对象，则 Getter 必须不区分大小写。</p><h3 id="注入器和提取器作为单独的接口"><a href="#注入器和提取器作为单独的接口" class="headerlink" title="注入器和提取器作为单独的接口"></a>注入器和提取器作为单独的接口</h3><p>可以将 <code>Propagator</code> 类型实现为公开 <code>Inject</code> 和 <code>Extract</code> 方法的单个对象，也可以选择进一步划分为独立的 <code>Injector</code> 和 <code>EXtractor</code> 。<code>Propagator</code> 可以通过组合单独的 <code>Injector</code> 和 <code>EXtractor</code>来实现。</p><h3 id="复合传播器（Composite-Propagator）"><a href="#复合传播器（Composite-Propagator）" class="headerlink" title="复合传播器（Composite Propagator）"></a>复合传播器（Composite Propagator）</h3><p>实现必须提供一种工具，将来自不同横切关注点的多个 <code>Propagator</code> 进行分组，以便将其作为一个单独的实体。</p><p>复合传播器可以从传播器列表或注入器和提取器列表中构建。生成的复合 <code>Propagator</code> 将按指定的顺序调用 <code>Propagator</code> 、<code>Injector</code> 或 <code>Extractor</code>。</p><p>每个复合 <code>Propagator</code> 将实现一个特定的 <code>Propagator</code> 类型，例如 <code>TextMapPropagator</code> ，因为不同的 <code>Propagator</code> 类型可能会对不同的数据类型进行操作。</p><p>必须有函数来完成以下操作</p><ul><li>创建复合传播器</li><li>从复合传播器中提取</li><li>注入到复合传播器中</li></ul><h4 id="创建复合传播器"><a href="#创建复合传播器" class="headerlink" title="创建复合传播器"></a>创建复合传播器</h4><p>必需的参数：</p><ul><li><code>Propagator</code> 列表或 <code>Injector</code> 和 <code>Extractor</code> 列表</li></ul><p>返回具有指定 <code>Propagator</code> 的新的复合 <code>Propagator</code> 。</p><h4 id="从复合传播器中提取"><a href="#从复合传播器中提取" class="headerlink" title="从复合传播器中提取"></a>从复合传播器中提取</h4><p>必需的参数：</p><ul><li><code>Context</code></li><li>传播字段的载体</li></ul><p>如果 <code>TextMapPropagator</code> 的 <code>Extract</code> 实现接受可选的 <code>Getter</code> 参数，则以下参数是必需的，否则是可选的</p><ul><li>用于获取每个传播的键的 <code>Getter</code> 实例。</li></ul><h4 id="注入到复合传播器中"><a href="#注入到复合传播器中" class="headerlink" title="注入到复合传播器中"></a>注入到复合传播器中</h4><p>必需的参数：</p><ul><li><code>Context</code></li><li>传播字段的载体</li></ul><p>如果 <code>TextMapPropagator</code> 的 <code>Inject</code> 实现接受可选的 <code>Setter</code> 参数，则以下参数是必需的，否则是可选的</p><ul><li>设置传播键值对的 <code>Setter</code> ，传播器可以多次调用它来设置多个键值对。</li></ul><h3 id="全局传播器"><a href="#全局传播器" class="headerlink" title="全局传播器"></a>全局传播器</h3><p>OpenTelemetry API 必须提供一种方法来为每种支持的 <code>Propagator</code> 获取传播器。插桩库应该调用传播器来提取和注入所有远程调用的上下文。</p><p>OpenTelemetry API 必须使用无操作传播器，除非另行显式配置。上下文传播可以用于各种信号（traces、metrics、logging 等），因此可以为其独立地启用上下文传播。</p><h4 id="获取全局传播器"><a href="#获取全局传播器" class="headerlink" title="获取全局传播器"></a>获取全局传播器</h4><p>每种支持的 <code>Propagator</code> 类型都必须存在该方法。</p><p>返回全局 <code>Propagator</code> ，通常是复合实例。</p><h4 id="设置全局传播器"><a href="#设置全局传播器" class="headerlink" title="设置全局传播器"></a>设置全局传播器</h4><p>每种支持的 <code>Propagator</code> 类型都必须存在该方法。</p><p>设置全局 <code>Propagator</code> 实例。</p><p>必需的参数：</p><ul><li><code>Propagator</code> ，通常是复合实例。</li></ul><h3 id="传播器分发"><a href="#传播器分发" class="headerlink" title="传播器分发"></a>传播器分发</h3><p>OpenTelemetry 组织必须维护的传播器的官方列表，必须作为 OpenTelemetry 扩展包分发：</p><ul><li><a href="https://www.w3.org/TR/trace-context/">W3C TraceContext</a>，也可以作为 OpenTelemetry API 的一部分发布</li><li><a href="https://w3c.github.io/baggage">W3C Baggage</a>，也可以作为 OpenTelemetry API 的一部分发布</li><li><a href="https://github.com/openzipkin/b3-propagation">B3</a></li><li><a href="https://www.jaegertracing.io/docs/latest/client-libraries/#propagation-format">Jaeger</a></li></ul><p>这是一个可以作为 OpenTelemetry 扩展包维护和分发的附加传播器列表：</p><ul><li><a href="https://github.com/opentracing?q=basic&type=&language=">OT Trace</a> OpenTracing 基础 Tracer 使用的传播器格式。不能在生成的传播器名称中使用 <code>OpenTracing</code> ，因为在 OpenTracing 生态系统中没有被广泛使用。</li></ul><p>特定于供应商的协议实现的 <code>Propagator</code> 不能作为 OpenTelemetry 核心仓库的一部分进行维护或分发，例如 AWS 的 X-Ray trace header protocol 。</p><h4 id="B3-要求"><a href="#B3-要求" class="headerlink" title="B3 要求"></a>B3 要求</h4><p>B3 既有单头编码也有多头编码（single and multi-header encodings），它还具有不直接映射到 OpenTelemetry 的语义，例如调试跟踪标志（debug trace flag），并允许来自请求双方的 span 共享相同的 id 。为了最大化 OpenTelemetry 和 Zipkin 实现之间的兼容性，为 B3 上下文传播建立了以下指导原则。</p><p><strong>B3 提取</strong></p><p>当提取 B3 时，传播器：</p><ul><li>必须尝试提取 B3 编码使用的单头或多头格式，弹头版本优先于多头版本</li><li>如果接收到调试跟踪标志，则必须保留，并将其与后续请求一起传播。此外，当设置调试标志时。OpenTelemetry 实现必须设置采样跟踪标志。</li><li>不能重复使用 <code>X-B3-SpanId</code> 作为服务器端 span 的 id 。</li></ul><p><strong>B3 注入</strong></p><p>当注入 B3 时，传播器：</p><ul><li>必须默认使用弹头格式注入 B3</li><li>必须提供配置来改变默认的注入格式为 B3 多头格式</li><li>不传播 <code>X-B3-ParentSpanId</code> ，因为 OpenTelemetry 不支持在请求的双方重用相同的 id</li></ul><h2 id="行李（Baggage）"><a href="#行李（Baggage）" class="headerlink" title="行李（Baggage）"></a>行李（Baggage）</h2><h2 id="追踪（Tracing）"><a href="#追踪（Tracing）" class="headerlink" title="追踪（Tracing）"></a>追踪（Tracing）</h2><p>Tracing API 由以下主要的几个类组成：</p><ul><li><code>TraceProvider</code> 是 API 的入口点，提供对 <code>Tracer</code> 的访问。</li><li><code>Tracer</code> 是负责创建 <code>Span</code> 的类。</li><li><code>Span</code> 是追踪操作的 API 。</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="时间（Time）"><a href="#时间（Time）" class="headerlink" title="时间（Time）"></a>时间（Time）</h4><p>OpenTelemetry 可以对时间值进行操作，精度可达纳秒级别。</p><p><strong>时间戳（Timestamp）</strong></p><p>时间戳是自 Unix 纪元以来经过的时间。</p><ul><li>最小精度是毫秒</li><li>最大精度是纳秒</li></ul><p><strong>持续时间（Duration）</strong></p><p>两个事件之间经过的时间。</p><ul><li>最小精度是毫秒</li><li>最大精度是纳秒</li></ul><h3 id="TracerProvider"><a href="#TracerProvider" class="headerlink" title="TracerProvider"></a>TracerProvider</h3><p>可以使用 <code>TracerProvider</code> 访问 <code>Tracer</code> 。</p><p>在 API 实现中，<code>TraceProvider</code> 应该是保存任何配置的有状态对象。</p><p>通常，<code>TraceProvider</code> 被期望从一个中心位置访问，因此 API 应该提供一种设置/注册和访问全局默认 <code>TraceProvider</code> 的方法。</p><p>尽管有全局的 <code>TracerProvider</code>，一些应用程序可能想要或必须使用多个 <code>TracerProvider</code> 实例，例如每个实例有不同的配置（比如 <code>SpanProcessor</code>以及从它们获得 <code>Tracer</code> ），或者因为依赖注入框架更容易。因此， <code>TracerProvider</code> 的实现应该允许创建任意数量的 <code>TracerProvider</code> 实例。</p><h4 id="TracerProvider-操作"><a href="#TracerProvider-操作" class="headerlink" title="TracerProvider 操作"></a>TracerProvider 操作</h4><p><code>TracerProvider</code> 必须提供以下方法：</p><ul><li>获取 <code>Tracer</code></li></ul><p><strong>获取 Tracer</strong></p><p>这个 API 继续接受以下参数</p><ul><li><code>name</code>（必须）：这个名称必须标识工具库（例如，<code>io.opentelemetry.contrib.mongodb</code>）。如果一个应用程序或库有内置的 OpenTelemetry 工具，那么 <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/glossary.md#instrumented-library">Instrumented library</a> 和 <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/glossary.md#instrumentation-library">Instrumentation library</a> 都可以引用同一个库。在这种情况下，<code>name</code> 表示应用程序或库中的模块名或组件名。为了防止指定无效的名称（null 或空字符串），必须返回有效的 Tracer 实现回退，而不是返回 null 或抛出异常，其 <code>name</code> 属性应该保持原来的无效值，并且应该记录报告指定值无效的信息。一个实现 OpenTelemetry API 的库如果不支持命名功能（例如，一个与可观察性无关的实现），也可能会忽略这个名称并为所有调用返回一个默认实例。如果应用程序所有者配置 SDK 来阻止由这个库产生的遥测（telemetry），那么 TracerProvider 也可以在这里返回一个无操作的 Tracer 。</li><li><code>version</code>（可选）：指定工具库版本（例如，<code>1.0.0</code>）</li></ul><p>该函数是否或在何种条件下返回相同或不同的 <code>Tracer</code> 实例是未指定的。</p><p>实现不能要求重复获取具有相同名称+版本的 <code>Tracer</code> 来获取配置更改。这可以通过允许使用过时的配置或确保新配置应用于之前返回的 <code>Tracer</code> 来实现。</p><p>注意：例如，这可以通过在 <code>TracerProvider</code> 中存储任何可变配置，并让 <code>Tracer</code> 实现的对象具有获取它们的 <code>TracerProvider</code> 的引用来实现。如果必须存储每个 tracer 的配置（例如禁用某个特定的 tracer），tracer 可以在 <code>TracerProvider</code> 中做一个查找名称+版本的映射，或者 <code>TracerProvider</code> 可以维护一个注册表返回所有的<code>Tracer</code> 并根据配置的改变动态更新。</p><h3 id="Context-Interaction"><a href="#Context-Interaction" class="headerlink" title="Context Interaction"></a>Context Interaction</h3><p>此部分定义了与 <code>Context</code> 交互的 Tracing API 中的所有操作。</p><p>API 必须提供以下功能来支持与 <code>Context</code> 实例的交互：</p><ul><li>从 <code>Context</code> 实例中提取 <code>Span</code></li><li>向 <code>Context</code> 实例注入 <code>Span</code></li></ul><p>上述功能是必须的，因为 API 使用者不应该访问 Tracing API 实现所使用的 Context 键。</p><p>如果语言支持隐式传播 <code>Context</code>，API 还应该提供以下功能：</p><ul><li>从隐式上下文中获取当前活跃的 Span 。等价于获取隐式上下文，然后从上下文中提取 <code>Span</code> 。</li><li>将当前活跃的 Span 设置到隐式上下文。等价于获取隐式上下文，然后将 <code>Span</code> 注入上下文中。</li></ul><p>以上所有功能仅在上下文 API 上操作，可以公开为追踪模块的静态方法，或其类中的静态方法。如果可能的话，这个功能应该在 API 中完全实现。</p><h3 id="Tracer"><a href="#Tracer" class="headerlink" title="Tracer"></a>Tracer</h3><p>tracer 用于生成 <code>Span</code> 。</p><p>注意 <code>Tracer</code> 通常不负责配置，配置应当由 <code>TracerProvider</code> 负责。</p><h4 id="Tracer-操作"><a href="#Tracer-操作" class="headerlink" title="Tracer 操作"></a>Tracer 操作</h4><p><code>Tracer</code> 必须提供以下功能：</p><ul><li>创建 <code>Span</code></li></ul><h3 id="SpanContext-1"><a href="#SpanContext-1" class="headerlink" title="SpanContext"></a>SpanContext</h3><p><code>SpanContext</code> 表示必须与分布式上下文一起序列化和传播的 <code>Span</code> 部分，<code>SpanContext</code> 是不可变的。</p><p>OpenTelemetry 的 <code>SpanContext</code> 符合 W3C TraceContext 规范（<a href="https://www.w3.org/TR/trace-context/">W3C TraceContext specification</a>），包含两个标识符：<code>TraceId</code> 和 <code>SpanId</code>，以及一组常见的 <code>TraceFlags</code> 和特定于系统的 <code>TraceState</code> 。</p><ul><li><code>TraceId</code> 有效的追踪标识符，至少有一个非零字节的 16 字节数组</li><li><code>SpanId</code> 有效的 Span 标识符，至少有一个非零字节的 8 字节数组</li><li><code>TraceFlags</code> 包含关于 trace 的详细信息。与 TraceState 值不同，TraceFlags 存在于所有 trace 中。本规范的当前版本只支持一个名为 <a href="https://www.w3.org/TR/trace-context/#sampled-flag">sampled</a> 的标志</li><li><code>TraceState</code> 携带特定于供应商的标识数据，表现为键值对列表。TraceState 允许多个追踪系统参与同一个 trace 。在 W3C TraceContext 规范中有完整的描述。</li></ul><p>API 必须实现创建 <code>SpanContext</code> 的方法，这些方法应该是创建 <code>SpanContext</code> 的唯一方法，该功能必须完全实现，并且不应该被重写。</p><h4 id="获取-TraceId-和-SpanId"><a href="#获取-TraceId-和-SpanId" class="headerlink" title="获取 TraceId 和 SpanId"></a>获取 TraceId 和 SpanId</h4><p>API 必须允许以以下形式检索 <code>TraceId</code> 和 <code>SpanId</code>：</p><ul><li>Hex - 返回小写十六进制编码（<a href="https://tools.ietf.org/html/rfc4648#section-8">hex encoded</a>）的 <code>TraceId</code> （必须是 32 十六进制字符的小写字符串）或 <code>SpanId</code> （必须是 16 十六进制字符的小写字符串）</li><li>Binary - 返回二进制表示形式的 <code>TraceId</code> （必须是 16 字节数组）或 <code>SpanId</code> （必须是 8 字节数组）</li></ul><p>API 不应该公开关于内部存储方式的细节。</p><h4 id="IsValid"><a href="#IsValid" class="headerlink" title="IsValid"></a>IsValid</h4><p>必须提供一个名为 <code>IsValid</code> 的 API ，该 API 返回一个布尔值，如果 SpanContext 有一个非零的 TraceID 和一个非零的 SpanID ，则该值为真。</p><h4 id="IsRemote"><a href="#IsRemote" class="headerlink" title="IsRemote"></a>IsRemote</h4><p>必须提供一个名为 <code>IsRemote</code> 的 API，该 API 返回一个布尔值，如果 SpanContext 是从远程父对象传播来的，则该值为真。当通过传播器 API 提取 <code>SpanContext</code> 时，<code>IsRemote</code> 必须返回真，对于任何子 Span 的 SpanContext ，必须返回假。</p><h4 id="TraceState"><a href="#TraceState" class="headerlink" title="TraceState"></a>TraceState</h4><p><code>TraceState</code> 是 <code>SpanContext</code> 的一部分，由不可变的字符串键值对表示，并由 W3C TraceContext 规范正式定义。Tracing API 必须在 <code>TraceState</code> 上至少提供以下操作：</p><ul><li>获取给定键的值</li><li>添加新的键值对</li><li>更新给定键的值</li><li>删除键值对</li></ul><p>这些操作必须遵循 W3C TraceContext 规范中描述的规则。所有的修改操作必须返回一个新的 <code>TraceState</code> 。根据 W3C TraceContext 规范描述的规则，<code>TraceState</code> 必须在任何时候都是有效的，每个变化的操作必须验证输入参数，如果传递的是无效值，则操作不能返回包含无效数据的 <code>TraceState</code>，并且必须遵循通用错误处理准则（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/error-handling.md">general error handling guidelines</a>）。</p><p>注意，由于 <code>SpanContext</code> 是不可变的，所以不可能使用新的 <code>TraceState</code> 更新 <code>SpanContext</code> 。这样的更改只有在 <code>SpanContext</code> 传播或遥测数据导出之前才有意义。在这两种情况下，<code>Propagator</code> 和 <code>SpanExporter</code> 都可以在将其序列化前创建修改过的 <code>TraceState</code> 副本。</p><h3 id="Span"><a href="#Span" class="headerlink" title="Span"></a>Span</h3><p><code>Span</code> 表示 trace 中的单个操作。Span 可以嵌套形成 trace 树。每个 trace 都包含一个根 Span，通常用于描述整个操作，并且可以选择描述一个或多个子 Span 或子操作</p><p><code>Span</code> 封装：</p><ul><li>Span 名称</li><li>唯一标识 <code>Span</code> 的不可变的 <code>SpanContext</code></li><li>以 <code>Span</code>、<code>SpanContext</code> 或 null 表示的父 <code>Span</code></li><li><code>SpanKind</code></li><li>开始时间戳</li><li>结束时间戳</li><li><code>Attributes</code></li><li>链接到其他 <code>Span</code> 的 <code>Link</code> 列表</li><li>带有时间戳的<code>Event</code> 列表</li><li><code>Status</code></li></ul><p>Span 名称简明地标识由 Span 所表示的工作，例如，RPC 方法名、函数名、大型计算中的子任务或子截断的名称。Span 名称应该是最通用的字符串，用于标识 Span 的类别，而不是单个 Span 实例，同时仍然是人类可读的。</p><p><code>Span</code> 的开始和结束时间戳反映了操作消耗的实际时间。例如，如果一个 Span 代表一个请求-响应周期（例如 HTTP 或 RPC ），那么 Span 应该有一个与第一个子操作的开始时间相对应的开始时间，以及最后一个子操作完成时的结束时间。这包括：</p><ul><li>从请求中接收数据</li><li>解析数据（例如，从二进制或 json 格式）</li><li>任何中间件或附加的处理逻辑</li><li>业务逻辑</li><li>构造响应</li><li>发送响应</li></ul><p>子 Span （在某些情况下是事件）可能被创建用于表示需要更详细的可观察性的子操作。子 Span 应该度量各个子操作的时间，并且可以添加额外的属性。</p><p><code>Span</code> 的开始时间应该设置为创建 Span 时的当前时间，在创建 <code>Span</code> 之后，应该可以修改它的名称、设置属性（<code>Attribute</code>）、添加事件（<code>Event</code>）、设置状态（<code>State</code>）。在设置了 <code>Span</code> 的结束时间之后，不能更改这些参数。</p><p><code>Span</code> 并不意味着要用来在进程中传播信息。为了防止误用，实现不应该提供对 <code>Span</code> 的 <code>SpanContext</code> 之外的属性的访问。</p><p>供应商可以实现 <code>Span</code> 接口来实现特定于供应商的逻辑。但是，替代的实现也不能允许调用者直接创建 <code>Span</code> ，所有 <code>Span</code> 必须ton过 <code>Tracer</code> 创建。</p><h4 id="Span-的创建"><a href="#Span-的创建" class="headerlink" title="Span 的创建"></a>Span 的创建</h4><p>创建 <code>Span</code> 的唯一操作必须是使用 <code>Tracer</code> 。</p><p>在使用隐式上下文传播的语言中，默认情况下，<code>Span</code> 的创建不能将新的 <code>Span</code> 设置为当前上下文中活跃的 <code>Span</code> ，但这个功能可以作为单独的操作提供。</p><p>API 必须接受以下参数：</p><ul><li>Span 名称，必须。</li><li>父 <code>Context</code> 或新 <code>Span</code> 应该是根 <code>Span</code> 的指向。API 还可以默认隐式地将当前的 <code>Context</code> 作为父对象。这个 API 不能接受 <code>Span</code> 或 <code>SpanContext</code> 作为父对象，只能接受一个完整的 <code>Context</code> 。<ul><li>必须根据从上下文中确定父 Span 所描述的规则确定父 Span 。</li></ul></li><li><code>SpanKind</code> 如果没有指定则默认为 <code>SpanKind.Internal</code> 。</li><li><code>Attributes</code> 属性可用于抽样决策（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling">sampling description</a>），如果未指定，则假定为空集合。<ul><li>只要可能，用户应该在创建 Span 时设置任何已知的属性，而不是之后调用 <code>SetAttribute</code> 。</li></ul></li><li><code>Link</code> 链接的有序序列。</li><li><code>Start timestamp</code> 默认为当前时间。该参数只应在 Span 创建时设置，如果 API 在 Span 逻辑开始时调用，则 API 用户不能显式设置此参数。</li></ul><p>每个 Span 有零个或一个父 Span 以及零个或多个子 Span ，表示因果相关的操作。相关 Span 的树构成了 trace 。如果一个 Span 没有父 Span，那么就称它为根 Span 。每个 trace 都包含一个根 Span ，它是所有其他 Span 的共享祖先。实现必须提供一个选项来创建一个 Span 作为根 Span ，并且必须为创建的每个根 Span 生成新的 <code>TraceId</code> 。对于具有相同父 Span 的 Span ，<code>TraceId</code> 必须与父 Span 相同。另外，子 Span 在默认情况下必须继承父 Span 的所有 <code>TraceState</code> 值。</p><p>如果 <code>Span</code> 是在另一个进程中创建的 <code>Span</code> 的子 Span ，则该 <code>Span</code> 具有远程父对象（remote parent）。每个传播器的反序列化必须在父 <code>SpanContext</code> 上将 <code>IsRemote</code> 设置为真，以便创建 <code>Span</code> 时了解父对象是否是远程的。</p><p>创建的任何 Span 都必须结束。这是用户的责任，如果用户忘记结束 Span ，API 实现可能会泄露内存或其他资源（例如，迭代所有 Span 的周期性工作的 CPU时间）。</p><p><strong>从上下文中确定父 Span</strong></p><p>当从 <code>Context</code> 中创建新的 <code>Span</code> 时，<code>Context</code> 可能包含表示当前活跃的实例的 <code>Span</code> ，并将其作为父 Span 。如果 <code>Context</code> 中没有 <code>Span</code> ，则新创建的 <code>Span</code> 将是根 <code>Span</code> 。</p><p><code>SpanContext</code> 不能直接在 <code>Context</code> 中被设置为活跃的，而必须将其包装到 Span 中（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#wrapping-a-spancontext-in-a-span">wrapping it into a Span</a>）。例如，执行上下文提取的 <code>Propagator</code> 可能需要。</p><p><strong>指定链接</strong></p><p>在 <code>Span</code> 创建期间，用户必须能够记录到其他 <code>Span</code> 的链接。链接的 <code>Span</code> 可以来自相同或不同的 trace 。在 Span 创建后不能添加链接。</p><p><code>Link</code> 在结构上由以下属性定义：</p><ul><li>要链接的 <code>Span</code> 的 <code>SpanContext</code></li><li>零个或多个 <code>Attribute</code>，进一步描述链接</li></ul><p>创建 Span 的 API 必须提供：</p><ul><li>记录单个 <code>Link</code> 的 API，其属性作为参数传递。该操作可以命名为 <code>AddLink</code> 。这个 API 接受要链接的 <code>Span</code> 的 <code>SpanContext</code> 和可选的 <code>Attribute</code> ，它们可以作为单独的参数，也可以作为封装它们的不可变对象。实现可能会忽略带有无效 <code>SpanContext</code> 的链接。</li></ul><p>链接应该保持设置的顺序。</p><h4 id="Span-操作"><a href="#Span-操作" class="headerlink" title="Span 操作"></a>Span 操作</h4><p>除了检索 <code>Span</code> 的 <code>SpanContext</code> 和记录状态的函数外，在 <code>Span</code> 完成后不能调用以下任何函数。</p><p><strong>Get Context</strong></p><p>Span 接口必须提供：</p><ul><li>返回给定 <code>Span</code> 的 <code>SpanContext</code> 的 API 。即使在 <code>Span</code> 完成之后，也可以使用返回值。返回值在整个 Span 的生命周期内必须相同。该操作的名称可以命名为 <code>GetContext</code> 。</li></ul><p><strong>IsRecording</strong></p><p>如果 <code>Span</code> 正在记录信息，比如使用 <code>AddEvent</code> 操作的事件、使用 <code>SetAttributes</code> 设置的属性、使用 <code>SetStatus</code> 设置的状态等，则返回真。</p><p>在 <code>Span</code> 结束之后，它通常变为不记录的，因此 <code>IsRecording</code> 应该为结束的 Span 返回假。注意：流式实现无法预期 Span 是否结束，这是一种预期的情况，在结束 Span 之后不能再改变 <code>IsRecording</code>。</p><p><code>IsRecording</code> 不应该接受任何参数。</p><p>这个标志应该用于避免在绝对没有记录 Span 的情况下对 Span 的属性或事件进行昂贵的计算。注意，任何子 Span 的记录都是独立于该标志的值指定的（通常基于 <code>SpanContext</code> 上 <code>TraceFlags</code> 的 <code>sampled</code> 标志）。</p><p>尽管对整个 trace 进行了采样，但这个标志可能是真。这允许记录和处理单个 Span 的信息，而无需将其发送到后端。</p><p>API 用户在插桩代码时应该只访问 <code>IsRecording</code> 属性，除非要在上下文传播器中使用，否则有永远不要访问 <code>sampled</code> 标志。</p><p><strong>Set Attributes</strong></p><p><code>Span</code> 必须能够设置与其关联的属性。</p><p>Span 接口必须提供：</p><ul><li>设置单个 <code>Attribute</code> 的 API，其中属性作为参数传递。该方法可以命名为 <code>SetAttribute</code> 。为了避免额外的分配，一些实现可能为每个可能值类型提供单独的 API 。</li></ul><p>Span 接口可以提供：</p><ul><li>设置多个 <code>Attribute</code> 的 API ，在单个方法调用中传递属性。</li></ul><p>设置与现有属性具有相同键的属性时，应该覆盖现有的属性。</p><p>注意，OpenTelemetry 项目记录了某些具有指定语义含义的标准属性（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/README.md">standard attributes</a>）。</p><p>注意，采样器只能考虑创构建 Span 过程中已经存在的信息。之后的任何更改，包括新的或更改的属性，都不能改变采样器的决策。</p><p><strong>Add Events</strong></p><p><code>Span</code> 必须有添加事件的能力。事件有一个与其被添加到 <code>Span</code> 中的时刻相关联的时间。</p><p><code>Event</code> 在结构上由以下属性定义：</p><ul><li>事件的名称。</li><li>时间的时间戳。添加事件的时间或用户提供的自定义时间戳。</li><li>零个或多个 <code>Attribute</code> ，进一步描述事件。</li></ul><p>时间应该保持其被记录的顺序。通常会匹配事件时间戳的顺序，但使用自定义时间戳可能会无序地记录事件。</p><p>OpenTelemetry 项目记录了某些具有特定语义含义的标准事件名称和键（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/README.md">standard event names and keys</a>）。</p><p>注意，<code>RecordException</code> 是 <code>AddEvent</code> 的一个特殊变体，用于记录异常事件。</p><p><strong>Set Status</strong></p><p>设置 <code>Span</code>  的 <code>Status</code> ，如果使用，将覆盖默认的 <code>Span</code> 状态（<code>Unset</code>）</p><p><code>Status</code> 在结构上由以下属性定义：</p><ul><li><code>StatusCode</code> 下面列出的值之一。</li><li><code>Description</code> 可选，提供 <code>Status</code> 的描述信息。<code>Description</code> 只能与错误的 <code>StatusCode</code> 一起使用。空的 <code>Description</code> 等价于不存在。</li></ul><p><code>StatusCode</code> 可以是以下值之一：</p><ul><li><code>Unset</code> - 默认状态</li><li><code>Ok</code> - 应用程序开发人员或操作人员已验证该操作成功完成</li><li><code>Error</code> - 操作包含错误</li></ul><p><code>Span</code> 接口必须提供：</p><ul><li>设置 <code>Status</code> 的 API ，该方法可以命名为 <code>SetStatus</code> 。该 API 接受 <code>StatusCode</code> 和一个可选的 <code>Description</code> ，可以作为单独的参数，也可以封装为不可变对象。对于设置为 <code>Unset</code> 和 <code>Ok</code> 的 <code>StatusCode</code>，必须忽略 <code>Description</code> 。</li></ul><p>状态码应该保持为未设置，除了以下的情况：</p><ul><li><p>当插装库将状态设置为 <code>Error</code> 时，状态码应该被记录并可预测。根据语义约定中定义的规则，应该只将状态码设置为 <code>Error</code> ，对于语义约定未涵盖的操作，插装库应该发布自己的约定，包括状态码。</p></li><li><p>通常，插装库不应该将状态码设置诶 <code>Ok</code> ，除非显式配置。插装库应该将状态码保留为 <code>Unset</code> 除非出现错误。</p></li><li><p>应用程序开发人员和操作人员可以将状态码设置为 <code>Ok</code>。</p></li></ul><p>分析工具应该阻止可能产生的任何错误来响应 <code>Ok</code> 状态，例如，阻止 404 之类的噪声错误。</p><p>只有最后一次调用的值将被记录，实现可以自由地忽略之前的调用。</p><p><strong>UpdateName</strong></p><p>更新 <code>Span</code> 的名称，在此更新之后，任何基于 <code>Span</code> 名称的采样行为都将取决于实现。</p><p>注意，采样器只能考虑创建 Span 过程中已有的信息。之后所做的任何更改，包括更新 Span 的名称，都不能修改采样器的决策。</p><p>名称更新的替代方法可能是延后 <code>Span</code> 的创建，即当 Span 开始时使用显式时间戳，来自已知的最终 Span 名称，或者报告具有所需名称的 <code>Span</code> 作为子 <code>Span</code> 。</p><p>必需的参数：</p><ul><li>新的 Span 名称，将取代在 <code>Span</code> 开始时传入的任何内容。 </li></ul><p><strong>End</strong></p><p>表示当前 Span 现在（或在可选的指定时间）已经结束的信号。</p><p>实现应该忽略所有对 <code>End</code> 和其他任何 Span 方法的后续调用。例如，通过结束，Span 变为不记录的（当 Tracer 是流式事件并且没有与 <code>Span</code> 关联的可变状态时可能会出现异常）。</p><p><code>End</code> 不能对子 Span 产生任何影响，它们可能仍然在运行，可以稍后再结束。</p><p><code>End</code> 不能在任何活跃的 <code>Span</code> 的 <code>Context</code> 中禁用 <code>Span</code> 。必须仍能够通过包含结束的 Span 的上下文，将其作为父 Span 使用。此外，在 Span 结束后将其放入上下文的机制必须仍然有效。</p><p>参数：</p><ul><li>可选的时间戳，显式设置结束时间戳。如果省略，则等于当前时间。</li></ul><p>该 API 必须是非阻塞的。</p><p><strong>Record Exception</strong></p><p>为了便于记录异常，应该提供 <code>RecordException</code> 方法，这是 <code>AddEvent</code> 的一种特殊变体，与其要求相同。</p><p>方法的签名由语言确定，并且可以适当地重载。该方法必须按照异常语义约定文档（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/exceptions.md">exception semantic conventions</a>）中列出的约定将异常记录为事件。所需的最小参数应该不超过一个异常对象。</p><p>如果提供了 <code>RecordException</code> ，该方法必须接受一个可选参数，以提供任何附加的事件属性（与 <code>AddEvent</code> 方法相同）。如果方法已经生成了具有相同的名称的属性，则附加属性优先。</p><p>注意：<code>RecordException</code> 可能被视为 <code>AddEvent</code> 的变体，具有额外的特定于异常的参数，所有其他参数都是可选的（因为它们有来自异常语义约定的默认值）。</p><h4 id="Span-生命周期"><a href="#Span-生命周期" class="headerlink" title="Span 生命周期"></a>Span 生命周期</h4><p>Span 生命周期表示将开始和结束时间戳记录到 Span 对象的过程：</p><ul><li>在创建 Span 时记录开始时间</li><li>在结束 Span 时记录结束时间</li></ul><p>开始和结束时间以及时间的时间戳必须在调用相应的 API 时记录。</p><h4 id="将-SpanContext-包装在-Span-中"><a href="#将-SpanContext-包装在-Span-中" class="headerlink" title="将 SpanContext 包装在 Span 中"></a>将 SpanContext 包装在 Span 中</h4><p>API 必须提供一个操作，用于将 <code>SpanContext</code> 包装为实现 <code>Span</code> 接口的对象。这样做是为了在进程内传播 <code>Span</code> 等操作中将 <code>SpanContext</code> 暴露为 <code>Span</code> 。</p><p>如果需要新的类型来支持此操作，则不应该尽可能公开它（例如，只公开返回具有 Span 接口类型的函数）。如果需要公开暴露新的类型，则应该将其命名为 <code>NonRecordingSpan</code> 。</p><p>行为定义如下：</p><ul><li><code>GetContext</code> 必须返回被包装的 <code>SpanContext</code></li><li><code>IsRecording</code> 必须返回假表示事件、属性和其他没有被记录的元素（例如，正在被删除）</li></ul><p><code>Span</code> 的其余功能必须定义为是无操作的。注意：这包括 <code>End</code>，因此作为例外，不需要（甚至没有帮助）结束这样的 Span 。</p><p>这个功能必须在 API 中完全实现，并且不应该被重写。</p><h3 id="SpanKind"><a href="#SpanKind" class="headerlink" title="SpanKind"></a>SpanKind</h3><p><code>SpanKind</code> 描述了在一次追踪中 Span 及其父子之间的关系。<code>SpanKind</code> 描述了两种独立的特性，有助于追踪系统的分析过程。</p><p><code>SpanKind</code> 描述的第一个属性反映了 Span 是远程子对象还是父对象。具有远程父对象的 Span 是外部负载的源，具有远程子对象的 Span 反映了非本地系统的依赖关系。</p><p><code>SpanKind</code> 描述的第二个属性反应了子 Span 是否表示同步调用。当子 Span 是同步调用的，通常其父 Span 需要等待它完成。对追踪系统来说，了解这个属性是很有用的，因为同步 Span 可能会导致整个追踪的延迟。异步场景可能是远程的也可能是本地的。</p><p>为了使 <code>SpanKind</code> 有意义，调用者应该保证单个 Span 只有一个目的。例如，服务端的 Span 不应该直接用作另一个远程 Span 的父对象。插桩应该在提取和序列化远程调用的 SpanContext 之前创建一个新的 Span 。</p><p>以下是可能的 <code>SpanKind</code> ：</p><ul><li><code>SERVER</code> 表示 Span 涵盖同步 RCP 或其他远程请求的服务端处理，该 Span 是远程期待响应的 <code>CLIENT</code> Span 的子 Span 。</li><li><code>CLIENT</code> 表示 Span 描述了对某些远程服务的同步请求。该 Span 是远程 <code>SERVER</code> 的父 Span ，并等待其响应</li><li><code>PRODUCER</code> 表示 Span 描述了异步请求的父对象。这个父级 Span 应该在对应的子 <code>CONSUMER</code> Span 之前结束，甚至可以在其开始前结束。在使用批处理的消息传递场景中，追踪单个消息需要为每个消息创建新的 <code>PRODUCER</code> Span 。</li><li><code>CONSUMER</code> 表示 Span 描述异步 <code>PRODUCER</code> 请求的子对象。</li><li><code>INTERNAL</code> 默认值，Span 表示应用程序的内部操作，而不是具有远程父对象或子对象的操作。</li></ul><table><thead><tr><th><code>SpanKind</code></th><th>Synchronous</th><th>Asynchronous</th><th>Remote Incoming</th><th>Remote Outgoing</th></tr></thead><tbody><tr><td><code>CLIENT</code></td><td>yes</td><td></td><td></td><td>yes</td></tr><tr><td><code>SERVER</code></td><td>yes</td><td></td><td>yes</td><td></td></tr><tr><td><code>PRODUCER</code></td><td></td><td>yes</td><td></td><td>maybe</td></tr><tr><td><code>CONSUMER</code></td><td></td><td>yes</td><td>maybe</td><td></td></tr><tr><td><code>INTERNAL</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h3><p>对于支持并发执行的语言，Tracing API 提供了特定的保证和安全。并非所有 API 函数的并发调用都是安全的。</p><ul><li>TracerProvider - 所有方法都可以安全地并发调用</li><li>Tracer - 所有方法都可以安全地并发调用</li><li>Span - 所有方法都可以安全地并发调用</li><li>Event - 事件是不可变的，可以安全地并发调用</li><li>Link - 链接时不可变得，可以安全地并发调用</li></ul><h2 id="度量（Metrics）"><a href="#度量（Metrics）" class="headerlink" title="度量（Metrics）"></a>度量（Metrics）</h2><h1 id="OpenTelemetry-客户端设计原则"><a href="#OpenTelemetry-客户端设计原则" class="headerlink" title="OpenTelemetry 客户端设计原则"></a>OpenTelemetry 客户端设计原则</h1><p>本文档定义了一些共同的原则，将帮助设计者构造 OpenTelemetry 客户端，这些客户端易于使用，在所有受支持的语言中都是统一的，同时也为特定语言的表达提供了足够的灵活性。</p><p>OpenTelemetry 客户端有望提供开箱即用的全部功能，并允许通过扩展进行创新和实验。</p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol><li>OpenTelemetry API 必须良好定义，并与实现清晰地分离。这允许最终用户使用 API 而不用实现。</li><li>在代码中添加第三方库和框架将只依赖于 OpenTelemetry 客户端的 API 。第三方库和框架的开发人员不关心（也不知道）最终应用程序中使用了 OpenTelemetry 的什么具体实现。</li><li>最终应用程序的开发者通常决定如何配置 OpenTelemetry SDK 和使用什么扩展。他们也可以选择不使用任何 OpenTelemetry 的实现，及时应用程序和/或它的库已经被插装过了。其基本原理是，使用 OpenTelemetry 的第三方库和框架必须在不使用 OpenTelemetry 的应用程序中仍然完全可用（因此这就消除了开发人员对其框架的插装和无插装版本的需要）。</li><li>SDK 必须清晰地划分为独立于线路协议（wire protocol-independent）部分，它们实现公共逻辑（例如，批处理、通过进程信息添加标记等）和依赖于协议的遥测数据导出器。遥测数据导出器必须包含最低限度的功能，从而使供应商能够轻松地添加对其特定协议的支持。</li><li>SDK 实现必须包括以下导出器<ul><li>OTLP</li><li>Jaeger</li><li>Zipkin</li><li>Primetheus</li><li>用于调试和测试的标准输出（或日志），以及作为各种日志代理工具的输入</li><li>内存（模拟）导出器，在本地内存中积累遥测数据，并允许检查，对单元测试很有用</li></ul></li></ol><p>注意：其中一些支持多个协议（例如 gRPC、Thrift 等）。要在导出器中实现的协议是待定的。</p><p>其他特定于供应商的导出器不应该包括在 OpenTelemetry 客户端中，而应该放在其他地方。</p><h2 id="OpenTelemetry-客户端通用设计"><a href="#OpenTelemetry-客户端通用设计" class="headerlink" title="OpenTelemetry 客户端通用设计"></a>OpenTelemetry 客户端通用设计</h2><p>箭头表示调用</p><img src="https://i.loli.net/2021/06/06/kvxd9K1c8N4znG2.png" width="80%"/><h3 id="预期使用方式"><a href="#预期使用方式" class="headerlink" title="预期使用方式"></a>预期使用方式</h3><p>OpenTelemetry 客户端由 4 种类型的包组成：API、SDK、语义约定、插件。API 和 SDK 基于信号类型被分成多个包（例如 API-trace、API-metric、SDK-trace、SDK-metric），只要 API 与 SDK 保持分离，就将其视为实现细节。</p><p>想要用 OpenTelemetry 进行插装的库、框架和应用程序只依赖于 API 包。这些第三方库的开发者将调用 API 来生成遥测数据。</p><p>使用 OpenTelemetry API 插装的第三方库的应用程序可以控制是否安装 SDK 和生成遥测数据。当没有安装 SDK 时，API 调用应该是无操作的，产生最小开销。</p><p>为了启用遥测技术，应用程序必须依赖 OpenTelemetry SDK 。应用程序必须配置导出程序和其他插件，以便能够正确地生成遥测数据，并将其传递给选择的分析工具。插件如何启用和配置的细节与语言有关。</p><h3 id="API-和最小实现"><a href="#API-和最小实现" class="headerlink" title="API 和最小实现"></a>API 和最小实现</h3><p>API 包是自依赖的，在这个意义上，如果最终用户的应用程序或第三方库只依赖 API 包，没有安装完整的 SDK ，那么应用程序的构建和运行仍然不会失败，尽管没有遥测数据被传递给后端。</p><p> 这种自依赖是通过以下途径实现的。</p><p>API 依赖包含 API 的最小实现。当应用程序中没有明确包含其他实现时，就不会收集遥测数据。</p><p>从 API 的最小实现返回的值是有效的，不需要调用者执行额外的检查（例如，<code>createSpan</code> 方法不应该失败，应该返回一个有效的非空 <code>Span</code> 对象）。调用者不需要知道和担心最小实现是否有效，这将最小化插装代码中的模板文件和错误处理。</p><p>最小实现尽可能导致少的性能损失，使用 OpenTelemetry 的第三方框架和库希望使用 OpenTelemetry 的这些库的开销可以忽略不计。</p><h3 id="SDK-实现"><a href="#SDK-实现" class="headerlink" title="SDK 实现"></a>SDK 实现</h3><p>SDK 实现是一个单独的（可选的）依赖项。当它被插入时，会替换 API 包中的最小实现（替换机制依赖于实现用的语言）。</p><p>SDK 实现了将 API 调用转换为可导出的遥测数据所需的核心功能。</p><p>SDK 定义了导出接口，负责将遥测数据发送到后端的特定协议导出器必须实现这个接口。</p><p>SDK 还包括可选的帮助导出器，如果需要，可以组合这些导出器以实现额外的功能。</p><p>库设计者需要根据这个通用规范（<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#span-exporter">Span Exporter</a>）定义特定于语言的导出器接口。</p><h4 id="协议导出器"><a href="#协议导出器" class="headerlink" title="协议导出器"></a>协议导出器</h4><p>遥测后端供应商期望实现导出器接口。通过 <code>Export</code> 函数接收的数据应该被序列化，并以特定于供应商的方式发送到后端。</p><p>鼓励供应商尽可能使特定于协议的导出器保持简单，并实现理想的附加功能，例如，使用 SDK 提供的帮助程序进行排队和重试。</p><p>最终用户应该能够灵活地做出许多决定，包括排队、重试、标记、批处理功能，这些功能对他们的应用程序最有意义。例如，如果应用程序的遥测数据必须传递给无法保证可用性的远程后端，那么最终用户可以选择使用持久的本地队列和 <code>Exporter</code> 在失败时重试发送。与将遥测数据传递到本地运行的代理守护进程的应用程序不同，最终用户可能更喜欢使用更简单的导出配置，而不需要重试或排队。</p><p>如果 SDK 的其他导出器是作为单独的库提供的，那么库的名称应该根据命名约定加上 “OpenTelemetry” 和 “Exporter” 。例如：</p><ul><li>Python 和 Java：opentelemetry-exporter-jaeger</li><li>Javascript：@opentelemetry/exporter-jeager</li></ul><h4 id="资源发现"><a href="#资源发现" class="headerlink" title="资源发现"></a>资源发现</h4><p>鼓励云供应商提供检测环境中资源信息的包，这些必须在 SDK 之外实现。</p><h3 id="替代实现"><a href="#替代实现" class="headerlink" title="替代实现"></a>替代实现</h3><p>最终用户的应用程序可能决定依赖于替代实现。SDK 为实现的灵活性和扩展性提供了许多实现。在开发替代实现之前，请回顾 OpenTelemetry 提供的扩展。</p><p>替代实现的一个用例是自动化测试。可以在自动化测试期间插入模拟实现。例如，它可以将所有生成的遥测数据存储在存储器中，并提供检查存储数据的能力。这将允许测试验证是否正确生成了遥测数据。鼓励 OpenTelemetry 客户端的作者提供这样的模拟实现。</p><p>注意，使用 SDK 和模拟 <code>Exporter</code> 也可以进行模拟，而不需要替换整个 SDK 。</p><p>所选择的模拟方法将取决于测试目标，以及在测试过程中需要截取的具体的遥测数据。</p><h3 id="版本标记"><a href="#版本标记" class="headerlink" title="版本标记"></a>版本标记</h3><p>API 包和 SDK 包必须使用语义版本编号。API 包版本号和 SDK 包版本号是解耦的，可以是不同的（也可以与其实现的规范版本号不同）。API 包和 SDK 包必须标注自己的版本号。</p><p>版本号的解耦允许 OpenTelemetry 客户端作者独立发布 API 包和 SDK 包，而不需要与规范协调和匹配版本号。</p><p>因为 API 包和 SDK 包的版本号没有耦合，所以每个 API 和 SDK 包发布时都必须清楚地提到它们实现的规范版本号。此外，如果特定版本的 SDK 包只与特定版本的 API 包兼容，那么 OpenTelemetry 客户端作者也必须发布这个兼容性信息。OpenTelemetry 客户端作者必须在发布说明中包括这些信息。例如，SDK 包发布说明可能会说明：SDK 0.3.4 与API 0.1.0 一起使用，实现了 OpenTelemetry 规范 0.1.0 。</p><h3 id="性能和屏阻塞"><a href="#性能和屏阻塞" class="headerlink" title="性能和屏阻塞"></a>性能和屏阻塞</h3><p>参阅 <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/performance.md">Performance and Blocking</a> 了解 API 实现应该满足的性能期望及其策略，以及应该如何记录在负载下的行为。</p><h3 id="并发和线程安全"><a href="#并发和线程安全" class="headerlink" title="并发和线程安全"></a>并发和线程安全</h3><p>请参考单独的 API 规范，了解 API 实现应该提供哪些并发安全，以及应该如何记录这些安全：</p><ul><li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#concurrency">Metrics API</a></li><li><a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#concurrency">Tracing API</a></li></ul><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://github.com/open-telemetry/opentelemetry-specification">OpenTelemetry Specification</a></li></ul>]]></content>
    
    
    <summary type="html">整理之前的笔(fan)记(yi)</summary>
    
    
    
    <category term="Jaeger" scheme="https://jckling.github.io/categories/Jaeger/"/>
    
    
    <category term="OpenTelemetry" scheme="https://jckling.github.io/tags/OpenTelemetry/"/>
    
  </entry>
  
  <entry>
    <title>全链路追踪与 Jaeger 入门</title>
    <link href="https://jckling.github.io/2021/04/02/Jaeger/%E5%85%A8%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E4%B8%8E%20Jaeger%20%E5%85%A5%E9%97%A8/"/>
    <id>https://jckling.github.io/2021/04/02/Jaeger/%E5%85%A8%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E4%B8%8E%20Jaeger%20%E5%85%A5%E9%97%A8/</id>
    <published>2021-04-02T01:57:10.000Z</published>
    <updated>2021-08-16T06:59:39.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全链路追踪"><a href="#全链路追踪" class="headerlink" title="全链路追踪"></a>全链路追踪</h1><p>三个追踪级别：</p><ul><li>跨进程追踪（cross-process）：调用另一个微服务</li><li>数据库追踪</li><li>进程内部的追踪（in-process）：在一个函数内部的追踪</li></ul><h2 id="可观察性-Observability"><a href="#可观察性-Observability" class="headerlink" title="可观察性 (Observability)"></a>可观察性 (Observability)</h2><p>可观察性更关注的是从系统自身出发，去展现系统的运行状况，更像是一种对系统的自我审视。</p><p>可观察性目前主要包含以下三大支柱：</p><ul><li><p>日志（Logging）：Logging 主要记录一些离散的事件，应用往往通过将定义好格式的日志信息输出到文件，然后用日志收集程序收集起来用于分析和聚合。虽然可以用时间将所有日志点事件串联起来，但是却很难展示完整的调用关系路径；</p></li><li><p>度量（Metrics）：Metric 往往是一些聚合的信息，相比 Logging 丧失了一些具体信息，但是占用的空间要比完整日志小的多，可以用于监控和报警，在这方面 Prometheus 已经基本上成为了事实上的标准；</p></li><li><p>分布式追踪（Tracing）：Tracing 介于 Logging 和 Metric 之间， 以请求的维度来串联服务间的调用关系并记录调用耗时，即保留了必要的信息，又将分散的日志事件通过 Span 串联，帮助我们更好的理解系统的行为、辅助调试和排查性能问题。</p></li></ul><blockquote><p>CNCF 云原生计算基金会</p></blockquote><img src="https://i.loli.net/2021/06/06/hBaYSuePLqN8M3U.png" width="60%"/><p>三大支柱有如下特点：</p><ul><li>Metric 的特点是，它是可累加的。具有原子性，每个都是一个逻辑计量单元，或者一个时间段内的柱状图。例如：队列的当前深度可以被定义为一个计量单元，在写入或读取时被更新统计；输入 HTTP 请求的数量可以被定义为一个计数器，用于简单累加；请求的执行时间可以被定义为一个柱状图，在指定时间片上更新和统计汇总。</li><li>Logging 的特点是，它描述一些离散的（不连续的）事件。例如：应用通过一个滚动的文件输出 debug 或 error 信息，并通过日志收集系统，存储到 Elasticsearch 中；审批明细信息通过 Kafka，存储到数据库（BigTable）中；又或者，特定请求的元数据信息，从服务请求中剥离出来，发送给一个异常收集服务，如 NewRelic。</li><li>Tracing 的最大特点就是，它在单次请求的范围内处理信息。任何的数据、元数据信息都被绑定到系统中的单个事务上。例如：一次调用远程服务的 RPC 执行过程；一次实际的SQL查询语句；一次 HTTP 请求的业务性 ID 。</li></ul><img src="https://i.loli.net/2021/06/06/hsE2IOxXn78amMp.jpg" width="80%"/><h2 id="Tracing"><a href="#Tracing" class="headerlink" title="Tracing"></a>Tracing</h2><p>分布式追踪，也称为分布式请求追踪，是一种用于分析和监视应用程序的方法，特别是那些使用微服务体系结构构建的应用程序；分布式追踪有助于查明故障发生的位置以及导致性能低下的原因，开发人员可以使用分布式追踪来帮助调试和优化他们的代码，IT 和 DevOps 团队可以使用分布式追踪来监视应用程序。</p><p>分布式追踪系统的核心步骤一般有三个：代码埋点，数据存储、查询展示。</p><h1 id="OpenTracing"><a href="#OpenTracing" class="headerlink" title="OpenTracing"></a>OpenTracing</h1><p>OpenTracing 旨在标准化 Trace 数据结构和格式，其目的是：</p><ul><li>不同语言开发的 Trace 客户端的互操作性。Java/.Net/PHP/Python/NodeJs 等语言开发的客户端，只要遵循 OpenTracing 规范，就都可以对接 OpenTracing 兼容的监控后端。</li><li>Tracing 监控后端的互操作性。只要遵循 OpenTracing 规范，企业可以根据需要替换具体的 Tracing 监控后端产品，比如从 Zipkin 替换成 Jaeger/CAT/Skywalking 等后端。</li></ul><blockquote><p>OpenTracing 与 OpenCensus 已合并为 OpenTelemetry 。</p></blockquote><p>OpenTracing 不是一个标准，OpenTracing API 提供了一个标准的、与供应商无关的框架，是对分布式链路中涉及到的一系列操作的高度抽象集合。这意味着如果开发者想要尝试一种不同的分布式追踪系统，开发者只需要简单地修改 Tracer 配置即可，而不需要替换整个分布式追踪系统。</p><p>OpenTracing 是一个轻量级的标准化层，位于应用程序/类库和追踪或日志分析程序之间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  +-------------+  +---------+  +----------+  +------------+</span><br><span class="line">  | Application |  | Library |  |   OSS    |  |  RPC&#x2F;IPC   |</span><br><span class="line">  |    Code     |  |  Code   |  | Services |  | Frameworks |</span><br><span class="line">  +-------------+  +---------+  +----------+  +------------+</span><br><span class="line">         |              |             |             |</span><br><span class="line">         |              |             |             |</span><br><span class="line">         v              v             v             v</span><br><span class="line">    +-----------------------------------------------------+</span><br><span class="line">    | · · · · · · · · · · OpenTracing · · · · · · · · · · |</span><br><span class="line">    +-----------------------------------------------------+</span><br><span class="line">      |               |                |               |</span><br><span class="line">      |               |                |               |</span><br><span class="line">      v               v                v               v</span><br><span class="line">+-----------+  +-------------+  +-------------+  +-----------+</span><br><span class="line">|  Tracing  |  |   Logging   |  |   Metrics   |  |  Tracing  |</span><br><span class="line">| System A  |  | Framework B |  | Framework C |  | System D  |</span><br><span class="line">+-----------+  +-------------+  +-------------+  +-----------+</span><br></pre></td></tr></table></figure><h2 id="OpenTracing-数据模型"><a href="#OpenTracing-数据模型" class="headerlink" title="OpenTracing 数据模型"></a>OpenTracing 数据模型</h2><p>基本概念</p><ul><li><p>Trace (调用链/链路)：在广义上，一个 Trace 代表了一个事务或者流程在（分布式）系统中的执行过程。一个 Trace 是由多个 Span 组成的一个有向无环图（DAG），每一个 Span 代表 Trace 中被命名并计时的连续性的执行片段。</p></li><li><p>Span (跨度)：一个 Span 代表系统中具有开始时间和执行时长的逻辑运行单元，即应用中的一个逻辑操作。Span 之间通过嵌套或者顺序排列建立逻辑因果关系。一个 Span 可以被理解为一次方法调用，一个程序块的调用，或者一次 RPC / 数据库访问，只要是一个具有完整时间周期的程序访问，都可以被认为是一个 Span。</p></li><li><p>Logs：每个 Span 可以进行多次 Logs 操作，每一次 Logs 操作，都需要一个带时间戳的时间名称，以及可选的任意大小的存储结构。</p></li><li><p>Tags：每个Span可以有多个键值对（key:value）形式的 Tags，Tags 是没有时间戳的，支持简单的对 Span 进行注解和补充。</p></li><li><p>SpanContext：SpanContext 更像是一个“概念”，而不是通用 OpenTracing 层的有用功能。在创建 Span、向传输协议 Inject（注入）和从传输协议 中Extract（提取）调用链信息时，SpanContext 发挥着重要作用。</p></li></ul><h3 id="Span"><a href="#Span" class="headerlink" title="Span"></a>Span</h3><p>表示分布式调用链条中的一个调用单元，其边界包含一个请求进到服务内部再由某种途径（例如：http）从当前服务出去。</p><p>一个 Span 一般会记录这个调用单元内部的一些信息，例如每个 Span 包含的操作名称、开始和结束时间、附加额外信息的 Span Tag、可用于记录 Span 内特殊事件 Span Log 、用于传递 Span 上下文的 SpanContext 和定义 Span 之间关系的 References 。</p><p>Span 状态</p><ul><li>操作名称 (An operation name)</li><li>开始时间 (A start timestamp)</li><li>结束时间 (A finish timestamp)</li><li>标签信息 (Span Tag)：零个或多个键值对（keys:values）组成的 Span Tags。键必须是 string 类型，值可以是字符串，布尔，或者数字类型。</li><li>日志信息 (Span Log)：零个或多个 Span Logs。每次 log 操作包含一个键值对和一个时间戳。 键值对中，键必须为 string 类型，值可以是任意类型。 但并不是所有的支持 OpenTracing 的 Tracer 都需要支持所有的值类型。</li><li>Span 上下文对象 (SpanContext)</li><li>Span 间关系 (References)：通过 SpanContext 可以指向零个或者多个因果相关的 Span 。</li></ul><p>SpanContext 状态</p><ul><li>任何一个 OpenTracing 实现都需要将当前调用链的状态（例如：Trace 和 Span 的 id）跨进程边界传输，依赖于一个独特的 Span</li><li>Baggage Items，Trace 的随行数据，是一个键值对集合，存在于 Trace 中，也需要跨进程边界传输</li></ul><h3 id="Tracer"><a href="#Tracer" class="headerlink" title="Tracer"></a>Tracer</h3><p>Trace 描述在分布式系统中的一次”事务”。一个 Trace 通过归属于此调用链的 Span（跨度）隐性定义，可以被认为是由一个或多个 Span 组成的有向无环图（DAG）， Span 与 Span 的关系被命名为 References。</p><blockquote><p>Span 可以理解为一次方法调用， 一个程序块的调用，或者一次 RPC / 数据库访问。只要是一个具有完整时间周期的程序访问，都可以被认为是一个 Span 。</p></blockquote><p>Tracer 用于创建 Span，并理解如何跨进程边界注入（序列化）和提取（反序列化） Span。它有以下的职责：</p><ul><li>建立和开启一个 Span</li><li>从某种媒介中提取/注入一个 SpanContext</li></ul><ol><li>示例 Trace （由 8 个 Span 组成）</li></ol><p>单个 Trace 中，Span 间的因果关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">       [Span A]  ←←←(the root Span)</span><br><span class="line">           |</span><br><span class="line">    +------+------+</span><br><span class="line">    |             |</span><br><span class="line">[Span B]      [Span C] ←←←(Span C 是 Span A 的孩子节点, ChildOf)</span><br><span class="line">    |             |</span><br><span class="line">[Span D]      +---+-------+</span><br><span class="line">              |           |</span><br><span class="line">          [Span E]    [Span F] &gt;&gt;&gt; [Span G] &gt;&gt;&gt; [Span H]</span><br><span class="line">                                      ↑</span><br><span class="line">                                      ↑</span><br><span class="line">                                      ↑</span><br><span class="line">                        (Span G 在 Span F 后被调用, FollowsFrom)</span><br></pre></td></tr></table></figure><ol start="2"><li>基于时间轴的时序图</li></ol><p>单个 Trace 中，Span 间的时间关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">––|–––––––|–––––––|–––––––|–––––––|–––––––|–––––––|–––––––|–&gt; time</span><br><span class="line"></span><br><span class="line"> [Span A···················································]</span><br><span class="line">   [Span B··············································]</span><br><span class="line">      [Span D··········································]</span><br><span class="line">    [Span C········································]</span><br><span class="line">         [Span E·······]        [Span F··] [Span G··] [Span H··]</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>一个 Span 可以与一个或多个 Span 存在因果关系。OpenTracing 目前定义了两种关系：ChildOf（父子） 和 FollowsFrom（跟随）。</p><ol><li>ChildOf</li></ol><p>一个 Span 可能是一个父级 Span 的孩子，父级 Span 在某种程度上取决于子 Span。以下情况会构成 ChildOf 关系</p><ul><li>一个 RPC 调用的服务端的 Span，和 RPC 服务客户端的 Span 构成 ChildOf 关系</li><li>一个 sql insert 操作的 Span，和 ORM 的 save 方法的 Span 构成 ChildOf 关系</li><li>很多可以并行工作（或者分布式工作）的 Span 都可能是一个父级的 Span 的子项，父级 Span 会合并所有子 Span 的执行结果，并在指定期限内返回</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[-Parent Span---------]</span><br><span class="line">     [-Child Span----]</span><br><span class="line"></span><br><span class="line">[-Parent Span--------------]</span><br><span class="line">     [-Child Span A----]</span><br><span class="line">      [-Child Span B----]</span><br><span class="line">    [-Child Span C----]</span><br><span class="line">     [-Child Span D---------------]</span><br><span class="line">     [-Child Span E----]</span><br></pre></td></tr></table></figure><ol start="2"><li>FollowsFrom</li></ol><p>一些父级节点不以任何方式依赖他们子节点的执行结果，这种情况下子 Span 和父 Span 之间是 FollowsFrom 的因果关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[-Parent Span-]  [-Child Span-]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[-Parent Span--]</span><br><span class="line"> [-Child Span-]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[-Parent Span-]</span><br><span class="line">            [-Child Span-]</span><br></pre></td></tr></table></figure><h3 id="SpanContext"><a href="#SpanContext" class="headerlink" title="SpanContext"></a>SpanContext</h3><p>表示一个 Span 对应的上下文，Span 和 SpanContext 基本上是一一对应的关系， SpanContext 可以通过某些媒介和方式传递给调用链的下游来做一些处理（例如子 Span 的 id 生成、信息的继承打印日志等等）。</p><p>Span 上下文存储的是一些需要跨越边界的（传播追踪所需的）一些信息，例如：</p><ul><li>SpanId ：当前这个 Span 的 id</li><li>TraceId ：这个 Span 所属的 TraceId （也就是这次调用链的唯一id）。<ul><li>Trace_id 和 Span_id 用以区分 Trace 中的 Span；任何 OpenTraceing 实现相关的状态（比如 Trace 和 Span id）都需要被一个跨进程的 Span 所联系。</li></ul></li><li>baggage ：其他的能过跨越多个调用单元的信息，即跨进程的 key value 对。Baggage Items 和 Span Tag 结构相同，唯一的区别是：Span Tag 只在当前 Span 中存在，并不在整个 Trace 中传递，而 Baggage Items 会随调用链传递。</li></ul><p>在跨界(跨服务或者协议）传输过程中实现调用关系的传递和关联，需要能够将 SpanContext 向下游介质注入，并在下游传输介质中提取 SpanContext。</p><h3 id="Carrier"><a href="#Carrier" class="headerlink" title="Carrier"></a>Carrier</h3><p>Carrier 表示的是一个承载 SpanContext 的媒介，比方说在 http 调用场景中会有 HttpCarrier，在 dubbo 调用场景中也会有对应的 DubboCarrier 。</p><h3 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h3><p>负责具体场景中序列化反序列化上下文的逻辑，例如在 HttpCarrier 使用中通常就会有一个对应的 HttpFormatter 。 Tracer 的注入和提取就是委托给了 Formatter 。</p><h3 id="ScopeManager"><a href="#ScopeManager" class="headerlink" title="ScopeManager"></a>ScopeManager</h3><p>通过它能够获取当前线程中启用的 Span 信息，并且可以启用一些处于未启用状态的 Span 。在一些场景中，我们在一个线程中可能同时建立多个 Span ，但是同一时间同一线程只会有一个 Span 启用，其他 Span 可能处在下列的状态中：</p><ul><li>等待子 Span 完成</li><li>等待某种阻塞方法</li><li>创建但是并未开始</li></ul><h3 id="Reporter"><a href="#Reporter" class="headerlink" title="Reporter"></a>Reporter</h3><p>通过它来打印或者上报一些关键链路信息（例如 Span 创建和结束），只有把这些信息进行处理之后才能对全链路信息进行可视化和真正的监控。</p><h1 id="开源分布式追踪系统"><a href="#开源分布式追踪系统" class="headerlink" title="开源分布式追踪系统"></a>开源分布式追踪系统</h1><p>分布式追踪系统设计目标</p><ol><li> 低侵入性</li><li> 灵活的应用策略：收集数据的范围和粒度</li><li> 时效性：从 agent 采样，到 collect、storage 和 display 尽可能快</li><li> 决策支持</li><li> 可视化</li><li> 低消耗：在 Web 请求链路中，对请求的响应影响尽可能小</li><li> 延展性：随着业务量的增长，分布式追踪系统依然具有高可用和高性能表现</li></ol><table><thead><tr><th>名称</th><th>厂商</th><th>开发语言</th><th>OpenTracing 兼容</th><th>侵入性</th><th>时效性</th><th>可视化</th><th>消耗</th></tr></thead><tbody><tr><td><a href="https://github.com/jaegertracing/jaeger">Jaeger</a></td><td>Uber</td><td>Go</td><td>是</td><td>中</td><td>高</td><td>中</td><td>低</td></tr><tr><td><a href="https://github.com/openzipkin/zipkin">Zipkin</a></td><td>twitter</td><td>Java</td><td>是</td><td>高</td><td>高</td><td>中</td><td>低</td></tr><tr><td><a href="https://github.com/pinpoint-apm/pinpoint">Pinpoint</a></td><td>NAVER</td><td>Java</td><td>否</td><td>低</td><td>-</td><td>高</td><td>低</td></tr><tr><td><a href="https://github.com/dianping/cat">CAT</a></td><td>大众点评</td><td>Java</td><td>否</td><td>高</td><td>中</td><td>高</td><td>低</td></tr><tr><td><a href="https://github.com/sourcegraph/appdash">Appdash</a></td><td>sourcegraph</td><td>Go</td><td>是</td><td>低</td><td>高</td><td>低</td><td>不支持大规模部署</td></tr><tr><td><a href="https://github.com/apache/incubator-skywalking">SkyWalking</a></td><td>华为</td><td>Java</td><td>是</td><td>低</td><td>中</td><td>高</td><td>低</td></tr></tbody></table><h1 id="Jaeger"><a href="#Jaeger" class="headerlink" title="Jaeger"></a>Jaeger</h1><p>Jaeger 主要有以下几个组成部分：</p><ul><li>Jaeger Client：为不同语言实现符合 OpenTracing 的 SDK。应用程序通过 API 写入数据，client library 把 trace 信息按照应用程序制定的采样策略传递给 jaeger-agent 。</li><li>Agent：一个监听在 UDP 端口上接收 span 数据的网络守护进程，它会将数据批量发送给 collector 。它被设计成一个基础组件，部署到所有的宿主机上。Agent 将 client library 和 collector 解耦，为 client library 屏蔽了路由和发现 collector 的细节。</li><li>Collector：接收 jaeger-agent 发送来的数据，然后将数据写入后端存储。Collector 被设计成无状态的组件，因此用户可以运行任意数量的 Collector。</li><li>Data Store：后端存储被设计成一个可插拔的组件，支持数据写入 cassandra ， elastic search 等。</li><li>Query：接收查询请求，从后端存储系统中检索 tarce 并通过 UI 进行展示。Query 是无状态的，可以启动多个实例并把它们部署在例如 nginx 这样的负载均衡器之后。</li></ul><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>Span （跨度）表示 Jaeger 中具有操作名称、开始时间和持续时间的逻辑工作单元。Span 可以嵌套和排序，以建模因果关系。</p><p>Trace （链路）是系统中的数据/执行路径，可以认为是由 Span 组成的的有向无环图。</p><img src="https://i.loli.net/2021/06/06/j9SMp2HcFQfNLUd.png" width="80%"/><p>对于一个组件来说，一次处理过程一般是产生一个 Span；这个 Span 的生命周期是从接收到请求到返回响应这段过程。</p><p>这里需要考虑的问题是如何与上下游链路关联起来。在 Opentracing 规范中，可以在 Tracer 中 extract 出一个跨进程传递的 SpanContext 。然后通过这个 SpanContext 所携带的信息将当前节点关联到整个 Tracer 链路中去，当然有提取（extract）就会有对应的注入（inject）。</p><p>链路的构建一般是 client-server-client-server 这种模式的，那就是会在 client 端进行注入（inject），然后再 server 端进行提取（extract），反复进行，然后一直传递下去。</p><p>在拿到 SpanContext 之后，此时当前的 Span 就可以关联到这条链路中了，那么剩余的事情就是收集当前组件的一些数据；整个过程大概分为以下几个阶段：</p><ul><li>从请求中提取 SpanContext</li><li>构建 Span，并将当前 Span 存入当前 tracer 上下文中</li><li>设置一些信息到 Span 中</li><li>返回响应</li><li>Span 结束并上报</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>Jaeger 可以被部署为一个一体化的二进制文件，其中 Jaeger 的所有后端组件运行在一个单独的进程中；也可以被部署为一个可扩展的分布式系统，有两个主要的部署方式:</p><ol><li>Collector 直接写入存储</li></ol><img src="https://i.loli.net/2021/06/06/GYDWAdzw7t4PiCB.png" width="80%"/><ol><li>Collecter 写入 Kafka 作为初始缓冲区</li></ol><img src="https://i.loli.net/2021/06/06/N87rt1HTcqMkV4g.png" width="80%"/><h3 id="Jaeger-Client（客户端）"><a href="#Jaeger-Client（客户端）" class="headerlink" title="Jaeger Client（客户端）"></a>Jaeger Client（客户端）</h3><p>Jaeger 客户端是 OpenTracing API 特定语言的实现。它们可以用于手动或者通过与 OpenTracing 集成的各种现有的开源框架，比如 Flask、Dropwizard、gRPC 等等，来进行分布式追踪。</p><p>被检测的服务在接收新请求时创建 Span，并将上下文信息（trace id、span id、baggage）附加到传出的请求。只有 id 和 baggage 会与请求一起传播；所有其他分析数据，如操作名称、时间、标记和日志，都不会传播。相反，它们在后台异步传输到 Jaeger 后端。</p><p>该机制被设计为在生产环境中始终处于开启状态。为了减少开销，Jaeger 客户端使用了各种采样策略。对 trace 进行采样时，Span 分析数据被捕获并传输到 Jaeger 后端。当不对 trace 进行采样时，不会收集任何分析数据，对 OpenTracing API 的调用也会短路，使得开销最小。默认情况下，Jaeger 客户端采样 0.1% 的 trace ，并有能力从 Jaeger 后端检索采样策略。</p><img src="https://i.loli.net/2021/06/06/2q6FmR7hgIzuUGx.png" width="80%"/><h3 id="Agent（代理）"><a href="#Agent（代理）" class="headerlink" title="Agent（代理）"></a>Agent（代理）</h3><p>Jaeger 代理是一个网络守护进程，监听通过 UDP 发送的 Span，并将其批量发送给收集器。代理被设计成基础架构组件并部署到所有主机上，它将收集器的路由和发现从客户端抽象出来。</p><h3 id="Collector（收集器）"><a href="#Collector（收集器）" class="headerlink" title="Collector（收集器）"></a>Collector（收集器）</h3><p>Jaeger 收集器接收来自 Jaeger 代理的 Trace 并通过处理管道运行它们。目前的管道支持对 trace 进行验证、索引、执行任何转换，最后存储它们。</p><p>Jaeger 的存储是一个可插拔组件，目前支持 Cassandra ， Elasticsearch 和 Kafka 。</p><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>从存储中检索 trace 并提供 UI 进行展示。</p><h3 id="Ingester"><a href="#Ingester" class="headerlink" title="Ingester"></a>Ingester</h3><p>从 Kafka Topic 中读取数据并写入到另一个存储后端（Cassandra, Elasticsearch）。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>All-in-one 是为快速本地测试而设计的可执行程序，通过内存存储组件启动 Jaeger UI、收集器、查询和代理，这里使用 Docker 镜像启动。使用浏览器访问 <code>http://localhost:16686</code> Jaeger UI 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name jaeger \</span><br><span class="line">  -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \</span><br><span class="line">  -p 5775:5775/udp \</span><br><span class="line">  -p 6831:6831/udp \</span><br><span class="line">  -p 6832:6832/udp \</span><br><span class="line">  -p 5778:5778 \</span><br><span class="line">  -p 16686:16686 \</span><br><span class="line">  -p 14268:14268 \</span><br><span class="line">  -p 14250:14250 \</span><br><span class="line">  -p 9411:9411 \</span><br><span class="line">  jaegertracing/all-in-one:1.21</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/06/06/YDf4QyrwBIWjSp8.png"/><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>trace 是由 span 构成的有向无环图；span 是应用中一些工作的逻辑表示，span 至少包含操作名称、开始时间、结束时间。</p><p>OpenTracing API 特征</p><ul><li><code>tracer</code> 实例通过 <code>start_span</code> 开始新的 span</li><li>每个 span 都有一个操作名称，这里是 <code>say-hello</code><ul><li>操作名称代表了一类的 span ，而不是单一的实例</li><li>Jaeger UI 中可以根据操作名称检索 trace</li></ul></li><li>每个 span 必须通过调用它的 <code>finish()</code> 方法结束<ul><li>使用 <code>with</code> 上下文管理器</li></ul></li><li>tracer 将自动捕获 span 的开始时间戳和结束时间戳</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lib.tracing <span class="keyword">import</span> init_tracer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">hello_to</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_span(<span class="string">&#x27;say-hello&#x27;</span>) <span class="keyword">as</span> span:</span><br><span class="line">        <span class="comment"># 标签 tag，元数据</span></span><br><span class="line">        span.set_tag(<span class="string">&#x27;hello-to&#x27;</span>, hello_to)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 日志 log，包含时间戳和一些数据</span></span><br><span class="line">        hello_str = <span class="string">&#x27;Hello, %s!&#x27;</span> % hello_to</span><br><span class="line">        span.log_kv(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;string-format&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: hello_str&#125;)</span><br><span class="line"></span><br><span class="line">        print(hello_str)</span><br><span class="line">        span.log_kv(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;println&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化全局 trace</span></span><br><span class="line"><span class="comment"># 将 tracer 开始的所有 span 标记为源自 hello-world 服务</span></span><br><span class="line">tracer = init_tracer(<span class="string">&#x27;hello-world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hello_to = sys.argv[<span class="number">1</span>]</span><br><span class="line">say_hello(hello_to)</span><br><span class="line"></span><br><span class="line"><span class="comment"># span 有内部缓冲区，由后台线程刷新</span></span><br><span class="line"><span class="comment"># yield to IOLoop to flush the spans</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">tracer.close()</span><br></pre></td></tr></table></figure><p>标签（tag）或日志（log）</p><ul><li>标记用于描述应用于整个 span 的属性。</li><li>日志包含时间戳，记录更详细的信息<ul><li>规范建议所有日志语句包含一个 <code>event</code> 字段，描述正在记录的整个事件，事件的其他属性作为附加字段</li></ul></li><li><a href="https://github.com/opentracing/specification/blob/master/semantic_conventions.md#standard-span-tags-and-log-fields">Standard Span tags and log fields</a></li></ul><p>程序执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(env) λ python -m lesson01.solution.hello Bryan</span><br><span class="line">Initializing Jaeger Tracer with UDP reporter</span><br><span class="line">Using proactor: IocpProactor</span><br><span class="line">Using sampler ConstSampler(True)</span><br><span class="line">opentracing.tracer initialized to &lt;jaeger_client.tracer.Tracer object at 0x0000022CFE965BB0&gt;[app_name=hello-world]</span><br><span class="line">Hello, Bryan!</span><br><span class="line">Reporting span 2b9c67de4734ed0d:7dd683971c41ccb4:0:1 hello-world.say-hello</span><br><span class="line">Using proactor: IocpProactor</span><br><span class="line">Span publisher exited</span><br></pre></td></tr></table></figure><h3 id="Context-and-Tracing-Functions"><a href="#Context-and-Tracing-Functions" class="headerlink" title="Context and Tracing Functions"></a>Context and Tracing Functions</h3><p>在一个 trace 中追踪多个 span</p><ul><li><code>SpanReference</code> 表示 Span 之间的关系<ul><li><code>SpanContext</code> 可跨进程传播</li><li><code>ReferenceType</code> 表示关系类型<ul><li><code>ChildOf</code>：依赖</li><li><code>FollowsFrom</code>：后继</li></ul></li></ul></li><li>Scope Manager 机制<ul><li><code>start_active_span</code> 激活 Span（active）<ul><li>通过 <code>tracer.active_span</code> 访问 Span</li><li>返回 <code>Scope</code>，通过 <code>scope.span</code> 访问 Span</li><li>结束后才能复原先前活跃的 Span</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lib.tracing <span class="keyword">import</span> init_tracer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">hello_to</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;say-hello&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">        scope.span.set_tag(<span class="string">&#x27;hello-to&#x27;</span>, hello_to)</span><br><span class="line">        hello_str = format_string(hello_to)</span><br><span class="line">        print_hello(hello_str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_string</span>(<span class="params">hello_to</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;format&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">        hello_str = <span class="string">&#x27;Hello, %s!&#x27;</span> % hello_to</span><br><span class="line">        scope.span.log_kv(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;string-format&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: hello_str&#125;)</span><br><span class="line">        <span class="keyword">return</span> hello_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hello</span>(<span class="params">hello_str</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;println&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">        print(hello_str)</span><br><span class="line">        scope.span.log_kv(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;println&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># main</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">tracer = init_tracer(<span class="string">&#x27;hello-world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hello_to = sys.argv[<span class="number">1</span>]</span><br><span class="line">say_hello(hello_to)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yield to IOLoop to flush the spans</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">tracer.close()</span><br></pre></td></tr></table></figure><p>程序执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(env) λ python -m lesson02.solution.hello Bryan</span><br><span class="line">Initializing Jaeger Tracer with UDP reporter</span><br><span class="line">Using proactor: IocpProactor</span><br><span class="line">Using sampler ConstSampler(True)</span><br><span class="line">opentracing.tracer initialized to &lt;jaeger_client.tracer.Tracer object at 0x000001F907207BE0&gt;[app_name=hello-world]</span><br><span class="line">Reporting span 119103464ff061a1:37c5aad4c3288538:377791e2ada77176:1 hello-world.format</span><br><span class="line">Hello, Bryan!</span><br><span class="line">Reporting span 119103464ff061a1:72841e6ad89fcc14:377791e2ada77176:1 hello-world.println</span><br><span class="line">Reporting span 119103464ff061a1:377791e2ada77176:0:1 hello-world.say-hello</span><br><span class="line">Using proactor: IocpProactor</span><br></pre></td></tr></table></figure><h3 id="Tracing-RPC-Requests"><a href="#Tracing-RPC-Requests" class="headerlink" title="Tracing RPC Requests"></a>Tracing RPC Requests</h3><p>追踪进程边界和 RPC 调用（进程间上下文传播）</p><ul><li><code>inject(spanContext, format, carrier)</code></li><li><code>extract(format, carrier)</code></li></ul><p><code>format</code> 参数是 OpenTracing API 定义的三种标准编码之一</p><ul><li><code>TEXT_MAP</code>：Span 上下文被编码为键值对的集合</li><li><code>BINARY</code>：Span 上下文被编码为不透明的字节数组</li><li><code>HTTP_HEADERS</code>：和 <code>TEXT_MAP</code> 类似，键必须是安全的才能用于 HTTP 头部字段</li></ul><p><code>carrier</code> 是底层 RPC 框架的抽象</p><ul><li>例如，<code>TEXT_MAP</code> 格式的载体是字典（<code>dictionary</code>），<code>BINARY</code> 格式的载体是字节数组（<code>bytearray</code>）</li></ul><p>客户端，发起 HTTP 请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lib.tracing <span class="keyword">import</span> init_tracer</span><br><span class="line"><span class="keyword">from</span> opentracing.ext <span class="keyword">import</span> tags</span><br><span class="line"><span class="keyword">from</span> opentracing.propagation <span class="keyword">import</span> Format</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">hello_to</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;say-hello&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">        scope.span.set_tag(<span class="string">&#x27;hello-to&#x27;</span>, hello_to)</span><br><span class="line">        hello_str = format_string(hello_to)</span><br><span class="line">        print_hello(hello_str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_string</span>(<span class="params">hello_to</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;format&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">        hello_str = http_get(<span class="number">8081</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;helloTo&#x27;</span>, hello_to)</span><br><span class="line">        scope.span.log_kv(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;string-format&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: hello_str&#125;)</span><br><span class="line">        <span class="keyword">return</span> hello_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hello</span>(<span class="params">hello_str</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;println&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">        http_get(<span class="number">8082</span>, <span class="string">&#x27;publish&#x27;</span>, <span class="string">&#x27;helloStr&#x27;</span>, hello_str)</span><br><span class="line">        scope.span.log_kv(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;println&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">http_get</span>(<span class="params">port, path, param, value</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;http://localhost:%s/%s&#x27;</span> % (port, path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为当前活跃的 Span 附加元数据信息</span></span><br><span class="line">    span = tracer.active_span</span><br><span class="line">    span.set_tag(tags.HTTP_METHOD, <span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line">    span.set_tag(tags.HTTP_URL, url)</span><br><span class="line">    span.set_tag(tags.SPAN_KIND, tags.SPAN_KIND_RPC_CLIENT)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 Span 注入 HTTP 头部，使用 headers 字典</span></span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    tracer.inject(span, Format.HTTP_HEADERS, headers)</span><br><span class="line"></span><br><span class="line">    r = requests.get(url, params=&#123;param: value&#125;, headers=headers)</span><br><span class="line">    <span class="keyword">assert</span> r.status_code == <span class="number">200</span></span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># main</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">tracer = init_tracer(<span class="string">&#x27;hello-world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hello_to = sys.argv[<span class="number">1</span>]</span><br><span class="line">say_hello(hello_to)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yield to IOLoop to flush the spans</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">tracer.close()</span><br></pre></td></tr></table></figure><p>响应请求 <code>GET &#39;http://localhost:8081/format?helloTo=Bryan&#39;</code> ，返回字符串 <code>Hello, Bryan!</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> lib.tracing <span class="keyword">import</span> init_tracer</span><br><span class="line"><span class="keyword">from</span> opentracing.ext <span class="keyword">import</span> tags</span><br><span class="line"><span class="keyword">from</span> opentracing.propagation <span class="keyword">import</span> Format</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">tracer = init_tracer(<span class="string">&#x27;formatter&#x27;</span>) </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/format&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format</span>():</span></span><br><span class="line">    <span class="comment"># 解析传递过来的 Span 上下文</span></span><br><span class="line">    span_ctx = tracer.extract(Format.HTTP_HEADERS, request.headers)</span><br><span class="line">    <span class="comment"># 为当前活跃的 Span 添加元数据信息</span></span><br><span class="line">    span_tags = &#123;tags.SPAN_KIND: tags.SPAN_KIND_RPC_SERVER&#125;</span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;format&#x27;</span>, child_of=span_ctx, tags=span_tags):</span><br><span class="line">        hello_to = request.args.get(<span class="string">&#x27;helloTo&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello, %s!&#x27;</span> % hello_to</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(port=<span class="number">8081</span>)</span><br></pre></td></tr></table></figure><p>响应请求 <code>GET &#39;http://localhost:8082/publish?helloStr=hi%20there&#39;</code> ，返回字符串 <code>published</code>，打印字符串 <code>hi there</code> 到标准输出流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> lib.tracing <span class="keyword">import</span> init_tracer</span><br><span class="line"><span class="keyword">from</span> opentracing.ext <span class="keyword">import</span> tags</span><br><span class="line"><span class="keyword">from</span> opentracing.propagation <span class="keyword">import</span> Format</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">tracer = init_tracer(<span class="string">&#x27;publisher&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/publish&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publish</span>():</span></span><br><span class="line">    span_ctx = tracer.extract(Format.HTTP_HEADERS, request.headers)</span><br><span class="line">    span_tags = &#123;tags.SPAN_KIND: tags.SPAN_KIND_RPC_SERVER&#125;</span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;publish&#x27;</span>, child_of=span_ctx, tags=span_tags):</span><br><span class="line">        hello_str = request.args.get(<span class="string">&#x27;helloStr&#x27;</span>)</span><br><span class="line">        print(hello_str)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;published&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(port=<span class="number">8082</span>)</span><br></pre></td></tr></table></figure><p>分别在两个命令行终端启动程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8081</span></span><br><span class="line">python -m lesson03.solution.formatter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8082</span></span><br><span class="line">python -m lesson03.solution.publisher</span><br></pre></td></tr></table></figure><p>用 <code>curl</code> 发起请求，查看响应结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s <span class="string">&#x27;http://localhost:8081/format?helloTo=Bryan&#x27;</span></span><br><span class="line">Hello, Bryan!</span><br><span class="line"></span><br><span class="line">$ curl -s <span class="string">&#x27;http://localhost:8082/publish?helloStr=hi%20there&#x27;</span></span><br><span class="line">published</span><br></pre></td></tr></table></figure><p>使用 Client 程序发起请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(env) λ python -m lesson03.solution.hello Bryan</span><br><span class="line">Initializing Jaeger Tracer with UDP reporter</span><br><span class="line">Using proactor: IocpProactor</span><br><span class="line">Using sampler ConstSampler(True)</span><br><span class="line">opentracing.tracer initialized to &lt;jaeger_client.tracer.Tracer object at 0x00000207F6E9C3D0&gt;[app_name=hello-world]</span><br><span class="line">Starting new HTTP connection (1): localhost:8081</span><br><span class="line">http://localhost:8081 <span class="string">&quot;GET /format?helloTo=Bryan HTTP/1.1&quot;</span> 200 13</span><br><span class="line">Reporting span 4235cad8b8ce808d:e54fb451d1a77aba:63d2eb7238731d7d:1 hello-world.format</span><br><span class="line">Starting new HTTP connection (1): localhost:8082</span><br><span class="line">http://localhost:8082 <span class="string">&quot;GET /publish?helloStr=Hello%2C+Bryan%21 HTTP/1.1&quot;</span> 200 9</span><br><span class="line">Reporting span 4235cad8b8ce808d:4f0f035b3e14b3d6:63d2eb7238731d7d:1 hello-world.println</span><br><span class="line">Reporting span 4235cad8b8ce808d:63d2eb7238731d7d:0:1 hello-world.say-hello</span><br><span class="line">Using proactor: IocpProactor</span><br></pre></td></tr></table></figure><p>两个服务的终端信息输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(env) λ python -m lesson03.solution.formatter</span><br><span class="line">Initializing Jaeger Tracer with UDP reporter</span><br><span class="line">Using proactor: IocpProactor</span><br><span class="line">Using sampler ConstSampler(True)</span><br><span class="line">opentracing.tracer initialized to &lt;jaeger_client.tracer.Tracer object at 0x0000029A03FC2A00&gt;[app_name=formatter]</span><br><span class="line"> * Serving Flask app <span class="string">&quot;formatter&quot;</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http://127.0.0.1:8081/ (Press CTRL+C to quit)</span><br><span class="line">Reporting span 4235cad8b8ce808d:db684e7b3ed16d97:e54fb451d1a77aba:1 formatter.format</span><br><span class="line">127.0.0.1 - - [06/Jan/2021 14:09:31] <span class="string">&quot;GET /format?helloTo=Bryan HTTP/1.1&quot;</span> 200 -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(env) λ  python -m lesson03.solution.publisher</span><br><span class="line">Initializing Jaeger Tracer with UDP reporter</span><br><span class="line">Using proactor: IocpProactor</span><br><span class="line">Using sampler ConstSampler(True)</span><br><span class="line">opentracing.tracer initialized to &lt;jaeger_client.tracer.Tracer object at 0x000001FF28BC2550&gt;[app_name=publisher]</span><br><span class="line"> * Serving Flask app <span class="string">&quot;publisher&quot;</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http://127.0.0.1:8082/ (Press CTRL+C to quit)</span><br><span class="line">Hello, Bryan!</span><br><span class="line">Reporting span 4235cad8b8ce808d:d7bf7e691789d425:4f0f035b3e14b3d6:1 publisher.publish</span><br><span class="line">127.0.0.1 - - [06/Jan/2021 14:09:33] <span class="string">&quot;GET /publish?helloStr=Hello%2C+Bryan%21 HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><h3 id="Baggage"><a href="#Baggage" class="headerlink" title="Baggage"></a>Baggage</h3><p>分布式上下文传播，使用 baggage 在调用图中传递数据</p><ul><li>在多租户系统中传递租期</li><li>传递顶层调用者的身份信息</li><li>为混沌工程传递故障注入指令</li><li>为其他监控的数据传递请求范围的维度，比如分离生产环境与测试环境的流量度量</li><li>由于可能影响系统性能，因此有大小限制</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lib.tracing <span class="keyword">import</span> init_tracer</span><br><span class="line"><span class="keyword">from</span> opentracing.ext <span class="keyword">import</span> tags</span><br><span class="line"><span class="keyword">from</span> opentracing.propagation <span class="keyword">import</span> Format</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">hello_to, greeting</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;say-hello&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">        scope.span.set_tag(<span class="string">&#x27;hello-to&#x27;</span>, hello_to)</span><br><span class="line">        <span class="comment"># 设置 baggage</span></span><br><span class="line">        scope.span.set_baggage_item(<span class="string">&#x27;greeting&#x27;</span>, greeting)</span><br><span class="line">        hello_str = format_string(hello_to)</span><br><span class="line">        print_hello(hello_str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_string</span>(<span class="params">hello_to</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;format&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">        hello_str = http_get(<span class="number">8081</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;helloTo&#x27;</span>, hello_to)</span><br><span class="line">        scope.span.log_kv(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;string-format&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: hello_str&#125;)</span><br><span class="line">        <span class="keyword">return</span> hello_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hello</span>(<span class="params">hello_str</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;println&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">        http_get(<span class="number">8082</span>, <span class="string">&#x27;publish&#x27;</span>, <span class="string">&#x27;helloStr&#x27;</span>, hello_str)</span><br><span class="line">        scope.span.log_kv(&#123;<span class="string">&#x27;event&#x27;</span>: <span class="string">&#x27;println&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">http_get</span>(<span class="params">port, path, param, value</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;http://localhost:%s/%s&#x27;</span> % (port, path)</span><br><span class="line"></span><br><span class="line">    span = tracer.active_span</span><br><span class="line">    span.set_tag(tags.HTTP_METHOD, <span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line">    span.set_tag(tags.HTTP_URL, url)</span><br><span class="line">    span.set_tag(tags.SPAN_KIND, tags.SPAN_KIND_RPC_CLIENT)</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    tracer.inject(span, Format.HTTP_HEADERS, headers)</span><br><span class="line"></span><br><span class="line">    r = requests.get(url, params=&#123;param: value&#125;, headers=headers)</span><br><span class="line">    <span class="keyword">assert</span> r.status_code == <span class="number">200</span></span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># main</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(sys.argv) == <span class="number">3</span></span><br><span class="line"></span><br><span class="line">tracer = init_tracer(<span class="string">&#x27;hello-world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hello_to = sys.argv[<span class="number">1</span>]</span><br><span class="line">greeting = sys.argv[<span class="number">2</span>]</span><br><span class="line">say_hello(hello_to, greeting)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yield to IOLoop to flush the spans</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">tracer.close()</span><br></pre></td></tr></table></figure><p>修改 formatter 程序，读取 baggage 中的信息，进行判断和打印；publisher 程序不作改动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> lib.tracing <span class="keyword">import</span> init_tracer</span><br><span class="line"><span class="keyword">from</span> opentracing.ext <span class="keyword">import</span> tags</span><br><span class="line"><span class="keyword">from</span> opentracing.propagation <span class="keyword">import</span> Format</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">tracer = init_tracer(<span class="string">&#x27;formatter&#x27;</span>) </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/format&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format</span>():</span></span><br><span class="line">    span_ctx = tracer.extract(Format.HTTP_HEADERS, request.headers)</span><br><span class="line">    span_tags = &#123;tags.SPAN_KIND: tags.SPAN_KIND_RPC_SERVER&#125;</span><br><span class="line">    <span class="keyword">with</span> tracer.start_active_span(<span class="string">&#x27;format&#x27;</span>, child_of=span_ctx, tags=span_tags) <span class="keyword">as</span> scope:</span><br><span class="line">        <span class="comment"># 读取 baggage</span></span><br><span class="line">        greeting = scope.span.get_baggage_item(<span class="string">&#x27;greeting&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> greeting:</span><br><span class="line">            greeting = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">        hello_to = request.args.get(<span class="string">&#x27;helloTo&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s, %s!&#x27;</span> % (greeting, hello_to)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(port=<span class="number">8081</span>)</span><br></pre></td></tr></table></figure><p>分别在两个命令行终端启动程序，然后使用 client 程序发起请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(env) λ python -m lesson04.solution.hello Bryan Bonjour</span><br><span class="line">Initializing Jaeger Tracer with UDP reporter</span><br><span class="line">Using proactor: IocpProactor</span><br><span class="line">Using sampler ConstSampler(True)</span><br><span class="line">opentracing.tracer initialized to &lt;jaeger_client.tracer.Tracer object at 0x000001B38C03B6D0&gt;[app_name=hello-world]</span><br><span class="line">Starting new HTTP connection (1): localhost:8081</span><br><span class="line">http://localhost:8081 <span class="string">&quot;GET /format?helloTo=Bryan HTTP/1.1&quot;</span> 200 15</span><br><span class="line">Reporting span ea46c463f8e23559:99bab13b82e5316:c1c3826e5703dfb7:1 hello-world.format</span><br><span class="line">Starting new HTTP connection (1): localhost:8082</span><br><span class="line">http://localhost:8082 <span class="string">&quot;GET /publish?helloStr=Bonjour%2C+Bryan%21 HTTP/1.1&quot;</span> 200 9</span><br><span class="line">Reporting span ea46c463f8e23559:8090336103abbed0:c1c3826e5703dfb7:1 hello-world.println</span><br><span class="line">Reporting span ea46c463f8e23559:c1c3826e5703dfb7:0:1 hello-world.say-hello</span><br><span class="line">Using proactor: IocpProactor</span><br></pre></td></tr></table></figure><p>两个服务的终端信息输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(env) λ python -m lesson04.solution.formatter</span><br><span class="line">Initializing Jaeger Tracer with UDP reporter</span><br><span class="line">Using proactor: IocpProactor</span><br><span class="line">Using sampler ConstSampler(True)</span><br><span class="line">opentracing.tracer initialized to &lt;jaeger_client.tracer.Tracer object at 0x00000239E4D92A00&gt;[app_name=formatter]</span><br><span class="line"> * Serving Flask app <span class="string">&quot;formatter&quot;</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http://127.0.0.1:8081/ (Press CTRL+C to quit)</span><br><span class="line">Reporting span ea46c463f8e23559:ab54bb753bc2e52b:99bab13b82e5316:1 formatter.format</span><br><span class="line">127.0.0.1 - - [06/Jan/2021 14:26:04] <span class="string">&quot;GET /format?helloTo=Bryan HTTP/1.1&quot;</span> 200 -</span><br><span class="line"></span><br><span class="line">(env) λ  python -m lesson04.solution.publisher</span><br><span class="line">Initializing Jaeger Tracer with UDP reporter</span><br><span class="line">Using proactor: IocpProactor</span><br><span class="line">Using sampler ConstSampler(True)</span><br><span class="line">opentracing.tracer initialized to &lt;jaeger_client.tracer.Tracer object at 0x00000152BCA62A00&gt;[app_name=publisher]</span><br><span class="line"> * Serving Flask app <span class="string">&quot;publisher&quot;</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http://127.0.0.1:8082/ (Press CTRL+C to quit)</span><br><span class="line">Bonjour, Bryan!</span><br><span class="line">Reporting span ea46c463f8e23559:70c8b72c72221e5d:8090336103abbed0:1 publisher.publish</span><br><span class="line">127.0.0.1 - - [06/Jan/2021 14:26:06] <span class="string">&quot;GET /publish?helloStr=Bonjour%2C+Bryan%21 HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://www.cnblogs.com/rossiXYZ/p/13641637.html">[业界方案] 用SOFATracer学习分布式追踪系统Opentracing</a></li><li><a href="https://www.cnblogs.com/rossiXYZ/p/13654065.html">[业界方案]用Jaeger来学习分布式追踪系统Opentracing</a></li><li><a href="https://www.jaegertracing.io/docs/1.21/architecture/">Jaeger - Architecture</a></li><li><a href="https://github.com/yurishkuro/opentracing-tutorial/tree/master/python">OpenTracing Tutorial - Python</a></li><li><a href="https://www.oreilly.com/library/view/distributed-systems-observability/9781492033431/ch04.html">Chapter 4. The Three Pillars of Observability</a></li><li><a href="https://opentelemetry.io/">OpenTelemetry</a></li></ul>]]></content>
    
    
    <summary type="html">全链路追踪及 OpenTracing 概念介绍，Jaeger Python 入门实验</summary>
    
    
    
    <category term="Jaeger" scheme="https://jckling.github.io/categories/Jaeger/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="OpenTelemetry" scheme="https://jckling.github.io/tags/OpenTelemetry/"/>
    
  </entry>
  
</feed>
