<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jckling&#39;s Blog</title>
  
  
  <link href="https://jckling.github.io/atom.xml" rel="self"/>
  
  <link href="https://jckling.github.io/"/>
  <updated>2021-08-31T06:40:08.572Z</updated>
  <id>https://jckling.github.io/</id>
  
  <author>
    <name>Jckling</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kolla-Ansible 多机部署 V 版 OpenStack</title>
    <link href="https://jckling.github.io/2021/08/31/OpenStack/Kolla-Ansible%20%E5%A4%9A%E6%9C%BA%E9%83%A8%E7%BD%B2/"/>
    <id>https://jckling.github.io/2021/08/31/OpenStack/Kolla-Ansible%20%E5%A4%9A%E6%9C%BA%E9%83%A8%E7%BD%B2/</id>
    <published>2021-08-31T01:49:26.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h1><p>之前把本地镜像仓库、OpenStack、Jaeger 全都放在了一台主机上跑，负载很大，而且也不保险。现在拆分为 2 台主机：</p><ol><li>部署节点（Kolla-Ansible）<ul><li>Ubuntu 20.04</li><li>4 CPU </li><li>内存 16 GB</li><li>硬盘 500 GB</li><li>网卡1</li></ul></li><li>控制节点（OpenStack）<ul><li>Ubuntu 20.04</li><li>4 CPU </li><li>内存 16 GB</li><li>硬盘 500 GB</li><li>网卡1</li><li>网卡2（未启用）</li></ul></li></ol><p>在部署节点用 multinode 配置远程部署 OpenStack，虽然这里只有一台 OpenStack 主机😂</p><h1 id="控制节点"><a href="#控制节点" class="headerlink" title="控制节点"></a>控制节点</h1><p>控制节点只需给用户配置 sudo 权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line">sudo vim /etc/sudoers</span><br><span class="line"><span class="comment">##includedir /etc/sudoers.d</span></span><br><span class="line"><span class="comment">#op1 ALL=(ALL) NOPASSWD: ALL</span></span><br></pre></td></tr></table></figure><blockquote><p>Prior to Queens, when users want to connect using non-root user, they must add extra option <code>ansible_become=True</code> which is inconvenient and add security risk. In Queens, almost all services have support for escalation for only necessary tasks. In Rocky, all services have this capability, so users do not need to add <code>ansible_become</code> option if connection user has passwordless sudo capability.</p></blockquote><h1 id="部署节点"><a href="#部署节点" class="headerlink" title="部署节点"></a>部署节点</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>配置 Python3</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设为默认</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1</span><br><span class="line"><span class="comment">#sudo update-alternatives --remove python /usr/bin/python3.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 pip</span></span><br><span class="line">sudo apt install -y python3-pip</span><br></pre></td></tr></table></figure></li><li><p>更换 pip 源</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir .pip &amp;&amp; <span class="built_in">cd</span> .pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并编辑配置文件</span></span><br><span class="line">sudo vim pip.conf</span><br></pre></td></tr></table></figure><p> 配置如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout &#x3D; 6000</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">trusted-host &#x3D; mirrors.aliyun.com</span><br></pre></td></tr></table></figure></li><li><p>更换 Ubuntu 源</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置镜像源</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">sudo apt dist-upgrade -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p> 镜像源配置如下：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure></li><li><p>配置免密登录</p><p> 添加域名解析 /etc/hosts</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local</span></span><br><span class="line">10.111.1.125 controller</span><br><span class="line"> </span><br><span class="line"><span class="comment"># openstack</span></span><br><span class="line">10.111.1.250 openstack01</span><br></pre></td></tr></table></figure><p> 生成密钥并拷贝到目标主机</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id -i /home/jck/.ssh/id_rsa.pub op1@openstack01</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Python 构建依赖</span></span><br><span class="line">sudo apt install python3-dev libffi-dev gcc libssl-dev -y</span><br></pre></td></tr></table></figure><p> 安装 <code>venv</code>，创建并使用虚拟环境</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 venv</span></span><br><span class="line">sudo apt install python3-venv -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkdir code</span><br><span class="line">python -m venv ~/code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> ~/code/bin/activate</span><br></pre></td></tr></table></figure></li><li><p>安装 Kolla-Ansible，指定 Victoria 版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Ansible</span></span><br><span class="line">pip install -U pip</span><br><span class="line">pip install <span class="string">&#x27;ansible&lt;3.0&#x27;</span></span><br><span class="line">pip install kolla-ansible</span><br><span class="line">pip install kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line"><span class="comment">#pip install &#x27;ansible&lt;2.10&#x27;</span></span><br><span class="line"><span class="comment">#git clone https://github.com/openstack/kolla -b stable/victoria</span></span><br><span class="line"><span class="comment">#git clone https://github.com/openstack/kolla-ansible -b stable/victoria</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment">#pip install ./kolla</span></span><br><span class="line"><span class="comment">#pip install ./kolla-ansible</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir -p /etc/kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">sudo chown <span class="variable">$USER</span>:<span class="variable">$USER</span> /etc/kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line"><span class="comment">#cp -r kolla-ansible/etc/kolla/* /etc/kolla</span></span><br><span class="line"><span class="comment">#cp kolla-ansible/ansible/inventory/* .</span></span><br><span class="line">cp -r /home/jck/code/share/kolla-ansible/etc_examples/kolla/* /etc/kolla</span><br><span class="line">cp /home/jck/code/share/kolla-ansible/ansible/inventory/* .</span><br></pre></td></tr></table></figure></li><li><p>配置 Ansible</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">sudo mkdir /etc/ansible</span><br><span class="line">sudo vim /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure><p> 配置如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">host_key_checking&#x3D;False</span><br><span class="line">pipelining&#x3D;True</span><br><span class="line">forks&#x3D;100</span><br></pre></td></tr></table></figure></li><li><p>安装 Docker 和 docker-compose</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line"> </span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">   </span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 用户组设置</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> containerd.service</span><br><span class="line"> </span><br><span class="line"><span class="comment"># docker-compose</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"> </span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p> 创建配置文件 /etc/docker/daemon.json，设置国内镜像源</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;:</span> [</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;:</span> [</span><br><span class="line">        <span class="string">&quot;10.111.1.125:5000&quot;</span> <span class="comment"># 指向之后部署的本地镜像仓库</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;iptables&quot;:</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;log-opts&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;max-file&quot;:</span> <span class="string">&quot;5&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;max-size&quot;:</span> <span class="string">&quot;50m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 重启 docker 服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure></li></ol><h2 id="registry-registry-ui"><a href="#registry-registry-ui" class="headerlink" title="registry + registry-ui"></a>registry + registry-ui</h2><p>直接使用 <a href="https://github.com/Joxit/docker-registry-ui">Joxit/docker-registry-ui</a> 仓库的示例配置，在本地部署 registry 和 registry-ui</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Joxit/docker-registry-ui.git</span><br><span class="line"><span class="built_in">cd</span> docker-registry-ui/examples/ui-as-standalone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置 localhost -&gt; 10.111.1.125</span></span><br><span class="line">vim simple.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置 Access-Control-Allow-Origin: [&#x27;*&#x27;]</span></span><br><span class="line">vim registry-config/simple.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker-compose -f simple.yml up -d</span><br></pre></td></tr></table></figure><p><em>PS：用完之后才发现完全可以搭个 harbor 用…</em></p><p><img src="https://i.loli.net/2021/08/31/VrvtLg7TQ1YxwcH.png"></p><h2 id="构建基础镜像"><a href="#构建基础镜像" class="headerlink" title="构建基础镜像"></a>构建基础镜像</h2><p>编写 ubuntu 20.04 基础镜像 Dockerfile，替换 source 源和 pip 源，</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> pip.conf /etc/pip.conf</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> sources.list /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br></pre></td></tr></table></figure><p>替换 pip 源（pip.conf）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="attr">trusted-host</span> = mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>替换 sources.list，注意这里写的是 <code>http</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><p>构建镜像并发布到 dockerhub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像，--network=host 避免域名解析错误</span></span><br><span class="line">docker build --network=host -t lycanj/kolla_ansible-base_image-ubuntu:20.04 .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 dockerhub</span></span><br><span class="line">docker login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到 dockerhub</span></span><br><span class="line">docker push lycanj/kolla_ansible-base_image-ubuntu:20.04</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/31/4KVtSW6Bx5NYaeh.jpg"></p><h2 id="构建组件镜像"><a href="#构建组件镜像" class="headerlink" title="构建组件镜像"></a>构建组件镜像</h2><p>下载 Victoria 组件源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/keystone.git --branch stable/victoria --single-branch</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/glance.git --branch stable/victoria --single-branch</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/neutron.git --branch stable/victoria --single-branch</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/heat.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>使用 kolla-build 生成镜像，并 push 到本地仓库。下载 kolla 仓库并使用 tox 生成配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/kolla.git --branch stable/victoria</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 tox（虚拟环境中）</span></span><br><span class="line">pip install tox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="built_in">cd</span> kolla</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim kolla/etc/kolla/kolla-build.conf</span><br></pre></td></tr></table></figure><p>修改配置文件，内容如下：</p><ul><li>指定基础 ubuntu 镜像</li><li>使用源码构建镜像</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="comment"># The distro type of the base image. (string value)</span></span><br><span class="line"><span class="comment"># Possible values:</span></span><br><span class="line"><span class="comment"># centos - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># rhel - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># ubuntu - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># debian - &lt;No description provided&gt;</span></span><br><span class="line"><span class="attr">base</span> = ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># The base image name. Default is the same with base. (string value)</span></span><br><span class="line"><span class="attr">base_image</span> = lycanj/kolla_ansible-base_image-ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># The Docker namespace name (string value)</span></span><br><span class="line"><span class="comment">#namespace = kolla</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The network mode for Docker build. Example: host (string value)</span></span><br><span class="line"><span class="attr">network_mode</span> = host</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push images after building (boolean value)</span></span><br><span class="line"><span class="attr">push</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The docker registry host. The default registry host is Docker Hub</span></span><br><span class="line"><span class="comment"># (string value)</span></span><br><span class="line"><span class="attr">registry</span> = <span class="number">10.111</span>.<span class="number">1.125</span>:<span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The method of the OpenStack install. (string value)</span></span><br><span class="line"><span class="comment"># Possible values:</span></span><br><span class="line"><span class="comment"># binary - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># source - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># rdo - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># rhos - &lt;No description provided&gt;</span></span><br><span class="line"><span class="attr">install_type</span> = source</span><br><span class="line"></span><br><span class="line"><span class="comment"># The Docker tag (string value)</span></span><br><span class="line"><span class="attr">tag</span> = victoria</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenStack release for building kolla-toolbox (string value)</span></span><br><span class="line"><span class="attr">openstack_release</span> = victoria</span><br><span class="line"></span><br><span class="line"><span class="comment"># Branch for source images (string value)</span></span><br><span class="line"><span class="attr">openstack_branch</span> = victoria-stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># Content of the maintainer label (string value)</span></span><br><span class="line"><span class="comment">#maintainer = Kolla Project (https://launchpad.net/kolla)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to custom sources.list (string value)</span></span><br><span class="line"><span class="comment">#apt_sources_list = &lt;None&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[keystone-base]</span></span><br><span class="line"><span class="comment"># Source location type (string value)</span></span><br><span class="line"><span class="comment"># Possible values:</span></span><br><span class="line"><span class="comment"># local - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># git - &lt;No description provided&gt;</span></span><br><span class="line"><span class="comment"># url - &lt;No description provided&gt;</span></span><br><span class="line"><span class="attr">type</span> = local</span><br><span class="line"></span><br><span class="line"><span class="comment"># The location for source install (string value)</span></span><br><span class="line"><span class="attr">location</span> = /home/jck/keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[glance-base]</span></span><br><span class="line"><span class="attr">type</span> = local</span><br><span class="line"><span class="attr">location</span> = /home/jck/glance</span><br><span class="line"></span><br><span class="line"><span class="section">[nova-base]</span></span><br><span class="line"><span class="attr">type</span> = local</span><br><span class="line"><span class="attr">location</span> = /home/jck/nova</span><br><span class="line"></span><br><span class="line"><span class="section">[neutron-base]</span></span><br><span class="line"><span class="attr">type</span> = local</span><br><span class="line"><span class="attr">location</span> = /home/jck/neutron</span><br><span class="line"></span><br><span class="line"><span class="section">[heat-base]</span></span><br><span class="line"><span class="attr">type</span> = local</span><br><span class="line"><span class="attr">location</span> = /home/jck/heat</span><br></pre></td></tr></table></figure><p>然后指定该配置文件构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-build --config-file ~/kolla/etc/kolla/kolla-build.conf</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/31/XHqEmYQgOL2lBU7.png"></p><h2 id="部署-OpenStack"><a href="#部署-OpenStack" class="headerlink" title="部署 OpenStack"></a>部署 OpenStack</h2><p>修改 multinode 配置，编辑最前面的几项，将目标主机设置为 <code>openstack01</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[control]</span></span><br><span class="line">openstack01       ansible_user=op1</span><br><span class="line"></span><br><span class="line"><span class="section">[network]</span></span><br><span class="line">openstack01       ansible_user=op1</span><br><span class="line"></span><br><span class="line"><span class="section">[compute]</span></span><br><span class="line">openstack01       ansible_user=op1</span><br><span class="line"></span><br><span class="line"><span class="section">[monitoring]</span></span><br><span class="line">openstack01       ansible_user=op1</span><br><span class="line"></span><br><span class="line"><span class="section">[storage]</span></span><br><span class="line">openstack01       ansible_user=op1</span><br><span class="line"></span><br><span class="line"><span class="section">[deployment]</span></span><br><span class="line">localhost       ansible_connection=local</span><br></pre></td></tr></table></figure><p>测试是否可达</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i ~/multinode all -m ping</span><br></pre></td></tr></table></figure><p>参照原始的配置编写精简配置（只设置用到的选项）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成的示例配置文件</span></span><br><span class="line">/etc/kolla/globals.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建精简配置文件</span></span><br><span class="line">vim ~/globals.yml </span><br></pre></td></tr></table></figure><p>内容如下：</p><ul><li>指定使用源码构建的镜像 <code>openstack_tag=victoria</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valid options are [&#x27;centos&#x27;, &#x27;debian&#x27;, &#x27;rhel&#x27;, &#x27;ubuntu&#x27;]</span></span><br><span class="line">kolla_base_distro: &quot;ubuntu&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Valid options are [ binary, source ]</span></span><br><span class="line">kolla_install_type: &quot;source&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not override this unless you know what you are doing.</span></span><br><span class="line">openstack_release: &quot;victoria&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker image tag used by default.</span></span><br><span class="line">openstack_tag: &quot;victoria&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment"># This should be a VIP, an unused IP on your network that will float between</span></span><br><span class="line"><span class="comment"># the hosts running keepalived for high-availability. If you want to run an</span></span><br><span class="line"><span class="comment"># All-In-One without haproxy and keepalived, you can set enable_haproxy to no</span></span><br><span class="line"><span class="comment"># in &quot;OpenStack options&quot; section, and set this value to the IP of your</span></span><br><span class="line"><span class="comment"># &#x27;network_interface&#x27; as set in the Networking section below.</span></span><br><span class="line">kolla_internal_vip_address: &quot;10.111.1.251&quot; # 和 network_interface 同网段</span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom docker registry settings:</span></span><br><span class="line">docker_registry: 10.111.1.125:5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Namespace of images:</span></span><br><span class="line"><span class="comment">#docker_namespace: &quot;kolla&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This interface is what all your api services will be bound to by default.</span></span><br><span class="line"><span class="comment"># Additionally, all vxlan/tunnel and storage network traffic will go over this</span></span><br><span class="line"><span class="comment"># interface by default. This interface must contain an IP address.</span></span><br><span class="line"><span class="comment"># It is possible for hosts to have non-matching names of interfaces - these can</span></span><br><span class="line"><span class="comment"># be set in an inventory file per host or per group or stored separately, see</span></span><br><span class="line"><span class="comment">#     http://docs.ansible.com/ansible/intro_inventory.html</span></span><br><span class="line"><span class="comment"># Yet another way to workaround the naming problem is to create a bond for the</span></span><br><span class="line"><span class="comment"># interface on all hosts and give the bond name here. Similar strategy can be</span></span><br><span class="line"><span class="comment"># followed for other types of interfaces.</span></span><br><span class="line">network_interface: &quot;ens160&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the raw interface given to neutron as its external network port. Even</span></span><br><span class="line"><span class="comment"># though an IP address can exist on this interface, it will be unusable in most</span></span><br><span class="line"><span class="comment"># configurations. It is recommended this interface not be configured with any IP</span></span><br><span class="line"><span class="comment"># addresses for that reason.</span></span><br><span class="line">neutron_external_interface: &quot;ens192&quot; # 空闲网卡</span><br><span class="line"></span><br><span class="line"><span class="comment"># Valid options are [ qemu, kvm, vmware ]</span></span><br><span class="line">nova_compute_virt_type: &quot;qemu&quot;</span><br></pre></td></tr></table></figure><p>生成随机密码，并拷贝到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成密码</span></span><br><span class="line">kolla-genpwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝</span></span><br><span class="line">cp /etc/kolla/passwords.yml ~/passwords.yml</span><br></pre></td></tr></table></figure><p>部署 OpenStack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bootstrap</span></span><br><span class="line">kolla-ansible -i ~/multinode --configdir ~ bootstrap-servers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">kolla-ansible -i ~/multinode --configdir ~ prechecks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line"><span class="comment"># kolla-ansible -i ~/multinode --configdir ~ pull</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kolla-ansible -i ~/multinode --configdir ~ deploy</span><br><span class="line"><span class="comment"># kolla-ansible -i ~/multinode --configdir ~ reconfigure</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署失败</span></span><br><span class="line">kolla-ansible -i ~/multinode --configdir ~ destroy --yes-i-really-really-mean-it</span><br></pre></td></tr></table></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>在部署节点上执行以下指令，生成身份认证文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 OpenStack CLI 客户端</span></span><br><span class="line">pip install python-openstackclient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成认证文件</span></span><br><span class="line">kolla-ansible -i ~/multinode --configdir ~ post-deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份认证</span></span><br><span class="line">. ~/admin-openrc.sh</span><br></pre></td></tr></table></figure><p>使用 Kolla-Ansible 自带的脚本测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行脚本生成示例网络、镜像、实例等</span></span><br><span class="line">~/code/share/kolla-ansible/init-runonce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例</span></span><br><span class="line">openstack server create \</span><br><span class="line">    --image cirros \</span><br><span class="line">    --flavor m1.tiny \</span><br><span class="line">    --key-name mykey \</span><br><span class="line">    --network demo-net \</span><br><span class="line">    demo1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认实例状态</span></span><br><span class="line">openstack server list</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/08/31/RYBPvwHzVpFrm84.jpg" width="80%"><p>直接访问 <a href="http://10.111.1.250/">http://10.111.1.250</a> 可以看到刚才创建的实例所占用的资源</p><ul><li>用户名密码查看 admin-openrc.sh 文件即可</li></ul><p><img src="https://i.loli.net/2021/08/31/QFzHXR43DqjsdwO.png"></p><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://github.com/Joxit/docker-registry-ui">Joxit/docker-registry-ui</a></li><li><a href="https://www.cnblogs.com/huangxincheng/p/11131623.html">8天入门docker系列 —— 第六天 搭建自己的私有镜像仓库Registry</a></li><li><a href="https://docs.docker.com/registry/configuration/">Configuring a registry</a></li><li><a href="https://docs.openstack.org/kolla/latest/admin/image-building.html">Building Container Images</a></li><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html">Kolla-Ansible - Quick Start</a></li><li><a href="https://docs.openstack.org/kolla/latest/contributor/genconfig.html">Generating kolla-build.conf</a></li><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/security.html">Kolla Security</a></li><li><a href="https://timonweb.com/devops/how-to-enable-passwordless-sudo-for-a-specific-user-in-linux/">How To Enable Passwordless Sudo For A Specific User in Linux</a></li><li><a href="https://blog.csdn.net/qq_28513801/article/details/116035363">使用kolla-ansible部署多节点OpenStack(T版)及对接Ceph</a></li></ul>]]></content>
    
    
    <summary type="html">使用 Kolla-Ansible 的 multinode 配置远程部署 OpenStack (Victoria)</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Python 项目打包并发布到私有 PyPI 服务器</title>
    <link href="https://jckling.github.io/2021/08/23/Other/Python%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%20PyPI%20%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://jckling.github.io/2021/08/23/Other/Python%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%20PyPI%20%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-08-23T03:01:14.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>提了一个新需求，要把开发的 Python 项目发布到 PyPI 上，但因为需要保密，所以得自己搭建一个内部的 PyPI 服务器😓</p><h1 id="Python-项目打包"><a href="#Python-项目打包" class="headerlink" title="Python 项目打包"></a>Python 项目打包</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>首先创建一个待发布的文件夹 <code>packaging</code>，整理一下项目结构并添加几个必要的文件（<code>LICENSE</code>、<code>README.md</code>、<code>setup.py</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">packaging</span><br><span class="line">├── my_project</span><br><span class="line">│   ├── module1</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── hello.py</span><br><span class="line">│   ├── module2</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── bye.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── utils.py</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">└── setup.py  <span class="comment"># 或 setup.cfg</span></span><br></pre></td></tr></table></figure><p>示例工程很简单，所有 <code>__init__.py</code> 都是空文件，其他文件内容如下：</p><ol><li><p>hello.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    print(<span class="string">&quot;hello world!&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>bye.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goodbye</span>():</span></span><br><span class="line">    print(<span class="string">&quot;goodbye!&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>utils.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    print(<span class="string">&quot;A demo project for packaging.&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="选择许可证"><a href="#选择许可证" class="headerlink" title="选择许可证"></a>选择许可证</h2><p>PyPI 要求所有上传的包都必须包含一个许可证，利用 <a href="https://choosealicense.com/">https://choosealicense.com/</a> 帮助选择许可证，然后将许可证内容复制到 <code>LICENSE</code> 文件中。</p><p><em>注意有些许可证需要填入年份（<code>[year]</code>）和所有者（<code>[fullname]</code> 或 <code>[name of copyright owner]</code>）</em></p><p>例如，MIT 许可证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">MIT License</span><br><span class="line"></span><br><span class="line">Copyright (c) [2021] [my_project]</span><br><span class="line"></span><br><span class="line">Permission is hereby granted, free of charge, to any person obtaining a copy</span><br><span class="line">of this software and associated documentation files (the &quot;Software&quot;), to deal</span><br><span class="line">in the Software without restriction, including without limitation the rights</span><br><span class="line">to use, copy, modify, merge, publish, distribute, sublicense, and&#x2F;or sell</span><br><span class="line">copies of the Software, and to permit persons to whom the Software is</span><br><span class="line">furnished to do so, subject to the following conditions:</span><br><span class="line"></span><br><span class="line">The above copyright notice and this permission notice shall be included in all</span><br><span class="line">copies or substantial portions of the Software.</span><br><span class="line"></span><br><span class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span><br><span class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span><br><span class="line">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span><br><span class="line">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span><br><span class="line">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span><br><span class="line">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span><br><span class="line">SOFTWARE.</span><br></pre></td></tr></table></figure><h2 id="编写说明"><a href="#编写说明" class="headerlink" title="编写说明"></a>编写说明</h2><p>根据 markdown 语法编写项目的详细说明，之后可以作为 <code>setup.py</code> 中的 <code>long_description</code> 项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Example Package</span><br><span class="line"></span><br><span class="line">This is a simple example package. You can use</span><br><span class="line">[Github-flavored Markdown](https:&#x2F;&#x2F;guides.github.com&#x2F;features&#x2F;mastering-markdown&#x2F;)</span><br><span class="line">to write your content.</span><br></pre></td></tr></table></figure><h2 id="配置元数据"><a href="#配置元数据" class="headerlink" title="配置元数据"></a>配置元数据</h2><p>有两种元数据类型：静态元数据（<code>setup.cfg</code>）和动态元数据（<code>setup.py</code>），官方推荐首选静态元数据。</p><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>下面是官方示例的 <code>setup.cfg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[metadata]</span><br><span class="line">name &#x3D; example-pkg-YOUR-USERNAME-HERE</span><br><span class="line">version &#x3D; 0.0.1</span><br><span class="line">author &#x3D; Example Author</span><br><span class="line">author_email &#x3D; author@example.com</span><br><span class="line">description &#x3D; A small example package</span><br><span class="line">long_description &#x3D; file: README.md</span><br><span class="line">long_description_content_type &#x3D; text&#x2F;markdown</span><br><span class="line">url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;sampleproject</span><br><span class="line">project_urls &#x3D;</span><br><span class="line">    Bug Tracker &#x3D; https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;sampleproject&#x2F;issues</span><br><span class="line">classifiers &#x3D;</span><br><span class="line">    Programming Language :: Python :: 3</span><br><span class="line">    License :: OSI Approved :: MIT License</span><br><span class="line">    Operating System :: OS Independent</span><br><span class="line"></span><br><span class="line">[options]</span><br><span class="line">package_dir &#x3D;</span><br><span class="line">    &#x3D; src</span><br><span class="line">packages &#x3D; find:</span><br><span class="line">python_requires &#x3D; &gt;&#x3D;3.6</span><br><span class="line"></span><br><span class="line">[options.packages.find]</span><br><span class="line">where &#x3D; src</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段名称</th><th>说明</th></tr></thead><tbody><tr><td><code>name</code></td><td>如果要发布在 pypi.org 上，名称必须是唯一的，只能由英文字母、<code>_</code>、<code>-</code> 组成</td></tr><tr><td><code>author</code>、<code>author_email</code></td><td>标识作者</td></tr><tr><td><code>description</code></td><td>包的简短介绍</td></tr><tr><td><code>long_description</code></td><td>包的详细介绍，可以指定说明文件</td></tr><tr><td><code>url</code></td><td>项目主页</td></tr><tr><td><code>project_urls</code></td><td>和项目相关的额外链接</td></tr><tr><td><code>classifiers</code></td><td>附加元数据，例如许可证、兼容。完整列表见 <a href="https://pypi.org/classifiers/">https://pypi.org/classifiers/</a></td></tr></tbody></table><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>官方示例的 <code>setup.py</code>，可以看出字段基本是相同的，也可以利用现成的模板进行编写：<a href="https://github.com/kennethreitz/setup.py/blob/master/setup.py">kennethreitz/setup.py</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;README.md&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fh:</span><br><span class="line">    long_description = fh.read()</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">&quot;example-pkg-YOUR-USERNAME-HERE&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">    author=<span class="string">&quot;Example Author&quot;</span>,</span><br><span class="line">    author_email=<span class="string">&quot;author@example.com&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;A small example package&quot;</span>,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">&quot;text/markdown&quot;</span>,</span><br><span class="line">    url=<span class="string">&quot;https://github.com/pypa/sampleproject&quot;</span>,</span><br><span class="line">    project_urls=&#123;</span><br><span class="line">        <span class="string">&quot;Bug Tracker&quot;</span>: <span class="string">&quot;https://github.com/pypa/sampleproject/issues&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">&quot;Programming Language :: Python :: 3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;License :: OSI Approved :: MIT License&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Operating System :: OS Independent&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    package_dir=&#123;<span class="string">&quot;&quot;</span>: <span class="string">&quot;src&quot;</span>&#125;,</span><br><span class="line">    packages=setuptools.find_packages(where=<span class="string">&quot;src&quot;</span>),</span><br><span class="line">    python_requires=<span class="string">&quot;&gt;=3.6&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>实际上，可以把 <code>setup.cfg</code> 理解为包含 <code>setup.py</code> 命令默认选项的 ini 文件。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>Ubuntu 20.04 Server（Python 3.8.10）安装 <code>venv</code>，创建并使用虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 venv</span></span><br><span class="line">sudo apt install python3-venv -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkdir code</span><br><span class="line">python -m venv /home/jck/code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> /home/jck/code/bin/activate</span><br></pre></td></tr></table></figure><h2 id="生成包"><a href="#生成包" class="headerlink" title="生成包"></a>生成包</h2><p>使用以下 <code>setup.py</code> 配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;README.md&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fh:</span><br><span class="line">    long_description = fh.read()</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">&quot;my_project&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">    author=<span class="string">&quot;jckling&quot;</span>,</span><br><span class="line">    author_email=<span class="string">&quot;jckling@163.com&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;A small example package&quot;</span>,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">&quot;text/markdown&quot;</span>,</span><br><span class="line">    url=<span class="string">&quot;https://github.com/jckling&quot;</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">&quot;Programming Language :: Python :: 3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;License :: OSI Approved :: MIT License&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Operating System :: OS Independent&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    python_requires=<span class="string">&quot;&gt;=3.6&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>安装 <code>setuptools</code> 和 <code>wheel</code>，支持从源码构建包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install setuptools</span><br><span class="line">pip install wheel</span><br></pre></td></tr></table></figure><p>进入 packaging 文件夹，检查 <code>setup.py</code>，如果有错误会打印提示信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py check</span><br><span class="line"><span class="comment"># running check</span></span><br></pre></td></tr></table></figure><p>打包，自动创建 <code>dist</code> 目录，以及相应的 <code>.tar.gz</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist build</span><br></pre></td></tr></table></figure><script id="asciicast-Bhy00w92CAhOkpHz8o11aOpVL" src="https://asciinema.org/a/Bhy00w92CAhOkpHz8o11aOpVL.js" async></script><h1 id="本地-PyPI-服务器搭建"><a href="#本地-PyPI-服务器搭建" class="headerlink" title="本地 PyPI 服务器搭建"></a>本地 PyPI 服务器搭建</h1><h2 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h2><p>安装 <code>pypiserver</code>，创建文件夹 <code>packages</code> 用于放置发布的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pypiserver</span><br><span class="line">mkdir ~/packages</span><br></pre></td></tr></table></figure><p>将 <code>my_project-0.0.1.tar.gz</code> 上传到 <code>~/packages</code> 目录下，在同一台虚拟机上操作直接使用 <code>mv</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv dist/my_project-0.0.1.tar.gz ~/packages</span><br></pre></td></tr></table></figure><p>运行服务器，端口指定为 <code>8080</code>， 默认监听所有 IP 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pypi-server -p 8080 ~/packages &amp;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>搜索本地服务器上是否有 <code>my_project</code> 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip search --index http://localhost:8080 my_project</span><br></pre></td></tr></table></figure><p>安装和使用 <code>my_project</code> 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --extra-index-url http://localhost:8080 my_project</span><br></pre></td></tr></table></figure><script id="asciicast-PTCdzI2ZPbmelUTBpgcS8kVHA" src="https://asciinema.org/a/PTCdzI2ZPbmelUTBpgcS8kVHA.js" async></script><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://pythonguidecn.readthedocs.io/zh/latest/writing/structure.html">结构化您的工程</a></li><li><a href="https://packaging.python.org/tutorials/packaging-projects/">Packaging Python Projects</a></li><li><a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/">Packaging and distributing projects</a></li><li><a href="https://choosealicense.com/">Choose a License</a></li><li><a href="https://docs.python.org/zh-cn/3/library/index.html">Python 标准库</a></li><li><a href="https://testerhome.com/articles/27052">测试开发技术 实战教程：如何将自己的 Python 包发布到 PyPI 上</a></li><li><a href="https://github.com/kennethreitz/setup.py/blob/master/setup.py">kennethreitz/setup.py</a></li><li><a href="https://www.jianshu.com/p/c260b59cd3d0">基于 pypiserver 的 PyPI 私有仓库搭建实践</a></li><li><a href="https://github.com/pypiserver/pypiserver">pypiserver/pypiserver</a></li></ul>]]></content>
    
    
    <summary type="html">使用 pypiserver 搭建本地服务器</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 静态分析相关论文</title>
    <link href="https://jckling.github.io/2021/07/28/Notes/Python%20%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/"/>
    <id>https://jckling.github.io/2021/07/28/Notes/Python%20%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/</id>
    <published>2021-07-28T11:01:13.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>翻了几篇 Python 静态分析相关的论文，看看有什么比较好的分析工具。</p><h2 id="静态分析工具"><a href="#静态分析工具" class="headerlink" title="静态分析工具"></a>静态分析工具</h2><h3 id="1-Survey-on-Static-Analysis-Tools-of-Python-Programs"><a href="#1-Survey-on-Static-Analysis-Tools-of-Python-Programs" class="headerlink" title="1. Survey on Static Analysis Tools of Python Programs"></a>1. Survey on Static Analysis Tools of Python Programs</h3><blockquote><p>SQAMIA 2019</p></blockquote><p>概述了 Python 代码库静态分析的现有方法和工具，并介绍了一些新的研究方向。</p><p>总结了常见的 Python 静态分析工具之间的关系，简单介绍了（几行概述） <a href="https://github.com/PyCQA/pylint">Pylint</a>、<a href="https://github.com/PyCQA/pyflakes">Pyflakes</a>、<a href="https://github.com/PyCQA/flake8">flake8</a>、<a href="https://github.com/timothycrosley/deprecated.frosted">Frosted</a>、<a href="https://github.com/PyCQA/pycodestyle">Pycodestyle</a>、<a href="https://github.com/python/mypy">Mypy</a>、<a href="https://github.com/bjodah/pysym">PySym</a>、<a href="https://github.com/thomasjball/PyExZ3">PyExZ3</a>。</p><img src="https://i.loli.net/2021/07/29/qpvM1iYNFXhLgTe.jpg" style="zoom:70%;" /><p>设计并测试了 6 种典型的逻辑漏洞（logical errors），用 PyLint、Pyflakes、Flake8、Mypy、Frosted 检测</p><ul><li>使用默认配置</li><li>逻辑错误会产生意外的输出或结果，但不一定会导致崩溃</li></ul><img src="https://i.loli.net/2021/07/29/G1Q8ETPtCyKoSxA.png" style="zoom:70%;" /><ol><li><p>引用未定义变量</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">message = <span class="string">&quot;Hello there!&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;greetMe&quot;</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">print(mesage) <span class="comment"># 变量名打错</span></span><br><span class="line">print(<span class="string">&quot;This code is fine, no problems.&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>太多位置参数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys <span class="comment"># 未使用的导入</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, first_name, last_name, age</span>):</span></span><br><span class="line">        self.first_name = first_name</span><br><span class="line">        self.last_name = last_name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Windows&quot;</span> <span class="keyword">in</span> platform.platform(): <span class="comment"># 未定义的 platform 变量</span></span><br><span class="line">    print(<span class="string">&quot;You’ re using Windows !&quot;</span>)</span><br><span class="line"></span><br><span class="line">    self.age = self.getAge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment"># 太多位置参数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAge</span>(<span class="params">this</span>):</span> <span class="comment"># 没有 self 参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;18&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>传递类型错误的参数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">x:<span class="built_in">int</span>, y:<span class="built_in">int</span></span>):</span> <span class="comment"># 类型注释</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">print(<span class="built_in">sum</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(<span class="built_in">sum</span>(<span class="number">3</span>, <span class="string">&quot;4&quot;</span>)) <span class="comment"># 传递错误类型的参数</span></span><br></pre></td></tr></table></figure></li><li><p>引用不存在的类属性</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">PERSON1 = Person(<span class="string">&quot;Hristina&quot;</span>, <span class="number">23</span>)</span><br><span class="line">print(PERSON1.age)</span><br><span class="line">print(PERSON1.height) <span class="comment"># 引用不存在的属性</span></span><br></pre></td></tr></table></figure></li><li><p>调用嵌套函数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x=<span class="number">3</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        print(x)</span><br><span class="line">    inner()</span><br><span class="line">outer()</span><br><span class="line">inner() <span class="comment"># 调用 outer 内部定义的函数</span></span><br></pre></td></tr></table></figure></li><li><p>闭包错误</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 闭包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x = <span class="number">3</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        y = <span class="number">3</span></span><br><span class="line">        result = x + y</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">a = outer()</span><br><span class="line">print(a()) <span class="comment"># 调用 inner()</span></span><br><span class="line">print(a.__name__) <span class="comment"># 打印 inner</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包错误，非预期结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">greet_word, name</span>) :</span></span><br><span class="line">print(greet_word, name)</span><br><span class="line">greeters = <span class="built_in">list</span>()</span><br><span class="line">names = [<span class="string">&quot;Kiki&quot;</span>, <span class="string">&quot;Riki&quot;</span>, <span class="string">&quot;Joe&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">greeters.append(<span class="keyword">lambda</span> x : greet(x, name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> greeter <span class="keyword">in</span> greeters:</span><br><span class="line">greeter(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="comment"># Hi Joe</span></span><br><span class="line"><span class="comment"># Hi Joe</span></span><br><span class="line"><span class="comment"># Hi Joe</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-Towards-More-Sophisticated-Static-Analysis-Methods-of-Python-Programs"><a href="#2-Towards-More-Sophisticated-Static-Analysis-Methods-of-Python-Programs" class="headerlink" title="2. Towards More Sophisticated Static Analysis Methods of Python Programs"></a>2. Towards More Sophisticated Static Analysis Methods of Python Programs</h3><blockquote><p>Informatics 2019 • IEEE 15th International Scientific Conference on Informatics</p></blockquote><p>和上一篇同样的作者，探讨了为 Python 开发更强大的静态分析工具的可能研究方向。</p><p>总结现有的静态分析方法：模式匹配、AST 匹配、符号执行、混合执行。对比基于 AST 的 Pylint 和实验性的符号执行工具 mini-mc（使用 Z3 约束求解器的 Python 接口）</p><ul><li>4 个代码片段测试 mini-mc 的检测能力，其中 2 个片段用于比较</li></ul><table><thead><tr><th></th><th>Pylint</th><th>mini-mc</th></tr></thead><tbody><tr><td>引用未定义变量</td><td>x</td><td>√</td></tr><tr><td>可能的除零异常（误报）</td><td>x</td><td>√</td></tr></tbody></table><ol><li><p>引用未定义变量</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>== arg):</span><br><span class="line">        print(<span class="string">&quot;branch11 &quot;</span>, os.getpid())</span><br><span class="line">        z = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span>!=arg):</span><br><span class="line">        print(<span class="string">&quot;branch21 &quot;</span>, os.getpid())</span><br><span class="line">        x = z</span><br><span class="line"></span><br><span class="line">arg = BitVec(arg, <span class="number">32</span>)</span><br><span class="line">func(arg)</span><br></pre></td></tr></table></figure></li><li><p>可能的除零异常</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">if</span> arg == <span class="number">41</span> :</span><br><span class="line">    print(<span class="string">&quot;branch21 &quot;</span>, os.getpid())</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 输入为 42 时确实会引起异常，但其他情况下没有问题</span></span><br><span class="line">        print(<span class="string">&quot;branch22 &quot;</span>, os.getpid())</span><br><span class="line">        z = arg - <span class="number">42</span></span><br><span class="line">        z = <span class="number">99</span> / z</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-Static-Value-Analysis-of-Python-Programs-by-Abstract-Interpretation"><a href="#3-Static-Value-Analysis-of-Python-Programs-by-Abstract-Interpretation" class="headerlink" title="3. Static Value Analysis of Python Programs by Abstract Interpretation"></a>3. Static Value Analysis of Python Programs by Abstract Interpretation</h3><blockquote><p>NASA Formal Methods Symposium</p></blockquote><p>通过 <strong>抽象解释</strong> 推断变量类型、运行时错误和未捕获异常，只支持一小部分内置对象和标准库的分析。</p><h2 id="调用图工具"><a href="#调用图工具" class="headerlink" title="调用图工具"></a>调用图工具</h2><h3 id="1-Empirical-Study-of-Python-Call-Graph"><a href="#1-Empirical-Study-of-Python-Call-Graph" class="headerlink" title="1. Empirical Study of Python Call Graph"></a>1. Empirical Study of Python Call Graph</h3><blockquote><p>2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)</p></blockquote><p>对现有的 Python 程序调用图生成工具进行比对（<a href="https://github.com/davidfraser/pyan">Pyan</a>、<a href="https://github.com/scottrogowski/code2flow">Code2flow</a>、<a href="https://github.com/gak/pycallgraph">Pycallgraph</a>、Understand），以 Pycallgraph 作为基准，用常见的模块源代码进行测试（scikit-learn、theano、networkx、numba、joblib、pandas）</p><ul><li>Pyan、Code2flow、Pycallgraph（6 年前停更）：Github 开源工具</li><li>Understand：商业软件</li></ul><p>针对 pandas 模块，各个工具生成的隐式节点数目有所不同，这造成了结果的巨大差异。</p><img src="https://i.loli.net/2021/07/29/nzaZEiHlMJWAuwc.jpg" style="zoom:70%;" /><p>结论：现有的 Python 静态调用图工具在构建效果上存在较大差异，仍有改进的空间。</p><h3 id="2-PyCG-Practical-Call-Graph-Generation-in-Python"><a href="#2-PyCG-Practical-Call-Graph-Generation-in-Python" class="headerlink" title="2. PyCG: Practical Call Graph Generation in Python"></a>2. PyCG: Practical Call Graph Generation in Python</h3><blockquote><p>2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)</p></blockquote><p>提出了一种实用的、静态的 Python 调用图生成方法。涉及上下文敏感的过程间分析，不动点迭代算法等。没有分析循环和条件语句，也不使用变量类型信息，只能分析有源码的模块。</p><p>编写如下 crypto 模块进行测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cryptops</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        self.key = key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span>(<span class="params">self, msg, func</span>):</span></span><br><span class="line"><span class="keyword">return</span> func(self.key, msg)</span><br><span class="line"></span><br><span class="line">crp = Crypto(<span class="string">&quot;secretkey&quot;</span>)</span><br><span class="line">encrypted = crp.apply(<span class="string">&quot;hello world&quot;</span>, cryptops.encrypt)</span><br><span class="line">decrypted = crp.apply(encrypted, cryptops.decrypt)</span><br></pre></td></tr></table></figure><p>(a) 是实际的调用图（人工绘制），(b) Pyan 没有进行过程间分析，(c) Depends 的策略非常保守，只有预期信息足够才生成调用边</p><img src="https://i.loli.net/2021/07/29/eoSfyqKCXFDuZwh.jpg" style="zoom:70%;" /><p>使用 PyCG 分析 crypto 模块，可以看到完整且正确的名称解析和调用</p><ul><li>橙色：模块</li><li>红色：类</li><li>黑色：函数</li><li>蓝色：变量</li></ul><img src="https://i.loli.net/2021/07/29/O7IoGZtEjwXup3A.jpg" style="zoom:70%;" /><p>微观基准测试套件（Micro-benchmark Suite）包含 112 个独特的小型代码，涵盖 Python 语言的各种特性，分为 16 个类别。</p><img src="https://i.loli.net/2021/07/29/pnfacBJVRN3TISA.jpg" style="zoom:70%;" /><p>宏观基准测试（Macro-benchmarks）使用 5 个流行的开源 Python 软件，平均用了 10h 为每个项目生成调用图</p><img src="https://i.loli.net/2021/07/29/Sqnl6K27FUxhcPk.jpg" style="zoom:70%;" /><p>PyCG 和 Pyan 对比，PyCG 基本为所有代码生成了完整的调用图（111/112），Sound 只覆盖了 103 是因为没有覆盖 Python 的星号赋值；Pyan 整体比较残念，在赋值相关的测试中表现良好。</p><img src="https://i.loli.net/2021/07/29/tq5ijGV2YyULTNP.jpg" style="zoom:70%;" /><p>这里的 complete 和 sound 是静态分析中的概念：</p><img src="https://i.loli.net/2021/07/29/MbHyi6CXpPJ4aTq.jpg" style="zoom:50%;" /><p>PyCG 和 Pyan、Depends 对比，在真实的 Python 项目上，PyCG 能够生成高精度的调用图，Recall 值较低是因为方法的局限和缺乏对 Python 某些功能特性的支持。</p><p>另外还比较了一下时间和内存的消耗（取 20 次的平均值）</p><img src="https://i.loli.net/2021/07/29/4jBnk5lyiJxMouS.jpg" style="zoom:70%;" /><h3 id="3-Qualitative-and-Quantitative-Analysis-of-Callgraph-Algorithms-for-Python"><a href="#3-Qualitative-and-Quantitative-Analysis-of-Callgraph-Algorithms-for-Python" class="headerlink" title="3. Qualitative and Quantitative Analysis of Callgraph Algorithms for Python"></a>3. Qualitative and Quantitative Analysis of Callgraph Algorithms for Python</h3><blockquote><p>2021 International Conference on Code Quality (ICCQ)</p></blockquote><p>提出了一个可扩展的 Python 调用图比较分析框架 eval_CG，包含微观测试和宏观测试</p><ul><li>微观测试：49 个小型代码，分为 13类</li><li>宏观测试：5 个开源 Python 项目，Python robotics、mitmproxy、cookiecutter、YouCompleteMe、The Fuck</li></ul><p>对不同的调用图构造工具进行系统的比较</p><ul><li>静态调用图（Code2flow、Pyan、WALA）</li><li>动态调用图（PyCallGraph）通过动态分析执行路径生成 Python 调用图，这种分析应该用另一种方法（例如模糊测试）来获得有意义的结果，否则会产生许多误报</li></ul><p>结论：这些工具生成的静态调用图都包含虚假边，而且都没有生成 sound 的调用图（没有漏报）</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>整理了几个可以用于生成调用图的工具，之后试试看：</p><ul><li><a href="https://github.com/davidfraser/pyan">Pyan3</a></li><li><a href="https://github.com/vitsalis/pycg">PyCG</a></li><li><a href="https://github.com/scottrogowski/code2flow">Code2flow</a></li><li><a href="https://pyre-check.org/docs/querying-pyre/#dump-call-graph">Pyre - Dump call graph</a></li></ul>]]></content>
    
    
    <summary type="html">概览</summary>
    
    
    
    <category term="Notes" scheme="https://jckling.github.io/categories/Notes/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly 主题预览</title>
    <link href="https://jckling.github.io/2021/07/22/Other/Butterfly%20%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/"/>
    <id>https://jckling.github.io/2021/07/22/Other/Butterfly%20%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/</id>
    <published>2021-07-22T09:02:46.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高亮文字（label）"><a href="#高亮文字（label）" class="headerlink" title="高亮文字（label）"></a>高亮文字（label）</h1><p>分行间距会很</p><mark class="hl-label default">灰色</mark> <p>大</p><mark class="hl-label blue">蓝色</mark> <mark class="hl-label pink">粉色</mark> <mark class="hl-label red">红色</mark> <mark class="hl-label purple">紫色</mark> <mark class="hl-label orange">橙色</mark> <mark class="hl-label green">绿色</mark> <h1 id="内联图片"><a href="#内联图片" class="headerlink" title="内联图片"></a>内联图片</h1><p>高度 150px 可选 <img class="inline-img" src="https://i.loli.net/2021/06/14/oSn9dxfYhEHClIe.jpg" style="height:150px"/> 但是后面接的文字到下一行了…</p><h1 id="相册（gallery）"><a href="#相册（gallery）" class="headerlink" title="相册（gallery）"></a>相册（gallery）</h1><div class="justified-gallery"><p><img src="https://i.loli.net/2021/06/14/2NXqsznriG8blc7.jpg"><br><img src="https://i.loli.net/2021/06/14/jcdZBHXx9TskmrM.jpg"></p>          </div><h1 id="选项卡（Tab）"><a href="#选项卡（Tab）" class="headerlink" title="选项卡（Tab）"></a>选项卡（Tab）</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">test 1</button></li><li class="tab"><button type="button" data-href="#test-2">test 2</button></li><li class="tab"><button type="button" data-href="#test-3">test 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>预设选择：</p><ul><li>默认显示第 3 个：<code>&#123;% tabs test, 3 %&#125;</code></li></ul><p>自定义名称：</p><ul><li>名称：<code>&lt;!-- tab 测试 --&gt;</code></li><li>图标：<code>&lt;!-- tab @fas fa-bomb --&gt;</code></li><li>图标+名称：<code>&lt;!-- tab 炸弹@fas fa-bomb --&gt;</code>（必须反过来写）</li></ul><h1 id="按钮（Button）"><a href="#按钮（Button）" class="headerlink" title="按钮（Button）"></a>按钮（Button）</h1><a class="btn-beautify button--animated " href="https://jckling.github.io/"   title="Jckling"><span>Jckling</span></a><a class="btn-beautify button--animated " href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline" href="https://jckling.github.io/"   title="Jckling"><span>Jckling</span></a><a class="btn-beautify button--animated outline" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><hr><a class="btn-beautify button--animated block" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated block center larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated block right outline larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><hr><a class="btn-beautify button--animated larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated blue larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated pink larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated red larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated purple larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated orange larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated green larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><hr><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline blue larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline pink larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline red larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline purple larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline orange larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a><a class="btn-beautify button--animated outline green larger" href="https://jckling.github.io/"   title="Jckling"><i class="far fa-hand-point-right"></i><span>Jckling</span></a></div><h1 id="标签（Tag）"><a href="#标签（Tag）" class="headerlink" title="标签（Tag）"></a>标签（Tag）</h1><h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2><div class="note simple"><p>默认</p></div><div class="note default simple"><p>default</p></div><div class="note primary simple"><p>primary</p></div><div class="note success simple"><p>success</p></div><div class="note info simple"><p>info</p></div><div class="note warning simple"><p>warning</p></div><div class="note danger simple"><p>danger</p></div><h2 id="morden"><a href="#morden" class="headerlink" title="morden"></a>morden</h2><div class="note modern"><p>默认</p></div><div class="note default modern"><p>default</p></div><div class="note primary modern"><p>primary</p></div><div class="note success modern"><p>success</p></div><div class="note info modern"><p>info</p></div><div class="note warning modern"><p>warning</p></div><div class="note danger modern"><p>danger</p></div><h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2><div class="note flat"><p>默认</p></div><div class="note default flat"><p>default</p></div><div class="note primary flat"><p>primary</p></div><div class="note success flat"><p>success</p></div><div class="note info flat"><p>info</p></div><div class="note warning flat"><p>warning</p></div><div class="note danger flat"><p>danger</p></div><h2 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h2><div class="note disabled"><p>默认</p></div><div class="note default disabled"><p>default</p></div><div class="note primary disabled"><p>primary</p></div><div class="note success disabled"><p>success</p></div><div class="note info disabled"><p>info</p></div><div class="note warning disabled"><p>warning</p></div><div class="note danger disabled"><p>danger</p></div><h2 id="颜色和图标"><a href="#颜色和图标" class="headerlink" title="颜色和图标"></a>颜色和图标</h2><div class="note blue flat"><p>fas fa-bullhorn</p></div><div class="note icon flat"><i class="note-icon fas fa-bullhorn"></i><p>fas fa-bullhorn</p></div><div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>fas fa-bullhorn</p></div><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>翻文档：<a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安裝文檔(四) 主題配置-2</a></p>]]></content>
    
    
    <summary type="html">渲染一些会用到，但每次都得翻文档找的东西😅</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>Python ast 模块使用</title>
    <link href="https://jckling.github.io/2021/07/14/Other/Python%20ast%20%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    <id>https://jckling.github.io/2021/07/14/Other/Python%20ast%20%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-14T06:30:05.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-源码编译过程"><a href="#Python-源码编译过程" class="headerlink" title="Python 源码编译过程"></a>Python 源码编译过程</h1><p>Python 源码到机器码的过程，以 CPython 为例，编译过程如下：</p><ul><li>将源代码解析为解析树（Parser Tree）</li><li>将解析树转换为抽象语法树（Abstract Syntax Tree）</li><li>将抽象语法树转换到控制流图（Control Flow Graph）</li><li>根据流图将字节码（bytecode）发送给虚拟机（ceval）</li></ul><p>可以使用以下模块进行操作：</p><ul><li>ast 模块可以控制抽象语法树的生成和编译</li><li>py-compile 模块能够将源码换成字节码（编译），保存在 __pycache__ 文件夹，以 <code>.pyc</code> 结尾（不可读）</li><li>dis 模块通过反汇编支持对字节码的分析（可读）</li></ul><h1 id="ast-模块使用"><a href="#ast-模块使用" class="headerlink" title="ast 模块使用"></a>ast 模块使用</h1><p>ast 模块可以用于生成和编译 Python 代码的抽象语法树，许多静态分析工具都使用该模块生成抽象语法树。</p><p><code>ast.parse()</code> 函数可以用来生成抽象语法树，<code>ast.compile()</code> 可以将抽象语法树编译为代码。</p><p>用下列代码作为测试样例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nums</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;even: &quot;</span>, i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot; odd: &quot;</span>, i)</span><br><span class="line"></span><br><span class="line">nums()</span><br></pre></td></tr></table></figure><h2 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h2><p>代码对象是 CPython 实现的低级细节，涉及 code 模块，该模块是解释器基类，可用于自定义 Python 解释器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取源文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo.py&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成可以被 exec() 或 eval() 执行的代码对象</span></span><br><span class="line">cm = <span class="built_in">compile</span>(data, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">exec(cm)</span><br></pre></td></tr></table></figure><h2 id="生成-AST"><a href="#生成-AST" class="headerlink" title="生成 AST"></a>生成 AST</h2><p>直接从源码生成，Python 3.9 支持 <code>indent</code> 参数，打印输出更为友好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f_ast = ast.parse(data)</span><br><span class="line">print(ast.dump(f_ast, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>得到如下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Module( <span class="comment"># 第一级，模块</span></span><br><span class="line">    body=[</span><br><span class="line">        FunctionDef( <span class="comment"># 第二级，函数定义</span></span><br><span class="line">            name=<span class="string">&#x27;nums&#x27;</span>, <span class="comment"># 函数名称</span></span><br><span class="line">            args=arguments( <span class="comment"># 参数</span></span><br><span class="line">                posonlyargs=[],</span><br><span class="line">                args=[],</span><br><span class="line">                kwonlyargs=[],</span><br><span class="line">                kw_defaults=[],</span><br><span class="line">                defaults=[]),</span><br><span class="line">            body=[ <span class="comment"># 函数体</span></span><br><span class="line">                For( <span class="comment"># 循环</span></span><br><span class="line">                    target=Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Store()),</span><br><span class="line">                    iter=Call( <span class="comment"># 递归函数调用</span></span><br><span class="line">                        func=Name(id=<span class="string">&#x27;range&#x27;</span>, ctx=Load()),</span><br><span class="line">                        args=[</span><br><span class="line">                            Constant(value=2)], <span class="comment"># 参数</span></span><br><span class="line">                        keywords=[]),</span><br><span class="line">                    body=[ <span class="comment"># 循环体</span></span><br><span class="line">                        If( <span class="comment"># 条件判断</span></span><br><span class="line">                            <span class="built_in">test</span>=Compare(<span class="comment"># 比较</span></span><br><span class="line">                                left=BinOp( <span class="comment"># 左操作数</span></span><br><span class="line">                                    left=Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Load()), <span class="comment"># 左操作数</span></span><br><span class="line">                                    op=Mod(), <span class="comment"># 操作符</span></span><br><span class="line">                                    right=Constant(value=2)), <span class="comment"># 右操作数</span></span><br><span class="line">                                ops=[</span><br><span class="line">                                    Eq()],</span><br><span class="line">                                comparators=[ <span class="comment"># 右操作数</span></span><br><span class="line">                                    Constant(value=0)]),</span><br><span class="line">                            body=[ <span class="comment"># 为真</span></span><br><span class="line">                                Expr(</span><br><span class="line">                                    value=Call( <span class="comment"># 调用函数</span></span><br><span class="line">                                        func=Name(id=<span class="string">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class="line">                                        args=[</span><br><span class="line">                                            Constant(value=<span class="string">&#x27;even: &#x27;</span>),</span><br><span class="line">                                            Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Load())],</span><br><span class="line">                                        keywords=[]))],</span><br><span class="line">                            orelse=[ <span class="comment"># 为假</span></span><br><span class="line">                                Expr(</span><br><span class="line">                                    value=Call( <span class="comment"># 调用函数</span></span><br><span class="line">                                        func=Name(id=<span class="string">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class="line">                                        args=[</span><br><span class="line">                                            Constant(value=<span class="string">&#x27; odd: &#x27;</span>),</span><br><span class="line">                                            Name(id=<span class="string">&#x27;i&#x27;</span>, ctx=Load())],</span><br><span class="line">                                        keywords=[]))])],</span><br><span class="line">                    orelse=[])],</span><br><span class="line">            decorator_list=[]),</span><br><span class="line">        Expr( <span class="comment"># 第二级，表达式语句</span></span><br><span class="line">            value=Call( <span class="comment"># 调用函数</span></span><br><span class="line">                func=Name(id=<span class="string">&#x27;nums&#x27;</span>, ctx=Load()),</span><br><span class="line">                args=[],</span><br><span class="line">                keywords=[]))],</span><br><span class="line">    type_ignores=[])</span><br></pre></td></tr></table></figure><h2 id="遍历-AST"><a href="#遍历-AST" class="headerlink" title="遍历 AST"></a>遍历 AST</h2><h2 id="修改-AST"><a href="#修改-AST" class="headerlink" title="修改 AST"></a>修改 AST</h2><p>有两种方式：①修改 AST 节点；②替换 AST 节点。ast 模块提供了 <code>NodeVisitor</code> 和 <code>NodeTransformer</code> 实现这两种功能。</p><ol><li><p>将 <code>i%2 == 0</code>修改为 <code>i+2==0</code></p><ul><li><code>ast.NodeVisitor.visit</code> 如果没有实现对象的 <code>visit_classname</code> 方法，则调用 <code>generic_visit</code> 方法</li><li><code>ast.NodeVisitor.generic_visit</code> 在子节点上调用 <code>visit</code> 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeVisitor</span>(<span class="params">ast.NodeVisitor</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_BinOp</span>(<span class="params">self, node</span>):</span> <span class="comment"># 修改操作符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(node.op, ast.Mod):</span><br><span class="line">            node.op = ast.Add()</span><br><span class="line">        self.generic_visit(node) <span class="comment"># 遍历子节点</span></span><br><span class="line"></span><br><span class="line">visitor = NodeVisitor()</span><br><span class="line">visitor.visit(f_ast) <span class="comment"># 遍历</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">odd:  0</span><br><span class="line">odd:  1</span><br></pre></td></tr></table></figure></li><li><p>删除 <code>else</code> 节点</p><ul><li>调用 <code>compile()</code> 函数时缺失 <code>lineno</code> 和 <code>col_offset</code> 属性，使用 <code>ast.fix_missing_locations</code> 函数添加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeTransformer</span>(<span class="params">ast.NodeTransformer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_If</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">return</span> ast.If(</span><br><span class="line">            test=node.test,</span><br><span class="line">            body=node.body,</span><br><span class="line">            orelse=[]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">transformer = NodeTransformer()</span><br><span class="line">f_ast = transformer.visit(f_ast) <span class="comment"># 返回新的 AST</span></span><br><span class="line">ast.fix_missing_locations(f_ast)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">even:  0</span><br></pre></td></tr></table></figure></li></ol><h2 id="可视化-AST"><a href="#可视化-AST" class="headerlink" title="可视化 AST"></a>可视化 AST</h2><p>使用 graphviz 绘制，遍历 AST 节点，将每个节点对象的类型名称作为点，父节点和每个子节点都连一条边。</p><div class="note info flat"><ol><li><p>安装 graphviz 二进制程序 👉 <a href="https://graphviz.org/download/">https://graphviz.org/download/</a></p></li><li><p>pip 安装包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install graphviz</span><br></pre></td></tr></table></figure></li></ol></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span>(<span class="params">node, nodes, pindex, g</span>):</span></span><br><span class="line">    name = <span class="built_in">str</span>(<span class="built_in">type</span>(node).__name__)</span><br><span class="line">    index = <span class="built_in">len</span>(nodes)</span><br><span class="line">    nodes.append(index)</span><br><span class="line">    g.node(<span class="built_in">str</span>(index), name)</span><br><span class="line">    <span class="keyword">if</span> index != pindex:</span><br><span class="line">        g.edge(<span class="built_in">str</span>(index), <span class="built_in">str</span>(pindex))</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> ast.iter_child_nodes(node):</span><br><span class="line">        visit(n, nodes, index, g)</span><br><span class="line">    </span><br><span class="line">graph = Digraph(<span class="built_in">format</span>=<span class="string">&quot;png&quot;</span>)</span><br><span class="line">tree = ast.parse(data)</span><br><span class="line">visit(tree, [], <span class="number">0</span>, graph)</span><br><span class="line">graph.render(<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到的 test.png 如下：</p><img src="https://i.loli.net/2021/07/15/3lrJHjtdRuTW9oY.png"><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://kamneemaran45.medium.com/python-ast-5789a1b60300">Python AST</a></li><li><a href="https://devguide.python.org/compiler/">25. Design of CPython’s Compiler</a></li><li><a href="https://docs.python.org/zh-cn/3/c-api/code.html">代码对象</a></li><li><a href="https://docs.python.org/zh-cn/3/library/ast.html">ast — 抽象语法树</a></li><li><a href="https://docs.python.org/zh-cn/3/library/py_compile.html">py_compile — 编译 Python 源文件</a></li><li><a href="https://docs.python.org/zh-cn/3/library/dis.html">dis — Python 字节码反汇编器</a></li><li><a href="https://qiita.com/kaityo256/items/e83b369ba7518da0a519">Pythonの抽象構文木をGraphvizで可視化する</a></li></ul>]]></content>
    
    
    <summary type="html">使用 ast 模块操作抽象语法树，修改/替换节点。</summary>
    
    
    
    <category term="Other" scheme="https://jckling.github.io/categories/Other/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pyre 污点分析工具 Pysa 使用教程</title>
    <link href="https://jckling.github.io/2021/07/07/Security/Pysa%20Tutorial/"/>
    <id>https://jckling.github.io/2021/07/07/Security/Pysa%20Tutorial/</id>
    <published>2021-07-07T03:39:19.000Z</published>
    <updated>2021-08-31T06:40:08.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由 Facebook 开源的 <a href="https://github.com/facebook/pyre-check">Pyre</a> 是兼容 <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> 的 Python 性能类型检查器，可以增量分析大型代码库，能够迅速处理百万级别的代码。Pyre 附带了 Pysa，一个关注安全性的静态分析工具，Pysa 是 Python Static Analyzer 的缩写，Pysa 支持追踪和分析 Python 程序中的数据流（污点分析）。</p><p>此外还有一个 <a href="https://github.com/facebook/sapp">SAPP</a> (Static Analysis Post Processor) 静态分析后置处理器，提供命令行和 UI 检索 Pysa 的执行结果。</p><p>关于 Python 的类型（<a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a>），建议阅读 <a href="https://github.com/python/mypy">mypy</a> 的 <a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html">清单</a> 和 <a href="https://mypy.readthedocs.io/en/stable/builtin_types.html">类型参考</a> 。下面就是没有添加和添加了类型注释的两个函数，Python3.5 开始支持可选的类型注释，这个特性极大地方便了对 Python 程序进行静态分析，不过就我看到的开源工具很少有添加类型注释的…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unannotated</span>():</span>        <span class="comment"># implictly returns `Any`</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;&quot;</span> + <span class="string">&quot;&quot;</span>       <span class="comment"># function body is not checked</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">annotated</span>() -&gt; List:</span>  <span class="comment"># explicit return annotation means we type check `annotated`</span></span><br><span class="line">    <span class="built_in">any</span> = unannotated()</span><br><span class="line">    <span class="built_in">any</span>.attribute         <span class="comment"># `Any` has all possible attributes</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>              <span class="comment"># Error: returning `int` but expecting `List`</span></span><br></pre></td></tr></table></figure><p>Pysa 跟踪数据流，用户定义源点（产生数据的地方）和汇点（来自源点的数据不应该结束的地方），当源点和汇点相交时就产生了问题</p><ul><li>最常见的数据源点就是用户控制的输入</li><li>汇点比较多样，包括各种 API</li></ul><img src="https://i.loli.net/2021/07/08/wNPmpHqg1WKh9Cr.jpg" width=80%><p>Pysa 执行的是过程间分析，即跟踪跨函数调用的数据流（污点分析），使用代码中的所有可用信息，包括可选的静态类型信息。Pyre 能够为源码添加类型信息，它本身的作用就是静态类型检查器。</p><p>局限</p><ol><li><p>问题空间</p><p> Pysa 只能追踪从 admin_operation 到 delete_user 的数据流，无法检查 user_is_admin</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_operation</span>(<span class="params">request: HttpRequest</span>):</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> user_is_admin():</span><br><span class="line">      <span class="keyword">return</span> Http404</span><br><span class="line"> </span><br><span class="line">  delete_user(request.GET[<span class="string">&quot;user_to_delete&quot;</span>])</span><br></pre></td></tr></table></figure></li><li><p>Python 的动态特性</p><p> Pysa 无法识别动态导入的模块函数调用</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret_eval</span>(<span class="params">request: HttpRequest</span>):</span></span><br><span class="line">  os = importlib.import_module(<span class="string">&quot;os&quot;</span>)</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Pysa won&#x27;t know what &#x27;os&#x27; is, and thus won&#x27;t</span></span><br><span class="line">  <span class="comment"># catch this remote code execution issue</span></span><br><span class="line">  os.system(request.GET[<span class="string">&quot;command&quot;</span>])</span><br></pre></td></tr></table></figure></li><li><p>装饰器</p><p> 2020.8.7 Facebook 博客指出暂不支持在调用图中包括装饰器</p></li></ol><p>Facebook 提供了 Pysa 的教程 👉 <a href="https://github.com/facebook/pyre-check/tree/master/documentation/pysa_tutorial">Pysa Tutorial</a> ，涵盖几个主要的内容，进行实验的过程中遇到的一些问题也都磕磕绊绊地解决了。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>Pysa 使用 <code>pyre analyze</code> 调用，实验中涉及到以下几个配置文件和工具：</p><p><code>taint.config</code> </p><ul><li>定义污点的源（source）和汇（sink），还包括隐式的源和汇</li><li>检测规则（rule），例如，从某源点到某汇点是 XXX 攻击，一条规则中可以包含多个源和汇</li><li>特征（feature）：污点的附加元数据，可用于过滤误报</li></ul><p><code>.pysa</code> </p><ul><li>污点模型，表示哪里是源点和汇点（利用签名），使用完全限定名，格式必须匹配 <code>.pyi</code> 存根文件<ul><li><code>TaintSource[SOURCE_NAME]</code> 标记源点</li><li><code>TaintSink[SINK_NAME]</code> 标记汇点</li><li><code>TaintInTaintOut</code> 标记污点进入进出，指的是进入函数的污点传播到返回值中</li><li><code>PartialSink</code> 标记组合源，使用规则名称</li></ul></li><li>消毒器（Sanitizer）表示对象的变化，经过消毒器污点就被净化，不再跟踪<ul><li>使用装饰器声明函数为消毒器</li><li>可以限定范围：源（source）、汇（sink）、污点进污点出（taint-in-taint-out, TITO）</li></ul></li></ul><p><code>.pyre_configuration</code></p><ul><li>路径配置：源代码、存根文件等</li></ul><p>SAPP</p><ul><li>交互式命令行</li><li>Web 服务器</li></ul><p>动态生成污点模型</p><ul><li><a href="https://github.com/facebook/pyre-check/tree/master/tools/generate_taint_models">pyre-check/tools/generate_taint_models/get_*.py</a> 包含预定义的一些生成器</li><li>遵循模型领域特定语言（Domain Specific Language, DSL）</li></ul><h2 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h2><p>实验环境： Ubuntu 20.04 Server + Python 3.8.10 + pip 20.0.2</p><p>在 Python 虚拟环境中进行实验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/facebook/pyre-check.git</span><br><span class="line"><span class="built_in">cd</span> pyre-check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装虚拟环境</span></span><br><span class="line"><span class="built_in">cd</span> documentation/pysa_tutorial</span><br><span class="line">python -m venv tutorial</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> tutorial/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install pyre-check fb-sapp</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>如果这里遇到 Error 可以更新一下工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install wheel</span><br><span class="line">python -m pip install --upgrade setuptools</span><br></pre></td></tr></table></figure></div><h2 id="exercise1"><a href="#exercise1" class="headerlink" title="exercise1"></a>exercise1</h2><p>views.py 存在远程代码执行（Remote Code Execution, RCE）漏洞。Pysa 需要知道 <code>request.GET</code> 包含用户控制的数据，<code>eval</code> 可以执行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>taint.config 编写规则，告诉 Pysa 当 CustomUserControlled 源点数据到达 CodeExecution 汇点时会引发 RCE 。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CustomUserControlled&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate user input&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CodeExecution&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate execution of python code&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;code&quot;</span>: <span class="number">5001</span>,</span><br><span class="line">      <span class="attr">&quot;sources&quot;</span>: [ <span class="string">&quot;CustomUserControlled&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;sinks&quot;</span>: [ <span class="string">&quot;CodeExecution&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;message_format&quot;</span>: <span class="string">&quot;User specified data may reach a code execution sink&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sources_sinks.pysa 告诉 Pysa <code>request.Get</code> 是 <code>CustomUserControlled</code> 类型的污点源点 <code>TaintSource</code>，而 <code>eval</code> 是 <code>CodeExecution</code> 代码执行类型的污点汇点 <code>TaintSink</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.http.request.HttpRequest.GET: TaintSource[CustomUserControlled] &#x3D; ...</span><br><span class="line"></span><br><span class="line">def eval(__source: TaintSink[CodeExecution], __globals, __locals): ...</span><br></pre></td></tr></table></figure><p>.pyre_configuration 配置了搜索的路径。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;source_directories&quot;</span>: [ <span class="comment">// 查找源码的目录</span></span><br><span class="line">    <span class="string">&quot;.&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;taint_models_path&quot;</span>: [ <span class="comment">// 查找 .pysa/taint.config 文件的目录</span></span><br><span class="line">    <span class="string">&quot;.&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;search_path&quot;</span>: [  <span class="comment">// 查找存根文件</span></span><br><span class="line">    <span class="string">&quot;../../../stubs/&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;.*/integration_test/.*&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;use_command_v2&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的执行结果如下，最后输出的 JSON 数组给出了问题列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise1$ pyre analyze</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__eq__` has 82 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__init__` has 754 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__ne__` has 60 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__call__` has 131 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__init__` has 448 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__new__` has 75 overrides, this might slow down the analysis considerably.</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 12,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 12,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="exercise2"><a href="#exercise2" class="headerlink" title="exercise2"></a>exercise2</h2><p>views.py 三个函数都存在远程执行漏洞，前两个执行 python 代码，最后一个执行 shell 代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.POST[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_fours</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    result = subprocess.getoutput(<span class="string">f&quot;expr 4 <span class="subst">&#123;operator&#125;</span> 4&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>taint.config 规则中已经添加了名称为 <code>ShellExecution</code> 的汇点。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CustomUserControlled&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate user input&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CodeExecution&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate execution of python code&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ShellExecution&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;use to annotate execution of shell scripts&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;code&quot;</span>: <span class="number">5001</span>,</span><br><span class="line">      <span class="attr">&quot;sources&quot;</span>: [ <span class="string">&quot;CustomUserControlled&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;sinks&quot;</span>: [ <span class="string">&quot;CodeExecution&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;message_format&quot;</span>: <span class="string">&quot;User specified data may reach a code execution sink&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 taint.config 中添加一个 <code>CustomUserControlled</code> 源点到 <code>ShellExecution</code> 汇点的规则，将 code 定义为 5002 。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;rules&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">5002</span>,</span><br><span class="line">    <span class="attr">&quot;sources&quot;</span>: [ <span class="string">&quot;CustomUserControlled&quot;</span> ],</span><br><span class="line">    <span class="attr">&quot;sinks&quot;</span>: [ <span class="string">&quot;ShellExecution&quot;</span> ],</span><br><span class="line">    <span class="attr">&quot;message_format&quot;</span>: <span class="string">&quot;User specified data may reach a shell execution sink&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>sources_sinks.pysa 包含带有污点注释的模型，这些模型必须匹配 <code>.pyi</code> 存根文件中的存根或源码。将 <code>.pyi</code> 存根或源码转换为模型时，必须确保：</p><ul><li>函数名不变</li><li>参数名不变</li><li>删除类型注释</li><li>函数或属性是完全限定的</li></ul><p>Pyre 的主要存根来自于 <a href="https://github.com/python/typeshed">typeshed</a>（包含 Python 标准库和 Python 内置包的外部类型注释，以及项目外部人员贡献的第三方包）。还有一部分是为 Pysa 编写的存根，涵盖 Django 等第三方库，不包含在 typeshed 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">django.http.request.HttpRequest.GET: TaintSource[CustomUserControlled] &#x3D; ...</span><br><span class="line"></span><br><span class="line">def eval(__source: TaintSink[CodeExecution], __globals, __locals): ...</span><br><span class="line"></span><br><span class="line">def subprocess.getoutput(cmd: TaintSink[ShellExecution]): ...</span><br></pre></td></tr></table></figure><p>添加规则，指明使用源点和汇点的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.http.request.HttpRequest.POST: TaintSource[CustomUserControlled] &#x3D; ...</span><br><span class="line"></span><br><span class="line">def exec(__source: TaintSink[CodeExecution], __globals, __locals): ...</span><br></pre></td></tr></table></figure><p>执行 <code>pyre analyze</code> ，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise2$ pyre analyze</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__eq__` has 82 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__init__` has 754 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `object.__ne__` has 60 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__call__` has 131 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__init__` has 448 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `type.__new__` has 75 overrides, this might slow down the analysis considerably.</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 56,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5002,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5002]: User specified data may reach a shell execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5002]: User specified data may reach a shell execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5002]: User specified data may reach a shell execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_fours&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 22,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 22,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 14,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 14,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible RCE:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible RCE: [5001]: User specified data may reach a code execution sink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="exercise3"><a href="#exercise3" class="headerlink" title="exercise3"></a>exercise3</h2><p>直接运行 <code>pyre analyze</code> 提示模型验证错误：<a href="https://github.com/facebook/pyre-check/issues/441">Found 93 model verification errors in exercise3 #441</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ƛ Finding taint models <span class="keyword">in</span> `/home/jck/pyre-check/stubs/taint, /home/jck/pyre-check/documentation/pysa_tutorial/exercise3`.ƛ Found 93 model verification errors!</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>添加 <code>--no-verify</code> 参数得到预期反馈，存在误报（假阳）问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 24,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 24,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Pysa 为许多 Python 标准库和开源库提供了预先编写的源点、汇点和规则。预先写好的 <code>taint.config</code> 和 <code>*.pysa</code> 文件在 <a href="https://github.com/facebook/pyre-check/tree/master/stubs/taint"><code>stubs/taint</code></a> 文件夹中。</p><p>views.py 所有函数都没有安全问题，但执行 <code>pyre analyze --no-verify</code> 出现误报。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_sanitizer</span>():</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_operator_safe</span>(<span class="params">request: HttpRequest</span>) -&gt; str:</span></span><br><span class="line">    operator = request.POST[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    <span class="keyword">assert</span> operator <span class="keyword">in</span> &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> operator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = get_operator_safe(request)</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    <span class="keyword">assert</span> operator <span class="keyword">in</span> &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br></pre></td></tr></table></figure><p>sanitizers.pysa 中定义了消毒器（Sanitizer），它们标记了 Pysa 对待整个可调用对象的方式变化，而不仅仅是返回值或参数，使用装饰器表示注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Sanitize</span><br><span class="line">def views.example_sanitizer(): ...</span><br></pre></td></tr></table></figure><p>对于 <code>operate_on_twos</code> 函数，因为有调用 <code>get_operator_safe</code> 过滤请求，所以后续调用 <code>eval()</code> 也是安全的，将 <code>get_operator_safe</code> 标记为消毒器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Sanitize</span><br><span class="line">def views.get_operator_safe(request: TaintSource[UserControlled]): ...</span><br></pre></td></tr></table></figure><p>再次执行 <code>pyre analyze --no-verify</code> 只剩一个误报：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 34,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>operate_on_threes</code> 函数本身就过滤了请求，这里添加一个 identity 函数调用，将参数原样返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    operator = request.GET[<span class="string">&quot;operator&quot;</span>]</span><br><span class="line">    <span class="keyword">assert</span> operator <span class="keyword">in</span> &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">    operator = identity(operator)</span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br></pre></td></tr></table></figure><p>将 identity 函数标记为消毒器，指明经过该消毒器的污点源就不再是污点数据，不用继续跟踪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Sanitize</span><br><span class="line">def views.identity(x: TaintSource[UserControlled]): ...</span><br></pre></td></tr></table></figure><p>再次执行 <code>pyre analyze --no-verify</code>，不存在误报了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[]</span></span><br></pre></td></tr></table></figure><h2 id="exercise4"><a href="#exercise4" class="headerlink" title="exercise4"></a>exercise4</h2><p>使用 SAPP (Static Analysis Post Processor) 提供的交互式命令行。</p><p>views.py 函数同样不存在安全问题，但又产生了误报。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpRequest, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_feature</span>(<span class="params">argument: <span class="built_in">str</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assert_numeric</span>(<span class="params">operand: <span class="built_in">str</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> operand.isnumeric()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_and</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    left = <span class="built_in">bool</span>(request.GET[<span class="string">&quot;left&quot;</span>])</span><br><span class="line">    right = <span class="built_in">bool</span>(request.GET[<span class="string">&quot;right&quot;</span>])</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;<span class="subst">&#123;left&#125;</span> and <span class="subst">&#123;right&#125;</span>&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_or</span>(<span class="params">request: HttpRequest</span>) -&gt; HttpResponse:</span></span><br><span class="line">    left = request.GET[<span class="string">&quot;left&quot;</span>]</span><br><span class="line">    right = request.GET[<span class="string">&quot;right&quot;</span>]</span><br><span class="line">    assert_numeric(left)</span><br><span class="line">    assert_numeric(right)</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;<span class="subst">&#123;left&#125;</span> or <span class="subst">&#123;right&#125;</span>&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>taint.config 特征（feature）是与污点流相关的附加元数据，可用于过滤误报（不影响分析）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;example&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;Copy this feature and write your own. Don&#x27;t forget that JSON lists are comma seperated!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>features.pysa 使用了名称为 example 的特征。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def views.example_feature(argument: AddFeatureToArgument[Via[example]]): ...</span><br></pre></td></tr></table></figure><p>运行 Pysa 并在 SAPP 中打开结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyre analyze --no-verify --save-results-to .</span><br><span class="line">sapp analyze taint-output.json</span><br><span class="line">sapp explore</span><br></pre></td></tr></table></figure><p>使用 SAPP 交互式命令行查看安全问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[ run 1 ]</span><br><span class="line">&gt;&gt;&gt; issues <span class="comment"># 返回 2 个问题</span></span><br><span class="line">Issue 1</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: first-index:right</span><br><span class="line">                  always-via:format-string</span><br><span class="line">                  has:first-index</span><br><span class="line">                  first-index:left</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Issue 2</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_and</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: first-index:right</span><br><span class="line">                  always-type:bool</span><br><span class="line">                  always-type:scalar</span><br><span class="line">                  always-via:obscure</span><br><span class="line">                  always-via:format-string</span><br><span class="line">                  first-index:left</span><br><span class="line">                  has:first-index</span><br><span class="line">        Location: views.py:21|18|39</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 2 issues with run_id 1.</span><br><span class="line"></span><br><span class="line">[ run 1 ]</span><br><span class="line">&gt;&gt;&gt; issues(exclude_features=[<span class="string">&quot;always-type:bool&quot;</span>]) <span class="comment"># 过滤 do_and</span></span><br><span class="line">Issue 1</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: first-index:right</span><br><span class="line">                  always-via:format-string</span><br><span class="line">                  has:first-index</span><br><span class="line">                  first-index:left</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 1 issues with run_id 1.</span><br><span class="line"></span><br><span class="line">[ run 1 ]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exit</span> <span class="comment"># 退出</span></span><br><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise4$</span><br></pre></td></tr></table></figure><p>在 taint.config 中添加名称为 assert_numeric 的特征。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sources&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;sinks&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;example&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;Copy this feature and write your own. Don&#x27;t forget that JSON lists are comma seperated!&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;assert_numeric&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;via assert_numeric&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 features.pysa 中使用该特征，指明 views.assert_numeric 函数的 operand 参数带有该特征。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def views.assert_numeric(operand: AddFeatureToArgument[Via[assert_numeric]]): ...</span><br></pre></td></tr></table></figure><p>重新运行 Pysa 并在 SAPP 中打开结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyre analyze --no-verify --save-results-to .</span><br><span class="line">sapp analyze taint-output.json</span><br><span class="line">sapp explore</span><br></pre></td></tr></table></figure><p>可以看到新的特征，使用两个特征过滤，返回 0 个安全问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; issues</span><br><span class="line">Issue 3</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: always-via:format-string</span><br><span class="line">                  first-index:left</span><br><span class="line">                  always-via:assert_numeric  <span class="comment"># 新特征</span></span><br><span class="line">                  first-index:right</span><br><span class="line">                  has:first-index</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Issue 4</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_and</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: always-via:format-string</span><br><span class="line">                  always-via:obscure</span><br><span class="line">                  first-index:left</span><br><span class="line">                  always-type:scalar</span><br><span class="line">                  first-index:right</span><br><span class="line">                  has:first-index</span><br><span class="line">                  always-type:bool</span><br><span class="line">        Location: views.py:21|18|39</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 2 issues with run_id 2.</span><br><span class="line"></span><br><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; issues(exclude_features=[<span class="string">&quot;always-type:bool&quot;</span>]) <span class="comment"># 过滤 do_and</span></span><br><span class="line">Issue 3</span><br><span class="line">            Code: 5001</span><br><span class="line">         Message: Data from [UserControlled] <span class="built_in">source</span>(s) may reach [RemoteCodeExecution] sink(s)</span><br><span class="line">        Callable: views.do_or</span><br><span class="line">         Sources: UserControlled</span><br><span class="line">           Sinks: RemoteCodeExecution</span><br><span class="line">        Features: always-via:format-string</span><br><span class="line">                  first-index:left</span><br><span class="line">                  always-via:assert_numeric</span><br><span class="line">                  first-index:right</span><br><span class="line">                  has:first-index</span><br><span class="line">        Location: views.py:33|18|38</span><br><span class="line">Min Trace Length: Source (0) | Sink (0)</span><br><span class="line">Found 1 issues with run_id 2.</span><br><span class="line"></span><br><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; issues(exclude_features=[<span class="string">&quot;always-type:bool&quot;</span>, <span class="string">&quot;always-via:assert_numeric&quot;</span>]) <span class="comment"># 过滤 do_and、do_or</span></span><br><span class="line"></span><br><span class="line">Found 0 issues with run_id 2.</span><br><span class="line"></span><br><span class="line">[ run 2 ]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exit</span></span><br><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise4$</span><br></pre></td></tr></table></figure><h2 id="exercise5"><a href="#exercise5" class="headerlink" title="exercise5"></a>exercise5</h2><p>动态模型生成器在 Pysa 之前运行，能够生成 <code>.pysa</code> 文件。官方仓库 <a href="https://github.com/facebook/pyre-check/tree/master/tools/generate_taint_models">pyre-check/tools/generate_taint_models/get_*.py</a> 中包含了生成器，说明文档见 <a href="https://pyre-check.org/docs/pysa-model-generators/">Dynamically Generating Models</a>。</p><p>直接运行 <code>pyre analyze --no-verify</code> 没有检测出安全问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[]</span></span><br></pre></td></tr></table></figure><p>views.py 和 urls.py 模仿 Django 处理请求的逻辑。views.py 两个函数都存在 RCE 漏洞，但 Pysa 产生了漏报。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Callable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_wrapper</span>(<span class="params">func: Callable</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request</span>):</span></span><br><span class="line">        func(request, **request.GET)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_twos</span>(<span class="params">request, operator: <span class="built_in">str</span></span>):</span></span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">f&quot;2 <span class="subst">&#123;operator&#125;</span> 2&quot;</span>)  <span class="comment"># noqa: P204</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate_on_threes</span>(<span class="params">request, operator: <span class="built_in">str</span></span>):</span></span><br><span class="line">    exec(<span class="string">f&quot;result = 3 <span class="subst">&#123;operator&#125;</span> 3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># noqa: F821</span></span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> operate_on_twos</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlPattern</span>:</span></span><br><span class="line">    path: <span class="built_in">str</span></span><br><span class="line">    callback: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [UrlPattern(<span class="string">r&quot;^operate_on_twos/(.*)&quot;</span>, operate_on_twos)]</span><br></pre></td></tr></table></figure><p>generate_models.py 能够为 views.py 动态生成污点注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> urls <span class="keyword">import</span> UrlPattern</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure we&#x27;re able to import dependencies in &#x27;pyre-check&#x27; repo, since they</span></span><br><span class="line"><span class="comment"># are not currently in the PyPI package for pyre-check</span></span><br><span class="line">current_file = Path(__file__).absolute()</span><br><span class="line">sys.path.append(<span class="built_in">str</span>(current_file.parents[<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Work around &#x27;-&#x27; in the name of &#x27;pyre-check&#x27;</span></span><br><span class="line">generate_taint_models = importlib.import_module(</span><br><span class="line">    <span class="string">&quot;pyre-check.tools.generate_taint_models&quot;</span></span><br><span class="line">)</span><br><span class="line">view_generator = importlib.import_module(</span><br><span class="line">    <span class="string">&quot;pyre-check.tools.generate_taint_models.view_generator&quot;</span></span><br><span class="line">)</span><br><span class="line">generator_specifications = importlib.import_module(</span><br><span class="line">    <span class="string">&quot;pyre-check.tools.generate_taint_models.generator_specifications&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ignore</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>() -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="comment"># Here, specify all the generators that you might want to call.</span></span><br><span class="line">    generators = &#123;</span><br><span class="line">        <span class="string">&quot;django_path_params&quot;</span>: generate_taint_models.RESTApiSourceGenerator(</span><br><span class="line">            django_urls=view_generator.DjangoUrls(</span><br><span class="line">                urls_module=<span class="string">&quot;urls&quot;</span>,</span><br><span class="line">                url_pattern_type=UrlPattern,</span><br><span class="line">                url_resolver_type=Ignore,</span><br><span class="line">            )</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment"># &quot;decorator_extracted_params&quot;: generate_taint_models.&lt;GENERATOR_NAME&gt;(</span></span><br><span class="line">        <span class="comment">#     root=&quot;.&quot;,</span></span><br><span class="line">        <span class="comment">#     annotation_specifications=[</span></span><br><span class="line">        <span class="comment">#         generate_taint_models.DecoratorAnnotationSpecification(</span></span><br><span class="line">        <span class="comment">#             decorator=&lt;DECORATOR_NAME_INCLUDING_PRECEEDING_@&gt;,</span></span><br><span class="line">        <span class="comment">#             annotations=generator_specifications.default_entrypoint_taint,</span></span><br><span class="line">        <span class="comment">#         )</span></span><br><span class="line">        <span class="comment">#     ],</span></span><br><span class="line">        <span class="comment"># ),</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># The `run_generators` function will take care of parsing command-line arguments, as</span></span><br><span class="line">    <span class="comment"># well as executing the generators specified in `default_modes` unless you pass in a</span></span><br><span class="line">    <span class="comment"># specific set from the command line.</span></span><br><span class="line">    generate_taint_models.run_generators(</span><br><span class="line">        generators,</span><br><span class="line">        default_modes=[</span><br><span class="line">            <span class="string">&quot;django_path_params&quot;</span>,</span><br><span class="line">            <span class="comment"># &quot;decorator_extracted_params&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>利用 generate_models.py 动态生成 <code>.pysa</code> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python generate_models.py --output-directory .</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>报错 graphql3 模块没有找到，将文件中的 <code>graphql3</code> 改为 <code>graphql</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /home/jck/pyre-check/tools/generate_taint_models/get_dynamic_graphql_sources.py</span><br><span class="line"><span class="comment"># from graphql import GraphQLSchema</span></span><br></pre></td></tr></table></figure></div><p>重新执行成功，输出如下，生成 generated_django_path_params.pysa 配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(tutorial) jck@analysis:~/pyre-check/documentation/pysa_tutorial/exercise5$ python generate_models.py --output-directory .</span><br><span class="line">2021-07-07 03:24:56 INFO Computing models <span class="keyword">for</span> `django_path_params`</span><br><span class="line">2021-07-07 03:24:56 INFO Getting all URLs from `urls`</span><br><span class="line">2021-07-07 03:24:56 INFO Computed models <span class="keyword">for</span> `django_path_params` <span class="keyword">in</span> 0.000 seconds.</span><br><span class="line">&#123;<span class="string">&quot;number of generated models&quot;</span>: 1&#125;</span><br></pre></td></tr></table></figure><p>generated_django_path_params.pysa 中指明了使用污点源点和汇点的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def views.operate_on_twos(request: TaintSource[UserControlled], operator: TaintSource[UserControlled]) -&gt; TaintSink[ReturnedToUser]: ...</span><br></pre></td></tr></table></figure><p>再次执行 <code>pyre analyze --no-verify</code>，得到 1 个安全问题，还有一个问题仍然漏报。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>扩展 generate_models.py 识别装饰器，使用注释的内容，只需要填入两项（生成器可以在 <a href="https://pyre-check.org/docs/pysa-model-generators/#example-model-generators">Example Model Generators</a> 里找）：</p><ul><li><code>&lt;GENERATOR_NAME&gt;</code>：<code>AnnotatedFreeFunctionWithDecoratorGenerator</code></li><li><code>&lt;DECORATOR_NAME_INCLUDING_PRECEEDING_@&gt;</code>：<code>&quot;@api_wrapper&quot;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>() -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="comment"># Here, specify all the generators that you might want to call.</span></span><br><span class="line">    generators = &#123;</span><br><span class="line">        <span class="string">&quot;django_path_params&quot;</span>: generate_taint_models.RESTApiSourceGenerator(</span><br><span class="line">            django_urls=view_generator.DjangoUrls(</span><br><span class="line">                urls_module=<span class="string">&quot;urls&quot;</span>,</span><br><span class="line">                url_pattern_type=UrlPattern,</span><br><span class="line">                url_resolver_type=Ignore,</span><br><span class="line">            )</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&quot;decorator_extracted_params&quot;</span>: generate_taint_models.AnnotatedFreeFunctionWithDecoratorGenerator(</span><br><span class="line">            root=<span class="string">&quot;.&quot;</span>,</span><br><span class="line">            annotation_specifications=[</span><br><span class="line">                generate_taint_models.DecoratorAnnotationSpecification(</span><br><span class="line">                    decorator=<span class="string">&quot;@api_wrapper&quot;</span>,</span><br><span class="line">                    annotations=generator_specifications.default_entrypoint_taint,</span><br><span class="line">                )</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># The `run_generators` function will take care of parsing command-line arguments, as</span></span><br><span class="line">    <span class="comment"># well as executing the generators specified in `default_modes` unless you pass in a</span></span><br><span class="line">    <span class="comment"># specific set from the command line.</span></span><br><span class="line">    generate_taint_models.run_generators(</span><br><span class="line">        generators,</span><br><span class="line">        default_modes=[</span><br><span class="line">            <span class="string">&quot;django_path_params&quot;</span>,</span><br><span class="line">            <span class="string">&quot;decorator_extracted_params&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>重新生成 <code>.pysa</code> 文件并执行分析：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python generate_models.py --output-directory .</span><br><span class="line">pyre analyze --no-verify</span><br></pre></td></tr></table></figure><p>检测出 2 个安全问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ƛ No cached overrides loaded, computing overrides...</span><br><span class="line">ƛ `google.protobuf.message.Message.ClearField` has 57 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ `google.protobuf.message.Message.__init__` has 58 overrides, this might slow down the analysis considerably.</span><br><span class="line">ƛ Iteration <span class="comment">#2. 4 Callables [zipfile.ZipFile::__init__ (override), str::format (override), shelve.Shelf::__init__ (overri[</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 25,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 25,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_threes&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;column&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;stop_line&quot;</span>: 17,</span><br><span class="line">    <span class="string">&quot;stop_column&quot;</span>: 35,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;views.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: 5001,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Possible shell injection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;concise_description&quot;</span>:</span><br><span class="line">      <span class="string">&quot;Possible shell injection [5001]: Data from [UserControlled] source(s) may reach [RemoteCodeExecution] sink(s)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inference&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;define&quot;</span>: <span class="string">&quot;views.operate_on_twos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://engineering.fb.com/2020/08/07/security/pysa/">Pysa: An open source static analysis tool to detect and prevent security issues in Python code</a></li><li><a href="https://github.com/facebook/pyre-check/tree/master/documentation/pysa_tutorial">Pysa Tutorial</a></li><li><a href="https://pyre-check.org/docs/pysa-basics">Pysa QuickStart guide</a></li><li><a href="https://developers.facebook.com/blog/post/2021/04/29/eli5-pysa-security-focused-analysis-tool-python">ELI5: Pysa - A Security-Focused Static Analysis Tool for Python Code</a></li><li><a href="https://www.youtube.com/watch?v=8I3zlvtpOww">Workshop: Graham Bleaney - Pysa to Identify Python Vulnerabilities - DEF CON 28SM AppSec Village</a></li></ul>]]></content>
    
    
    <summary type="html">做了做官方提供的 5 个练习教程</summary>
    
    
    
    <category term="Security" scheme="https://jckling.github.io/categories/Security/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 组件源码阅读</title>
    <link href="https://jckling.github.io/2021/07/02/OpenStack/OpenStack%20%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://jckling.github.io/2021/07/02/OpenStack/OpenStack%20%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</id>
    <published>2021-07-02T12:22:24.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这段时间都在读 OpenStack 组件源码，主要依赖官方文档和《OpenStack 设计与实现》，目前这部分的工作告一段落，稍微整理一下阅读源码的方法，主要是如何找到程序的入口。</p><p>Kolla-Ansible 搭建环境使用的是 Victoria 版本的源码，主要包含以下几个组件：</p><ul><li>Keystone</li><li>Glance</li><li>Nova</li><li>Neutron</li><li>Heat</li></ul><h1 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h1><p>实际上，程序的入口从 setup.cfg 文件就可以看出来了，如何处理请求会涉及到 paste.ini 配置文件。有些组件比较复杂（比如 nova、neutron），组件本身包含多个子组件，有 wsgi 应用、OS-Ken 应用等，启动方式也并不统一，因此需要深入源码才能找到真正的启动位置和启动方式。</p><p>此外，组件不仅有对外提供的 RESTful API 接口，组件内部和组件之间还有 RPC 调用，会涉及消息队列（一般是 rabbitmq）和 socket 通信，而这也是需要深入源码才能理清的。</p><h2 id="setup-cfg"><a href="#setup-cfg" class="headerlink" title="setup.cfg"></a>setup.cfg</h2><p>上述 OpenStack 组件都包含 setup.cfg 文件，<a href="https://setuptools.readthedocs.io/en/latest/index.html">Setuptools</a> 工具使用该配置文件设置包的元数据和其他选项，具体的配置项可以在 <a href="https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html#configuring-setup-using-setup-cfg-files">文档</a> 中查阅。</p><p>这里主要关注的是 <code>entry_points</code> 小节，可以找到代码的入口点，组件启动的方式包括 <code>console_scripts</code> 和 <code>wsgi_scripts</code> ，分别表示命令行脚本和 wsgi 脚本，通常 wsgi 脚本通过 Apache + mod_wsgi 调用。</p><p>以 glance 为例，glance-api 可以使用命令行脚本启动也可以使用 wsgi 脚本启动，不过官方建议在生产环境中使用命令行脚本启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[entry_points]</span><br><span class="line">console_scripts &#x3D;</span><br><span class="line">    glance-api &#x3D; glance.cmd.api:main</span><br><span class="line">    glance-cache-prefetcher &#x3D; glance.cmd.cache_prefetcher:main</span><br><span class="line">    glance-cache-pruner &#x3D; glance.cmd.cache_pruner:main</span><br><span class="line">    glance-cache-manage &#x3D; glance.cmd.cache_manage:main</span><br><span class="line">    glance-cache-cleaner &#x3D; glance.cmd.cache_cleaner:main</span><br><span class="line">    glance-control &#x3D; glance.cmd.control:main</span><br><span class="line">    glance-manage &#x3D; glance.cmd.manage:main</span><br><span class="line">    glance-replicator &#x3D; glance.cmd.replicator:main</span><br><span class="line">    glance-scrubber &#x3D; glance.cmd.scrubber:main</span><br><span class="line">    glance-status &#x3D; glance.cmd.status:main</span><br><span class="line">wsgi_scripts &#x3D;</span><br><span class="line">    glance-wsgi-api &#x3D; glance.common.wsgi_app:init_app</span><br></pre></td></tr></table></figure><p>等号右边可以理解为调用的函数，以 <code>glance-api = glance.cmd.api:main</code> 为例，定位源码 glance/cmd/api.py 中的 main 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        config.parse_args()             <span class="comment"># 读取配置</span></span><br><span class="line">        config.set_config_defaults()    <span class="comment"># 设置默认配置</span></span><br><span class="line">        wsgi.set_eventlet_hub()         <span class="comment"># 设置 eventlet.hub</span></span><br><span class="line">        logging.setup(CONF, <span class="string">&#x27;glance&#x27;</span>)   <span class="comment"># 日志</span></span><br><span class="line">        gmr.TextGuruMeditation.setup_autorun(version)</span><br><span class="line">        notifier.set_defaults()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.enabled: <span class="comment"># OSProfiler</span></span><br><span class="line">            osprofiler.initializer.init_from_conf(</span><br><span class="line">                conf=CONF,</span><br><span class="line">                context=&#123;&#125;,</span><br><span class="line">                project=<span class="string">&quot;glance&quot;</span>,</span><br><span class="line">                service=<span class="string">&quot;api&quot;</span>,</span><br><span class="line">                host=CONF.bind_host</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># NOTE(danms): Configure system-wide threading model to use eventlet</span></span><br><span class="line">        glance.async_.set_threadpool_model(<span class="string">&#x27;eventlet&#x27;</span>) <span class="comment"># 设置同步线程池模型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># NOTE(abhishekk): Added initialize_prefetcher KW argument to Server</span></span><br><span class="line">        <span class="comment"># object so that prefetcher object should only be initialized in case</span></span><br><span class="line">        <span class="comment"># of API service and ignored in case of registry. Once registry is</span></span><br><span class="line">        <span class="comment"># removed this parameter should be removed as well.</span></span><br><span class="line">        initialize_prefetcher = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> CONF.paste_deploy.flavor == <span class="string">&#x27;keystone+cachemanagement&#x27;</span>:</span><br><span class="line">            initialize_prefetcher = <span class="literal">True</span></span><br><span class="line">        server = wsgi.Server(initialize_glance_store=<span class="literal">True</span>,  <span class="comment"># wsgi 应用</span></span><br><span class="line">                             initialize_prefetcher=initialize_prefetcher)</span><br><span class="line">        server.start(config.load_paste_app(<span class="string">&#x27;glance-api&#x27;</span>), default_port=<span class="number">9292</span>) <span class="comment"># 启动 wsgi 应用</span></span><br><span class="line">        server.wait() <span class="comment"># 等待启动完成</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        fail(e)</span><br></pre></td></tr></table></figure><p>再来看一下 wsgi 脚本 <code>glance-wsgi-api = glance.common.wsgi_app:init_app</code>，定位源码 glance/common/wsgi_app.py 的 init_app 函数。重点关注的是最后使用 Paste Deploy 加载 wsgi 应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_app</span>():</span></span><br><span class="line">    config.set_config_defaults()</span><br><span class="line">    config_files = _get_config_files()</span><br><span class="line">    CONF([], project=<span class="string">&#x27;glance&#x27;</span>, default_config_files=config_files)</span><br><span class="line">    logging.setup(CONF, <span class="string">&quot;glance&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(danms): We are running inside uwsgi or mod_wsgi, so no eventlet;</span></span><br><span class="line">    <span class="comment"># use native threading instead.</span></span><br><span class="line">    glance.async_.set_threadpool_model(<span class="string">&#x27;native&#x27;</span>)</span><br><span class="line">    atexit.register(drain_threadpools)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(danms): Change the default threadpool size since we</span></span><br><span class="line">    <span class="comment"># are dealing with native threads and not greenthreads.</span></span><br><span class="line">    <span class="comment"># Right now, the only pool of default size is tasks_pool,</span></span><br><span class="line">    <span class="comment"># so if others are created this will need to change to be</span></span><br><span class="line">    <span class="comment"># more specific.</span></span><br><span class="line">    common.DEFAULT_POOL_SIZE = CONF.wsgi.task_pool_threads</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> CONF.enabled_backends:</span><br><span class="line">        <span class="keyword">if</span> store_utils.check_reserved_stores(CONF.enabled_backends):</span><br><span class="line">            msg = _(<span class="string">&quot;&#x27;os_glance_&#x27; prefix should not be used in &quot;</span></span><br><span class="line">                    <span class="string">&quot;enabled_backends config option. It is reserved &quot;</span></span><br><span class="line">                    <span class="string">&quot;for internal use only.&quot;</span>)</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(msg)</span><br><span class="line">        glance_store.register_store_opts(CONF, reserved_stores=RESERVED_STORES)</span><br><span class="line">        glance_store.create_multi_stores(CONF, reserved_stores=RESERVED_STORES)</span><br><span class="line">        glance_store.verify_store()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        glance_store.register_opts(CONF)</span><br><span class="line">        glance_store.create_stores(CONF)</span><br><span class="line">        glance_store.verify_default_store()</span><br><span class="line"></span><br><span class="line">    run_staging_cleanup()</span><br><span class="line"></span><br><span class="line">    _setup_os_profiler()</span><br><span class="line">    <span class="keyword">return</span> config.load_paste_app(<span class="string">&#x27;glance-api&#x27;</span>)  <span class="comment"># Paste Deploy</span></span><br></pre></td></tr></table></figure><h2 id="paste-ini"><a href="#paste-ini" class="headerlink" title="paste.ini"></a>paste.ini</h2><p>paste.ini 文件是 wsgi 应用的配置文件，根据该文件可以知道应用程序是如何映射 URL 以及如何处理请求。</p><p>paste-ini 配置文件类似 ini 配置，每个 Section 的格式均为 <code>[type:name]</code> ，有以下几个小节</p><ul><li>  composite：收到请求后通过的第一个 Section，表示需要将 HTTP URL Request 调度到一个或者多个应用中</li><li>  app：实现主要功能的具体应用</li><li>  pipeline：过滤器管道，最后一个必须是 app 类型</li><li>  filter：实现过滤器功能的中间件，用于过滤请求和响应</li></ul><p>仍然以 glance 为例，启动 glance 服务时需要指定 paste.ini 配置文件，源码中的 etc/glance-api-paste.ini 配置文件如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use this pipeline for no auth or image caching - DEFAULT</span></span><br><span class="line"><span class="section">[pipeline:glance-api]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler unauthenticated-context rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for image caching and no auth</span></span><br><span class="line"><span class="section">[pipeline:glance-api-caching]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler unauthenticated-context cache rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for caching w/ management interface but no auth</span></span><br><span class="line"><span class="section">[pipeline:glance-api-cachemanagement]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler unauthenticated-context cache cachemanage rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for keystone auth</span></span><br><span class="line"><span class="section">[pipeline:glance-api-keystone]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler authtoken context  rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for keystone auth with image caching</span></span><br><span class="line"><span class="section">[pipeline:glance-api-keystone+caching]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler authtoken context cache rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for keystone auth with caching and cache management</span></span><br><span class="line"><span class="section">[pipeline:glance-api-keystone+cachemanagement]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler authtoken context cache cachemanage rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for authZ only. This means that the registry will treat a</span></span><br><span class="line"><span class="comment"># user as authenticated without making requests to keystone to reauthenticate</span></span><br><span class="line"><span class="comment"># the user.</span></span><br><span class="line"><span class="section">[pipeline:glance-api-trusted-auth]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler context rootapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this pipeline for authZ only. This means that the registry will treat a</span></span><br><span class="line"><span class="comment"># user as authenticated without making requests to keystone to reauthenticate</span></span><br><span class="line"><span class="comment"># the user and uses cache management</span></span><br><span class="line"><span class="section">[pipeline:glance-api-trusted-auth+cachemanagement]</span></span><br><span class="line"><span class="attr">pipeline</span> = cors healthcheck http_proxy_to_wsgi versionnegotiation osprofiler context cache cachemanage rootapp</span><br><span class="line"></span><br><span class="line"><span class="section">[composite:rootapp]</span></span><br><span class="line"><span class="attr">paste.composite_factory</span> = glance.api:root_app_factory</span><br><span class="line">/: apiversions</span><br><span class="line">/v2: apiv2app</span><br><span class="line"></span><br><span class="line"><span class="section">[app:apiversions]</span></span><br><span class="line"><span class="attr">paste.app_factory</span> = glance.api.versions:create_resource</span><br><span class="line"></span><br><span class="line"><span class="section">[app:apiv2app]</span></span><br><span class="line"><span class="attr">paste.app_factory</span> = glance.api.v2.router:API.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:healthcheck]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = oslo_middleware:Healthcheck.factory</span><br><span class="line"><span class="attr">backends</span> = disable_by_file</span><br><span class="line"><span class="attr">disable_by_file_path</span> = /etc/glance/healthcheck_disable</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:versionnegotiation]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.version_negotiation:VersionNegotiationFilter.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:cache]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.cache:CacheFilter.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:cachemanage]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.cache_manage:CacheManageFilter.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:context]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.context:ContextMiddleware.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:unauthenticated-context]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.context:UnauthenticatedContextMiddleware.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:authtoken]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = keystonemiddleware.auth_token:filter_factory</span><br><span class="line"><span class="attr">delay_auth_decision</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[filter:gzip]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = glance.api.middleware.gzip:GzipMiddleware.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:osprofiler]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = osprofiler.web:WsgiMiddleware.factory</span><br><span class="line"><span class="attr">hmac_keys</span> = SECRET_KEY  <span class="comment">#DEPRECATED</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">yes</span>  <span class="comment">#DEPRECATED</span></span><br><span class="line"></span><br><span class="line"><span class="section">[filter:cors]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> =  oslo_middleware.cors:filter_factory</span><br><span class="line"><span class="attr">oslo_config_project</span> = glance</span><br><span class="line"><span class="attr">oslo_config_program</span> = glance-api</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:http_proxy_to_wsgi]</span></span><br><span class="line"><span class="attr">paste.filter_factory</span> = oslo_middleware:HTTPProxyToWSGI.factory</span><br></pre></td></tr></table></figure><p>可以看到 pipeline 最后的总是 rootapp 应用，<code>paste.composite_factory</code> 设置应用的工厂函数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:rootapp]</span></span><br><span class="line"><span class="attr">paste.composite_factory</span> = glance.api:root_app_factory</span><br><span class="line">/: apiversions</span><br><span class="line">/v2: apiv2app</span><br></pre></td></tr></table></figure><p>定位源码 glance/api.py 的 root_app_factory 函数，显然是用于设置 url 映射的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">root_app_factory</span>(<span class="params">loader, global_conf, **local_conf</span>):</span></span><br><span class="line">    <span class="keyword">return</span> paste.urlmap.urlmap_factory(loader, global_conf, **local_conf)</span><br></pre></td></tr></table></figure><p>由于我主要关注的是服务的启动方式，因此 URL 映射具体是如何实现的并没有了解。通过 paste.ini 文件可以知道请求到达真正的应用前经过了什么中间件（过滤器）的处理，这些中间件的源码也可以看一看。</p><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/glance/latest/admin/apache-httpd.html">Running Glance in HTTPD</a></li><li><a href="https://pastedeploy.readthedocs.io/en/latest/">Paste Deployment</a></li><li><a href="https://blog.csdn.net/Jmilk/article/details/52081748">Openstack Paste.ini 文件详解</a></li></ul>]]></content>
    
    
    <summary type="html">通过 setup.cfg 配置文件找到组件服务的启动入口</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>FF14 光之摄影师养成计划✨</title>
    <link href="https://jckling.github.io/2021/06/24/Game/FFXIV/FF14-%E5%85%89%E4%B9%8B%E6%91%84%E5%BD%B1%E5%B8%88%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%92/"/>
    <id>https://jckling.github.io/2021/06/24/Game/FFXIV/FF14-%E5%85%89%E4%B9%8B%E6%91%84%E5%BD%B1%E5%B8%88%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%92/</id>
    <published>2021-06-24T08:11:35.000Z</published>
    <updated>2021-08-31T06:40:08.564Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary flat"><p>🕹️ FF14 幻化人：陆行鸟 - 晨曦王座 - 啃咸鱼的懒熊（原ID：Mosom）<br>招待码 <code>0295-a3be-vax6-04fv</code>，<a href="ff.sdo.com/entertain">登陆页面</a> 点击【被招待者】，在页面上输入招待码，马上结成招待关系！</p><p>🙈 一个只扔了截图的微博：<a href="https://weibo.com/u/6595471688">@啃咸鱼的懒熊</a></p></div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>陆陆续续存了不少截图相关的链接，虽然没有都看过xd</p><p>趁着摸鱼的时候稍微理一理。</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><h2 id="NGA"><a href="#NGA" class="headerlink" title="NGA"></a>NGA</h2><p><strong><a href="https://bbs.nga.cn/thread.php?key=%5B%E5%B9%BB%E5%8C%96%E6%B0%B5%5D&fid=-362960">NGA 搜索 - 幻化氵</a></strong><br>搜索 <code>幻化</code> 或 <code>幻化氵</code> 查找相关帖子</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=20459393">[幻化外观整理] 人偶兵装使用说明书</a></strong><br>装备一览，包括套装、武器等，给出了装备的出处</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=16198912">[FF143Areal补丁联动]拍照打光教程</a></strong><br>打光教程，平时用的 GShade 不是 3Areal，打光可以学习</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=14869355">[光之暖暖][投影][幻化]如何找外观，获得、预览外观，看买家秀</a></strong><br>如题</p><p><strong><a href="https://bbs.nga.cn/read.php?tid=12931368">[光之摄影] 迟到而冗长的打光练习课</a></strong><br>时间比较早的一个打光教程</p><h2 id="微博"><a href="#微博" class="headerlink" title="微博"></a>微博</h2><p><strong><a href="https://weibo.com/u/2448465132?sudaref=bbs.nga.cn&is_all=1">最终幻想14_秘银之眼杂志社</a></strong><br>只接受多图投稿，我感觉大多都是精修啊x</p><p><strong><a href="https://weibo.com/ffxivnge?refer_flag=1005055013_&is_all=1">艾欧泽亚地理频道</a></strong><br>貌似主要是场景摄影，质量都很高（一直都不知道是怎么拍的qwq）</p><p><strong><a href="https://weibo.com/u/6532495419?refer_flag=1005055013_&is_all=1">今天有人男吸吗</a></strong><br>人男 bot，不要 cos 号（悄悄</p><p><strong><a href="https://weibo.com/u/7643695382">最终幻想14敖龙族男性bot</a></strong><br>龙男 bot，好腰好腰，好帅好帅</p><p><strong><a href="https://weibo.com/u/5308654606">猫男bot</a></strong><br>猫男 bot，《大慈大悲》-佣兵头-指挥官（才不是偏见呢！）</p><p><strong><a href="https://weibo.com/u/6410821334?refer_flag=1005055013_&is_all=1">艾欧泽亚投影图鉴</a></strong><br>每天精选一些鉴赏站点 <a href="https://mirapri.com/">MIRAPRI SNAP</a> 上的幻化搭配，同时接受玩家投稿</p><hr><p>大家分享的截图场景，当然也推荐关注这些用户啦~</p><ul><li><a href="https://weibo.com/ttarticle/p/show?id=2309404649531215052981#_0">FF14个人常用截图地点分享-1</a></li><li><a href="https://weibo.com/3181607480/KiF9aD8TT?type=comment#_rnd1624526720401">Gshade 滤镜分享</a></li><li><a href="https://weibo.com/ttarticle/p/show?id=2309404634681193923044#_0">【FF14】Mia的截图地点整理（6）</a></li><li><a href="https://weibo.com/ttarticle/p/show?id=2309404648464289235597#_0">【Gshade】简单的预设安利2+使用进阶</a></li></ul><h2 id="鉴赏站点"><a href="#鉴赏站点" class="headerlink" title="鉴赏站点"></a>鉴赏站点</h2><p><strong><a href="https://www.ffxivcollection.com/">FFXIV ARMOURY COLLECTION</a></strong><br>和人偶兵装相同，游戏套装展示</p><p><strong><a href="https://mirapri.com/">MIRAPRI SNAP</a></strong><br>玩家幻化投稿（日文）</p><p><strong><a href="https://www.ffxivsc.cn/">光之收藏家</a></strong><br>玩家幻化投稿（中文）</p><p><strong><a href="https://ffxiv.eorzeacollection.com/">Eorzea Collection</a></strong><br><a href="https://ffxiv.eorzeacollection.com/gearsets">gearsets</a> 也是游戏套装展示，<a href="https://ffxiv.eorzeacollection.com/glamours">glamours</a> 是玩家投稿</p><h1 id="Discord-群组"><a href="#Discord-群组" class="headerlink" title="Discord 群组"></a>Discord 群组</h1><p><strong><a href="https://discord.gg/thncM4An">GPOSERS</a></strong><br>Gshade 官方群组，可以在里面提问和分享截图</p><p><strong><a href="https://discord.gg/ffxivtextools">FFXIV TEXTOOLS &amp; MODDING</a></strong><br>TexTools 官方群组，有模型和玩家截图的分享</p><p><strong><a href="https://discord.gg/xivmalemods">FFXIV MALE MODS</a></strong><br>TexTools 模型分享，也有玩家截图分享</p><p><strong><a href="https://discord.gg/crystallinemeans">THE Crystalline Means</a></strong><br>CMTool 官方群组，可以在里面提问和分享截图</p><h1 id="TBC"><a href="#TBC" class="headerlink" title="TBC"></a>TBC</h1>]]></content>
    
    
    <summary type="html">摸鱼时收集的截图技巧链接整理(･ω&lt;)☆</summary>
    
    
    
    <category term="Game" scheme="https://jckling.github.io/categories/Game/"/>
    
    
    <category term="FFXIV" scheme="https://jckling.github.io/tags/FFXIV/"/>
    
  </entry>
  
  <entry>
    <title>Kolla-Ansible 本地仓库部署</title>
    <link href="https://jckling.github.io/2021/06/14/OpenStack/Kolla-Ansible%20%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2/"/>
    <id>https://jckling.github.io/2021/06/14/OpenStack/Kolla-Ansible%20%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2/</id>
    <published>2021-06-14T13:17:43.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>在 <a href="https://jckling.github.io/2021/05/31/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20Kolla-Ansible/">OpenStack 单机部署 —— Kolla-Ansible</a> 的基础上，改用本地镜像仓库，从源码构建镜像并部署 OpenStack all-in-one。</p><h1 id="部署本地仓库-Docker-Registry"><a href="#部署本地仓库-Docker-Registry" class="headerlink" title="部署本地仓库 Docker Registry"></a>部署本地仓库 Docker Registry</h1><p><code>kolla-ansible -i all-in-one bootstrap-servers</code> 会改变 docker 的网络配置，需要删除桥接配置，即启用桥接，否则构建镜像的过程中无法下载依赖库。</p><p>另外，还可以添加国内的镜像源，最终 /etc/docker/daemon.json 配置文件的内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;10.112.247.246:4000&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;iptables&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;max-file&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;max-size&quot;</span>: <span class="string">&quot;50m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件后需要重启 docker 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker 网络配置</span></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 删除 bridge: &quot;none&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 docker 服务</span></span><br><span class="line">sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前用户加入 docker 用户组</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><p>运行本地镜像仓库，由于 Keystone 使用了 5000 端口，因此这里指定映射到 4000 端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地镜像仓库</span></span><br><span class="line">docker run -d \</span><br><span class="line"> --name registry \</span><br><span class="line"> --restart=always \</span><br><span class="line"> -p 4000:5000 \</span><br><span class="line"> -v registry:/var/lib/registry \</span><br><span class="line"> registry:2</span><br></pre></td></tr></table></figure><h1 id="使用本地仓库"><a href="#使用本地仓库" class="headerlink" title="使用本地仓库"></a>使用本地仓库</h1><p>使用 tox 创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 tox</span></span><br><span class="line">pip install tox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="built_in">cd</span> kolla</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/kolla/kolla-build.conf /etc/kolla/</span><br></pre></td></tr></table></figure><p>下载 Keystone 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/keystone.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>修改配置文件，假设本机 ip 为 10.1.0.240，openstack_release 有要求（随便填会出错）</p><ul><li>默认构建的镜像被打上了 <code>12.1.0</code> 的标签，这里的 openstack_release 需要指定 registry 中存在的标签</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置源码路径</span></span><br><span class="line">sudo vim /etc/kolla/kolla-build.conf</span><br><span class="line"><span class="comment">#[DEFAULT]</span></span><br><span class="line"><span class="comment">#base = ubuntu</span></span><br><span class="line"><span class="comment">#network_mode = host</span></span><br><span class="line"><span class="comment">#push = true</span></span><br><span class="line"><span class="comment">#registry = 10.1.0.240:4000</span></span><br><span class="line"><span class="comment">#[keystone-base]</span></span><br><span class="line"><span class="comment">#type = local</span></span><br><span class="line"><span class="comment">#location = /home/jck/keystone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用本地仓库</span></span><br><span class="line">sudo vim /etc/kolla/globals.yml</span><br><span class="line"><span class="comment">#docker_registry: 10.1.0.240:4000</span></span><br><span class="line"><span class="comment">#openstack_release: &quot;12.1.0&quot;</span></span><br></pre></td></tr></table></figure><p>构建镜像，使用 <code>&amp;&gt;</code> 将输出重定向到文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码构建 Keystone 镜像</span></span><br><span class="line">kolla-build -t <span class="built_in">source</span> --config-file /etc/kolla/kolla-build.conf keystone &amp;&gt; keystone-build.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地仓库</span></span><br><span class="line">curl -X GET 10.1.0.240:4000/v2/_catalog</span><br></pre></td></tr></table></figure><p>构建完毕后，使用新镜像更新当前环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible upgrade</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>kolla-ansible 相关操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">kolla-ansible/tools/cleanup-containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有镜像</span></span><br><span class="line">kolla-ansible/tools/cleanup-images --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">kolla-ansible pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新环境</span></span><br><span class="line">kolla-ansible upgrade</span><br></pre></td></tr></table></figure><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dockerfile 相关</span></span><br><span class="line">~/kolla/docker  <span class="comment"># jinjia2 模板文件</span></span><br><span class="line">/etc/kolla      <span class="comment"># 镜像配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">/etc/kolla/kolla-build.conf</span><br><span class="line">/etc/kolla/globals.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line">/var/<span class="built_in">log</span>/kolla/ <span class="comment"># 链接 /var/lib/docker/volumes/kolla_logs/_data/</span></span><br></pre></td></tr></table></figure><p>清除容器重新部署，通常不用 <code>./kolla-ansibletools/cleanup-host</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./kolla-ansible/tools/cleanup-containers</span><br><span class="line">kolla-ansible -i ./all-in-one prechecks</span><br><span class="line">kolla-ansible -i ./all-in-one deploy</span><br><span class="line">kolla-ansible post-deploy</span><br></pre></td></tr></table></figure><h1 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h1><h2 id="nova-compute-注册失败"><a href="#nova-compute-注册失败" class="headerlink" title="nova-compute 注册失败"></a>nova-compute 注册失败</h2><p>查看日志信息说是连接不上 libvirt</p><img src="https://i.loli.net/2021/06/15/Pknj9uaUCoq2bgI.jpg"><p>配置并重启 libvirt</p><ul><li><a href="https://askubuntu.com/questions/423425/i-cant-use-libvirt-with-listen-tcp/610350#610350">I can’t use libvirt with listen TCP</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/libvirt/libvirtd.conf</span><br><span class="line"><span class="comment">#listen_tls = 0</span></span><br><span class="line"><span class="comment">#listen_tcp = 1</span></span><br><span class="line"><span class="comment">#auth_tcp = &quot;none&quot;</span></span><br><span class="line"><span class="comment">#tcp_port = &quot;16509&quot;</span></span><br><span class="line"></span><br><span class="line">systemctl restart libvirtd</span><br><span class="line"><span class="comment">#sudo chmod -R 777 /var/run/libvirt</span></span><br><span class="line"></span><br><span class="line">ps aux | grep libvirtd</span><br></pre></td></tr></table></figure><p>重新部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">kolla-ansible/tools/cleanup-containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kolla-ansible -i ./all-in-one deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新生成认证文件</span></span><br><span class="line">kolla-ansible post-deploy</span><br></pre></td></tr></table></figure><p>不安装和配置 libvirt，且 /etc/kolla/globals.yml 也不配置 <code>nova_compute_virt_type</code> 也能正常执行。</p><p>安装完毕后注释该配置，重新 upgrade 正常，不注释貌似也行（玄学）。</p><p>官方指出，由于技术原因，配置 qemu 后使用 <code>kolla-ansible upgrade</code> 可能出错。</p><ul><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/operating-kolla.html">Operating Kolla</a></li></ul><h2 id="数据库迁移出错"><a href="#数据库迁移出错" class="headerlink" title="数据库迁移出错"></a>数据库迁移出错</h2><p>尝试多次无果，回退快照后执行 <code>kolla-ansible upgrade</code> 没有遇到该问题，清除后重新部署应该也可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR keystone migrate.exceptions.InvalidRepositoryError: &#x2F;var&#x2F;lib&#x2F;kolla&#x2F;venv&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;keystone&#x2F;common&#x2F;sql&#x2F;migrate_repo</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/06/15/AC5EoBvLWgfnIml.jpg"><h2 id="请求超时"><a href="#请求超时" class="headerlink" title="请求超时"></a>请求超时</h2><p>再次执行 <code>kolla-ansible upgrade</code> 没有再遇到该问题。实验过程中发现时不时就会请求超时，通常就重复执行指令，再不行就清除后重新部署。</p><img src="https://i.loli.net/2021/06/15/LZuw58IqzsJQ6cA.jpg"><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/multinode.html">Multinode Deployment of Kolla - Option 1: local registry</a></li><li><a href="https://docs.docker.com/registry/">Docker Registry</a></li><li><a href="https://askubuntu.com/questions/420981/how-do-i-save-terminal-output-to-a-file">How do I save terminal output to a file?</a></li><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/operating-kolla.html">Operating Kolla</a></li><li><a href="https://docs.openstack.org/kolla/ussuri/admin/image-building.html">Building Container Images</a></li></ul>]]></content>
    
    
    <summary type="html">Ubuntu 20.04 + OpenStack (Victoria)</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 单机部署 —— Kolla-Ansible</title>
    <link href="https://jckling.github.io/2021/05/31/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20Kolla-Ansible/"/>
    <id>https://jckling.github.io/2021/05/31/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20Kolla-Ansible/</id>
    <published>2021-05-31T11:02:50.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>Kolla-Ansible 只支持列表 <a href="https://docs.openstack.org/kolla-ansible/latest/user/support-matrix">Supported Operating Systems</a> 中的操作系统，这里选用 Ubuntu 20.04 。</p><p>主机配置</p><ul><li>CPU：4 Cores</li><li>内存：16 GB</li><li>硬盘：512 GB</li><li>网卡：<ul><li>NAT-Network</li><li>未指定</li></ul></li></ul><h2 id="更换-pip-源（可选）"><a href="#更换-pip-源（可选）" class="headerlink" title="更换 pip 源（可选）"></a>更换 pip 源（可选）</h2><p>在用户根目录创建文件夹 <code>.pip</code> ，添加配置文件 <code>pip.conf</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">cd</span> &amp;&amp; mkdir .pip &amp;&amp; <span class="built_in">cd</span> .pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并编辑配置文件</span></span><br><span class="line">sudo vim pip.conf</span><br></pre></td></tr></table></figure><p>pip 源配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout &#x3D; 6000</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">trusted-host &#x3D; mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h2 id="更换-Ubuntu-源（可选）"><a href="#更换-Ubuntu-源（可选）" class="headerlink" title="更换 Ubuntu 源（可选）"></a>更换 Ubuntu 源（可选）</h2><p>备份源文件，再替换成清华的镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置镜像源</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">sudo apt dist-upgrade -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>镜像源设置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Python 构建依赖</span></span><br><span class="line">sudo apt install python3-dev libffi-dev gcc libssl-dev -y</span><br></pre></td></tr></table></figure><p>安装 <code>venv</code>，创建并使用虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 venv</span></span><br><span class="line">sudo apt install python3-venv -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkdir code</span><br><span class="line">python -m venv /home/jck/code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> /home/jck/code/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Ansible</span></span><br><span class="line">pip install -U pip</span><br><span class="line">pip install <span class="string">&#x27;ansible&lt;3.0&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="部署-OpenStack"><a href="#部署-OpenStack" class="headerlink" title="部署 OpenStack"></a>部署 OpenStack</h1><h2 id="安装-Kolla-Ansible"><a href="#安装-Kolla-Ansible" class="headerlink" title="安装 Kolla-Ansible"></a>安装 Kolla-Ansible</h2><p>使用 git 克隆仓库，<code>-b</code> 参数指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/kolla -b stable/victoria</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/kolla-ansible -b stable/victoria</span><br></pre></td></tr></table></figure><p>在虚拟环境中安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install ./kolla</span><br><span class="line">pip install ./kolla-ansible</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir -p /etc/kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">sudo chown <span class="variable">$USER</span>:<span class="variable">$USER</span> /etc/kolla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">cp -r kolla-ansible/etc/kolla/* /etc/kolla</span><br><span class="line">cp kolla-ansible/ansible/inventory/* .</span><br></pre></td></tr></table></figure><h2 id="配置-Ansible"><a href="#配置-Ansible" class="headerlink" title="配置 Ansible"></a>配置 Ansible</h2><p>创建并编辑 Ansible 配置文件 ansible.cfg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">sudo touch /etc/ansible/ansible.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑</span></span><br><span class="line">sudo vim /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure><p>添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">host_key_checking&#x3D;False</span><br><span class="line">pipelining&#x3D;True</span><br><span class="line">forks&#x3D;100</span><br></pre></td></tr></table></figure><h2 id="准备初始配置"><a href="#准备初始配置" class="headerlink" title="准备初始配置"></a>准备初始配置</h2><h3 id="Inventory"><a href="#Inventory" class="headerlink" title="Inventory"></a>Inventory</h3><p>两个示例文件：all-in-one 和 multinode，单机部署不需要做额外的修改。</p><h3 id="Kolla-密码"><a href="#Kolla-密码" class="headerlink" title="Kolla 密码"></a>Kolla 密码</h3><p>部署过程中使用的密码存储在 <code>/etc/kolla/passwords.yml</code> 文件，初始为空白，需要手动设置或随机生成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> kolla-ansible/tools</span><br><span class="line">./generate_passwords.py</span><br></pre></td></tr></table></figure><h3 id="Kolla-globals-yml"><a href="#Kolla-globals-yml" class="headerlink" title="Kolla globals.yml"></a>Kolla globals.yml</h3><p><code>globals.yml</code> 是 Kolla-Ansible 的主要配置文件，以下选项需要进行配置：</p><ul><li>Image options：指定用于部署的镜像，支持 <code>centos</code>、<code>ubuntu</code>、<code>debian</code>、<code>rhel</code><ul><li>type：只影响 OpenStack 服务<ul><li><code>binary</code>：使用存储仓库，例如 apt 或 dnf；基础设施服务通常使用这个选项</li><li><code>source</code>：使用原始源存档，例如 git 仓库或本地源目录；比 <code>binary</code> 稍微可靠些</li></ul></li></ul></li><li>Networking：网络配置<ul><li><code>network_interface</code>：管理网络</li><li><code>external_interface</code>：Neutron 外部网络，没有 ip 的网卡</li><li><code>internal_vip_address</code>：浮动 IP 范围，与管理网络同网段</li></ul></li><li>Enable additional services：安装额外的服务组件<ul><li>例如，<code>enable_cinder: &quot;yes&quot;</code> 表示启用块存储服务，支持的服务参见 <a href="https://github.com/openstack/kolla-ansible/blob/master/README.rst#openstack-services">a list of available services</a></li></ul></li><li>Multiple globals files：使用额外的配置文件启用服务，在 <code>etc/kolla/globals.d</code> 目录下创建</li><li>Virtual environment：建议在远程主机上使用虚拟环境执行</li></ul><p>编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/kolla/globals.yml</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 操作系统</span></span><br><span class="line"><span class="attr">kolla_base_distro:</span> <span class="string">&quot;ubuntu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装方式</span></span><br><span class="line"><span class="attr">kolla_install_type:</span> <span class="string">&quot;source&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络</span></span><br><span class="line"><span class="attr">kolla_internal_vip_address:</span> <span class="string">&quot;10.1.0.250&quot;</span> <span class="comment"># network_interface 同网段</span></span><br><span class="line"></span><br><span class="line"><span class="attr">network_interface:</span> <span class="string">&quot;ens192&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">neutron_external_interface:</span> <span class="string">&quot;ens160&quot;</span> <span class="comment"># 空闲网卡</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#enable_cinder: &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#enable_cinder_backend_nfs: &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算</span></span><br><span class="line"><span class="attr">nova_compute_virt_type:</span> <span class="string">&quot;qemu&quot;</span></span><br></pre></td></tr></table></figure><p>因为不支持虚拟化，所以配置为 <code>qemu</code> <del>，需要额外安装 libvirt</del>（应该不用装）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 libvirt</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu-kvm libvirt-daemon-system -y</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>配置文件准备完毕后即可进行部署，首先进行基础的主机级依赖设置，Kolla-Ansible 提供了一个安装所有必需服务的 playbook</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据 Kolla 部署依赖创建服务器</span></span><br><span class="line">kolla-ansible -i all-in-one bootstrap-servers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署前检查主机</span></span><br><span class="line">kolla-ansible -i all-in-one prechecks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 OpenStack</span></span><br><span class="line">kolla-ansible -i all-in-one deploy</span><br></pre></td></tr></table></figure><h2 id="使用-OpenStack"><a href="#使用-OpenStack" class="headerlink" title="使用 OpenStack"></a>使用 OpenStack</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 OpenStack CLI 客户端</span></span><br><span class="line">pip install python-openstackclient</span><br></pre></td></tr></table></figure><p>OpenStack 需要 openrc 文件，其中设置了 admin 用户的凭据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 openrc 文件</span></span><br><span class="line">kolla-ansible post-deploy</span><br><span class="line">. /etc/kolla/admin-openrc.sh</span><br></pre></td></tr></table></figure><p>执行脚本生成示例网络、镜像、实例等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code/share/kolla-ansible/init-runonce</span><br></pre></td></tr></table></figure><p>创建实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip install python-openstackclient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例</span></span><br><span class="line">openstack server create \</span><br><span class="line">    --image cirros \</span><br><span class="line">    --flavor m1.tiny \</span><br><span class="line">    --network demo-net \</span><br><span class="line">    demo1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认实例状态</span></span><br><span class="line">openstack server list</span><br></pre></td></tr></table></figure><p>访问 ip 地址可进入 horizon 登录界面</p><ul><li>用户名：<code>admin</code></li><li>密码：查看 <code>/etc/kolla/passwords.yml</code></li></ul><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/support-matrix.html">Support Matrix</a></li><li><a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html">OpenStack Docs: Quick Start</a></li></ul>]]></content>
    
    
    <summary type="html">Ubuntu 20.04 + OpenStack (Victoria)</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04 计算节点源码安装 nova-compute (Victoria)</title>
    <link href="https://jckling.github.io/2021/05/31/OpenStack/Ubuntu20.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20nova-compute%20(Victoria)/"/>
    <id>https://jckling.github.io/2021/05/31/OpenStack/Ubuntu20.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20nova-compute%20(Victoria)/</id>
    <published>2021-05-31T07:52:19.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>由于安装的是 Victoria 版本，计算节点要使用 Ubuntu 20.04 。</p><p>Ubuntu 18.04 控制节点</p><ul><li>2 处理器</li><li>4 GB 内存</li><li>100 GB 硬盘</li></ul><p>Ubuntu 20.04 计算节点</p><ul><li>2 处理器</li><li>4 GB 内存</li><li>100 GB 硬盘</li></ul><p>各使用两块网卡</p><ul><li>NAT Network 虚拟机组网</li><li>Host-Only 宿主机 ssh 连接</li></ul><img src="https://i.loli.net/2021/06/06/8n3hsxDb4LKXOdf.png" width="60%"/><p>修改主机名称，控制节点 <code>controller</code>、计算节点 <code>compute</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hostnamectl set-hostname controller</span><br></pre></td></tr></table></figure><p>配置静态 ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/netplan/00-installer-config.yaml</span><br><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">enp0s3:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">10.0</span><span class="number">.2</span><span class="number">.28</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>]</span><br><span class="line">    <span class="attr">enp0s8:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.56</span><span class="number">.115</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">to:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.1</span><span class="string">/24</span></span><br><span class="line">        <span class="attr">via:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">metric:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>修改 hosts 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.0.2.28 controller</span></span><br><span class="line"><span class="comment"># 10.0.2.29 compute</span></span><br></pre></td></tr></table></figure><p>每个主机的用户都是 jck ，最后的网络配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制节点</span></span><br><span class="line">10.0.2.28</span><br><span class="line">192.168.56.115</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算节点</span></span><br><span class="line">10.0.2.29</span><br><span class="line">192.168.56.116</span><br></pre></td></tr></table></figure><h1 id="控制节点"><a href="#控制节点" class="headerlink" title="控制节点"></a>控制节点</h1><h2 id="Keystone"><a href="#Keystone" class="headerlink" title="Keystone"></a>Keystone</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/keystone.git -b stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> keystone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install bindep</span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment">#pip install -e .</span></span><br><span class="line">pip install tox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">git init</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库，密码设置为 mysql_db</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE keystone;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">sudo mkdir /etc/keystone</span><br><span class="line">sudo cp etc/keystone.conf.sample /etc/keystone/keystone.conf</span><br><span class="line">sudo vim /etc/keystone/keystone.conf</span><br><span class="line"><span class="comment">#[database]</span></span><br><span class="line"><span class="comment">#connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo python setup.py install</span><br><span class="line">keystone-manage db_sync</span><br><span class="line"><span class="comment">#.tox/genconfig/bin/pip3 install opentracing</span></span><br><span class="line"><span class="comment">#.tox/genconfig/bin/keystone-manage db_sync</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 令牌</span></span><br><span class="line">sudo mkdir -p /etc/keystone/fernet-keys</span><br><span class="line"><span class="comment"># sudo rm -rf /etc/keystone/fernet-keys/</span></span><br><span class="line">sudo keystone-manage fernet_setup --keystone-user jck --keystone-group jck</span><br><span class="line">sudo keystone-manage credential_setup --keystone-user jck --keystone-group jck</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">keystone-manage bootstrap --bootstrap-password ADMIN_PASS \</span><br><span class="line">  --bootstrap-admin-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-internal-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-public-url http://controller:5000/v3/ \</span><br><span class="line">  --bootstrap-region-id RegionOne</span><br><span class="line">  </span><br><span class="line"><span class="comment"># apache</span></span><br><span class="line">sudo apt install apache2 libapache2-mod-wsgi-py3 -y</span><br><span class="line">sudo cp httpd/wsgi-keystone.conf /etc/apache2/conf-available/wsgi-keystone.conf</span><br><span class="line">sudo vim /etc/apache2/conf-available/wsgi-keystone.conf</span><br><span class="line"><span class="comment"># 修改 user 和 group 为 jck</span></span><br><span class="line">sudo ln -s /etc/apache2/conf-available/wsgi-keystone.conf /etc/apache2/conf-enabled/wsgi-keystone.conf</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装客户端</span></span><br><span class="line">pip install python-openstackclient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建脚本</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt; admin-openrc</span></span><br><span class="line"><span class="string">export OS_USERNAME=admin</span></span><br><span class="line"><span class="string">export OS_PASSWORD=ADMIN_PASS</span></span><br><span class="line"><span class="string">export OS_PROJECT_NAME=admin</span></span><br><span class="line"><span class="string">export OS_USER_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_PROJECT_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_AUTH_URL=http://controller:5000/v3</span></span><br><span class="line"><span class="string">export OS_IDENTITY_API_VERSION=3</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">openstack user list</span><br></pre></td></tr></table></figure><h2 id="Glance"><a href="#Glance" class="headerlink" title="Glance"></a>Glance</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码 mysql_db</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE glance;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">openstack project create --domain default --description <span class="string">&quot;Service Project&quot;</span> service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 glance</span></span><br><span class="line">openstack user create --domain default --password-prompt glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user glance admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name glance --description <span class="string">&quot;OpenStack Image&quot;</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne image public http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne image internal http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne image admin http://controller:9292</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/glance.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line">.tox/genconfig/bin/pip3 install opentracing</span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">sudo mkdir /etc/glance</span><br><span class="line">sudo cp etc/glance-api.conf /etc/glance/glance-api.conf</span><br><span class="line">sudo cp etc/glance-api-paste.ini /etc/glance/glance-api-paste.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/glance/glance-api.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span>  = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = glance</span><br><span class="line"><span class="attr">password</span> = glance</span><br><span class="line"><span class="comment">#memcached_servers = controller:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[paste_deploy]</span></span><br><span class="line"><span class="attr">flavor</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[glance_store]</span></span><br><span class="line"><span class="attr">stores</span> = file,http</span><br><span class="line"><span class="attr">default_store</span> = file</span><br><span class="line"><span class="attr">filesystem_store_datadir</span> = /var/lib/glance/images/</span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/genconfig/bin/glance-manage db_sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务（后台）</span></span><br><span class="line">sudo glance-api --config-file=/etc/glance/glance-api.conf --config-file=/etc/glance/glance-api-paste.ini --debug</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源镜像</span></span><br><span class="line">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传镜像到镜像服务，公开可见（所有项目都可以访问）</span></span><br><span class="line">openstack image create <span class="string">&quot;cirros&quot;</span> \</span><br><span class="line">  --file cirros-0.4.0-x86_64-disk.img \</span><br><span class="line">  --disk-format qcow2 --container-format bare \</span><br><span class="line">  --public</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">openstack image list</span><br></pre></td></tr></table></figure><h2 id="Placement"><a href="#Placement" class="headerlink" title="Placement"></a>Placement</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码 mysql_db</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE placement;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 placement</span></span><br><span class="line">openstack user create --domain default --password-prompt placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user placement admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name placement --description <span class="string">&quot;Placement API&quot;</span> placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne placement public http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement internal http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement admin http://controller:8778</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/placement.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line"><span class="comment"># .tox/shared/bin/pip3 install -r requirements.txt</span></span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>配置文件 /etc/placement/placement.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo mkdir /etc/placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/placement/placement.conf.sample /etc/placement/placement.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/placement/placement.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[placement_database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement</span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br><span class="line"><span class="comment">#memcached_servers = 127.0.0.1:11211</span></span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/shared/bin/placement-manage db sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">sudo service apache2 restart</span><br><span class="line">sudo placement-api --port 8778</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. admin-openrc</span><br><span class="line">placement-status upgrade check</span><br></pre></td></tr></table></figure><h2 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 RabbitMQ</span></span><br><span class="line">sudo apt install rabbitmq-server -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 openstack 用户</span></span><br><span class="line">sudo rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">sudo rabbitmqctl set_permissions openstack <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置，密码 mysql_db</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="comment">#CREATE DATABASE nova_api;</span></span><br><span class="line"><span class="comment">#CREATE DATABASE nova;</span></span><br><span class="line"><span class="comment">#CREATE DATABASE nova_cell0;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"><span class="comment">#GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 nova</span></span><br><span class="line">openstack user create --domain default --password-prompt nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user nova admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name nova --description <span class="string">&quot;OpenStack Compute&quot;</span> compute</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">sudo mkdir /etc/nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/nova/nova.conf.sample /etc/nova/nova.conf</span><br><span class="line">sudo cp etc/nova/api-paste.ini /etc/nova/api-paste.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[api_database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api</span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova</span><br><span class="line"></span><br><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller:<span class="number">5672</span>/</span><br><span class="line"><span class="attr">my_ip</span> = <span class="number">10.0</span>.<span class="number">2.28</span></span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = nova</span><br><span class="line"><span class="attr">password</span> = nova</span><br><span class="line"><span class="comment">#memcached_servers = 127.0.0.1:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[vnc]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">server_listen</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">server_proxyclient_address</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">novncproxy_base_url</span> = http://controller:<span class="number">6080</span>/vnc_auto.html</span><br><span class="line"></span><br><span class="line"><span class="section">[glance]</span></span><br><span class="line"><span class="attr">api_servers</span> = http://controller:<span class="number">9292</span></span><br><span class="line"></span><br><span class="line"><span class="section">[oslo_concurrency]</span></span><br><span class="line"><span class="attr">lock_path</span> = /var/lib/nova/tmp</span><br><span class="line"></span><br><span class="line"><span class="section">[placement]</span></span><br><span class="line"><span class="attr">region_name</span> = RegionOne</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># novnc</span></span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/novnc/noVNC.git /usr/share/novnc/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line"><span class="comment">#.tox/shared/bin/pip3 install opentracing</span></span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf api_db sync</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 map_cell0</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 create_cell --name=cell1 --verbose</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf db sync</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 list_cells</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务 nova-api、nova-scheduler、nova-conductor</span></span><br><span class="line">sudo nova-api --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br><span class="line">sudo nova-scheduler --config-file=/etc/nova/nova.conf --debug</span><br><span class="line">sudo nova-conductor --config-file=/etc/nova/nova.conf --debug</span><br><span class="line"><span class="comment"># sudo nova-novncproxy --config-file=/etc/nova/nova.conf --debug</span></span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出计算服务</span></span><br><span class="line">openstack compute service list</span><br><span class="line"></span><br><span class="line"><span class="comment"># API 状态</span></span><br><span class="line">nova-status upgrade check</span><br></pre></td></tr></table></figure><h1 id="计算节点"><a href="#计算节点" class="headerlink" title="计算节点"></a>计算节点</h1><p>PS：这里连 mysql 都装了，其实没必要。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br><span class="line"><span class="built_in">cd</span> nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install bindep</span><br><span class="line">sudo apt install $(bindep -b) -y</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="comment"># sudo apt-get install libpq-dev</span></span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line"><span class="comment"># pip install -e .</span></span><br><span class="line">pip install tox</span><br><span class="line"><span class="comment"># git init</span></span><br><span class="line">tox -e genconfig</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>编辑配置文件 /etc/nova/nova.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo mkdir /etc/nova</span><br><span class="line"><span class="comment">#sudo mkdir /var/lib/nova/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/nova/nova.conf.sample /etc/nova/nova.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">transport_url</span> = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line"><span class="attr">my_ip</span> = <span class="number">10.0</span>.<span class="number">2.29</span></span><br><span class="line"><span class="attr">compute_driver</span>=libvirt.LibvirtDriver</span><br><span class="line"><span class="comment">#firewall_driver = nova.virt.firewall.NoopFirewallDriver</span></span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = nova</span><br><span class="line"><span class="attr">password</span> = nova</span><br><span class="line"><span class="comment">#memcached_servers = controller:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[vnc]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">server_listen</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">server_proxyclient_address</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">novncproxy_base_url</span> = http://controller:<span class="number">6080</span>/vnc_auto.html</span><br><span class="line"></span><br><span class="line"><span class="section">[glance]</span></span><br><span class="line"><span class="attr">api_servers</span> = http://controller:<span class="number">9292</span></span><br><span class="line"></span><br><span class="line"><span class="section">[oslo_concurrency]</span></span><br><span class="line"><span class="attr">lock_path</span> = /var/lib/nova/tmp</span><br><span class="line"></span><br><span class="line"><span class="section">[placement]</span></span><br><span class="line"><span class="attr">region_name</span> = RegionOne</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">auth_url</span> = http://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br><span class="line"></span><br><span class="line"><span class="section">[libvirt]</span></span><br><span class="line"><span class="attr">virt_type</span> = qemu</span><br></pre></td></tr></table></figure><p>计算主机本身不支持虚拟化，按照官方教程应该配置 <code>virt_type=qemu</code> ，但提示需要配置 <code>compute_driver</code> 查阅 <a href="https://docs.openstack.org//nova/latest/doc-nova.pdf">nova 文档</a>（p322）找到支持的虚拟化驱动</p><ul><li>libvirt.LibvirtDriver</li><li>ironic.IronicDriver</li><li>vmwareapi.VMwareVCDriver</li><li>hyperv.HyperVDriver</li><li>powervm.PowerVMDriver</li><li>zvm.ZVMDriver</li><li>fake.FakeDriver</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 libvirt</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu-kvm libvirt-daemon-system -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询版本</span></span><br><span class="line">virsh</span><br><span class="line">version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">sudo nova-compute --config-file=/etc/nova/nova.conf --debug</span><br></pre></td></tr></table></figure><h2 id="控制节点-1"><a href="#控制节点-1" class="headerlink" title="控制节点"></a>控制节点</h2><p>添加到 cell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 身份认证</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认计算节点</span></span><br><span class="line">openstack compute service list --service nova-compute</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现计算节点</span></span><br><span class="line"><span class="comment">#su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova</span></span><br><span class="line">~/nova/.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 discover_hosts --verbose</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出计算服务</span></span><br><span class="line">openstack compute service list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出镜像服务中的镜像，验证和镜像服务的连接</span></span><br><span class="line">openstack image list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 cells 和 placement API 是否成功运行</span></span><br><span class="line">nova-status upgrade check</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://askubuntu.com/questions/984445/netplan-configuration-on-ubuntu-17-04-virtual-machine">netplan configuration on Ubuntu 17.04 virtual machine</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-allow-remote-access-to-mysql">How To Allow Remote Access to MySQL</a></li></ul>]]></content>
    
    
    <summary type="html">记录部署流程</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>OSProfiler 源码分析</title>
    <link href="https://jckling.github.io/2021/05/25/OpenStack/OSProfiler%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://jckling.github.io/2021/05/25/OpenStack/OSProfiler%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2021-05-25T05:55:52.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支持-OSProfiler-的核心组件"><a href="#支持-OSProfiler-的核心组件" class="headerlink" title="支持 OSProfiler 的核心组件"></a>支持 OSProfiler 的核心组件</h1><p>OSProfiler 支持的组件的起始版本，6 个核心组件</p><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>Keystone</td><td><a href="https://docs.openstack.org/releasenotes/keystone/newton.html">Newton</a></td></tr><tr><td>Glance</td><td><a href="https://docs.openstack.org/performance-docs/latest/test_plans/keystone/plan.html">Juno</a></td></tr><tr><td>Nova</td><td><a href="https://docs.openstack.org/releasenotes/nova/ocata.html">Ocata</a></td></tr><tr><td>Neutron</td><td><a href="https://docs.openstack.org/releasenotes/neutron/newton.html">Newton</a></td></tr><tr><td>Swift</td><td><a href="https://blueprints.launchpad.net/swift/+spec/osprofiler-support-in-swift">Blueprint Not started</a></td></tr><tr><td>Cinder</td><td><a href="https://docs.openstack.org/performance-docs/latest/test_plans/keystone/plan.html">Juno</a></td></tr></tbody></table><p>从 3.0.0 版本开始 OSProfiler 弃用 Python2 支持，至少得使用 Python3.6 。每个 OpenStack 都有对应的稳定版 OSProfiler ，主要用于性能测试。</p><img src="https://i.loli.net/2021/06/06/g34prsFtyhVnS5Y.png" width="60%"><h2 id="Keystone"><a href="#Keystone" class="headerlink" title="Keystone"></a>Keystone</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keystone/conf/__init__.py      <span class="comment"># 设置默认配置</span></span><br><span class="line">keystone/common/profiler.py    <span class="comment"># 读取配置文件，设置通知驱动，启用中间件</span></span><br><span class="line">keystone/common/sql/core.py    <span class="comment"># 包装数据库会话</span></span><br><span class="line">keystone/server/flask/core.py  <span class="comment"># 初始化，调用 common/profiler.py</span></span><br><span class="line">setup.cfg                      <span class="comment"># 设置中间件 WsgiMiddleware</span></span><br></pre></td></tr></table></figure><p><code>keystone/conf/__init__.py</code> 设置 OSProfiler 默认配置，不启用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_external_opts_defaults</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Update default configuration options for oslo.middleware.&quot;&quot;&quot;</span></span><br><span class="line">    cors.set_defaults(</span><br><span class="line">        allow_headers=[<span class="string">&#x27;X-Auth-Token&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Openstack-Request-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Subject-Token&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Name&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Domain-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Project-Domain-Name&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Domain-Id&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;X-Domain-Name&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;Openstack-Auth-Receipt&#x27;</span>],</span><br><span class="line">        expose_headers=[<span class="string">&#x27;X-Auth-Token&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;X-Openstack-Request-Id&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;X-Subject-Token&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;Openstack-Auth-Receipt&#x27;</span>],</span><br><span class="line">        allow_methods=[<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;PATCH&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># configure OSprofiler options</span></span><br><span class="line">    profiler.set_defaults(CONF, enabled=<span class="literal">False</span>, trace_sqlalchemy=<span class="literal">False</span>)          <span class="comment"># 设置 OSProfiler 默认配置</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>keystone/common/profiler.py</code> 读取配置文件启用 OSProfiler ，设置驱动，添加日志信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">name, host=<span class="string">&#x27;0.0.0.0&#x27;</span></span>):</span>  <span class="comment"># nosec</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Setup OSprofiler notifier and enable profiling.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: name of the service that will be profiled</span></span><br><span class="line"><span class="string">    :param host: hostname or host IP address that the service will be</span></span><br><span class="line"><span class="string">                 running on. By default host will be set to 0.0.0.0, but more</span></span><br><span class="line"><span class="string">                 specified host name / address usage is highly recommended.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(</span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=&#123;&#125;,</span><br><span class="line">            project=<span class="string">&quot;keystone&quot;</span>,</span><br><span class="line">            service=name,</span><br><span class="line">            host=host</span><br><span class="line">        )</span><br><span class="line">        LOG.info(<span class="string">&quot;OSProfiler is enabled.\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;Traces provided from the profiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;can only be subscribed to using the same HMAC keys that &quot;</span></span><br><span class="line">                 <span class="string">&quot;are configured in Keystone&#x27;s configuration file &quot;</span></span><br><span class="line">                 <span class="string">&quot;under the [profiler] section. \n To disable OSprofiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;set in /etc/keystone/keystone.conf:\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;[profiler]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;enabled=false&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>setup.cfg</code> 设置 server 中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keystone.server_middleware &#x3D;</span><br><span class="line">    cors &#x3D; oslo_middleware:CORS</span><br><span class="line">    sizelimit &#x3D; oslo_middleware:RequestBodySizeLimiter</span><br><span class="line">    http_proxy_to_wsgi &#x3D; oslo_middleware:HTTPProxyToWSGI</span><br><span class="line">    osprofiler &#x3D; osprofiler.web:WsgiMiddleware          &lt;--- 使用 osprofiler 的 WSGI 中间件</span><br><span class="line">    request_id &#x3D; oslo_middleware:RequestId</span><br><span class="line">    debug &#x3D; oslo_middleware:Debug</span><br></pre></td></tr></table></figure><p><code>keystone/server/flask/core.py</code> 服务器中间件按以下顺序处理请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NOTE(morgan): ORDER HERE IS IMPORTANT! The middleware will process the</span></span><br><span class="line"><span class="comment"># request in this list&#x27;s order.</span></span><br><span class="line">_APP_MIDDLEWARE = (</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">                conf=&#123;<span class="string">&#x27;oslo_config_project&#x27;</span>: <span class="string">&#x27;keystone&#x27;</span>&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;sizelimit&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;http_proxy_to_wsgi&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,     <span class="comment"># OSProfiler 提供的 WSGI 中间件</span></span><br><span class="line">                ep=<span class="string">&#x27;osprofiler&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">    _Middleware(namespace=<span class="string">&#x27;keystone.server_middleware&#x27;</span>,</span><br><span class="line">                ep=<span class="string">&#x27;request_id&#x27;</span>,</span><br><span class="line">                conf=&#123;&#125;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>keystone/common/sql/core.py</code> 包装数据库引擎会话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 osprofiler 模块包装会话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_wrap_session</span>(<span class="params">sess</span>):</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line">        sess = osprofiler.sqlalchemy.wrap_session(sql, sess)</span><br><span class="line">    <span class="keyword">return</span> sess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_read</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        reader = enginefacade.reader</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        reader = _get_main_context_manager().reader</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(reader.using(_get_context()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_write</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        writer = enginefacade.writer</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        writer = _get_main_context_manager().writer</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(writer.using(_get_context()))</span><br></pre></td></tr></table></figure><h2 id="Cinder"><a href="#Cinder" class="headerlink" title="Cinder"></a>Cinder</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cinder/db/sqlalchemy/api.py     <span class="comment"># 添加数据库追踪</span></span><br><span class="line">cinder/rpc.py                   <span class="comment"># 上下文序列化/反序列化</span></span><br><span class="line">cinder/service.py               <span class="comment"># 启用 OSProfiler；添加 RPC 追踪</span></span><br></pre></td></tr></table></figure><p><code>cinder/db/sqlalchemy/api.py</code> 添加数据库追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">conf</span>):</span></span><br><span class="line">    main_context_manager.configure(**<span class="built_in">dict</span>(conf.database))</span><br><span class="line">    <span class="comment"># NOTE(geguileo): To avoid a cyclical dependency we import the</span></span><br><span class="line">    <span class="comment"># group here.  Dependency cycle is objects.base requires db.api,</span></span><br><span class="line">    <span class="comment"># which requires db.sqlalchemy.api, which requires service which</span></span><br><span class="line">    <span class="comment"># requires objects.base</span></span><br><span class="line">    CONF.import_group(<span class="string">&quot;profiler&quot;</span>, <span class="string">&quot;cinder.service&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.trace_sqlalchemy:      <span class="comment"># 添加数据库追踪</span></span><br><span class="line">            <span class="keyword">lambda</span> eng: osprofiler_sqlalchemy.add_tracing(sqlalchemy,</span><br><span class="line">                                                          eng, <span class="string">&quot;db&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>cinder/rpc.py</code> 请求上下文类，对上下文进行序列化和反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContextSerializer</span>(<span class="params">messaging.Serializer</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, base</span>):</span></span><br><span class="line">        self._base = base</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_entity</span>(<span class="params">self, context, entity</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._base:</span><br><span class="line">            <span class="keyword">return</span> entity</span><br><span class="line">        <span class="keyword">return</span> self._base.serialize_entity(context, entity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_entity</span>(<span class="params">self, context, entity</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._base:</span><br><span class="line">            <span class="keyword">return</span> entity</span><br><span class="line">        <span class="keyword">return</span> self._base.deserialize_entity(context, entity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        _context = context.to_dict()</span><br><span class="line">        <span class="keyword">if</span> profiler <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            prof = profiler.get()</span><br><span class="line">            <span class="keyword">if</span> prof:</span><br><span class="line">                trace_info = &#123;</span><br><span class="line">                    <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">                    <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">                    <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">                &#125;</span><br><span class="line">                _context.update(&#123;<span class="string">&quot;trace_info&quot;</span>: trace_info&#125;)</span><br><span class="line">        <span class="keyword">return</span> _context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        trace_info = context.pop(<span class="string">&quot;trace_info&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_info:</span><br><span class="line">            <span class="keyword">if</span> profiler <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                profiler.init(**trace_info)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cinder.context.RequestContext.from_dict(context)</span><br></pre></td></tr></table></figure><p><code>cinder/service.py</code> 读取配置文件启用 OSProfiler ，设置驱动，添加日志信息；使用类装饰器追踪 RPC 调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">CONF = cfg.CONF</span><br><span class="line">CONF.register_opts(service_opts)</span><br><span class="line"><span class="keyword">if</span> profiler_opts:</span><br><span class="line">    profiler_opts.set_defaults(CONF)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_profiler</span>(<span class="params">binary, host</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (osprofiler_initializer <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span></span><br><span class="line">            profiler <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span></span><br><span class="line">            profiler_opts <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">        LOG.debug(<span class="string">&#x27;osprofiler is not present&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler_initializer.init_from_conf(</span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=context.get_admin_context().to_dict(),</span><br><span class="line">            project=<span class="string">&quot;cinder&quot;</span>,</span><br><span class="line">            service=binary,</span><br><span class="line">            host=host</span><br><span class="line">        )</span><br><span class="line">        LOG.warning(</span><br><span class="line">            <span class="string">&quot;OSProfiler is enabled.\nIt means that person who knows &quot;</span></span><br><span class="line">            <span class="string">&quot;any of hmac_keys that are specified in &quot;</span></span><br><span class="line">            <span class="string">&quot;/etc/cinder/cinder.conf can trace his requests. \n&quot;</span></span><br><span class="line">            <span class="string">&quot;In real life only operator can read this file so there &quot;</span></span><br><span class="line">            <span class="string">&quot;is no security issue. Note that even if person can &quot;</span></span><br><span class="line">            <span class="string">&quot;trigger profiler, only admin user can retrieve trace &quot;</span></span><br><span class="line">            <span class="string">&quot;information.\n&quot;</span></span><br><span class="line">            <span class="string">&quot;To disable OSProfiler set in cinder.conf:\n&quot;</span></span><br><span class="line">            <span class="string">&quot;[profiler]\nenabled=false&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span>(<span class="params">service.Service</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Service object for binaries running on hosts.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A service takes a manager and enables rpc by listening to queues based</span></span><br><span class="line"><span class="string">    on topic. It also periodically runs tasks on the manager and reports</span></span><br><span class="line"><span class="string">    it state to the database services table.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Make service_id a class attribute so it can be used for clean up</span></span><br><span class="line">    service_id = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, binary, topic, manager, report_interval=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 periodic_interval=<span class="literal">None</span>, periodic_fuzzy_delay=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_name=<span class="literal">None</span>, coordination=<span class="literal">False</span>, cluster=<span class="literal">None</span>, *args,</span></span></span><br><span class="line"><span class="function"><span class="params">                 **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Service, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rpc.initialized():</span><br><span class="line">            rpc.init(CONF)</span><br><span class="line"></span><br><span class="line">        self.cluster = cluster</span><br><span class="line">        self.host = host</span><br><span class="line">        self.binary = binary</span><br><span class="line">        self.topic = topic</span><br><span class="line">        self.manager_class_name = manager</span><br><span class="line">        self.coordination = coordination</span><br><span class="line">        manager_class = importutils.import_class(self.manager_class_name)</span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">            manager_class = profiler.trace_cls(<span class="string">&quot;rpc&quot;</span>)(manager_class)    <span class="comment"># 类装饰器</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="Glance"><a href="#Glance" class="headerlink" title="Glance"></a>Glance</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">glance/opts.py                  <span class="comment"># 添加 OSProfiler 选项</span></span><br><span class="line">glance/db/sqlalchemy/api.py     <span class="comment"># 添加数据库追踪</span></span><br><span class="line">glance/cmd/api.py               <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">glance/common/client.py         <span class="comment"># 更新 http 请求头中的追踪信息</span></span><br><span class="line">glance/common/wsgi.py           <span class="comment"># 设置 OSProfiler 默认配置</span></span><br><span class="line">glance/common/wsgi_app.py       <span class="comment"># 启用 OSProfiler</span></span><br></pre></td></tr></table></figure><p><code>glance/opts.py</code> 包含 OSProfiler 选项，作为 oslo_config 的选项，通过 Glance API 获得选项列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">_api_opts = [</span><br><span class="line">    (<span class="literal">None</span>, <span class="built_in">list</span>(itertools.chain(</span><br><span class="line">        glance.api.middleware.context.context_opts,</span><br><span class="line">        glance.api.versions.versions_opts,</span><br><span class="line">        glance.common.config.common_opts,</span><br><span class="line">        glance.common.location_strategy.location_strategy_opts,</span><br><span class="line">        glance.common.property_utils.property_opts,</span><br><span class="line">        glance.common.wsgi.bind_opts,</span><br><span class="line">        glance.common.wsgi.eventlet_opts,</span><br><span class="line">        glance.common.wsgi.socket_opts,</span><br><span class="line">        glance.common.wsgi.wsgi_opts,</span><br><span class="line">        glance.common.wsgi.store_opts,</span><br><span class="line">        glance.image_cache.drivers.sqlite.sqlite_opts,</span><br><span class="line">        glance.image_cache.image_cache_opts,</span><br><span class="line">        glance.notifier.notifier_opts,</span><br><span class="line">        glance.scrubber.scrubber_opts))),</span><br><span class="line">    (<span class="string">&#x27;image_format&#x27;</span>, glance.common.config.image_format_opts),</span><br><span class="line">    (<span class="string">&#x27;task&#x27;</span>, glance.common.config.task_opts),</span><br><span class="line">    (<span class="string">&#x27;taskflow_executor&#x27;</span>, <span class="built_in">list</span>(itertools.chain(</span><br><span class="line">        glance.async_.taskflow_executor.taskflow_executor_opts,</span><br><span class="line">        glance.async_.flows.convert.convert_task_opts))),</span><br><span class="line">    (<span class="string">&#x27;store_type_location_strategy&#x27;</span>,</span><br><span class="line">     glance.common.location_strategy.store_type.store_type_opts),</span><br><span class="line">    profiler.list_opts()[<span class="number">0</span>],        <span class="comment"># 添加 OSProfiler 选项</span></span><br><span class="line">    (<span class="string">&#x27;paste_deploy&#x27;</span>, glance.common.config.paste_deploy_opts),</span><br><span class="line">    (<span class="string">&#x27;wsgi&#x27;</span>, glance.common.config.wsgi_opts),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>glance/db/sqlalchemy/api.py</code> 添加数据库追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_facade_lazily</span>():</span></span><br><span class="line">    <span class="keyword">global</span> _LOCK, _FACADE</span><br><span class="line">    <span class="keyword">if</span> _FACADE <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">with</span> _LOCK:</span><br><span class="line">            <span class="keyword">if</span> _FACADE <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                _FACADE = session.EngineFacade.from_config(CONF)</span><br><span class="line">                <span class="comment"># 添加数据库追踪</span></span><br><span class="line">                <span class="keyword">if</span> CONF.profiler.enabled <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line">                    osprofiler.sqlalchemy.add_tracing(sqlalchemy,</span><br><span class="line">                                                      _FACADE.get_engine(),</span><br><span class="line">                                                      <span class="string">&quot;db&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> _FACADE</span><br></pre></td></tr></table></figure><p><code>glance/cmd/api.py</code> 启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        config.parse_args()</span><br><span class="line">        config.set_config_defaults()</span><br><span class="line">        wsgi.set_eventlet_hub()</span><br><span class="line">        logging.setup(CONF, <span class="string">&#x27;glance&#x27;</span>)</span><br><span class="line">        gmr.TextGuruMeditation.setup_autorun(version)</span><br><span class="line">        notifier.set_defaults()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">            osprofiler.initializer.init_from_conf(      <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">                conf=CONF,</span><br><span class="line">                context=&#123;&#125;,</span><br><span class="line">                project=<span class="string">&quot;glance&quot;</span>,</span><br><span class="line">                service=<span class="string">&quot;api&quot;</span>,</span><br><span class="line">                host=CONF.bind_host</span><br><span class="line">            )</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>glance/common/wsgi.py</code> 设置 OSProfiler 默认配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profiler_opts.set_defaults(CONF)    <span class="comment"># OSProfiler 默认配置</span></span><br></pre></td></tr></table></figure><p><code>glance/common/wsgi_app.py</code> 初始化应用时启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_setup_os_profiler</span>():</span></span><br><span class="line">    notifier.set_defaults()</span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(conf=CONF,</span><br><span class="line">                                              context=&#123;&#125;,</span><br><span class="line">                                              project=<span class="string">&#x27;glance&#x27;</span>,</span><br><span class="line">                                              service=<span class="string">&#x27;api&#x27;</span>,</span><br><span class="line">                                              host=CONF.bind_host)</span><br></pre></td></tr></table></figure><p><code>glance/common/client.py</code> 更新请求头中的追踪信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClient</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A base client class&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @handle_redirects</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_do_request</span>(<span class="params">self, method, url, body, headers</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Connects to the server and issues a request.  Handles converting</span></span><br><span class="line"><span class="string">        any returned HTTP error status codes to OpenStack/Glance exceptions</span></span><br><span class="line"><span class="string">        and closing the server connection. Returns the result data, or</span></span><br><span class="line"><span class="string">        raises an appropriate exception.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param method: HTTP method (&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, etc...)</span></span><br><span class="line"><span class="string">        :param url: urlparse.ParsedResult object with URL information</span></span><br><span class="line"><span class="string">        :param body: data to send (as string, filelike or iterable),</span></span><br><span class="line"><span class="string">                     or None (default)</span></span><br><span class="line"><span class="string">        :param headers: mapping of key/value pairs to add as headers</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :note</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If the body param has a read attribute, and method is either</span></span><br><span class="line"><span class="string">        POST or PUT, this method will automatically conduct a chunked-transfer</span></span><br><span class="line"><span class="string">        encoding and use the body as a file object or iterable, transferring</span></span><br><span class="line"><span class="string">        chunks of data using the connection&#x27;s send() method. This allows large</span></span><br><span class="line"><span class="string">        objects to be transferred efficiently without buffering the entire</span></span><br><span class="line"><span class="string">        body in memory.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> url.query:</span><br><span class="line">            path = url.path + <span class="string">&quot;?&quot;</span> + url.query</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            path = url.path</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            connection_type = self.get_connection_type()</span><br><span class="line">            headers = self._encode_headers(headers <span class="keyword">or</span> &#123;&#125;)</span><br><span class="line">            headers.update(osprofiler.web.get_trace_id_headers())   <span class="comment"># 更新请求头</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">nova/config.py             <span class="comment"># 根据配置文件设置 osprofiler</span></span><br><span class="line">nova/service.py            <span class="comment"># 根据配置文件设置驱动，启用 WSGI 中间件</span></span><br><span class="line">nova/profiler.py           <span class="comment"># 重写 WSGI 中间件、类追踪装饰器</span></span><br><span class="line">nova/manager.py            <span class="comment"># 元类</span></span><br><span class="line">nova/rpc.py                <span class="comment"># 追踪上下文序列化/反序列化</span></span><br><span class="line">nova/utils.py              <span class="comment"># spawn/spawn_n 装饰器</span></span><br><span class="line">nova/db/sqlalchemy/api.py  <span class="comment"># 追踪数据库调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承抽象基类</span></span><br><span class="line">nova/compute/manager.py</span><br><span class="line">nova/conductor/manager.py</span><br><span class="line">nova/scheduler/manager.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类装饰器 @profiler.trace_cls(&quot;&quot;)</span></span><br><span class="line">nova/compute/api.py                 <span class="comment"># compute_api</span></span><br><span class="line">nova/compute/rpcapi.py              <span class="comment"># rpc</span></span><br><span class="line">nova/conductor/manager.py           <span class="comment"># rpc</span></span><br><span class="line">nova/conductor/rpcapi.py            <span class="comment"># rpc</span></span><br><span class="line">nova/scheduler/rpcapi.py            <span class="comment"># rpc</span></span><br><span class="line">nova/image/glance.py                <span class="comment"># nova_image</span></span><br><span class="line">nova/network/neutron.py             <span class="comment"># neutron_api</span></span><br><span class="line">nova/virt/libvirt/volume/volume.py  <span class="comment"># volume_api</span></span><br><span class="line">nova/virt/libvirt/vif.py            <span class="comment"># vif_driver</span></span><br></pre></td></tr></table></figure><p><code>nova/config.py</code> 设置 OSProfiler 默认配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_args</span>(<span class="params">argv, default_config_files=<span class="literal">None</span>, configure_db=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               init_rpc=<span class="literal">True</span></span>):</span></span><br><span class="line">    log.register_options(CONF)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(sean-k-mooney): this filter addresses bug #1825584</span></span><br><span class="line">    <span class="comment"># https://bugs.launchpad.net/nova/+bug/1825584</span></span><br><span class="line">    <span class="comment"># eventlet monkey-patching breaks AMQP heartbeat on uWSGI</span></span><br><span class="line">    rabbit_logger = logging.getLogger(<span class="string">&#x27;oslo.messaging._drivers.impl_rabbit&#x27;</span>)</span><br><span class="line">    rabbit_logger.addFilter(rabbit_heartbeat_filter)</span><br><span class="line"></span><br><span class="line">    set_lib_defaults()</span><br><span class="line">    <span class="keyword">if</span> profiler:</span><br><span class="line">        profiler.set_defaults(CONF)     <span class="comment"># 设置默认配置</span></span><br><span class="line"></span><br><span class="line">    CONF(argv[<span class="number">1</span>:],</span><br><span class="line">         project=<span class="string">&#x27;nova&#x27;</span>,</span><br><span class="line">         version=version.version_string(),</span><br><span class="line">         default_config_files=default_config_files)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> init_rpc:</span><br><span class="line">        rpc.init(CONF)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> configure_db:</span><br><span class="line">        sqlalchemy_api.configure(CONF)</span><br></pre></td></tr></table></figure><p><code>nova/service.py</code> 根据配置文件启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_profiler</span>(<span class="params">binary, host</span>):</span></span><br><span class="line">    <span class="keyword">if</span> osprofiler <span class="keyword">and</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(</span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=context.get_admin_context().to_dict(),</span><br><span class="line">            project=<span class="string">&quot;nova&quot;</span>,</span><br><span class="line">            service=binary,</span><br><span class="line">            host=host)</span><br><span class="line">        LOG.info(<span class="string">&quot;OSProfiler is enabled.&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>nova/profiler.py</code> 重写 OSProfiler 装饰器类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写 WSGI 中间件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WsgiMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, application, **kwargs</span>):</span></span><br><span class="line">        self.application = application</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span>(<span class="params">cls, global_conf, **local_conf</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler_web:    <span class="comment"># 调用 osprofiler</span></span><br><span class="line">            <span class="keyword">return</span> profiler_web.WsgiMiddleware.factory(global_conf,</span><br><span class="line">                                                       **local_conf)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">filter_</span>(<span class="params">app</span>):</span></span><br><span class="line">            <span class="keyword">return</span> cls(app, **local_conf)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filter_</span><br><span class="line"></span><br><span class="line"><span class="meta">    @webob.dec.wsgify</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> request.get_response(self.application)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_traced_meta</span>():</span></span><br><span class="line">    <span class="keyword">if</span> profiler <span class="keyword">and</span> <span class="string">&#x27;profiler&#x27;</span> <span class="keyword">in</span> CONF <span class="keyword">and</span> CONF.profiler.enabled:</span><br><span class="line">        <span class="keyword">return</span> profiler.TracedMeta</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># NOTE(rpodolyaka): if we do not return a child of type, then Python</span></span><br><span class="line">        <span class="comment"># fails to build a correct MRO when osprofiler is not installed</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">NoopMeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> NoopMeta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包装 osprofiler 类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace_cls</span>(<span class="params">name, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Wrap the OSProfiler trace_cls decorator so that it will not try to</span></span><br><span class="line"><span class="string">    patch the class unless OSProfiler is present and enabled in the config</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: The name of action. E.g. wsgi, rpc, db, etc..</span></span><br><span class="line"><span class="string">    :param kwargs: Any other keyword args used by profiler.trace_cls</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler <span class="keyword">and</span> <span class="string">&#x27;profiler&#x27;</span> <span class="keyword">in</span> CONF <span class="keyword">and</span> CONF.profiler.enabled:</span><br><span class="line">            trace_decorator = profiler.trace_cls(name, kwargs)</span><br><span class="line">            <span class="keyword">return</span> trace_decorator(cls)</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p><code>nova/manager.py</code> 使用元类实现类支持追踪，nova 组件内部的模块都继承该类（<code>ComputeManager</code>、<code>ConductorManager</code>、<code>SchedulerManager</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerMeta</span>(<span class="params">profiler.get_traced_meta(<span class="params"></span>), <span class="built_in">type</span>(<span class="params">PeriodicTasks</span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Metaclass to trace all children of a specific class.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This metaclass wraps every public method (not starting with _ or __)</span></span><br><span class="line"><span class="string">    of the class using it. All children classes of the class using ManagerMeta</span></span><br><span class="line"><span class="string">    will be profiled as well.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Adding this metaclass requires that the __trace_args__ attribute be added</span></span><br><span class="line"><span class="string">    to the class we want to modify. That attribute is a dictionary</span></span><br><span class="line"><span class="string">    with one mandatory key: &quot;name&quot;. &quot;name&quot; defines the name</span></span><br><span class="line"><span class="string">    of the action to be traced (for example, wsgi, rpc, db).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The OSprofiler-based tracing, although, will only happen if profiler</span></span><br><span class="line"><span class="string">    instance was initiated somewhere before in the thread, that can only happen</span></span><br><span class="line"><span class="string">    if profiling is enabled in nova.conf and the API call to Nova API contained</span></span><br><span class="line"><span class="string">    specific headers.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>(<span class="params">base.Base, PeriodicTasks, metaclass=ManagerMeta</span>):</span></span><br><span class="line">    __trace_args__ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;rpc&quot;</span>&#125;    <span class="comment"># 必须</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>nova/rpc.py</code> 实现追踪上下文的序列化（并更新上下文）和反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilerRequestContextSerializer</span>(<span class="params">RequestContextSerializer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        _context = <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                         self).serialize_context(context)</span><br><span class="line"></span><br><span class="line">        prof = profiler.get()       <span class="comment"># 获取 osprofiler 实例</span></span><br><span class="line">        <span class="keyword">if</span> prof:</span><br><span class="line">            <span class="comment"># FIXME(DinaBelova): we&#x27;ll add profiler.get_info() method</span></span><br><span class="line">            <span class="comment"># to extract this info -&gt; we&#x27;ll need to update these lines</span></span><br><span class="line">            trace_info = &#123;</span><br><span class="line">                <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">                <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">                <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">            &#125;</span><br><span class="line">            _context.update(&#123;<span class="string">&quot;trace_info&quot;</span>: trace_info&#125;) <span class="comment"># 添加追踪信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        trace_info = context.pop(<span class="string">&quot;trace_info&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_info:</span><br><span class="line">            profiler.init(**trace_info)     <span class="comment"># 初始新的化 osprofiler 实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                     self).deserialize_context(context)</span><br></pre></td></tr></table></figure><p><code>nova/utils.py</code> 实现 spawn 和 spawn_n 装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回追踪信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_serialize_profile_info</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> profiler:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    prof = profiler.get()   <span class="comment"># 获取实例</span></span><br><span class="line">    trace_info = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> prof:</span><br><span class="line">        <span class="comment"># FIXME(DinaBelova): we&#x27;ll add profiler.get_info() method</span></span><br><span class="line">        <span class="comment"># to extract this info -&gt; we&#x27;ll need to update these lines</span></span><br><span class="line">        trace_info = &#123;</span><br><span class="line">            <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">            <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">            <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> trace_info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Passthrough method for eventlet.spawn.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This utility exists so that it can be stubbed for testing without</span></span><br><span class="line"><span class="string">    interfering with the service spawns.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It will also grab the context from the threadlocal store and add it to</span></span><br><span class="line"><span class="string">    the store on the new thread.  This allows for continuity in logging the</span></span><br><span class="line"><span class="string">    context when using this method to spawn a new thread.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    _context = common_context.get_current()     <span class="comment"># 当前线程</span></span><br><span class="line">    profiler_info = _serialize_profile_info()   <span class="comment"># 追踪信息</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">context_wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> If update_store is not called after spawn it won&#x27;t be</span></span><br><span class="line">        <span class="comment"># available for the logger to pull from threadlocal storage.</span></span><br><span class="line">        <span class="keyword">if</span> _context <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            _context.update_store()</span><br><span class="line">        <span class="keyword">if</span> profiler_info <span class="keyword">and</span> profiler:</span><br><span class="line">            profiler.init(**profiler_info)      <span class="comment"># 初始化 osprofiler 实例</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventlet.spawn(context_wrapper, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn_n</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Passthrough method for eventlet.spawn_n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This utility exists so that it can be stubbed for testing without</span></span><br><span class="line"><span class="string">    interfering with the service spawns.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It will also grab the context from the threadlocal store and add it to</span></span><br><span class="line"><span class="string">    the store on the new thread.  This allows for continuity in logging the</span></span><br><span class="line"><span class="string">    context when using this method to spawn a new thread.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    _context = common_context.get_current()</span><br><span class="line">    profiler_info = _serialize_profile_info()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">context_wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> If update_store is not called after spawn_n it won&#x27;t be</span></span><br><span class="line">        <span class="comment"># available for the logger to pull from threadlocal storage.</span></span><br><span class="line">        <span class="keyword">if</span> _context <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            _context.update_store()</span><br><span class="line">        <span class="keyword">if</span> profiler_info <span class="keyword">and</span> profiler:</span><br><span class="line">            profiler.init(**profiler_info)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    eventlet.spawn_n(context_wrapper, *args, **kwargs)</span><br></pre></td></tr></table></figure><p><code>nova/db/sqlalchemy/api.py</code> 添加数据库追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追踪数据库调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">conf</span>):</span></span><br><span class="line">    main_context_manager.configure(**_get_db_conf(conf.database))</span><br><span class="line">    api_context_manager.configure(**_get_db_conf(conf.api_database))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> profiler_sqlalchemy <span class="keyword">and</span> CONF.profiler.enabled \</span><br><span class="line">            <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line"></span><br><span class="line">        main_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br><span class="line">        api_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br></pre></td></tr></table></figure><h2 id="Neutron"><a href="#Neutron" class="headerlink" title="Neutron"></a>Neutron</h2><p>相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">neutron/manager.py          <span class="comment"># 元类</span></span><br><span class="line">neutron/common/profiler.py  <span class="comment"># 根据配置文件设置驱动，启用 WSGI 中间件</span></span><br><span class="line">neutron/common/utils.py     <span class="comment"># spawn/spawn_n 装饰器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 neutron/common/profiler.py 设置 OSProfiler</span></span><br><span class="line">neutron/service.py</span><br><span class="line">neutron/server/__init__.py</span><br><span class="line">neutron/plugins/ml2/drivers/openvswitch/agent/main.py</span><br><span class="line">neutron/plugins/ml2/drivers/linuxbridge/agent/linuxbridge_neutron_agent.py</span><br><span class="line">neutron/plugins/ml2/drivers/mec_sriov/agent/sriov_nic_agent.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类装饰器 @profiler.trace_cls(&quot;&quot;)</span></span><br><span class="line">neutron/agent/l3/agent.py   <span class="comment"># l3-agent</span></span><br><span class="line">neutron/plugins/ml2/drivers/openvswitch/agent/ovs_dvr_neutron_agent.py  <span class="comment"># ovs_dvr_agent</span></span><br><span class="line">neutron/plugins/ml2/drivers/agent/_common_agent.py  <span class="comment"># rpc</span></span><br><span class="line">neutron/plugins/ml2/drivers/mec_sriov/agent/sriov_nic_agent.py  <span class="comment"># rpc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数装饰器 @profiler.trace(&quot;&quot;)</span></span><br><span class="line">neutron/plugins/ml2/drivers/openvswitch/agent/ovs_neutron_agent.py  <span class="comment"># rpc</span></span><br><span class="line">neutron/plugins/ml2/rpc.py  <span class="comment"># rpc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cProfile</span></span><br><span class="line">conf/profiling.py</span><br><span class="line">neutron/profiling/profiled_decorator.py</span><br></pre></td></tr></table></figure><p><code>neutron/manager.py</code> 和 Nova 同样的实现思路，使用元类实现类追踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerMeta</span>(<span class="params">profiler.TracedMeta, <span class="built_in">type</span>(<span class="params">periodic_task.PeriodicTasks</span>)</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>(<span class="params">periodic_task.PeriodicTasks, metaclass=ManagerMeta</span>):</span></span><br><span class="line">    __trace_args__ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;rpc&quot;</span>&#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>neutron/common/profiler.py</code> 启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">name, host=<span class="string">&#x27;0.0.0.0&#x27;</span></span>):</span>  <span class="comment"># nosec</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Setup OSprofiler notifier and enable profiling.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: name of the service, that will be profiled</span></span><br><span class="line"><span class="string">    :param host: host (either host name or host address) the service will be</span></span><br><span class="line"><span class="string">                 running on. By default host will be set to 0.0.0.0, but more</span></span><br><span class="line"><span class="string">                 specified host name / address usage is highly recommended.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">        osprofiler.initializer.init_from_conf(      <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">            conf=CONF,</span><br><span class="line">            context=context.get_admin_context().to_dict(),</span><br><span class="line">            project=<span class="string">&quot;neutron&quot;</span>,</span><br><span class="line">            service=name,</span><br><span class="line">            host=host</span><br><span class="line">        )</span><br><span class="line">        LOG.info(<span class="string">&quot;OSProfiler is enabled.\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;Traces provided from the profiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;can only be subscribed to using the same HMAC keys that &quot;</span></span><br><span class="line">                 <span class="string">&quot;are configured in Neutron&#x27;s configuration file &quot;</span></span><br><span class="line">                 <span class="string">&quot;under the [profiler] section.\n To disable OSprofiler &quot;</span></span><br><span class="line">                 <span class="string">&quot;set in /etc/neutron/neutron.conf:\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;[profiler]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;enabled=false&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>neutron/common/utils.py</code> 返回追踪信息，实现 spawn 和 spawn_n 装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回追踪信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collect_profiler_info</span>():</span></span><br><span class="line">    p = profiler.get()</span><br><span class="line">    <span class="keyword">if</span> p:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;hmac_key&quot;</span>: p.hmac_key,</span><br><span class="line">            <span class="string">&quot;base_id&quot;</span>: p.get_base_id(),</span><br><span class="line">            <span class="string">&quot;parent_id&quot;</span>: p.get_id(),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;As eventlet.spawn() but with osprofiler initialized in the new threads</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    osprofiler stores the profiler instance in thread local storage, therefore</span></span><br><span class="line"><span class="string">    in new threads (including eventlet threads) osprofiler comes uninitialized</span></span><br><span class="line"><span class="string">    by default. This spawn() is a stand-in replacement for eventlet.spawn()</span></span><br><span class="line"><span class="string">    but we re-initialize osprofiler in threads spawn()-ed.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    profiler_info = collect_profiler_info()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler_info:</span><br><span class="line">            profiler.init(**profiler_info)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventlet.spawn(wrapper, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn_n</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;See spawn() above&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    profiler_info = collect_profiler_info()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> profiler_info:</span><br><span class="line">            profiler.init(**profiler_info)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eventlet.spawn_n(wrapper, *args, **kwargs)</span><br></pre></td></tr></table></figure><p><code>neutron/server/__init__.py</code> 启用 OSProfiler</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_application</span>():</span></span><br><span class="line">    _init_configuration()</span><br><span class="line">    profiler.setup(<span class="string">&#x27;neutron-server&#x27;</span>, cfg.CONF.host)     <span class="comment"># 启用 OSProfiler</span></span><br><span class="line">    <span class="keyword">return</span> config.load_paste_app(<span class="string">&#x27;neutron&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="OSProfiler-使用"><a href="#OSProfiler-使用" class="headerlink" title="OSProfiler 使用"></a>OSProfiler 使用</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>在 <a href="https://jckling.github.io/2020/12/25/OpenStack/CentOS7+OpenStack(Rocky)-0/">CentOS 7 安装 Openstack Rocky 版本 - 环境搭建</a> 一系列文章的基础上进行实验，整体架构如下：</p><img src="https://i.loli.net/2021/06/06/R5mAHUtLlM1eyhb.jpg"><p>修改控制节点上相关组件的配置文件，启用 OSProfiler </p><p>Controller</p><ul><li>Keystone</li><li>Glance</li><li>Nova*</li><li>Neutron*</li><li>Cinder</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[profiler]</span><br><span class="line">enabled &#x3D; True</span><br><span class="line"></span><br><span class="line">trace_sqlalchemy &#x3D; True</span><br><span class="line">trace_wsgi_transport  &#x3D; True</span><br><span class="line">trace_message_store  &#x3D; True</span><br><span class="line">trace_management_store  &#x3D; True</span><br><span class="line"></span><br><span class="line">hmac_keys &#x3D; 123</span><br><span class="line"></span><br><span class="line">connection_string &#x3D; mongodb:&#x2F;&#x2F;10.112.116.249:27017</span><br></pre></td></tr></table></figure><p>使用 MongoDB 作为后端，如果用 Elasticsearch 或 Jaeger 会产生错误，暂时没有找到解决方案，可能是版本不兼容。</p><img src="https://i.loli.net/2021/06/06/Gm1ycfj5qprEzBD.png" width="80%"><p>在 Gateway 上使用 Docker 部署 MongoDB ，存储追踪信息。</p><img src="https://i.loli.net/2021/06/06/x7PacO2MGholgHu.png"><h2 id="追踪服务组件"><a href="#追踪服务组件" class="headerlink" title="追踪服务组件"></a>追踪服务组件</h2><p>显式指定追踪的调用命令</p><h3 id="Keystone-1"><a href="#Keystone-1" class="headerlink" title="Keystone"></a>Keystone</h3><p>身份认证服务，列出所有用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有用户</span></span><br><span class="line">openstack user list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html fdfa1e7a-0863-470b-8ae2-169b21b0fbe5 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test1.html&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Glance-1"><a href="#Glance-1" class="headerlink" title="Glance"></a>Glance</h3><p>镜像服务，列出可用镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. demo-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出可用镜像</span></span><br><span class="line">openstack image list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html 04c4f7b5-e22f-40f7-8248-162247642cb5 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test2.html&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Nova-1"><a href="#Nova-1" class="headerlink" title="Nova"></a>Nova</h3><p>计算服务，查询实例状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. demo-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看实例</span></span><br><span class="line">openstack server list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html 8cce121c-adf1-4061-96eb-950bb4a75db8 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test3.html&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Cinder-1"><a href="#Cinder-1" class="headerlink" title="Cinder"></a>Cinder</h3><p>卷服务，查看卷状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除临时环境变量</span></span><br><span class="line"><span class="built_in">unset</span> OS_AUTH_URL OS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关权限认证</span></span><br><span class="line">. demo-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看卷</span></span><br><span class="line">openstack volume list --os-profile 123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 html 文件</span></span><br><span class="line">osprofiler trace show --html 71760b3d-df04-4fec-bc26-dfc9b909f518 --connection-string <span class="string">&quot;mongodb://10.112.116.249:27017&quot;</span> --out <span class="string">&quot;test4.html&quot;</span></span><br></pre></td></tr></table></figure><h2 id="元数据分析"><a href="#元数据分析" class="headerlink" title="元数据分析"></a>元数据分析</h2><p>trace point 可以理解为 span</p><table><thead><tr><th>字段</th><th>格式</th><th>含义</th></tr></thead><tbody><tr><td>info</td><td><code>&lt;dict&gt;</code></td><td>在调用 profiler 的 <code>start()</code> 和 <code>stop()</code> 方法时传递的用户信息，数据库语句、请求参数等</td></tr><tr><td>name</td><td>`<point_name>-(start</td><td>stop)`</td></tr><tr><td>service</td><td><code>&lt;service_name&gt;</code></td><td>public / api / osapi_compute</td></tr><tr><td>timestamp</td><td><code>&lt;timestamp&gt;</code></td><td>时间戳</td></tr><tr><td>trace_id</td><td><code>&lt;uuid&gt;</code></td><td>当前追踪点id</td></tr><tr><td>project</td><td><code>&lt;project_name&gt;</code></td><td>服务组件</td></tr><tr><td>parent_id</td><td><code>&lt;uuid&gt;</code></td><td>父级追踪点id</td></tr><tr><td>base_id</td><td><code>&lt;uuid&gt;</code></td><td>所有属于一条追踪链的追踪点都拥有相同的id</td></tr></tbody></table><h1 id="OSProfiler-源码分析"><a href="#OSProfiler-源码分析" class="headerlink" title="OSProfiler 源码分析"></a>OSProfiler 源码分析</h1><p>用 git 拉取源码 <a href="https://github.com/openstack/osprofiler">openstack/osprofiler</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">├─devstack    <span class="comment"># DevStack 脚本，安装和配置 osprofiler</span></span><br><span class="line">├─doc         <span class="comment"># 文档</span></span><br><span class="line">├─osprofiler  <span class="comment"># 主要代码</span></span><br><span class="line">│  │  exc.py          <span class="comment"># cmd 错误类</span></span><br><span class="line">│  │  initializer.py  <span class="comment"># （读取配置文件）初始化</span></span><br><span class="line">│  │  notifier.py     <span class="comment"># 通知消息</span></span><br><span class="line">│  │  opts.py         <span class="comment"># 配置选项</span></span><br><span class="line">│  │  profiler.py     <span class="comment"># osprofiler 实例，函数/类装饰器，元数据类</span></span><br><span class="line">│  │  sqlalchemy.py   <span class="comment"># 追踪数据库调用</span></span><br><span class="line">│  │  web.py          <span class="comment"># 追踪 WSGI 调用</span></span><br><span class="line">│  │  _utils.py       <span class="comment"># 工具函数</span></span><br><span class="line">│  │  __init__.py</span><br><span class="line">│  ├─cmd      <span class="comment"># cmd 接口</span></span><br><span class="line">│  │      cliutils.py   <span class="comment"># 参数装饰、绑定</span></span><br><span class="line">│  │      commands.py   <span class="comment"># 显示和保存指定跟踪（html/json/dot），列出所有跟踪</span></span><br><span class="line">│  │      shell.py      <span class="comment"># 处理命令行</span></span><br><span class="line">│  │      template.html <span class="comment"># html 模板</span></span><br><span class="line">│  │      __init__.py</span><br><span class="line">│  ├─drivers  <span class="comment"># 驱动</span></span><br><span class="line">│  │      base.py   <span class="comment"># 基类</span></span><br><span class="line">│  │      elasticsearch_driver.py</span><br><span class="line">│  │      jaeger.py</span><br><span class="line">│  │      loginsight.py</span><br><span class="line">│  │      messaging.py</span><br><span class="line">│  │      mongodb.py</span><br><span class="line">│  │      redis_driver.py</span><br><span class="line">│  │      sqlalchemy_driver.py</span><br><span class="line">│  │      __init__.py</span><br><span class="line">│  ├─hacking  <span class="comment"># 针对 osprofiler 编写的测试</span></span><br><span class="line">│  └─tests    <span class="comment"># 测试</span></span><br><span class="line">├─playbooks     <span class="comment"># Ansible 剧本</span></span><br><span class="line">├─releasenotes  <span class="comment"># 发行说明</span></span><br><span class="line">└─tools         <span class="comment"># 代码风格检查，tox 虚拟环境</span></span><br></pre></td></tr></table></figure><p><strong>_utils.py（工具函数）</strong></p><ul><li>私有模块</li><li>公有函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">text, strip=<span class="literal">True</span></span>):</span>                    <span class="comment"># 分割逗号分隔的文本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_encode</span>(<span class="params">text, encoding=<span class="string">&quot;utf-8&quot;</span></span>):</span>      <span class="comment"># 将文本转换为二进制编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_decode</span>(<span class="params">data, encoding=<span class="string">&quot;utf-8&quot;</span></span>):</span>      <span class="comment"># 将二进制编码转换为文本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_hmac</span>(<span class="params">data, hmac_key</span>):</span>              <span class="comment"># 用 key 产生 HMAC</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signed_pack</span>(<span class="params">data, hmac_key</span>):</span>                <span class="comment"># 用 key 打包和签名数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signed_unpack</span>(<span class="params">data, hmac_data, hmac_keys</span>):</span>  <span class="comment"># 解包数据并验证签名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">itersubclasses</span>(<span class="params">cls, _seen=<span class="literal">None</span></span>):</span>            <span class="comment"># 判断是否为子类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_modules_from_package</span>(<span class="params">package</span>):</span>       <span class="comment"># 从包导入模块并加入系统模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shorten_id</span>(<span class="params">span_id</span>):</span>                        <span class="comment"># UUID 转换为 64 位 ID</span></span><br></pre></td></tr></table></figure><p><strong>notifier.py（通知消息）</strong></p><ul><li>默认使用基本的驱动程序</li><li>根据参数设置驱动</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_noop_notifier</span>(<span class="params">info, context=<span class="literal">None</span></span>):</span>         <span class="comment"># 使用基本的驱动程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notify</span>(<span class="params">info</span>):</span>                               <span class="comment"># 传递信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span>                                      <span class="comment"># 返回可调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">notifier</span>):</span>                              <span class="comment"># 设置可调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">connection_string, *args, **kwargs</span>):</span> <span class="comment"># 根据参数设置驱动</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_notifier_cache</span>():</span>                     <span class="comment"># 清除缓存</span></span><br></pre></td></tr></table></figure><p><strong>profiler.py（osprofiler 实例，函数/类装饰器，元数据类）</strong></p><ul><li>函数装饰器 </li><li>类装饰器</li><li>元数据类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span>():</span>                                            <span class="comment"># 清除全局 ThreadLocal 对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ensure_no_multiple_traced</span>(<span class="params">traceable_attrs</span>):</span>        <span class="comment"># 确保不重复跟踪</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>(<span class="params">hmac_key, base_id=<span class="literal">None</span>, parent_id=<span class="literal">None</span></span>):</span>       <span class="comment"># 初始化 osprofiler 线程实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span>                                              <span class="comment"># 获取 osprofiler 实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">name, info=<span class="literal">None</span></span>):</span>                             <span class="comment"># 启动 osprofiler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">info=<span class="literal">None</span></span>):</span>                                    <span class="comment"># 停止 osprofiler</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数追踪装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace</span>(<span class="params">name, info=<span class="literal">None</span>, hide_args=<span class="literal">False</span>, hide_result=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">          allow_multiple_trace=<span class="literal">True</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类追踪装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace_cls</span>(<span class="params">name, info=<span class="literal">None</span>, hide_args=<span class="literal">False</span>, hide_result=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              trace_private=<span class="literal">False</span>, allow_multiple_trace=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              trace_class_methods=<span class="literal">False</span>, trace_static_methods=<span class="literal">False</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TracedMeta</span>(<span class="params"><span class="built_in">type</span></span>):</span>                                 <span class="comment"># 元数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trace</span>(<span class="params"><span class="built_in">object</span></span>):</span>                                    <span class="comment"># 封装 osprofiler 线程实例，使用 with 语句调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Profiler</span>(<span class="params"><span class="built_in">object</span></span>):</span>                                <span class="comment"># 私有类（测试用）</span></span><br></pre></td></tr></table></figure><p><strong>sqlalchemy.py（追踪数据库调用）</strong></p><ul><li>监听调用（调用前、调用后、调用错误）</li><li>包装数据库会话连接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_tracing</span>(<span class="params">sqlalchemy, engine, name, hide_result=<span class="literal">True</span></span>):</span>    <span class="comment"># 追踪数据库调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包装会话</span></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap_session</span>(<span class="params">sqlalchemy, sess</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_before_cursor_execute</span>(<span class="params">name</span>):</span>                               <span class="comment"># 传递语句及参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_after_cursor_execute</span>(<span class="params">hide_result=<span class="literal">True</span></span>):</span>                    <span class="comment"># 传递执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_error</span>(<span class="params">exception_context</span>):</span>                            <span class="comment"># 传递错误信息</span></span><br></pre></td></tr></table></figure><p><strong>web.py（追踪 WSGI 调用）</strong></p><ul><li>签名和打包请求头</li><li>WSGI 中间件类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace_id_headers</span>():</span>     <span class="comment"># 签名请求头并添加到字典</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WsgiMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span>   <span class="comment"># WSGI 中间件类</span></span><br></pre></td></tr></table></figure><p><strong>initializer.py（读取配置文件初始化）</strong></p><ul><li>读取配置文件</li><li>设置通知驱动</li><li>启用中间件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务配置文件，请求上下文，项目名称，服务名称，主机名称/IP，通知参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_from_conf</span>(<span class="params">conf, context, project, service, host, **kwargs</span>):</span></span><br></pre></td></tr></table></figure><p><strong>opts.py（配置选项）</strong></p><ul><li>设置默认配置 </li><li>判断配置选项</li><li>列出配置选项</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认配置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_defaults</span>(<span class="params">conf, enabled=<span class="literal">None</span>, trace_sqlalchemy=<span class="literal">None</span>, hmac_keys=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 connection_string=<span class="literal">None</span>, es_doc_type=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 es_scroll_time=<span class="literal">None</span>, es_scroll_size=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 socket_timeout=<span class="literal">None</span>, sentinel_service_name=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_trace_enabled</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_db_trace_enabled</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enable_web_trace</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disable_web_trace</span>(<span class="params">conf=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_opts</span>():</span></span><br></pre></td></tr></table></figure><h1 id="Keystone-启用-OSProfiler"><a href="#Keystone-启用-OSProfiler" class="headerlink" title="Keystone 启用 OSProfiler"></a>Keystone 启用 OSProfiler</h1><ol><li>数据库会话包装</li><li>flask WSGI 中间件包装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">common/profiler.py    <span class="comment"># 读取配置文件，设置通知驱动，启用中间件</span></span><br><span class="line">common/sql/core.py    <span class="comment"># 包装数据库会话</span></span><br><span class="line">conf/__init__.py      <span class="comment"># 默认配置</span></span><br><span class="line">server/flask/core.py  <span class="comment"># 初始化，调用 common/profiler.py</span></span><br><span class="line">setup.cfg             <span class="comment"># 设置中间件 WsgiMiddleware</span></span><br></pre></td></tr></table></figure><p>common/sql/core.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 osprofiler 模块包装会话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_wrap_session</span>(<span class="params">sess</span>):</span></span><br><span class="line">    <span class="keyword">if</span> CONF.profiler.enabled <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line">        sess = osprofiler.sqlalchemy.wrap_session(sql, sess)</span><br><span class="line">    <span class="keyword">return</span> sess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_read</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        reader = enginefacade.reader</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        reader = _get_main_context_manager().reader</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(reader.using(_get_context()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_for_write</span>():</span></span><br><span class="line">    <span class="keyword">if</span> _TESTING_USE_GLOBAL_CONTEXT_MANAGER:</span><br><span class="line">        writer = enginefacade.writer</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        writer = _get_main_context_manager().writer</span><br><span class="line">    <span class="keyword">return</span> _wrap_session(writer.using(_get_context()))</span><br></pre></td></tr></table></figure><p>setup.cfg 设置 server 中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keystone.server_middleware &#x3D;</span><br><span class="line">    cors &#x3D; oslo_middleware:CORS</span><br><span class="line">    sizelimit &#x3D; oslo_middleware:RequestBodySizeLimiter</span><br><span class="line">    http_proxy_to_wsgi &#x3D; oslo_middleware:HTTPProxyToWSGI</span><br><span class="line">    osprofiler &#x3D; osprofiler.web:WsgiMiddleware          &lt;--- 使用 osprofiler 的 WSGI 中间件</span><br><span class="line">    request_id &#x3D; oslo_middleware:RequestId</span><br><span class="line">    debug &#x3D; oslo_middleware:Debug</span><br></pre></td></tr></table></figure><h1 id="Nova-启用-OSProfiler"><a href="#Nova-启用-OSProfiler" class="headerlink" title="Nova 启用 OSProfiler"></a>Nova 启用 OSProfiler</h1><ol><li>追踪数据库调用</li><li>类追踪装饰器 @profiler.trace_cls</li><li>公有方法装饰器</li></ol><ul><li>组件之间 REST API 并遵循 AMQP 协议</li><li>组件内部 RPC</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config.py             <span class="comment"># 根据配置文件设置 osprofiler</span></span><br><span class="line">service.py            <span class="comment"># 根据配置文件设置驱动，启用 WSGI 中间件</span></span><br><span class="line">profiler.py           <span class="comment"># 重写 WSGI 中间件类、类追踪装饰器x</span></span><br><span class="line">manager.py            <span class="comment"># 公有方法装饰器（抽象基类）</span></span><br><span class="line">rpc.py                <span class="comment"># 追踪上下文序列化/反序列化</span></span><br><span class="line">utils.py              <span class="comment"># spawn/spawn_n 装饰器，传递上下文</span></span><br><span class="line">db/sqlalchemy/api.py  <span class="comment"># 追踪数据库调用</span></span><br></pre></td></tr></table></figure><p>db/sqlalchemy/api.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追踪数据库调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">conf</span>):</span></span><br><span class="line">    main_context_manager.configure(**_get_db_conf(conf.database))</span><br><span class="line">    api_context_manager.configure(**_get_db_conf(conf.api_database))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> profiler_sqlalchemy <span class="keyword">and</span> CONF.profiler.enabled \</span><br><span class="line">            <span class="keyword">and</span> CONF.profiler.trace_sqlalchemy:</span><br><span class="line"></span><br><span class="line">        main_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br><span class="line">        api_context_manager.append_on_engine_create(</span><br><span class="line">            <span class="keyword">lambda</span> eng: profiler_sqlalchemy.add_tracing(sa, eng, <span class="string">&quot;db&quot;</span>))     <span class="comment"># 添加追踪</span></span><br></pre></td></tr></table></figure><p>使用 osprofiler 类装饰器（compute/api.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@profiler.trace_cls(<span class="params"><span class="string">&quot;compute_api&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">API</span>(<span class="params">base.Base</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;API for interacting with the compute manager.&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>公有方法装饰器（抽象类），nova 组件内部的模块都继承 <code>Manager</code> 类，支持追踪</p><ul><li><code>ComputeManager</code>、<code>ConductorManager</code>、<code>SchedulerManager</code></li></ul><img src="https://i.loli.net/2021/06/06/RDOdQhbYyL1oPvm.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 公有方法装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerMeta</span>(<span class="params">profiler.get_traced_meta(<span class="params"></span>), <span class="built_in">type</span>(<span class="params">PeriodicTasks</span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Metaclass to trace all children of a specific class.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This metaclass wraps every public method (not starting with _ or __)</span></span><br><span class="line"><span class="string">    of the class using it. All children classes of the class using ManagerMeta</span></span><br><span class="line"><span class="string">    will be profiled as well.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Adding this metaclass requires that the __trace_args__ attribute be added</span></span><br><span class="line"><span class="string">    to the class we want to modify. That attribute is a dictionary</span></span><br><span class="line"><span class="string">    with one mandatory key: &quot;name&quot;. &quot;name&quot; defines the name</span></span><br><span class="line"><span class="string">    of the action to be traced (for example, wsgi, rpc, db).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The OSprofiler-based tracing, although, will only happen if profiler</span></span><br><span class="line"><span class="string">    instance was initiated somewhere before in the thread, that can only happen</span></span><br><span class="line"><span class="string">    if profiling is enabled in nova.conf and the API call to Nova API contained</span></span><br><span class="line"><span class="string">    specific headers.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>(<span class="params">base.Base, PeriodicTasks, metaclass=ManagerMeta</span>):</span></span><br><span class="line">    __trace_args__ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;rpc&quot;</span>&#125;    <span class="comment"># 必须</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>线程间传递上下文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追踪请求上下文</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilerRequestContextSerializer</span>(<span class="params">RequestContextSerializer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        _context = <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                         self).serialize_context(context)</span><br><span class="line"></span><br><span class="line">        prof = profiler.get()       <span class="comment"># 获取 osprofiler 实例</span></span><br><span class="line">        <span class="keyword">if</span> prof:</span><br><span class="line">            <span class="comment"># FIXME(DinaBelova): we&#x27;ll add profiler.get_info() method</span></span><br><span class="line">            <span class="comment"># to extract this info -&gt; we&#x27;ll need to update these lines</span></span><br><span class="line">            trace_info = &#123;</span><br><span class="line">                <span class="string">&quot;hmac_key&quot;</span>: prof.hmac_key,</span><br><span class="line">                <span class="string">&quot;base_id&quot;</span>: prof.get_base_id(),</span><br><span class="line">                <span class="string">&quot;parent_id&quot;</span>: prof.get_id()</span><br><span class="line">            &#125;</span><br><span class="line">            _context.update(&#123;<span class="string">&quot;trace_info&quot;</span>: trace_info&#125;) <span class="comment"># 添加追踪信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize_context</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        trace_info = context.pop(<span class="string">&quot;trace_info&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_info:</span><br><span class="line">            profiler.init(**trace_info)     <span class="comment"># 初始化 osprofiler 实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(ProfilerRequestContextSerializer,</span><br><span class="line">                     self).deserialize_context(context)</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://learnku.com/articles/31681">使用 OSProfiler 对 OpenStack 进行性能测量</a></li><li><a href="https://docs.openstack.org/zaqar/latest/admin/OSprofiler.html">OSprofiler Guide</a></li><li><a href="https://docs.openstack.org/ironic/pike/contributor/osprofiler-support.html">About OSProfiler</a></li><li><a href="https://github.com/openstack/osprofiler">openstack/osprofiler</a></li><li><a href="https://openstack.nimeyo.com/117882/openstack-dev-tracing-all-the-places">[openstack-dev] Tracing (all the places)</a></li></ul>]]></content>
    
    
    <summary type="html">结合 Keystone、Glance（Rockey）等组件测试</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack Nova 架构及源码分析</title>
    <link href="https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/"/>
    <id>https://jckling.github.io/2021/05/23/OpenStack/OpenStack%20Nova/</id>
    <published>2021-05-23T08:40:09.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><ul><li>nova 和其他组件之间的交互使用 HTTP 请求</li><li>内部组件之间使用 <a href="https://github.com/openstack/oslo.messaging">oslo_messaging</a> 库实现 RPC 调用，这里还涉及消息队列 RabbitMQ ，遵循 AMQP 协议</li><li>大部分 nova 组件都可以运行在多个服务器上，然后使用一个管理器监听 RPC 消息</li><li>而 nova-compute 是运行在计算主机上的单进程，用于管理计算资源</li><li>nova 内部组件共享本地数据库，通过对象层访问，确保兼容性和安全性<ul><li>nova-compute 访问数据库由 nova-conductor 代理</li></ul></li></ul><img src="https://i.loli.net/2021/06/06/K51XMdUyPrRmupT.png"><p>当用户发起一个新的请求时，该请求会先在 nova-api 中处理。nova-api 会对请求进行一系列检查，包括请求是否合法，配额是否足够等；当检查用过后，nova-api 就会为该请求分配一个唯一的虚拟机 ID ，并在数据库中新建对应的项来记录虚拟机的状态；然后，nova-api 会将请求发送给 nova-conductor 处理。</p><p>nova-conductor 主要管理服务之间的通信并进行任务处理。它在接收到请求之后，会为 nova-scheduler 创建一个 RequestSpec 对象用来包装与调度相关的所有请求信息，然后调用 nova-scheduler 服务的 select_destination 接口。</p><p>nova-scheduler 通过接收到的 RequestSpec 对象，首先将 RequestSpec  对象转换成 ResourceRequest 对象，并将该对象发送给 Placement 进行一次预筛选，然后会根据数据库中最新的系统状态做出调度决定，并告诉 nova-conductor 把该请求调度到合适的计算节点上。</p><p>nova-conductor 在得知调度决定后，会把请求发送给对应的 nova-compute 服务。</p><p>每个 nova-compute 服务都有独立的资源监视器（Resource Tracker）用来监视本地主机的资源使用情况。当计算节点接收到请求时，资源监视器能够检查主机是否有足够的资源。</p><ul><li>如果对应的资源足够，nova-compute 就会允许在当前主机中启动所要求的虚拟机，并在数据库中更新虚拟机状态，同时将最新的主机资源情况更新到数据库</li><li>如果当前主机不符合请求的资源要求，nova-compute 会拒绝启动虚拟机，并将请求重新发给 nova-conductor 服务，重试整个调度过程</li></ul><img src="https://i.loli.net/2021/06/06/DizGwcpYRQhWKqS.jpg"><h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><ol><li><p>nova-api</p><p>接受和响应用户的计算 API 调用</p></li><li><p>nova-api-metadata</p><p> 接受来自实例的元数据请求</p><p> <a href="https://docs.openstack.org/nova/latest/admin/metadata-service.html">Metadata service</a></p></li><li><p>nova-compute</p><p> 通过 hypervisor API 创建和终止虚拟机实例的守护进程。例如 KVM/QEMU 的 libvirt、VMware 的 VMwareAPI 。</p><p> 运行在它所管理的 hypervisor 机器上，管理与虚拟机管理程序和虚拟机的通信。</p></li><li><p>nova-scheduler</p><p> 从消息队列中获取虚拟机实例请求，并决定在哪个服务器上运行。</p></li><li><p>nova-conductor</p><p> 处理需要协调的请求（构建/调整）、充当数据库代理或处理对象转换。用于连接 nova-api、nova-scheduler、nova-compute 服务。</p></li><li><p>nova-novncproxy</p><p> 协调 nova-compute 服务和数据库之间的交互。避免 nova-compute 直接访问数据库，为了提供更好的 API 兼容性。建议不要部署在 nova-compute 服务所在的节点上。</p></li><li><p>nova-spicehtml5proxy</p><p> 提供通过 SPICE 连接访问运行实例的代理，支持基于浏览器的 HTML5 客户端。</p></li><li><p>The queue</p><p> 在守护进程之间传递消息的中央消息队列，通常使用 RabbitMQ 。</p></li><li><p>SQL database</p><p> 存储云基础设施的大多数构建时和运行时状态，包括：可用的实例类型、在使用的实例、可用的网络、项目。</p></li></ol><h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>消息代理（RabbitMQ AMQP broker）允许 nova 内部组件以低耦合的方式进行通信，建立在发布/订阅（publish/subscribe）模式上</p><ul><li>解耦客户端和服务端</li><li>同步客户端和服务端</li><li>平衡远程调用</li></ul><p>nova 使用 AMQP 中的直连（direct）、扇型（fanout）、主题（topic）交换；</p><p>nova 使用适配器类（adapter）将消息封装和解封从而调用函数，实现了两种 RPC 调用</p><ul><li><code>rpc.call</code>：请求 + 响应，api 作为消费者（consumer）</li><li><code>rpc.cast</code>：单向，api 作为发布者（publisher）</li></ul><p>每个 nova 服务在初始化时创建两个队列</p><ul><li>接受路由键 <code>NODE-TYPE.NODE-ID</code>（例如，<code>compute.hostname</code>）：nova-api 需要重定向到特定节点</li><li>接受路由键 <code>NODE-TYPE</code>（例如，<code>compute</code>）：</li></ul><img src="https://i.loli.net/2021/06/06/ZvNb61tfPTlF9or.png"><p>每个 nova 内部组件都连接到消息代理，根据不同的作用，把消息队列作为：</p><ul><li>调用者（Invoker）：nova-api、nova-scheduler；通过 <code>rpc.call</code> 和 <code>rpc.cast</code> 向消息队列发送消息</li><li>工作者（Worker）：nova-compute；从消息队列接收消息，根据 <code>rpc.call</code> 进行响应</li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p><strong>主题发布者（Topic Publisher）</strong></p><p>执行 <code>rpc.call</code> 或 <code>rpc.cast</code> 操作将实例化一个主题发布者，用于将消息发送到消息队列。每个发布者总是连接到相同的主题交换机（topic-based exchange）；生命周期仅限于消息传递。</p><p><strong>直连消费者（Direct Consumer）</strong></p><p>执行 <code>rpc.call</code> 操作将实例化一个直连消费者，用于从消息队列接收响应消息。每个消费者连接到唯一的直连交换机（direct-based exchange）；生命周期仅限于消息传递。</p><p><strong>主题消费者（Topic Consumer）</strong></p><p>当工作者被实例化后将实例化一个主题消费者，并存在于工作者的整个生命周期；主题消费者用于从消息队列接收消息，并调用工作者定义的操作。主题消费者通过共享/排他队列（shared/exclusive queue）连接到相同的主体交换机。每个工作者都有两个主题消费者，一个处理 <code>rpc.cast</code>  ，连接到交换键是 <code>topic</code> 的共享队列；另一个处理 <code>rpc.call</code> ，连接到交换键是 <code>topic.host</code> 的独立队列。</p><p><strong>直连发布者（Direct Publisher）</strong></p><p>执行 <code>rpc.call</code> 操作将实例化一个直连发布者，用于返回请求/响应操作所需的消息，连接到直连交换机。</p><p><strong>主题交换机（Topic Exchange）</strong></p><p>存在于虚拟机上下文中的路由表；类型（主题/直连）决定了路由策略；对于 nova 中的每个主题，消息代理节点只有一个主题交换机。</p><p><strong>直连交换机（Direct Exchange）</strong></p><p>在 <code>rpc.call</code> 操作中创建的路由表，消息代理节点的生命周期中有许多该实例，对应每个 <code>rpc.call</code> 调用。</p><p><strong>队列元素（Queue Element）</strong></p><p>消息桶，消息一直保存在队列中，直到消费者（主题/直连）连接到队列获取消息。队列可以是共享的也可以是独立的；路由键是 <code>topic</code> 的队列在相同类型的工作者中共享。</p><h2 id="rpc-call"><a href="#rpc-call" class="headerlink" title="rpc.call"></a>rpc.call</h2><ol><li><p>实例化主题发布者，将请求发送到消息队列；在发布操作之前，实例化直连消费者等待响应信息</p></li><li><p>一旦消息被交换器分派（dispatch），它就会被路由键（例如，<code>topic.host</code>）指定的主题消费者获取，并传递给负责该任务的工作者</p></li><li><p>任务完成后，将分配一个直连发布者将响应消息发送到消息队列</p></li><li><p>一旦消息被交换器分派，它就会被路由键（例如，<code>msg_id</code>）指定的直连消费者获取，并传递给调用者</p></li></ol><img src="https://i.loli.net/2021/06/06/ApK1vCySXhQE3mW.png"><h2 id="rpc-cast"><a href="#rpc-cast" class="headerlink" title="rpc.cast"></a>rpc.cast</h2><ol><li><p> 实例化主题发布者，将请求发送到消息队列</p></li><li><p> 一旦消息被交换器分派（dispatch），它就会被路由键（例如，<code>topic</code>）指定的主题消费者获取，并传递给负责该任务的工作者</p></li></ol><img src="https://i.loli.net/2021/06/06/3nUaoMlKdHg9BQv.png"><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>从 github 下载 Victoria 版本的 Nova 源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>nova/ 文件夹下的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">accelerator/    <span class="comment"># Cyborg 加速器</span></span><br><span class="line">api/            <span class="comment"># Nova API 服务</span></span><br><span class="line">cmd/            <span class="comment"># 各个 Nova 服务的入口程序</span></span><br><span class="line">compute/        <span class="comment"># Nova Compute 服务</span></span><br><span class="line">conductor/      <span class="comment"># Nova Conductor 服务</span></span><br><span class="line">conf/           <span class="comment"># 所有的配置选项</span></span><br><span class="line">console/        <span class="comment"># nova-console 服务</span></span><br><span class="line">db/             <span class="comment"># 封装数据库操作</span></span><br><span class="line">hacking/        <span class="comment"># 编码规范检查</span></span><br><span class="line">image/          <span class="comment"># 封装镜像操作，Glance 接口抽象</span></span><br><span class="line">keymgr/         <span class="comment"># 密钥管理器实现</span></span><br><span class="line">locale/         <span class="comment"># 国际化相关文件</span></span><br><span class="line">network/        <span class="comment"># nova-network 服务</span></span><br><span class="line">notifications/  <span class="comment"># 通知相关功能</span></span><br><span class="line">objects/        <span class="comment"># 封装实体对象的 CURD 操作</span></span><br><span class="line">pci/            <span class="comment"># PCI/SR-IOV 支持</span></span><br><span class="line">policies/       <span class="comment"># 所有 Policy 的默认规则</span></span><br><span class="line">privsep/        <span class="comment"># oslo_privsep 相关</span></span><br><span class="line">scheduler/      <span class="comment"># Nova Scheduler 服务</span></span><br><span class="line">servicegroup/   <span class="comment"># 成员服务（membership），服务组</span></span><br><span class="line">storage/        <span class="comment"># Ceph 存储支持</span></span><br><span class="line">tests/          <span class="comment"># 单元测试</span></span><br><span class="line">virt/           <span class="comment"># 支持的 hypervisor 驱动</span></span><br><span class="line">volume/         <span class="comment"># 封装卷访问接口，Cinder 接口抽象</span></span><br></pre></td></tr></table></figure><p>nova/ 文件夹下的 python 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__init__.py</span><br><span class="line">availability_zones.py   <span class="comment"># 区域设置的工具函数</span></span><br><span class="line">baserpc.py              <span class="comment"># 基础 RPC 客户端/服务端实现</span></span><br><span class="line">block_device.py         <span class="comment"># 块设备映射</span></span><br><span class="line">cache_utils.py          <span class="comment"># oslo_cache 封装</span></span><br><span class="line">config.py               <span class="comment"># 解析命令行参数</span></span><br><span class="line">context.py              <span class="comment"># 贯穿 Nova 的所有请求的上下文</span></span><br><span class="line">crypto.py               <span class="comment"># 包装标准加密数据元素</span></span><br><span class="line">debugger.py             <span class="comment"># pydev 调试</span></span><br><span class="line">exception.py            <span class="comment"># 基础异常类</span></span><br><span class="line">exception_wrapper.py    <span class="comment"># 封装异常类</span></span><br><span class="line">filters.py              <span class="comment"># 基础过滤器</span></span><br><span class="line">i18n.py                 <span class="comment"># 集成 oslo_i18n</span></span><br><span class="line">loadables.py            <span class="comment"># 可加载类</span></span><br><span class="line">manager.py              <span class="comment"># 基础 Manager 类</span></span><br><span class="line">middleware.py           <span class="comment"># 更新 oslo_middleware 的默认配置选项</span></span><br><span class="line">monkey_patch.py         <span class="comment"># eventlet 猴子补丁</span></span><br><span class="line">policy.py               <span class="comment"># 策略引擎</span></span><br><span class="line">profiler.py             <span class="comment"># 调用 OSProfiler</span></span><br><span class="line">quota.py                <span class="comment"># 每个项目的资源配额</span></span><br><span class="line">rpc.py                  <span class="comment"># RPC 操作相关的工具函数</span></span><br><span class="line">safe_utils.py           <span class="comment"># 不会导致循环导入的工具函数</span></span><br><span class="line">service.py              <span class="comment"># 通用节点基类，用于在主机上运行的所有工作者</span></span><br><span class="line">service_auth.py         <span class="comment"># 身份认证插件</span></span><br><span class="line">test.py                 <span class="comment"># 单元测试基础类</span></span><br><span class="line">utils.py                <span class="comment"># 工具函数</span></span><br><span class="line">version.py              <span class="comment"># 版本号管理</span></span><br><span class="line">weights.py              <span class="comment"># 权重插件</span></span><br><span class="line">wsgi.py                 <span class="comment"># 管理 WSGI 应用的服务器类</span></span><br></pre></td></tr></table></figure><p>setup.cfg 配置文件，<code>[entry_points]</code> 小节指定了 nova 各个组件入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">console_scripts &#x3D;</span><br><span class="line">    nova-api &#x3D; nova.cmd.api:main</span><br><span class="line">    nova-api-metadata &#x3D; nova.cmd.api_metadata:main</span><br><span class="line">    nova-api-os-compute &#x3D; nova.cmd.api_os_compute:main</span><br><span class="line">    nova-compute &#x3D; nova.cmd.compute:main</span><br><span class="line">    nova-conductor &#x3D; nova.cmd.conductor:main</span><br><span class="line">    nova-manage &#x3D; nova.cmd.manage:main</span><br><span class="line">    nova-novncproxy &#x3D; nova.cmd.novncproxy:main</span><br><span class="line">    nova-policy &#x3D; nova.cmd.policy:main</span><br><span class="line">    nova-rootwrap &#x3D; oslo_rootwrap.cmd:main</span><br><span class="line">    nova-rootwrap-daemon &#x3D; oslo_rootwrap.cmd:daemon</span><br><span class="line">    nova-scheduler &#x3D; nova.cmd.scheduler:main</span><br><span class="line">    nova-serialproxy &#x3D; nova.cmd.serialproxy:main</span><br><span class="line">    nova-spicehtml5proxy &#x3D; nova.cmd.spicehtml5proxy:main</span><br><span class="line">    nova-status &#x3D; nova.cmd.status:main</span><br><span class="line">wsgi_scripts &#x3D;</span><br><span class="line">    nova-api-wsgi &#x3D; nova.api.openstack.compute.wsgi:init_application</span><br><span class="line">    nova-metadata-wsgi &#x3D; nova.api.metadata.wsgi:init_application</span><br></pre></td></tr></table></figure><h2 id="nova-api"><a href="#nova-api" class="headerlink" title="nova-api"></a>nova-api</h2><p>nova-api 对外提供 RESTful API，没有对内的 RPC 。</p><p>nova/api/ 目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__init__.py</span><br><span class="line">auth.py             <span class="comment"># 身份认证中间件</span></span><br><span class="line">compute_req_id.py   <span class="comment"># x-compute-request-id 中间件（oslo_middleware）</span></span><br><span class="line">metadata/           <span class="comment"># Metadata API</span></span><br><span class="line">openstack/          <span class="comment"># Nova v2.1 API</span></span><br><span class="line">validation/         <span class="comment"># 请求体验证</span></span><br><span class="line">wsgi.py             <span class="comment"># WSGI 原语（请求、应用、中间件、路由、加载器）</span></span><br></pre></td></tr></table></figure><p>openstack 目录中包含 WSGI 基础架构的代码，一些 WSGI 中间件，以及如何解析请求与分发请求的核心代码。</p><p>nova/api/openstack/compute/ 包含 Controller 实现，Resource 对象将 API 映射到相应的 Controller 方法上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__init__.py</span><br><span class="line">api_version_request.py  <span class="comment"># 版本验证</span></span><br><span class="line">auth.py                 <span class="comment"># noauth 中间件</span></span><br><span class="line">common.py               <span class="comment"># 信息查询的工具函数</span></span><br><span class="line">compute/                <span class="comment"># 每个 API 的入口点</span></span><br><span class="line">identity.py             <span class="comment"># 验证项目是否存在</span></span><br><span class="line">requestlog.py           <span class="comment"># 请求日志中间件</span></span><br><span class="line">urlmap.py               <span class="comment"># url 映射</span></span><br><span class="line">versioned_method.py     <span class="comment"># 版本信息</span></span><br><span class="line">wsgi.py                 <span class="comment"># WSGI 相关抽象类</span></span><br><span class="line">wsgi_app.py             <span class="comment"># WSGI 应用程序初始化方法</span></span><br></pre></td></tr></table></figure><h3 id="API-请求路由"><a href="#API-请求路由" class="headerlink" title="API 请求路由"></a>API 请求路由</h3><p>nova-api 读取 etc/nova/api-paste.ini 并加载 WSGI 程序，最终 API 入口点都位于 nova.api.openstack.compute 中</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:osapi_compute]</span></span><br><span class="line"><span class="attr">use</span> = call:nova.api.openstack.urlmap:urlmap_factory</span><br><span class="line">/: oscomputeversions                # version API</span><br><span class="line">/v2: oscomputeversion_legacy_v2     # v2 API</span><br><span class="line">/v2.1: oscomputeversion_v2          # v2.1 API</span><br><span class="line"><span class="comment"># v21 is an exactly feature match for v2, except it has more stringent</span></span><br><span class="line"><span class="comment"># input validation on the wsgi surface (prevents fuzzing early on the</span></span><br><span class="line"><span class="comment"># API). It also provides new features via API microversions which are</span></span><br><span class="line"><span class="comment"># opt into for clients. Unaware clients will receive the same frozen</span></span><br><span class="line"><span class="comment"># v2 API feature set, but with some relaxed validation</span></span><br><span class="line">/v2/+: openstack_compute_api_v21_legacy_v2_compatible</span><br><span class="line">/v2.1/+: openstack_compute_api_v21</span><br><span class="line"></span><br><span class="line"><span class="section">[composite:openstack_compute_api_v21]</span></span><br><span class="line"><span class="attr">use</span> = call:nova.api.auth:pipeline_factory_v21       <span class="comment"># 加载中间件</span></span><br><span class="line"><span class="attr">keystone</span> = cors http_proxy_to_wsgi compute_req_id faultwrap request_log sizelimit osprofiler bees_profiler authtoken keystonecontext osapi_compute_app_v21</span><br><span class="line"><span class="comment"># DEPRECATED: The [api]auth_strategy conf option is deprecated and will be</span></span><br><span class="line"><span class="comment"># removed in a subsequent release, whereupon this pipeline will be unreachable.</span></span><br><span class="line"><span class="attr">noauth2</span> = cors http_proxy_to_wsgi compute_req_id faultwrap request_log sizelimit osprofiler bees_profiler noauth2 osapi_compute_app_v21</span><br><span class="line"></span><br><span class="line"><span class="section">[app:osapi_compute_app_v21]</span></span><br><span class="line"><span class="attr">paste.app_factory</span> = nova.api.openstack.compute:APIRouterV21.factory  <span class="comment"># 入口</span></span><br></pre></td></tr></table></figure><p>nova/api/openstack/compute/routes.py 中的 APIRouterV21 主要用来完成路由规则的创建，其中 ROUTE_LIST 保存了 URL 与 Controller 之间的映射关系。</p><p>APIRouterV21 基于 ROUTE_LIST，使用 Routes 模块作为 URL 映射的工具，将各个模块所实现的 API 对应的 URL 注册到 mapper 中，并把每个资源都封装成 nova.api.openstack.wsgi.Resource 对象，当解析 URL 请求时，可以通过 URL 映射找到 API 对应的 Resource 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Router 类对 WSGI routes 模块进行了简单的封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIRouterV21</span>(<span class="params">base_wsgi.Router</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Routes requests on the OpenStack API to the appropriate controller</span></span><br><span class="line"><span class="string">    and method. The URL mapping based on the plain list `ROUTE_LIST` is built</span></span><br><span class="line"><span class="string">    at here.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, custom_routes=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;:param custom_routes: the additional routes can be added by this</span></span><br><span class="line"><span class="string">               parameter. This parameter is used to test on some fake routes</span></span><br><span class="line"><span class="string">               primarily.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(APIRouterV21, self).__init__(nova.api.openstack.ProjectMapper())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> custom_routes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            custom_routes = <span class="built_in">tuple</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> path, methods <span class="keyword">in</span> ROUTE_LIST + custom_routes:</span><br><span class="line">            <span class="comment"># NOTE(alex_xu): The variable &#x27;methods&#x27; is a dict in normal, since</span></span><br><span class="line">            <span class="comment"># the dict includes all the methods supported in the path. But</span></span><br><span class="line">            <span class="comment"># if the variable &#x27;method&#x27; is a string, it means a redirection.</span></span><br><span class="line">            <span class="comment"># For example, the request to the &#x27;&#x27; will be redirect to the &#x27;/&#x27; in</span></span><br><span class="line">            <span class="comment"># the Nova API. To indicate that, using the target path instead of</span></span><br><span class="line">            <span class="comment"># a dict. The route entry just writes as &quot;(&#x27;&#x27;, &#x27;/)&quot;.</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(methods, six.string_types):</span><br><span class="line">                self.<span class="built_in">map</span>.redirect(path, methods)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> method, controller_info <span class="keyword">in</span> methods.items():</span><br><span class="line">                <span class="comment"># TODO(alex_xu): In the end, I want to create single controller</span></span><br><span class="line">                <span class="comment"># instance instead of create controller instance for each</span></span><br><span class="line">                <span class="comment"># route.</span></span><br><span class="line">                controller = controller_info[<span class="number">0</span>]()</span><br><span class="line">                action = controller_info[<span class="number">1</span>]</span><br><span class="line">                self.<span class="built_in">map</span>.create_route(path, method, controller, action)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span>(<span class="params">cls, global_config, **local_config</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Simple paste factory, :class:`nova.wsgi.Router` doesn&#x27;t have one.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cls()</span><br></pre></td></tr></table></figure><p>nova/api/wsgi.py 解析 URL 映射，通过 _dispatch 回调，调用 Resource 对象的 __call__ 方法，最终通过请求调用 API 对应的模块中的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;WSGI middleware that maps incoming requests to WSGI apps.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, mapper</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Create a router for the given routes.Mapper.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Each route in `mapper` must specify a &#x27;controller&#x27;, which is a</span></span><br><span class="line"><span class="string">        WSGI app to call.  You&#x27;ll probably want to specify an &#x27;action&#x27; as</span></span><br><span class="line"><span class="string">        well and have your controller be an object that can route</span></span><br><span class="line"><span class="string">        the request to the action-specific method.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Examples:</span></span><br><span class="line"><span class="string">          mapper = routes.Mapper()</span></span><br><span class="line"><span class="string">          sc = ServerController()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          # Explicit mapping of one route to a controller+action</span></span><br><span class="line"><span class="string">          mapper.connect(None, &#x27;/svrlist&#x27;, controller=sc, action=&#x27;list&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          # Actions are all implicitly defined</span></span><br><span class="line"><span class="string">          mapper.resource(&#x27;server&#x27;, &#x27;servers&#x27;, controller=sc)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          # Pointing to an arbitrary WSGI app.  You can specify the</span></span><br><span class="line"><span class="string">          # &#123;path_info:.*&#125; parameter so the target app can be handed just that</span></span><br><span class="line"><span class="string">          # section of the URL.</span></span><br><span class="line"><span class="string">          mapper.connect(None, &#x27;/v1.0/&#123;path_info:.*&#125;&#x27;, controller=BlogApp())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.<span class="built_in">map</span> = mapper</span><br><span class="line">        <span class="comment"># 使用 routes 模块关联 mapper 和 _dispatch</span></span><br><span class="line">        <span class="comment"># routes.middleware.RoutesMiddleware 设置 environ 信息</span></span><br><span class="line">        self._router = routes.middleware.RoutesMiddleware(self._dispatch,</span><br><span class="line">                                                          self.<span class="built_in">map</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @webob.dec.wsgify(<span class="params">RequestClass=Request</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, req</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Route the incoming request to a controller based on self.map.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If no match, return a 404.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 根据 mapper 将请求路由到 WSGI 应用（资源）</span></span><br><span class="line">        <span class="comment"># 每个资源会在 __call__ 方法中根据 HTTP 请求的 URL 路由到对应 Controller 上的方法（Action）</span></span><br><span class="line">        <span class="keyword">return</span> self._router</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line"><span class="meta">    @webob.dec.wsgify(<span class="params">RequestClass=Request</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_dispatch</span>(<span class="params">req</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Dispatch the request to the appropriate controller.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Called by self._router after matching the incoming request to a route</span></span><br><span class="line"><span class="string">        and putting the information into req.environ.  Either returns 404</span></span><br><span class="line"><span class="string">        or the routed WSGI app&#x27;s response.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 根据 HTTP 请求的 environ 信息找到 URL 对应的 Controller</span></span><br><span class="line">        match = req.environ[<span class="string">&#x27;wsgiorg.routing_args&#x27;</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match:</span><br><span class="line">            <span class="keyword">return</span> webob.exc.HTTPNotFound()</span><br><span class="line">        app = match[<span class="string">&#x27;controller&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><h3 id="API-实现"><a href="#API-实现" class="headerlink" title="API 实现"></a>API 实现</h3><p>nova/api/openstack/compute/ 目录包含每个 API 对应的 Controller 实现，Resource 对象将请求的 API 映射到相应的 Controller 方法上。</p><p>以 keypairs.py （密钥对管理扩展）为例，公共方法包含 create、delete、show、index，多个实现对应不同的 Microversion（使用 <code>@wsgi.Controller.api_version</code> 装饰器）</p><ul><li><code>@wsgi.expected_errors</code>：API 允许的错误返回码</li><li><code>@validation.query_schema</code>：请求对应的 json schema</li><li><code>@wsgi.response</code>：API 请求正常返回码</li><li><code>@wsgi.action</code>：注册 action</li></ul><p>Microversion 用于实现兼容性。</p><p>nova/api/openstack/compute/schemas 包含允许的 json schema，表示接受的键值对及其类型。</p><p>通过方法接口可以得到 webob.Request 对象，从 Request 对象中可以获取其他请求参数，用于执行对应的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeypairController</span>(<span class="params">wsgi.Controller</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Keypair API controller for the OpenStack API.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    _view_builder_class = keypairs_view.ViewBuilder</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(KeypairController, self).__init__()</span><br><span class="line">        self.api = compute_api.KeypairAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wsgi.Controller.api_version(<span class="params"><span class="string">&quot;2.10&quot;</span></span>)</span></span><br><span class="line"><span class="meta">    @wsgi.response(<span class="params"><span class="number">201</span></span>)</span></span><br><span class="line"><span class="meta">    @wsgi.expected_errors(<span class="params">(<span class="params"><span class="number">400</span>, <span class="number">403</span>, <span class="number">409</span></span>)</span>)</span></span><br><span class="line"><span class="meta">    @validation.schema(<span class="params">keypairs.create_v210</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, req, body</span>):</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wsgi.Controller.api_version(<span class="params"><span class="string">&quot;2.2&quot;</span>, <span class="string">&quot;2.9&quot;</span></span>)  </span><span class="comment"># noqa</span></span><br><span class="line"><span class="meta">    @wsgi.response(<span class="params"><span class="number">201</span></span>)</span></span><br><span class="line"><span class="meta">    @wsgi.expected_errors(<span class="params">(<span class="params"><span class="number">400</span>, <span class="number">403</span>, <span class="number">409</span></span>)</span>)</span></span><br><span class="line"><span class="meta">    @validation.schema(<span class="params">keypairs.create_v22</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, req, body</span>):</span>  <span class="comment"># noqa</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h2 id="nova-conductor"><a href="#nova-conductor" class="headerlink" title="nova-conductor"></a>nova-conductor</h2><p>使用 RPC 的子组件通常包含以下文件：</p><ul><li>api.py 对 RPC 接口进行封装，类似提供 SDK</li><li>rpcapi.py 暴露给其他内部组件的 RPC 接口，RPC 客户端</li><li>manager.py 处理 RPC API 调用</li></ul><p>nova-compute 访问数据库的操作都要由 nova-conductor 代理，用 nova/conductor/manager.py 的 ConductorManager 类完成，出于安全性考虑，nova-conductor 和 nova-compute 不能部署在同一服务器上。</p><p>nova/objects 定义了 nova object，封装数据库 CURD 操作，每个类对应数据库中的一张表。</p><h2 id="nova-scheduler"><a href="#nova-scheduler" class="headerlink" title="nova-scheduler"></a>nova-scheduler</h2><p>nova-scheduler 执行调度决策，nova-compute 收集并更新主机数据，实时写入数据库（周期任务）。</p><p>nova/scheduler/filters 包含所有的过滤器实现，用于过滤不符合条件的主机；nova/scheduler/weights 包含所有的权重实现，用于计算权重并排序。</p><h1 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h1><p><strong>nova-api</strong> 启动入口 <code>nova.cmd.api:main</code></p><ul><li><a href="https://docs.openstack.org/nova/queens/reference/gmr.html">Guru Meditation Reports</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    config.parse_args(sys.argv) <span class="comment"># 解析参数</span></span><br><span class="line">    logging.setup(CONF, <span class="string">&quot;nova&quot;</span>) <span class="comment"># 设置日志</span></span><br><span class="line">    objects.register_all()      <span class="comment"># 注册 nova object</span></span><br><span class="line">    gmr_opts.set_defaults(CONF) <span class="comment"># 设置 oslo_reports</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;osapi_compute&#x27;</span> <span class="keyword">in</span> CONF.enabled_apis:</span><br><span class="line">        <span class="comment"># NOTE(mriedem): This is needed for caching the nova-compute service</span></span><br><span class="line">        <span class="comment"># version.</span></span><br><span class="line">        objects.Service.enable_min_version_cache()</span><br><span class="line">    log = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成报告的机制 Guru Meditation Report (GMR)</span></span><br><span class="line">    gmr.TextGuruMeditation.setup_autorun(version, conf=CONF)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># oslo_service.ProcessLauncher</span></span><br><span class="line">    launcher = service.process_launcher()</span><br><span class="line">    started = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 根据 paste-ini 文件创建 WSGI 应用</span></span><br><span class="line">    <span class="keyword">for</span> api <span class="keyword">in</span> CONF.enabled_apis:</span><br><span class="line">        should_use_ssl = api <span class="keyword">in</span> CONF.enabled_ssl_apis</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># nova.service.WSGIService 初始化 WSGI 程序</span></span><br><span class="line">            server = service.WSGIService(api, use_ssl=should_use_ssl)</span><br><span class="line">            <span class="comment"># oslo_service.ProcessLauncher 创建子进程启动服务</span></span><br><span class="line">            launcher.launch_service(server, workers=server.workers <span class="keyword">or</span> <span class="number">1</span>)</span><br><span class="line">            started += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> exception.PasteAppNotFound <span class="keyword">as</span> ex:</span><br><span class="line">            log.warning(<span class="string">&quot;%s. ``enabled_apis`` includes bad values. &quot;</span></span><br><span class="line">                        <span class="string">&quot;Fix to remove this warning.&quot;</span>, ex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> started == <span class="number">0</span>:</span><br><span class="line">        log.error(<span class="string">&#x27;No APIs were started. &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Check the enabled_apis config option.&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待子进程终止</span></span><br><span class="line">    launcher.wait()</span><br></pre></td></tr></table></figure><p>nova.service.WSGIService 的初始化函数实例化 nova.wsgi.Server ，启动函数实际调用了 nova.wsgi.Server 的 start 方法。</p><p>其中的 self._socket 使用 <code>eventlet.listen</code> 创建，最后使用 utils 中封装的 spawn 函数启动 WSGI 程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>(<span class="params">service.ServiceBase</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Server class to manage a WSGI server, serving a WSGI application.&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Start serving a WSGI application.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :returns: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># The server socket object will be closed after server exits,</span></span><br><span class="line">        <span class="comment"># but the underlying file descriptor will remain open, and will</span></span><br><span class="line">        <span class="comment"># give bad file descriptor error. So duplicating the socket object,</span></span><br><span class="line">        <span class="comment"># to keep file descriptor usable.</span></span><br><span class="line"></span><br><span class="line">        dup_socket = self._socket.dup()</span><br><span class="line">        dup_socket.setsockopt(socket.SOL_SOCKET,</span><br><span class="line">                              socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># sockets can hang around forever without keepalive</span></span><br><span class="line">        dup_socket.setsockopt(socket.SOL_SOCKET,</span><br><span class="line">                              socket.SO_KEEPALIVE, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        self._server = utils.spawn(**wsgi_kwargs)</span><br></pre></td></tr></table></figure><p><strong>nova-conductor</strong> 启动入口 <code>nova.cmd.conductor:main</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    config.parse_args(sys.argv)</span><br><span class="line">    logging.setup(CONF, <span class="string">&quot;nova&quot;</span>)</span><br><span class="line">    objects.register_all()</span><br><span class="line">    gmr_opts.set_defaults(CONF)</span><br><span class="line">    objects.Service.enable_min_version_cache()</span><br><span class="line"></span><br><span class="line">    gmr.TextGuruMeditation.setup_autorun(version, conf=CONF)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># nova.service.Service 实例化 Service 对象</span></span><br><span class="line">    server = service.Service.create(binary=<span class="string">&#x27;nova-conductor&#x27;</span>,</span><br><span class="line">                                    topic=rpcapi.RPC_TOPIC)</span><br><span class="line">    workers = CONF.conductor.workers <span class="keyword">or</span> processutils.get_worker_count()</span><br><span class="line">    <span class="comment"># oslo_service.launch 创建 launcher</span></span><br><span class="line">    service.serve(server, workers=workers)</span><br><span class="line">    <span class="comment"># 调用 launcher.wait 等待子进程终止</span></span><br><span class="line">    service.wait()</span><br></pre></td></tr></table></figure><p>nova.service.Service 初始化函数接受 manager 对象，通过监听消息队列启用 RPC 服务；设置定期任务报告状态，并写入数据库。</p><ul><li>nova-compute</li><li>nova-conductor</li><li>nova-scheduler</li></ul><p>RPC 服务启动时创建 rpc_client 用于发送消息，创建 rpc_server 用于接收消息，分派执行。</p><p><strong>1. rpc_client</strong></p><p>nova/cmd/conductor.py 实际创建 Service 实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server = service.Service.create(binary=<span class="string">&#x27;nova-conductor&#x27;</span>,</span><br><span class="line">                                topic=rpcapi.RPC_TOPIC)</span><br></pre></td></tr></table></figure><p>nova/service.py 初始化函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 _driver</span></span><br><span class="line">self.servicegroup_api = servicegroup.API()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态导入 manager 类</span></span><br><span class="line">manager_class = importutils.import_class(self.manager_class_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> objects_base.NovaObject.indirection_api:</span><br><span class="line">    <span class="comment"># 创建 RPCClient</span></span><br><span class="line">    conductor_api = conductor.API()</span><br><span class="line">    <span class="comment"># 等待 nova-conductor 启动</span></span><br><span class="line">    conductor_api.wait_until_ready(context.get_admin_context())</span><br></pre></td></tr></table></figure><p>nova/servicegroup/api.py 创建 _driver</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver_class = _driver_name_class_mapping[CONF.servicegroup_driver]</span><br><span class="line">self._driver = importutils.import_object(driver_class,</span><br><span class="line">                                         *args, **kwargs)</span><br></pre></td></tr></table></figure><p>nova/conductor/api.py 实际调用 rpcapi.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.conductor_rpcapi = rpcapi.ConductorAPI()</span><br><span class="line">    self.base_rpcapi = baserpc.BaseAPI(topic=rpcapi.RPC_TOPIC)</span><br></pre></td></tr></table></figure><p>nova/conductor/rpcapi.py 设置 rpc_client</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">super</span>(ConductorAPI, self).__init__()</span><br><span class="line">    target = messaging.Target(topic=RPC_TOPIC, version=<span class="string">&#x27;3.0&#x27;</span>)</span><br><span class="line">    version_cap = self.VERSION_ALIASES.get(CONF.upgrade_levels.conductor,</span><br><span class="line">                                           CONF.upgrade_levels.conductor)</span><br><span class="line">    serializer = objects_base.NovaObjectSerializer()</span><br><span class="line">    <span class="comment"># rpc client</span></span><br><span class="line">    self.client = rpc.get_client(target,</span><br><span class="line">                                 version_cap=version_cap,</span><br><span class="line">                                 serializer=serializer)</span><br></pre></td></tr></table></figure><p>nova/baserpc.py 设置 rpc_client</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, topic</span>):</span></span><br><span class="line">    <span class="built_in">super</span>(BaseAPI, self).__init__()</span><br><span class="line">    target = messaging.Target(topic=topic,</span><br><span class="line">                              namespace=_NAMESPACE,</span><br><span class="line">                              version=<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">    version_cap = self.VERSION_ALIASES.get(CONF.upgrade_levels.baseapi,</span><br><span class="line">                                           CONF.upgrade_levels.baseapi)</span><br><span class="line">    self.client = rpc.get_client(target, version_cap=version_cap)</span><br></pre></td></tr></table></figure><p><strong>2. rpc_server</strong></p><p>nova/cmd/conductor.py 使用 Service 实例启动服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oslo_service.launch 创建 launcher</span></span><br><span class="line">service.serve(server, workers=workers)</span><br><span class="line"><span class="comment"># 调用 launcher.wait 等待子进程终止</span></span><br><span class="line">service.wait()</span><br></pre></td></tr></table></figure><p>nova/service.py 实际调用 <a href="https://github.com/openstack/oslo.service">oslo_service</a> 的 launch 函数，创建绿色线程（greenthread）或进程，最终调用 Service 实例的 start 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span>(<span class="params">server, workers=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">global</span> _launcher</span><br><span class="line">    <span class="keyword">if</span> _launcher:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_(<span class="string">&#x27;serve() can only be called once&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    _launcher = service.launch(CONF, server, workers=workers,</span><br><span class="line">                               restart_method=<span class="string">&#x27;mutate&#x27;</span>)</span><br></pre></td></tr></table></figure><p>nova/service.py Service 实例的 start 方法创建 rpc_server 和 dispatcher；设置周期任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 rpc server 以及 dispatcher</span></span><br><span class="line">self.rpcserver = rpc.get_server(target, endpoints, serializer)</span><br><span class="line">self.rpcserver.start()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.periodic_enable:</span><br><span class="line">    <span class="keyword">if</span> self.periodic_fuzzy_delay:</span><br><span class="line">        initial_delay = random.randint(<span class="number">0</span>, self.periodic_fuzzy_delay)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        initial_delay = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    self.tg.add_dynamic_timer(self.periodic_tasks,</span><br><span class="line">                             initial_delay=initial_delay,</span><br><span class="line">                             periodic_interval_max=</span><br><span class="line">                                self.periodic_interval_max)</span><br></pre></td></tr></table></figure><p>收到消息后主要由 <a href="https://github.com/openstack/oslo.messaging">oslo_messaging</a> 进行解析和处理，核心是 oslo_messaging/rpc/dispatcher.py</p><p>incoming 是 AMQP 消息格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, incoming</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Dispatch an RPC message to the appropriate endpoint method.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param incoming: incoming message</span></span><br><span class="line"><span class="string">    :type incoming: IncomingMessage</span></span><br><span class="line"><span class="string">    :raises: NoSuchMethod, UnsupportedVersion</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    message = incoming.message</span><br><span class="line">    ctxt = incoming.ctxt</span><br><span class="line"></span><br><span class="line">    method = message.get(<span class="string">&#x27;method&#x27;</span>)</span><br><span class="line">    args = message.get(<span class="string">&#x27;args&#x27;</span>, &#123;&#125;)</span><br><span class="line">    namespace = message.get(<span class="string">&#x27;namespace&#x27;</span>)</span><br><span class="line">    version = message.get(<span class="string">&#x27;version&#x27;</span>, <span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(danms): This event and watchdog thread are used to send</span></span><br><span class="line">    <span class="comment"># call-monitoring heartbeats for this message while the call</span></span><br><span class="line">    <span class="comment"># is executing if it runs for some time. The thread will wait</span></span><br><span class="line">    <span class="comment"># for the event to be signaled, which we do explicitly below</span></span><br><span class="line">    <span class="comment"># after dispatching the method call.</span></span><br><span class="line">    completion_event = eventletutils.Event()</span><br><span class="line">    watchdog_thread = threading.Thread(target=self._watchdog,</span><br><span class="line">                                       args=(completion_event, incoming))</span><br><span class="line">    <span class="keyword">if</span> incoming.client_timeout:</span><br><span class="line">        <span class="comment"># NOTE(danms): The client provided a timeout, so we start</span></span><br><span class="line">        <span class="comment"># the watchdog thread. If the client is old or didn&#x27;t send</span></span><br><span class="line">        <span class="comment"># a timeout, we just never start the watchdog thread.</span></span><br><span class="line">        watchdog_thread.start()</span><br><span class="line"></span><br><span class="line">    found_compatible = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> endpoint <span class="keyword">in</span> self.endpoints:</span><br><span class="line">        target = <span class="built_in">getattr</span>(endpoint, <span class="string">&#x27;target&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> target:</span><br><span class="line">            target = self._default_target</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (self._is_namespace(target, namespace) <span class="keyword">and</span></span><br><span class="line">                self._is_compatible(target, version)):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(endpoint, method):</span><br><span class="line">            <span class="keyword">if</span> self.access_policy.is_allowed(endpoint, method):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 分派，调用函数</span></span><br><span class="line">                    <span class="keyword">return</span> self._do_dispatch(endpoint, method, ctxt, args)</span><br><span class="line">                <span class="keyword">finally</span>:</span><br><span class="line">                    completion_event.<span class="built_in">set</span>()</span><br><span class="line">                    <span class="keyword">if</span> incoming.client_timeout:</span><br><span class="line">                        watchdog_thread.join()</span><br><span class="line"></span><br><span class="line">        found_compatible = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> found_compatible:</span><br><span class="line">        <span class="keyword">raise</span> NoSuchMethod(method)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> UnsupportedVersion(version, method=method)</span><br></pre></td></tr></table></figure><p>oslo_messaging/rpc/dispatcher.py 调用函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_do_dispatch</span>(<span class="params">self, endpoint, method, ctxt, args</span>):</span></span><br><span class="line">    ctxt = self.serializer.deserialize_context(ctxt)</span><br><span class="line">    new_args = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> argname, arg <span class="keyword">in</span> args.items():</span><br><span class="line">        new_args[argname] = self.serializer.deserialize_entity(ctxt, arg)</span><br><span class="line">    func = <span class="built_in">getattr</span>(endpoint, method)</span><br><span class="line">    result = func(ctxt, **new_args)</span><br><span class="line">    <span class="keyword">return</span> self.serializer.serialize_entity(ctxt, result)</span><br></pre></td></tr></table></figure><p>发送消息的实现都在 nova/conductor/rpcapi.py 中，cctxt.call 同步调用，cctxt.cast 异步调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">object_class_action_versions</span>(<span class="params">self, context, objname, objmethod,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 object_versions, args, kwargs</span>):</span></span><br><span class="line">    cctxt = self.client.prepare()</span><br><span class="line">    <span class="keyword">return</span> cctxt.call(context, <span class="string">&#x27;object_class_action_versions&#x27;</span>,</span><br><span class="line">                      objname=objname, objmethod=objmethod,</span><br><span class="line">                      object_versions=object_versions,</span><br><span class="line">                      args=args, kwargs=kwargs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cache_images</span>(<span class="params">self, ctxt, aggregate, image_ids</span>):</span></span><br><span class="line">    version = <span class="string">&#x27;1.21&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.client.can_send_version(version):</span><br><span class="line">        <span class="keyword">raise</span> exception.NovaException(<span class="string">&#x27;Conductor RPC version pin does not &#x27;</span></span><br><span class="line">                                      <span class="string">&#x27;allow cache_images() to be called&#x27;</span>)</span><br><span class="line">    cctxt = self.client.prepare(version=version)</span><br><span class="line">    cctxt.cast(ctxt, <span class="string">&#x27;cache_images&#x27;</span>, aggregate=aggregate,</span><br><span class="line">               image_ids=image_ids)</span><br></pre></td></tr></table></figure><p>由 oslo_messaging/rpc/client.py 实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cast</span>(<span class="params">self, ctxt, method, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Invoke a method and return immediately. See RPCClient.cast().&quot;&quot;&quot;</span></span><br><span class="line">    msg = self._make_message(ctxt, method, kwargs)</span><br><span class="line">    msg_ctxt = self.serializer.serialize_context(ctxt)</span><br><span class="line"></span><br><span class="line">    self._check_version_cap(msg.get(<span class="string">&#x27;version&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.transport._send(self.target, msg_ctxt, msg,</span><br><span class="line">                             retry=self.retry,</span><br><span class="line">                             transport_options=self.transport_options)</span><br><span class="line">    <span class="keyword">except</span> driver_base.TransportDriverError <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="keyword">raise</span> ClientSendError(self.target, ex)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, ctxt, method, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Invoke a method and wait for a reply. See RPCClient.call().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> self.target.fanout:</span><br><span class="line">        <span class="keyword">raise</span> exceptions.InvalidTarget(<span class="string">&#x27;A call cannot be used with fanout&#x27;</span>,</span><br><span class="line">                                       self.target)</span><br><span class="line"></span><br><span class="line">    msg = self._make_message(ctxt, method, kwargs)</span><br><span class="line">    msg_ctxt = self.serializer.serialize_context(ctxt)</span><br><span class="line"></span><br><span class="line">    timeout = self.timeout</span><br><span class="line">    <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        timeout = self.conf.rpc_response_timeout</span><br><span class="line"></span><br><span class="line">    cm_timeout = self.call_monitor_timeout</span><br><span class="line"></span><br><span class="line">    self._check_version_cap(msg.get(<span class="string">&#x27;version&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = \</span><br><span class="line">            self.transport._send(self.target, msg_ctxt, msg,</span><br><span class="line">                                 wait_for_reply=<span class="literal">True</span>, timeout=timeout,</span><br><span class="line">                                 call_monitor_timeout=cm_timeout,</span><br><span class="line">                                 retry=self.retry,</span><br><span class="line">                                 transport_options=self.transport_options)</span><br><span class="line">    <span class="keyword">except</span> driver_base.TransportDriverError <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="keyword">raise</span> ClientSendError(self.target, ex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.serializer.deserialize_entity(ctxt, result)</span><br></pre></td></tr></table></figure><p>关于周期任务，nova/scheduler/manager.py 中使用 <code>@periodic_task.periodic_task</code> 装饰的方法将会被周期调用，从 scheduler 的调试日志可以看到周期任务的运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">********************************************************************* log_opt_values /home/jck/.<span class="built_in">local</span>/lib/python3.6/site-packages/oslo_config/cfg.py:2591</span><br><span class="line">2021-05-18 05:53:17.030 3501 DEBUG oslo_service.periodic_task [req-66b43add-49c7-4f33-8f6b-1e33cb9f0123 - - - - -] Running periodic task SchedulerManager._run_periodic_tasks run_periodic_tasks /home/jck/.<span class="built_in">local</span>/lib/python3.6/site-packages/oslo_service/periodic_task.py:211</span><br><span class="line">2021-05-18 05:53:39.072 3500 DEBUG oslo_service.periodic_task [req-8436b3e2-96d1-4f15-8ae8-b596cee05536 - - - - -] Running periodic task SchedulerManager._run_periodic_tasks run_periodic_tasks /home/jck/.<span class="built_in">local</span>/lib/python3.6/site-packages/oslo_service/periodic_task.py:211</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>对应于 nova/scheduler/manager.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@periodic_task.periodic_task(<span class="params">spacing=CONF.scheduler.periodic_task_interval,</span></span></span><br><span class="line"><span class="meta"><span class="params">                             run_immediately=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_periodic_tasks</span>(<span class="params">self, context</span>):</span></span><br><span class="line">    self.driver.run_periodic_tasks(context)</span><br></pre></td></tr></table></figure><p>执行周期任务的有 nova-scheduler 和 nova-compute ，主要功能是计算节点 nova-compute 上报资源信息，nova-scheduler 读取数据库，更新资源信息缓存。</p><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/nova/latest/user/architecture.html">Nova System Architecture</a></li><li><a href="https://docs.openstack.org/nova/latest/install/get-started-compute.html">Compute service overview</a></li><li><a href="https://docs.openstack.org/nova/latest/reference/rpc.html">AMQP and Nova</a></li><li><a href="https://docs.openstack.org/nova/latest/reference/scheduling.html">Scheduling</a></li><li><a href="https://docs.openstack.org/nova/latest/user/cellsv2-layout.html">Cells Layout (v2)</a></li><li><a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html">AMQP 0-9-1 Model Explained</a></li><li><a href="https://rabbitmq.mr-ping.com/AMQP/AMQP_0-9-1_Model_Explained.html">AMQP 0-9-1 简介</a></li><li><a href="https://docs.openstack.org/nova/latest/admin/metadata-service.html">Metadata service</a></li><li><a href="https://docs.openstack.org/nova/queens/reference/gmr.html">Guru Meditation Reports</a></li></ul>]]></content>
    
    
    <summary type="html">Victoria 版本 Nova 整体架构概览，源码阅读，启动流程分析</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 源码安装 Placement + Nova (Victoria)</title>
    <link href="https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Nova%20(Victoria)/"/>
    <id>https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Nova%20(Victoria)/</id>
    <published>2021-05-13T07:52:19.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>在源码部署 Keystone 和 Glance 之后，继续进行 Nova 的部署。环境设定和 Keystone 部署相关操作见 <a href="https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Keystone%20%28Victoria%29/">Ubuntu 18.04 源码安装 Keystone (Victoria)</a> 。</p><h1 id="Placement"><a href="#Placement" class="headerlink" title="Placement"></a>Placement</h1><p>Placement 用于管理资源，核心功能是帮助用户寻找满足资源需求的设备，Placement 提供 REST API，并使用 json 格式交换数据。使用 Placement 服务的包括 Nova、Neutron 等组件，因此在部署 Nova 前需要部署 Placement ，管理计算资源（主机）。</p><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>MySQL 数据库配置，密码 mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> placement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> placement.* <span class="keyword">TO</span> <span class="string">&#x27;placement&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> placement.* <span class="keyword">TO</span> <span class="string">&#x27;placement&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="身份认证和-API-配置"><a href="#身份认证和-API-配置" class="headerlink" title="身份认证和 API 配置"></a>身份认证和 API 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 placement</span></span><br><span class="line">openstack user create --domain default --password-prompt placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user placement admin</span><br><span class="line"><span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure><p>创建服务实体和服务 API 端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name placement --description <span class="string">&quot;Placement API&quot;</span> placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne placement public http://127.0.0.1:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement internal http://127.0.0.1:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement admin http://127.0.0.1:8778</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>下载 Placement 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/placement.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>进入 Placement 目录安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br></pre></td></tr></table></figure><p>使用 pip 安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git init</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>使用 tox 生成配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tox -e genconfig</span><br></pre></td></tr></table></figure><p>手动创建目录，将配置文件拷贝过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo mkdir /etc/placement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/placement/placement.conf.sample /etc/placement/placement.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">sudo vim /etc/placement/placement.conf</span><br></pre></td></tr></table></figure><p>在相应小节添加配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[placement_database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://placement:PLACEMENT_DBPASS@<span class="number">127.0</span>.<span class="number">0.1</span>/placement</span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">auth_url</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/v3</span><br><span class="line"><span class="comment">#memcached_servers = 127.0.0.1:11211</span></span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br></pre></td></tr></table></figure><h2 id="部署-Placement"><a href="#部署-Placement" class="headerlink" title="部署 Placement"></a>部署 Placement</h2><p>安装 Placement</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>启用服务</p><p><em>PS：打印的日志信息提示在生产环境中不要使用 <code>placement-api</code></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/shared/bin/placement-manage db sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Apache</span></span><br><span class="line">service apache2 restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">placement-api --port 8778</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>验证服务正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询服务状态</span></span><br><span class="line">placement-status upgrade check</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/06/06/GiYVxod6LCSTstw.png"><h1 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h1><p>Nova 本身包含多个组件，对外提供 RESTful API，内部组件使用 RPC 和消息队列传递消息。而且每个内部组件都可以横向扩展，部署多个。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>安装 rabbitmq（官方推荐，也支持其他几个消息队列）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install rabbitmq-server -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 openstack 用户</span></span><br><span class="line">sudo rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">sudo rabbitmqctl set_permissions openstack <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure><p>MySQL 数据库配置，密码 mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> nova_api;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> nova;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> nova_cell0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_api.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_api.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_cell0.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_cell0.* <span class="keyword">TO</span> <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>身份认证和 API 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 nova</span></span><br><span class="line">openstack user create --domain default --password-prompt nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user nova admin</span><br><span class="line"><span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure><p>创建服务实体和服务 API 端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name nova --description <span class="string">&quot;OpenStack Compute&quot;</span> compute</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne compute public http://127.0.0.1:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute internal http://127.0.0.1:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute admin http://127.0.0.1:8774/v2.1</span><br></pre></td></tr></table></figure><h2 id="部署-Nova"><a href="#部署-Nova" class="headerlink" title="部署 Nova"></a>部署 Nova</h2><p>下载 Nova 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/nova.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>进入 Nova 目录安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br></pre></td></tr></table></figure><p>使用 pip 安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git init</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br></pre></td></tr></table></figure><p>使用 tox 生成配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tox -e genconfig</span><br></pre></td></tr></table></figure><p>手动创建目录，将配置文件拷贝过去，paste-ini 文件用于配置 WSGI 程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">sudo mkdir /etc/nova</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/nova/nova.conf.sample /etc/nova/nova.conf</span><br><span class="line">sudo cp etc/nova/api-paste.ini /etc/nova/api-paste.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">sudo vi /etc/nova/nova.conf</span><br></pre></td></tr></table></figure><p>在相应的小节添加配置，同样，没有安装 memcached 所以对应的配置注释掉了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[api_database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@<span class="number">127.0</span>.<span class="number">0.1</span>/nova_api</span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@<span class="number">127.0</span>.<span class="number">0.1</span>/nova</span><br><span class="line"></span><br><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">transport_url</span> = rabbit://openstack:RABBIT_PASS@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5672</span>/</span><br><span class="line"><span class="attr">my_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[api]</span></span><br><span class="line"><span class="attr">auth_strategy</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/</span><br><span class="line"><span class="attr">auth_url</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/</span><br><span class="line"><span class="comment">#memcached_servers = 127.0.0.1:11211</span></span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = nova</span><br><span class="line"><span class="attr">password</span> = nova</span><br><span class="line"></span><br><span class="line"><span class="section">[vnc]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">server_listen</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">server_proxyclient_address</span> = <span class="variable">$my_ip</span></span><br><span class="line"><span class="attr">novncproxy_base_url</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6080</span>/vnc_auto.html</span><br><span class="line"></span><br><span class="line"><span class="section">[glance]</span></span><br><span class="line"><span class="attr">api_servers</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9292</span></span><br><span class="line"></span><br><span class="line"><span class="section">[oslo_concurrency]</span></span><br><span class="line"><span class="attr">lock_path</span> = /var/lib/nova/tmp</span><br><span class="line"></span><br><span class="line"><span class="section">[placement]</span></span><br><span class="line"><span class="attr">region_name</span> = RegionOne</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">auth_url</span> = http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">username</span> = placement</span><br><span class="line"><span class="attr">password</span> = placement</span><br></pre></td></tr></table></figure><p>nova-novncproxy 依赖 novnc ，直接克隆到相应目录，该组件用于协调 nova-compute 服务和数据库之间的交互。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://github.com/novnc/noVNC.git /usr/share/novnc/</span><br></pre></td></tr></table></figure><p>安装 Nova</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>启用服务 nova-api、nova-scheduler、nova-conductor、nova-novncproxy 。nova-novncproxy 是可选的，它用于协调 nova-compute 服务和数据库之间的交互。</p><p><em>PS：这里使用 .tox 文件夹下的工具，否则会报错，最终的结果是写入数据库，所以这个问题还是暂时不管</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf api_db sync</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 map_cell0</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 create_cell --name=cell1 --verbose</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf db sync</span><br><span class="line">.tox/shared/bin/nova-manage --config-file /etc/nova/nova.conf cell_v2 list_cells</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">sudo nova-api --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br><span class="line">sudo nova-scheduler --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br><span class="line">sudo nova-conductor --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br><span class="line">sudo nova-novncproxy --config-file=/etc/nova/nova.conf --config-file=/etc/nova/api-paste.ini --debug</span><br></pre></td></tr></table></figure><h2 id="nova-compute"><a href="#nova-compute" class="headerlink" title="nova-compute"></a>nova-compute</h2><p>由于本地测试环境是单机（Ubuntu 18.04 虚拟机），而且通常 nova-compute 不会装在控制节点上，因此没有进行配置。因为没有使用 nova-compute 所以 nova-novncproxy 和 Placement 都是可选的（应该）。</p><p>计算节点，启用 nova-compute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟机硬件加速（0 表示不支持，需要配置 virt_type=qemu）</span></span><br><span class="line">egrep -c <span class="string">&#x27;(vmx|svm)&#x27;</span> /proc/cpuinfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> libvirtd.service openstack-nova-compute.service</span><br><span class="line">systemctl start libvirtd.service openstack-nova-compute.service</span><br></pre></td></tr></table></figure><p>配置文件 /etc/nova/nova-compute.conf</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[libvirt]</span></span><br><span class="line"><span class="attr">virt_type</span> = qemu</span><br></pre></td></tr></table></figure><p>启用服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nova-compute restart</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>验证服务正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 API 状态</span></span><br><span class="line">nova-status upgrade check</span><br></pre></td></tr></table></figure><p>使用 OpenStack Client 执行与计算服务有关的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出计算服务</span></span><br><span class="line">openstack compute service list</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><p><a href="https://docs.openstack.org/placement/latest/contributor/quick-dev.html">Quick Placement Development</a></p></li><li><p><a href="https://docs.openstack.org/placement/latest/install/install-ubuntu.html#configure-user-and-endpoints">Install and configure Placement for Ubuntu</a></p></li><li><p><a href="https://docs.openstack.org/placement/latest/install/verify.html">Verify Installation</a></p></li><li><p><a href="https://docs.openstack.org/nova/latest/install/controller-install-ubuntu.html">Install and configure controller node for Ubuntu</a></p></li><li><p><a href="https://docs.openstack.org/nova/latest/install/compute-install-ubuntu.html">Install and configure a compute node for Ubuntu</a></p></li><li><p><a href="https://docs.openstack.org/nova/latest/install/verify.html">Verify operation</a></p></li><li><p><a href="https://bugs.launchpad.net/fuel/+bug/1433894">novncproxy: code 404, message File not found</a></p></li></ul>]]></content>
    
    
    <summary type="html">记录部署流程</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 源码安装 Glance (Victoria)</title>
    <link href="https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Glance%20(Victoria)/"/>
    <id>https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Glance%20(Victoria)/</id>
    <published>2021-05-13T03:40:14.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>在源码部署 Keystone 之后，继续进行 Glance 的部署。环境设定和 Keystone 部署相关操作见 <a href="https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Keystone%20%28Victoria%29/">Ubuntu 18.04 源码安装 Keystone (Victoria)</a> 。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>MySQL 数据库配置，密码 mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> glance;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户 glance</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> glance.* <span class="keyword">TO</span> <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> glance.* <span class="keyword">TO</span> <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建完毕退出</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="身份认证和-API-配置"><a href="#身份认证和-API-配置" class="headerlink" title="身份认证和 API 配置"></a>身份认证和 API 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建脚本</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt; admin-openrc</span></span><br><span class="line"><span class="string">export OS_USERNAME=admin</span></span><br><span class="line"><span class="string">export OS_PASSWORD=ADMIN_PASS</span></span><br><span class="line"><span class="string">export OS_PROJECT_NAME=admin</span></span><br><span class="line"><span class="string">export OS_USER_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_PROJECT_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_AUTH_URL=http://127.0.0.1:5000/v3</span></span><br><span class="line"><span class="string">export OS_IDENTITY_API_VERSION=3</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">openstack project create --domain default --description <span class="string">&quot;Service Project&quot;</span> service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，设置密码为 glance</span></span><br><span class="line">openstack user create --domain default --password-prompt glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 admin 角色</span></span><br><span class="line">openstack role add --project service --user glance admin</span><br><span class="line"><span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure><p>创建服务实体和服务 API 端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建服务实体</span></span><br><span class="line">openstack service create --name glance --description <span class="string">&quot;OpenStack Image&quot;</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务 API 端点（endpoint）</span></span><br><span class="line">openstack endpoint create --region RegionOne image public http://127.0.0.1:9292</span><br><span class="line">openstack endpoint create --region RegionOne image internal http://127.0.0.1:9292</span><br><span class="line">openstack endpoint create --region RegionOne image admin http://127.0.0.1:9292</span><br></pre></td></tr></table></figure><h1 id="Glance-部署"><a href="#Glance-部署" class="headerlink" title="Glance 部署"></a>Glance 部署</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>下载 Glance 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/glance.git --branch stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>进入 Glance 目录安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br></pre></td></tr></table></figure><p>使用 pip 安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>使用 tox 生成配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tox -e genconfig</span><br></pre></td></tr></table></figure><p>手动创建目录，将配置文件拷贝过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir /etc/glance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/glance-api.conf /etc/glance/glance-api.conf</span><br><span class="line">sudo cp etc/glance-api-paste.ini /etc/glance/glance-api-paste.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/glance/glance-api.conf</span><br></pre></td></tr></table></figure><p>在相应的小节添加配置，没有安装 memcached 所以对应的配置注释掉了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://glance:GLANCE_DBPASS@localhost/glance</span><br><span class="line"></span><br><span class="line"><span class="section">[keystone_authtoken]</span></span><br><span class="line"><span class="attr">www_authenticate_uri</span>  = http://localhost:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_url</span> = http://localhost:<span class="number">5000</span>/v3</span><br><span class="line"><span class="attr">auth_type</span> = password</span><br><span class="line"><span class="attr">project_domain_name</span> = Default</span><br><span class="line"><span class="attr">user_domain_name</span> = Default</span><br><span class="line"><span class="attr">project_name</span> = service</span><br><span class="line"><span class="attr">username</span> = glance</span><br><span class="line"><span class="attr">password</span> = glance</span><br><span class="line"><span class="comment">#memcached_servers = localhost:11211</span></span><br><span class="line"></span><br><span class="line"><span class="section">[paste_deploy]</span></span><br><span class="line"><span class="attr">flavor</span> = keystone</span><br><span class="line"></span><br><span class="line"><span class="section">[glance_store]</span></span><br><span class="line"><span class="attr">stores</span> = file,http</span><br><span class="line"><span class="attr">default_store</span> = file</span><br><span class="line"><span class="attr">filesystem_store_datadir</span> = /var/lib/glance/images/</span><br></pre></td></tr></table></figure><h2 id="启用服务"><a href="#启用服务" class="headerlink" title="启用服务"></a>启用服务</h2><p>安装 Glance</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>启用 Glance 镜像服务</p><p><em>PS：这里使用 .tox 文件夹下的工具，否则会报错，反正最终的结果是写入数据库，所以这里的问题暂时不管</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">.tox/genconfig/bin/glance-manage db_sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务（后台）</span></span><br><span class="line">sudo glance-api --config-file=/etc/glance/glance-api.conf --config-file=/etc/glance/glance-api-paste.ini &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug 直接输出</span></span><br><span class="line">sudo glance-api --config-file=/etc/glance/glance-api.conf --config-file=/etc/glance/glance-api-paste.ini --debug</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>使用 OpenStack Client 执行一些和镜像有关的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">. admin-openrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">openstack image list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源镜像</span></span><br><span class="line">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传镜像到镜像服务，公开可见（所有项目都可以访问）</span></span><br><span class="line">openstack image create <span class="string">&quot;cirros&quot;</span> \</span><br><span class="line">  --file cirros-0.4.0-x86_64-disk.img \</span><br><span class="line">  --disk-format qcow2 --container-format bare \</span><br><span class="line">  --public</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">openstack image list</span><br></pre></td></tr></table></figure><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><a href="https://docs.openstack.org/glance/latest/index.html">Glance’s documentation</a></li><li><a href="https://docs.openstack.org/glance/latest/install/">Glance Installation</a></li><li><a href="https://docs.openstack.org/glance/ocata/installing.html#installing-from-git">Installing from Git</a></li><li><a href="https://docs.rackspace.com/blog/install-openstack-from-source2/">Install OpenStack from source - part 2</a></li></ul>]]></content>
    
    
    <summary type="html">记录部署流程</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 源码安装 Keystone (Victoria)</title>
    <link href="https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Keystone%20(Victoria)/"/>
    <id>https://jckling.github.io/2021/05/13/OpenStack/Ubuntu18.04%20%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%20Keystone%20(Victoria)/</id>
    <published>2021-05-13T02:49:37.000Z</published>
    <updated>2021-08-31T06:40:08.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>VirtualBox 搭建 Ubuntu 18.04 虚拟机</p><ul><li>4 处理器</li><li>8 GB 内存</li><li>100 GB 硬盘</li></ul><p>使用两块网卡</p><ul><li>NAT 提供网络服务</li><li>Host-Only 提供宿主机 ssh 连接</li></ul><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>设置 Python3 和 pip3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1</span><br></pre></td></tr></table></figure><p>下载 Keystone 源码，指定 Victoria 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/keystone.git -b stable/victoria --single-branch</span><br></pre></td></tr></table></figure><p>Keystone 的各种依赖可以根据代码目录下提供的 bindep.txt 进行安装。 <code>bindep</code> 即 Binary dependency management ，通过 <code>pip</code> 安装 bindep</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bindep</span><br></pre></td></tr></table></figure><p>进入 Keystone 目录安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> keystone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install $(bindep -b) -y</span><br></pre></td></tr></table></figure><p>因为 Keystone 使用 Flask 提供 WSGI 接口，依赖 Apache 驱动，所以还需要安装支持 python3 的 WSGI 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apache2 libapache2-mod-wsgi-py3</span><br></pre></td></tr></table></figure><p>OpenStack 客户端用于和 Keystone 进行交互，使用 pip 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-openstackclient</span><br></pre></td></tr></table></figure><h1 id="部署-Keystone"><a href="#部署-Keystone" class="headerlink" title="部署 Keystone"></a>部署 Keystone</h1><p>上面的步骤做好了准备，接下来执行 Keystone 的部署。</p><p>源码目录中有两个依赖包文件（都安装），或直接用 <code>-e</code> 参数安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r test-requirements.txt</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><p>安装 tox 测试工具，生成配置文件，相关文件 <code>tox.ini</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 tox</span></span><br><span class="line">pip install tox</span><br><span class="line">tox -e genconfig</span><br></pre></td></tr></table></figure><p>设置 MySQL 数据库 root 用户密码，这里设置为 <code>mysql</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 MySQL</span></span><br><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>创建数据库和 keystone 用户，并授予相关权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> keystone;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 授予权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> keystone.* <span class="keyword">TO</span> <span class="string">&#x27;keystone&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;KEYSTONE_DBPASS&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> keystone.* <span class="keyword">TO</span> <span class="string">&#x27;keystone&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;KEYSTONE_DBPASS&#x27;</span>;</span><br></pre></td></tr></table></figure><p>手动创建目录，将配置文件拷贝过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir /etc/keystone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">sudo cp etc/keystone.conf.sample /etc/keystone/keystone.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">sudo vim /etc/keystone/keystone.conf</span><br></pre></td></tr></table></figure><p>在 <code>[database]</code> 小节中添加数据库连接配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">connection</span> = mysql+pymysql://keystone:KEYSTONE_DBPASS@localhost/keystone</span><br></pre></td></tr></table></figure><p>安装 Keystone，创建令牌时如果报错提示 /etc/keystone/fernet-keys 文件夹中已有文件，删除后再重新执行指令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Keystone</span></span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充数据库</span></span><br><span class="line">keystone-manage db_sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 令牌</span></span><br><span class="line">sudo mkdir -p /etc/keystone/fernet-keys</span><br><span class="line">sudo keystone-manage fernet_setup --keystone-user jck --keystone-group jck</span><br><span class="line">sudo keystone-manage credential_setup --keystone-user jck --keystone-group jck</span><br></pre></td></tr></table></figure><p>启动 Keystone 服务，设置管理员密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">keystone-manage bootstrap --bootstrap-password ADMIN_PASS \</span><br><span class="line">  --bootstrap-admin-url http://127.0.0.1:5000/v3/ \</span><br><span class="line">  --bootstrap-internal-url http://127.0.0.1:5000/v3/ \</span><br><span class="line">  --bootstrap-public-url http://127.0.0.1:5000/v3/ \</span><br><span class="line">  --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure><p>配置 Apache 服务，拷贝 Keystone 源码目录下的配置文件到 Apache 文件夹中，修改 <code>user</code> 和 <code>group</code> 字段为当前用户，启用该配置文件并重启 Apache 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝</span></span><br><span class="line">sudo cp httpd/wsgi-keystone.conf /etc/apache2/conf-available/wsgi-keystone.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/apache2/conf-available/wsgi-keystone.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用</span></span><br><span class="line">sudo ln -s /etc/apache2/conf-available/wsgi-keystone.conf /etc/apache2/conf-enabled/wsgi-keystone.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Apache</span></span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/06/06/xOyfkLrbKFqCnXh.png"><p>重新部署只需要重新执行安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>配置环境变量后可访问 Keystone 服务，使用管理员帐号，并指定认证使用的 url 和版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">export</span> OS_USERNAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=ADMIN_PASS</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://127.0.0.1:5000/v3</span><br><span class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</span><br></pre></td></tr></table></figure><h2 id="OpenStack-Client"><a href="#OpenStack-Client" class="headerlink" title="OpenStack Client"></a>OpenStack Client</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询用户列表</span></span><br><span class="line">openstack user list</span><br></pre></td></tr></table></figure><h2 id="OpenStack-API"><a href="#OpenStack-API" class="headerlink" title="OpenStack API"></a>OpenStack API</h2><p>设置环境变量后才能正确执行以下命令行语句。</p><ol><li><p>获取 API 信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://localhost:5000 \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>获取 token ，指定 project/domain 范围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Unscoped</span></span><br><span class="line">curl -i <span class="string">&quot;http://localhost:5000/v3/auth/tokens&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;auth&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;identity&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;methods&quot;: [&quot;password&quot;],</span></span><br><span class="line"><span class="string">      &quot;password&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;name&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">          &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;,</span></span><br><span class="line"><span class="string">          &quot;password&quot;: &quot;ADMIN_PASS&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Project-Scoped</span></span><br><span class="line">curl -i <span class="string">&quot;http://localhost:5000/v3/auth/tokens&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;auth&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;identity&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;methods&quot;: [&quot;password&quot;],</span></span><br><span class="line"><span class="string">      &quot;password&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;name&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">          &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;,</span></span><br><span class="line"><span class="string">          &quot;password&quot;: &quot;ADMIN_PASS&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;scope&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;project&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">        &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Domain-Scoped（前提：角色绑定到域上）</span></span><br><span class="line">curl -i <span class="string">&quot;http://localhost:5000/v3/auth/tokens&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;auth&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;identity&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;methods&quot;: [&quot;password&quot;],</span></span><br><span class="line"><span class="string">      &quot;password&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;name&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">          &quot;domain&quot;: &#123; &quot;id&quot;: &quot;default&quot; &#125;,</span></span><br><span class="line"><span class="string">          &quot;password&quot;: &quot;ADMIN_PASS&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;scope&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;domain&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;id&quot;: &quot;default&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 token 获取新的 token</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># X-Subject-Token 字段就是 token</span></span><br><span class="line"><span class="built_in">export</span> OS_TOKEN=gAAAAABgdpLGBSoQy0KT68qlRT_i7BPdN67KVUg2To53yxPJFcSwNucacaNxVNT_Ca11ASIovOFsyw8OZfCkgLDC7YHA-h5--DvUZ8JX8cLv340-jE2mc1YFZmRmzocnNXS3i-TQ2X6Czk2CNSPeNqbpw7wWV3X3qg</span><br><span class="line"></span><br><span class="line">curl -i <span class="string">&quot;http://localhost:5000/v3/auth/tokens&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; &quot;auth&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;identity&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;methods&quot;: [&quot;token&quot;],</span></span><br><span class="line"><span class="string">      &quot;token&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;id&quot;: &quot;&#x27;</span><span class="variable">$OS_TOKEN</span><span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>删除 token（返回 204）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X DELETE \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;X-Subject-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/auth/tokens&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>列出 domain（项目范围的 token）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/domains&quot;</span>\</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>创建 domain</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/domains&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;domain&quot;: &#123; &quot;name&quot;: &quot;newdomain&quot; &#125; &#125;&#x27;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>更新 domain 状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># domain_id</span></span><br><span class="line">curl -s -X PATCH \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;domain&quot;: &#123; &quot;enabled&quot;: false &#125; &#125;&#x27;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/domains/d94c8df6149146ae9fd3aa50544789b4&quot;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>删除 domain（返回 204）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># domain_id</span></span><br><span class="line">curl -i -X DELETE \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/domains/d94c8df6149146ae9fd3aa50544789b4&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>列出 project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/projects&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>创建 project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/projects&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;project&quot;: &#123; &quot;name&quot;: &quot;newproject&quot; &#125; &#125;&#x27;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>禁用 project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># project_id</span></span><br><span class="line">curl -s -X PATCH \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;project&quot;: &#123; &quot;enabled&quot;: false &#125; &#125;&#x27;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/projects/7f926f22b2784dfba2687aad2e2d1283&quot;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>删除 project（返回 204）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># project_id</span></span><br><span class="line">curl -i -X DELETE \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/projects/7f926f22b2784dfba2687aad2e2d1283&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>列出服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/services&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  | python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>列出端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/endpoints&quot;</span>\</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>列出用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/users&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;http://localhost:5000/v3/users&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123;&quot;user&quot;: &#123;&quot;name&quot;: &quot;newuser&quot;, &quot;password&quot;: &quot;pwd&quot;&#125;&#125;&#x27;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>查看用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user_id</span></span><br><span class="line">curl -s \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line"><span class="string">&quot;http://localhost:5000/v3/users/629169d123244d269d8b39538fc8f872&quot;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码（返回 204）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user_id</span></span><br><span class="line">curl -i \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123; &quot;user&quot;: &#123;&quot;password&quot;: &quot;password&quot;, &quot;original_password&quot;: &quot;pwd&quot;&#125; &#125;&#x27;</span> \</span><br><span class="line"><span class="string">&quot;http://localhost:5000/v3/users/629169d123244d269d8b39538fc8f872/password&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>更新用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user_id</span></span><br><span class="line">curl -s -X PATCH \</span><br><span class="line">-H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123; &quot;user&quot;: &#123;&quot;password&quot;: &quot;pwd&quot;&#125; &#125;&#x27;</span> \</span><br><span class="line"><span class="string">&quot;http://localhost:5000/v3/users/629169d123244d269d8b39538fc8f872&quot;</span> \</span><br><span class="line">| python -mjson.tool</span><br></pre></td></tr></table></figure></li><li><p>删除用户（返回 204）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user_id</span></span><br><span class="line">curl -i -X DELETE \</span><br><span class="line">  -H <span class="string">&quot;X-Auth-Token: <span class="variable">$OS_TOKEN</span>&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  <span class="string">&quot;http://localhost:5000/v3/users/629169d123244d269d8b39538fc8f872&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><p><a href="https://docs.openstack.org/keystone/latest/install/keystone-install-ubuntu.html#prerequisites">Install and configure</a></p></li><li><p><a href="https://docs.openstack.org/project-team-guide/project-setup/python.html">Python Project Guide</a></p></li><li><p><a href="https://docs.openstack.org/keystone/latest/contributor/set-up-keystone.html">Setting up Keystone</a></p></li><li><p><a href="https://kairen.gitbooks.io/openstack-ubuntu-newton/content/ubuntu-binary/keystone/">Keystone 安裝與設定</a></p></li><li><p><a href="https://docs.openstack.org/keystone/latest/api_curl_examples.html">API Examples using Curl</a></p></li><li><p><a href="https://docs.openstack.org/api-ref/identity/v3/">Identity API v3 (CURRENT)</a></p></li><li><p><a href="https://docs.openstack.org/keystone/victoria/getting-started/policy_mapping.html">Mapping of policy target to API</a></p></li></ul>]]></content>
    
    
    <summary type="html">记录部署流程</summary>
    
    
    
    <category term="OpenStack" scheme="https://jckling.github.io/categories/OpenStack/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
    <category term="Ubuntu" scheme="https://jckling.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 部署 Jaeger + Elasticsearch + Kibana</title>
    <link href="https://jckling.github.io/2021/05/10/Jaeger/Jaeger%20+%20Elasticsearch%20+%20Kibana/"/>
    <id>https://jckling.github.io/2021/05/10/Jaeger/Jaeger%20+%20Elasticsearch%20+%20Kibana/</id>
    <published>2021-05-10T11:42:08.000Z</published>
    <updated>2021-08-31T06:40:08.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jaeger-持久化存储"><a href="#Jaeger-持久化存储" class="headerlink" title="Jaeger 持久化存储"></a>Jaeger 持久化存储</h1><p>all-in-one 包含 Jaeger UI（query）、收集器（collector）、查询（query）和代理（agent）， 它将收集到的追踪数据存储在内存中，因此，重启容器后会丢失所有的数据。</p><p>为了便于后续的数据分析，需要将追踪数据进行持久化存储，Jaeger 支持 cassandra、elasticsearch、kafka（缓存）、grpc-plugin、badger（仅适用 all-in-one）、memory（仅适用 all-in-one）。对于大规模的生产部署，Jaeger 团队推荐 Elasticsearch 后端，而不是 Cassandra 。</p><p>根据 Jaeger 架构，没有缓存的情况下收集器（collector）直接将数据写入存储。</p><img src="https://i.loli.net/2021/06/06/GYDWAdzw7t4PiCB.png" width="80%"/><p>也可以将 kafka 作为初始缓存区，这个之后再加。</p><img src="https://i.loli.net/2021/06/06/N87rt1HTcqMkV4g.png" width="80%"/><p>这里使用 elasticsearch(+kibana) 作为存储后端：</p><ol><li>直接使用 all-in-one 容器部署</li><li>单独部署 Jaeger 的各个组件<ul><li>agent：Jaeger 客户端要求 jaeger-agent 进程在每个主机上本地运行。</li><li>collector：收集器是无状态的，可以并行运行多个 jaeger-collector 实例。</li><li>query：jaeger-query 服务于 API 端点和 React/Javascript UI。该服务是无状态的，通常运行在负载均衡器之后，比如 NGINX。</li><li>ingester：jaeger-ingester 能够从 Kafka 读取数据，然后将其写入存储后端（Elasticsearch/Cassandra）。</li></ul></li></ol><p>使用 docker 容器运行，并挂载卷（将数据存储到本机而不是容器内）；从 elasticsearch 获取数据，使用 kibana 查看数据情况。</p><h1 id="all-in-one"><a href="#all-in-one" class="headerlink" title="all-in-one"></a>all-in-one</h1><p>按顺序创建容器，使用 <code>--link</code> 进行链接，非常容易构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elasticsearch</span></span><br><span class="line">docker run -d --name=elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e <span class="string">&quot;xpack.security.enabled=false&quot;</span> docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># kibana</span></span><br><span class="line">docker run -d --name=kibana --link=elasticsearch -p 5601:5601</span><br><span class="line">docker.elastic.co/kibana/kibana:7.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># all-in-one</span></span><br><span class="line">docker run -d --name jaeger \</span><br><span class="line">  --link=elasticsearch \</span><br><span class="line">  -e SPAN_STORAGE_TYPE=elasticsearch \</span><br><span class="line">  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \</span><br><span class="line">  -e ES_SERVER_URLS=http://elasticsearch:9200 \</span><br><span class="line">  -e ES_TAGS_AS_FIELDS_ALL=<span class="literal">true</span> \</span><br><span class="line">  -p 5775:5775/udp \</span><br><span class="line">  -p 6831:6831/udp \</span><br><span class="line">  -p 6832:6832/udp \</span><br><span class="line">  -p 5778:5778 \</span><br><span class="line">  -p 16686:16686 \</span><br><span class="line">  -p 14268:14268 \</span><br><span class="line">  -p 14250:14250 \</span><br><span class="line">  -p 9411:9411 \</span><br><span class="line">  jaegertracing/all-in-one</span><br></pre></td></tr></table></figure><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>查看容器内目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it elasticsearch bash</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/06/06/x3DLFaGgRbOcWM9.png" width="80%"><p><del>1. 挂载本地目录</del></p><p>本地的空目录会覆盖容器内有数据的目录，导致容器无法正常启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo mkdir -p /usr/share/elasticsearch/config /usr/share/elasticsearch/data /usr/share/elasticsearch/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">docker run -d --name=<span class="built_in">test</span> \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;xpack.security.enabled=false&quot;</span> \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/usr/share/elasticsearch/config,target=/usr/share/elasticsearch/config \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/usr/share/elasticsearch/data,target=/usr/share/elasticsearch/data \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/usr/share/elasticsearch/logs,target=/usr/share/elasticsearch/logs \</span><br><span class="line">docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><ol start="2"><li>挂载卷</li></ol><p>卷空时不会覆盖掉容器内原有的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建卷</span></span><br><span class="line">docker volume create my-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看卷</span></span><br><span class="line">docker inspect my-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除卷</span></span><br><span class="line">docker volume rm my-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载卷</span></span><br><span class="line">docker volume create es-config</span><br><span class="line">docker volume create es-data</span><br><span class="line">docker volume create es-logs</span><br><span class="line"></span><br><span class="line">docker run -d --name=<span class="built_in">test</span> \</span><br><span class="line">-p 9201:9200 -p 9301:9300 \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;xpack.security.enabled=false&quot;</span> \</span><br><span class="line">--mount <span class="built_in">source</span>=es-config,target=/usr/share/elasticsearch/config \</span><br><span class="line">--mount <span class="built_in">source</span>=es-data,target=/usr/share/elasticsearch/data \</span><br><span class="line">--mount <span class="built_in">source</span>=es-logs,target=/usr/share/elasticsearch/logs \</span><br><span class="line">docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">curl -X GET <span class="string">&quot;localhost:9201/_cat/nodes?v=true&amp;pretty&quot;</span></span><br></pre></td></tr></table></figure><p>挂载后，容器内的数据直接写到本地的卷中。</p><img src="https://i.loli.net/2021/06/06/Gg3tJNCSiaQKM2B.png"><h1 id="单独部署组件"><a href="#单独部署组件" class="headerlink" title="单独部署组件"></a>单独部署组件</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用启动容器名称 <code>elasticsearch</code> 或 localhost 作为访问地址，无法启动 jaeger-collector</p><ul><li>提示无法访问 Elasticsearch ，但是本地使用 curl 语句正常访问</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2021/05/09 10:58:46 maxprocs: Leaving GOMAXPROCS=4: CPU quota undefined</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557926.8695443,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;flags/service.go:117&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Mounting metrics handler on admin server&quot;</span>,<span class="string">&quot;route&quot;</span>:<span class="string">&quot;/metrics&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557926.8699071,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;flags/service.go:123&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Mounting expvar handler on admin server&quot;</span>,<span class="string">&quot;route&quot;</span>:<span class="string">&quot;/debug/vars&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557926.8716085,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;flags/admin.go:105&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Mounting health check on admin server&quot;</span>,<span class="string">&quot;route&quot;</span>:<span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557926.8717675,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;flags/admin.go:111&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Starting admin HTTP server&quot;</span>,<span class="string">&quot;http-addr&quot;</span>:<span class="string">&quot;:14269&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557926.8733315,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;flags/admin.go:97&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Admin server started&quot;</span>,<span class="string">&quot;http.host-port&quot;</span>:<span class="string">&quot;[::]:14269&quot;</span>,<span class="string">&quot;health-status&quot;</span>:<span class="string">&quot;unavailable&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;fatal&quot;</span>,<span class="string">&quot;ts&quot;</span>:1620557932.8956766,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;command-line-arguments/main.go:75&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Failed to init storage factory&quot;</span>,<span class="string">&quot;error&quot;</span>:<span class="string">&quot;failed to create primary Elasticsearch client: Head \&quot;http://elasticsearch2:9200\&quot;: context deadline exceeded&quot;</span>,<span class="string">&quot;stacktrace&quot;</span>:<span class="string">&quot;main.main.func1\n\tcommand-line-arguments/main.go:75\ngithub.com/spf13/cobra.(*Command).execute\n\tgithub.com/spf13/cobra@v0.0.7/command.go:838\ngithub.com/spf13/cobra.(*Command).ExecuteC\n\tgithub.com/spf13/cobra@v0.0.7/command.go:943\ngithub.com/spf13/cobra.(*Command).Execute\n\tgithub.com/spf13/cobra@v0.0.7/command.go:883\nmain.main\n\tcommand-line-arguments/main.go:137\nruntime.main\n\truntime/proc.go:225&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用 <code>publish_address</code> 作为访问地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 publish_address</span></span><br><span class="line">curl -XGET <span class="string">&#x27;0.0.0.0:9200/_nodes/http?pretty&#x27;</span> | grep publish_address</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>根据 Jaeger 提供的标志，转换为 <code>大写+下划线</code> 的形式，使用环境变量进行设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elasticsearch</span></span><br><span class="line">docker run -d --name=elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e <span class="string">&quot;xpack.security.enabled=false&quot;</span> -e ES_JAVA_OPTS=<span class="string">&quot;-Xms512m -Xmx512m&quot;</span>  docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># jaeger-collector 注意地址</span></span><br><span class="line">docker run -d --name=jaeger-collector --link elasticsearch2 -p 9411:9411 -p 14250:14250 -p 14268:14268 -p 14269:14269 -e SPAN_STORAGE_TYPE=elasticsearch -e ES_SERVER_URLS=http://172.17.0.2:9200 jaegertracing/jaeger-collector</span><br><span class="line"></span><br><span class="line"><span class="comment"># jaeger-agent</span></span><br><span class="line">docker run -d --name=jaeger-agent -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778/tcp -p 5775:5775/udp -e REPORTER_GRPC_HOST_PORT=172.17.0.3:14250 -e LOG_LEVEL=debug jaegertracing/jaeger-agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># jaeger-query 注意地址</span></span><br><span class="line">docker run -d --name=jaeger-query --link elasticsearch2 -p 16686:16686 -p 16687:16687 -e SPAN_STORAGE_TYPE=elasticsearch -e ES_SERVER_URLS=http://172.17.0.2:9200 jaegertracing/jaeger-query</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出容器</span></span><br><span class="line">docker container ls</span><br><span class="line"></span><br><span class="line">openstack user list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试日志</span></span><br><span class="line">docker inspect jaeger-agent | grep LogPath</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止并删除容器</span></span><br><span class="line">docker container stop jaeger-collector jaeger-agent jaeger-query</span><br><span class="line">docker container rm jaeger-collector jaeger-agent jaeger-query</span><br></pre></td></tr></table></figure><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><h2 id="Jaeger-UI"><a href="#Jaeger-UI" class="headerlink" title="Jaeger UI"></a>Jaeger UI</h2><p>直接使用 Jaeger UI 查询，可以自定义日期范围。</p><img src="https://i.loli.net/2021/06/06/BkVQqY167WsbSXw.png"><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>用 curl 查询 elasticsearch ，可以使用不同的参数过滤查询数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回索引信息</span></span><br><span class="line">curl -X GET <span class="string">&quot;localhost:9200/_cat/indices?v&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询索引包含 jaeger 的信息</span></span><br><span class="line">curl -X GET <span class="string">&quot;localhost:9200/jaeger*/_search?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;match_all&quot;: &#123;&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="elasticdump"><a href="#elasticdump" class="headerlink" title="elasticdump"></a>elasticdump</h2><p>使用 elasticdump 导出数据，并保存为 json 格式的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 elasticdump</span></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line">sudo npm install elasticdump -g</span><br><span class="line">elasticdump</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 json 格式导出数据</span></span><br><span class="line">elasticdump --input=<span class="string">&quot;http://localhost:9200/jaeger-service-05-08&quot;</span> --output=service.json</span><br><span class="line"></span><br><span class="line">elasticdump --input=<span class="string">&quot;http://localhost:9200/jaeger-span-05-08&quot;</span> --output=span.json</span><br></pre></td></tr></table></figure><h2 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h2><p>用 kibana 可视化查询数据。</p><img src="https://i.loli.net/2021/06/06/Mj6AFV58XfzadPb.png"><p>将数据进行可视化后，可以整理在一个面板中。</p><img src="https://i.loli.net/2021/06/06/1AIm9p3Z2Kdf4DQ.png"><h1 id="参阅"><a href="#参阅" class="headerlink" title="参阅"></a>参阅</h1><ul><li><p><a href="https://www.jaegertracing.io/docs/1.22/getting-started/">Getting Started – Jaeger documention</a></p></li><li><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html">Install Elasticsearch with Docker</a></p></li><li><p><a href="https://www.elastic.co/guide/en/kibana/current/docker.html">Install Kibana with Docker</a></p></li><li><p><a href="https://stackoverflow.com/questions/51785812/how-to-configure-jaeger-with-elasticsearch">How to configure Jaeger with elasticsearch?</a></p></li><li><p><a href="https://logz.io/blog/jaeger-and-the-elk-stack/">Distributed Tracing with Jaeger and the ELK Stack</a></p></li><li><p><a href="https://stackoverflow.com/questions/47519309/mount-an-empty-folder-in-host-to-a-non-empty-folder-in-docker">Mount an empty folder in host to a non-empty folder in Docker</a></p></li><li><p><a href="https://www.jianshu.com/p/277f609eb969">Go无法连接docker中es</a></p></li><li><p><a href="https://www.jaegertracing.io/docs/1.22/cli/#jaeger-agent">CLI flags – Jaeger documention</a></p></li><li><p><a href="https://www.jaegertracing.io/docs/1.22/deployment/">Deployment – Jaeger documention</a></p></li><li><p><a href="https://stackoverflow.com/questions/51785812/how-to-configure-jaeger-with-elasticsearch">How to configure Jaeger with elasticsearch?</a></p></li><li><p><a href="https://blog.csdn.net/meijinmeng/article/details/107537706">Jeager+cat+ELK 快速构建分布式调用链跟踪系统</a></p></li><li><p><a href="https://medium.com/jaegertracing/jaeger-elasticsearch-and-kibana-7ecb846137b6">Jaeger Elasticsearch and Kibana</a></p></li><li><p><a href="https://logz.io/blog/jaeger-and-the-elk-stack/">Distributed Tracing with Jaeger and the ELK Stack</a></p></li><li><p><a href="https://github.com/elasticsearch-dump/elasticsearch-dump">elasticsearch-dump/elasticsearch-dump</a></p></li></ul>]]></content>
    
    
    <summary type="html">使用 Elasticsearch 作为持久化存储，部署 all-in-one 镜像/单独部署 Jaeger 组件；elasticdump 导出数据，Kibana 可视化追踪信息。</summary>
    
    
    
    <category term="Jaeger" scheme="https://jckling.github.io/categories/Jaeger/"/>
    
    
    <category term="Python" scheme="https://jckling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>FF14 GShade 使用教程</title>
    <link href="https://jckling.github.io/2021/05/02/Game/FFXIV/FF14-GShade%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://jckling.github.io/2021/05/02/Game/FFXIV/FF14-GShade%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-05-02T14:50:01.000Z</published>
    <updated>2021-08-31T06:40:08.564Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary flat"><p>🕹️ FF14 幻化人：陆行鸟 - 晨曦王座 - 啃咸鱼的懒熊（原ID：Mosom）<br>招待码 <code>0295-a3be-vax6-04fv</code>，<a href="ff.sdo.com/entertain">登陆页面</a> 点击【被招待者】，在页面上输入招待码，马上结成招待关系！</p><p>🙈 一个只扔了截图的微博：<a href="https://weibo.com/u/6595471688">@啃咸鱼的懒熊</a></p></div><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>GShade 是我用得最久的工具了，而且现在打游戏也都开着（加一层滤镜）。最近学会用 CMTool 和 TexTools ，再结合 GShade 就可以更加愉快地截图了wwww</p><p>有些滤镜的计算量大不适合打本的时候开，截图的时候用用就好了；另一些资源消耗少的滤镜可以开着打本，通常名称中带 <code>Gameplay</code> 。我只用预设的滤镜，因为选项实在是太多了人又懒，所以研究得老慢了 😂</p><h1 id="0x01-安装"><a href="#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h1><p>从 <a href="https://gposers.com/gshade/">GShade - GPOSERS</a> 下载 Windows 安装文件（下载不了的留言我发给你.jpg），然后双击运行。</p><img src="https://i.loli.net/2021/06/06/dgfbjE4oxIcRBDt.jpg" width="100%"/><p>具体的安装过程如下：</p><ol><li>选择中文安装</li><li>同意服务条款</li><li>定位到游戏安装目录选择 ffxiv_dx11.exe</li><li>默认选项安装（勾选 DirectX 11）</li><li>开始安装</li><li>选择截图保存位置</li><li>安装完毕</li></ol><img src="https://www.z4a.net/images/2021/05/03/install.gif" width="80%"/><h1 id="0x02-功能介绍"><a href="#0x02-功能介绍" class="headerlink" title="0x02 功能介绍"></a>0x02 功能介绍</h1><p>进入游戏后 <code>Ctrl+F2</code> 打开 GShade 界面（首页）</p><p>点击最上方的方框可以选择预设滤镜，中间是各种效果，下方是效果细节调整。自定义滤镜时记得开启 <code>FFKeepUI</code> 和 <code>FFRestoreUI</code> 保存，然后用 <strong>置顶激活</strong> 把开启的移至最前，默认按名称字母顺序排列。</p><img src="https://i.loli.net/2021/06/06/NKtS3G4FnbPDWkw.png" width="80%" /><p>注意不要覆盖预设滤镜，使用 <code>＋</code> 创建新的文件，最上方显示当前文件夹。</p><img src="https://i.loli.net/2021/06/06/KZYWL6RxzwNcvsD.png" width="80%" /><p>设置</p><ul><li>快捷键设置，我把 <code>屏幕快照热键</code> 设置成和游戏相同的 <code>Print Screen</code> 了（默认是啥不记得了hhh），因此每次截图都会得到两张，一张原始的另一张加了滤镜的。</li><li>保存路径设置，可以自定义截图存放路径。</li><li>其他的没用过xd</li></ul><img src="https://i.loli.net/2021/06/06/lfNbaCW5sFy4kgc.png" width="80%" /><p>平时我就用 OkamiGamePlay 滤镜玩游戏，资源消耗不大可以开着打本；截图的时候再换别的滤镜，有些滤镜支持鼠标对焦，所以只适合截图。</p><img src="https://www.z4a.net/images/2021/05/03/gshade.gif"/><h1 id="0x03-gpose-模式"><a href="#0x03-gpose-模式" class="headerlink" title="0x03 gpose 模式"></a>0x03 gpose 模式</h1><p>游戏中的 gpose 模式就是 <code>集体动作</code>，可以在技能里找到（快捷键 P）；也可以在输入框发送 <code>/gpose</code> 进入。</p><img src="https://i.loli.net/2021/06/06/kIwKscf4qthYaVG.png" width="50%" /><p>最上方一栏从左往右分别是（括号内表示快捷键）：</p><ul><li>角色面朝镜头方向（空格）</li><li>镜头位置点亮灯光1（X）</li><li>全体动作暂停（1）</li><li>目标动作暂停（2）</li><li>时刻/天气停止：开启表示停止</li><li>显示/隐藏战斗特效：开启表示显示</li><li>显示/隐藏说明：开启表示显示</li><li>重置临边昏暗</li><li>重置镜头（Z）<ul><li>调整镜头（Q、W、E、A、S、D）</li></ul></li></ul><h2 id="整体设置"><a href="#整体设置" class="headerlink" title="整体设置"></a>整体设置</h2><ul><li>镜头调整最近可以拉到 200，超近的距离，用鼠标滚轮拉不到这么近！</li><li>旋转以 45° 为基本单位</li><li>自带一些滤镜和特效</li><li>支持手动调节亮度、景深、对焦、临边昏暗</li></ul><img src="https://i.loli.net/2021/06/06/kTrxb8niNwE4tvq.png" width="50%"/><h2 id="特效-边框设置"><a href="#特效-边框设置" class="headerlink" title="特效/边框设置"></a>特效/边框设置</h2><p>状态一共有五种，就是副本中遇到过的那些：</p><ul><li>冻结、石化、热病、睡眠、魅惑</li></ul><p>右侧三个符号分别表示：</p><ul><li>附加/解除状态（仅目标）</li><li>附加状态（全体）</li><li>重置状态</li></ul><p>湿衣效果就是下雨和下水时的效果，可以手动开启（一键黑皮）</p><p>提供了许多边框，包括拍立得、电影等等</p><p>贴纸模式没有用过也…</p><img src="https://i.loli.net/2021/06/06/ePfhvF4qpBanXz3.png" width="50%"/><h2 id="灯光亮度-扩展设置"><a href="#灯光亮度-扩展设置" class="headerlink" title="灯光亮度/扩展设置"></a>灯光亮度/扩展设置</h2><p>灯光共有三种类型，一共可以打三个光，灯光照亮的范围按照类型 123 的顺序逐渐增加</p><p>右侧符号分别表示：</p><ul><li>灯光全解除</li><li>重置灯光细节设置</li></ul><img src="https://i.loli.net/2021/06/06/OWAyBtKGJDRqu59.png" width="50%"/><h2 id="动作设置"><a href="#动作设置" class="headerlink" title="动作设置"></a>动作设置</h2><p>虽然可以让角色面向镜头，但是有些动作不受这个限制，视线同理。</p><ul><li>角色面朝镜头方向：面部转向镜头，考虑实际人头转动的能力，镜头太偏转不过去的</li><li>视线看向镜头方向：简单理解为眼动</li><li>反复做动作：重复执行动作</li></ul><p>移动动作</p><ul><li>前进行走</li><li>前进奔跑</li><li>前进冲刺</li><li>向左平移行走</li><li>向左平移奔跑</li><li>向右平移行走</li><li>向右平移奔跑</li><li>后退行走</li></ul><p>口型动作一共有三种，都是在说话的动作，嘴巴张开的幅度 123 逐渐递增。</p><img src="https://i.loli.net/2021/06/06/J2InCrShjgB4tLa.png" width="50%"/><p>情感动作只能用在自己身上，选中目标没用。情感动作和表情都能使用，情感动作+表情有奇效🥴</p><img src="https://i.loli.net/2021/06/06/Fn1J3Icdpoqwf7C.png" width="50%"/><h2 id="角色显示设置"><a href="#角色显示设置" class="headerlink" title="角色显示设置"></a>角色显示设置</h2><p>预设了多种过滤选项，通常我就用操作角色中的 <code>自己</code> 和 <code>其他玩家</code> ，组队之后的玩家就属于操作角色，画面中的路人玩家属于不操作角色。</p><img src="https://i.loli.net/2021/06/06/kB3UwFMervxj5WY.png" width="50%"/><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://gposers.com/gshade/">GShade - GPOSERS</a></li></ul>]]></content>
    
    
    <summary type="html">一键上滤镜</summary>
    
    
    
    <category term="Game" scheme="https://jckling.github.io/categories/Game/"/>
    
    
    <category term="FFXIV" scheme="https://jckling.github.io/tags/FFXIV/"/>
    
  </entry>
  
  <entry>
    <title>FF14 TexTools 使用教程</title>
    <link href="https://jckling.github.io/2021/04/29/Game/FFXIV/FF14-TexTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://jckling.github.io/2021/04/29/Game/FFXIV/FF14-TexTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-04-29T07:29:35.000Z</published>
    <updated>2021-08-31T06:40:08.564Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning flat"><p>2021.8.15 已更新 2.3.6.2 版，国服 5.5 可用</p><p><em>PS：评论审核需要时间，不要重复刷评论</em> 🆘</p></div><div class="note primary flat"><p>🕹️ FF14 幻化人：陆行鸟 - 晨曦王座 - 啃咸鱼的懒熊（原ID：Mosom）<br>招待码 <code>0295-a3be-vax6-04fv</code>，<a href="ff.sdo.com/entertain">登陆页面</a> 点击【被招待者】，在页面上输入招待码，马上结成招待关系！</p><p>🙈 一个只扔了截图的微博：<a href="https://weibo.com/u/6595471688">@啃咸鱼的懒熊</a></p></div><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>摸了一天 CMTool 之后，想了想这玩意儿只能修改姿势和使用游戏原本就有的道具，后来找了半天发现一个叫 TexTools 的工具，我的简单认知就是可以修改贴图材料的工具（在原来的身体、装备基础上进行覆盖）。</p><h1 id="0x01-安装"><a href="#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h1><p>TexTools 也是 Github 上开源的软件，所以直接下载就好啦：<a href="https://github.com/TexTools/FFXIV_TexTools_UI/releases">TexTools/FFXIV_TexTools_UI</a> ，下不了的朋友留言我发给你（还是那句，能访问我的博客应该不会遇到这个问题 🥴</p><p>这里选择下载 exe 执行安装，也可以下载 zip 压缩包解压到想要安装的目录。</p><img src="https://i.loli.net/2021/06/06/wAo4v58a3eYRDul.png" /><p>2.3.5.8 版本安装完毕后包含以下文件，FFXIV_TexTools 就是咱们要用的工具。</p><p>PS：这图标干嘛非要和游戏本体的图标一样啊！</p><img src="https://i.loli.net/2021/06/06/7b8p3GKhwlWrvMj.png" /><p><strong>注意</strong>：和 CMTool 不同，这个工具必须在启动 FF14 前使用，然后进入游戏才能看到变化，而且游戏中是无法实时修改的。</p><h1 id="0x02-功能介绍"><a href="#0x02-功能介绍" class="headerlink" title="0x02 功能介绍"></a>0x02 功能介绍</h1><p>我用 DirectX 11 玩的游戏，所以用这个工具的时候需要选择 DX11 ，每次打开这个工具都得手动切换（不切换好像也没问题¿）。</p><p>工具自带了三个 Mod 下载网址，我只在第二个网站下过 Mod 👇</p><ul><li><a href="https://prettykittyemporium.blogspot.com/">PrettyKitty Emporium</a></li><li><a href="https://www.xivmodarchive.com/">XIV Mod Archive</a></li><li><a href="https://www.nexusmods.com/finalfantasy14">Nexus Mods</a></li></ul><img src="https://i.loli.net/2021/06/06/mfX78bPgqioxtJA.png" /><p>菜单栏提供的各个选项我还没摸明白，目前会的就只是导入和启用 Mod ，用 Textools 修改装备纹理细节之类还没研究过（也不知道会不会去研究就是了）。</p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ol><li><p>在玩崩了的时候，用 <code>初始化</code> 还原游戏文件，同时也会清除导入的 Mod；</p></li><li><p>导入 Mod 不起作用的时候，用 <code>Cache Operations - Rebuild Cache</code> 重新构建。</p></li></ol><img src="https://i.loli.net/2021/06/06/GtAMjwzTuq5mPey.png" width="80%"/><h2 id="Mods"><a href="#Mods" class="headerlink" title="Mods"></a>Mods</h2><ol><li><p><code>Manage Mod List</code> 管理导入的 Mod，启用、禁用、删除、预览；</p></li><li><p><code>Clean up Modlist</code> 更新 Mod 列表，确保所有修改的文件都正确标注；</p></li><li><p><code>Recover Unused Space</code> 整理 DAT 文件碎片。</p></li></ol><img src="https://i.loli.net/2021/06/06/jMUmahvWrFDgGyH.png" width="80%"/><p>Mod 列表这里可以按照道具或者 Mod 包选择，按名称或日期排序。</p><ul><li>按道具排列可以查看每个身体部位都有什么 Mod 依赖在什么道具上；</li><li>按 Mod 包排列可以查看导入的 ttmp/ttmp2 都来自什么 Mod 包。</li></ul><img src="https://i.loli.net/2021/06/06/AH2MgJGNS9TP7mW.png" width="80%"/><ol><li><p><code>禁用所有Mod</code> ，不知道自己都启用了什么 Mod 的时候用它关闭挺方便的；</p></li><li><p><code>启用所有Mod</code> ，因为我下载的 Mod 很多，所以不用这个选项，直接用 <code>Mod列表 - Manage Mod List</code> 手动启用。</p></li></ol><img src="https://i.loli.net/2021/06/06/7Ep3WP2sXiTnFuH.png" width="50%"/><h1 id="0x03-Mod-使用方式"><a href="#0x03-Mod-使用方式" class="headerlink" title="0x03 Mod 使用方式"></a>0x03 Mod 使用方式</h1><p>知道上面几个简单操作就可以开始玩 Mod 了，默认的文件存放路径是 <code>C:\用户名\Documents\TexTools</code>（<code>此电脑\文档\TexTools</code>），把下载的 Mod 放到 <code>ModPacks</code> 文件夹中方便整理。</p><img src="https://i.loli.net/2021/06/06/Jqe5EBvlauCVKtz.png" width="80%"/><p>我只在 <a href="https://www.xivmodarchive.com/">XIV Mod Archive</a> 上下载过 Mod ，而且都是 ttmp 或者 ttmp2 后缀的文件。那些名称里带 <code>TB2.0</code> 的 Mod 需要先打上 <a href="https://www.xivmodarchive.com/modid/17279">The Body 2.0</a> （<strong>NSFW</strong>）的 Mod 然后才能用，否则用起来就是下面这样 😶</p><img src="https://i.loli.net/2021/06/06/DtEBSgIzmc8FNAe.png" width="35%"/><ol><li>下载 <a href="https://www.xivmodarchive.com/modid/17279">The Body 2.0</a> ，解压到 ModPacks 文件夹；</li></ol><img src="https://i.loli.net/2021/06/06/lSTPgdHCUsW32Fp.png" width="80%"/><ol start="2"><li>导入最基础的 Mod （<code>Mods - 导入Mod包</code> ，导入后默认启用）<ul><li>TB_Type1/TB_Type1_SFW.ttmp2</li><li>Type1_Legacy patch/Type1_Legacy_A.ttmp2）</li></ul></li></ol><img src="https://i.loli.net/2021/06/06/7XglqsOPFca2TNY.png" width="80%"/><p>由于导入的是身体，意味着穿上装备（衣服、裤子、鞋子）就会遮盖掉效果，脱下的效果如下图所示。刚才消失的腿实际上图面第三张图那样，这是另一个 Mod（<a href="https://www.xivmodarchive.com/modid/29502">BNS to FF Thavnairian legs port (TB2.0)</a>），依赖 TB2.0 并且绑定在萨维奈垮裤上。</p><div class="justified-gallery"><p><img src="https://i.loli.net/2021/06/06/zmWlIoBEHZ3K87x.png"><br><img src="https://i.loli.net/2021/06/06/J4x61NdWeTikICS.png"><br><img src="https://i.loli.net/2021/06/06/bXItoEVGDiCqfkr.png"></p>          </div><p>使用 Mod 就这三步：下载 -&gt; 导入 -&gt; 启用。</p><p>有些 Mod 是依赖于基础的身体 Mod 和装备 Mod，上面的就是得先打上 TB2.0 的身体 Mod 再穿上萨维奈垮裤才能显示出来，所以之前提到的 CMTool （<a href="https://jckling.github.io/2021/04/26/FFXIV/FF14-CMTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">FF14 CMTool 使用教程</a>）就可以结合起来用了wwww</p><p>装备直接用 <a href="https://ff14.huijiwiki.com/wiki/ItemSearch">物品检索器</a> 搜索英文名称就好了，不过国服没有国际服的装备😢</p><img src="https://i.loli.net/2021/06/06/SKHlFsVxJ8u2eiQ.png" /><h1 id="0x04-Mod-搜索姿势"><a href="#0x04-Mod-搜索姿势" class="headerlink" title="0x04 Mod 搜索姿势"></a>0x04 Mod 搜索姿势</h1><p>简单讲一下 <a href="https://www.xivmodarchive.com/">XIV Mod Archive</a> 的搜索选项，点击 <code>Show More Search Options</code> 会多出红框里的选项。另外，需要点击页面右上角 Log In with Discord 用 <a href="https://discord.com/">Discord</a> 账号授权登录才能查看 NSFW 相关内容。 </p><ul><li><strong>NSFW</strong>：Not Safe For Work 工作场所不宜（简单理解：R18）</li><li><strong>Mod Types</strong>：模型类型，分为 TexTool mods 和 Other mods</li><li><strong>Races</strong>：种族，Midlander, Highlander, Miqo’te, Elezen, Au Ra, Viera, ……</li><li><strong>Gender</strong>：性别，Any、Male、Female、Unisex</li><li><strong>Sort by</strong><ul><li>排序依据，Relevance、Last Version Update、Release Date、Name、Views、Views Today、Downloads、Followers</li><li>升序降序，Descending、Ascending</li></ul></li></ul><img src="https://i.loli.net/2021/06/06/D6FmWo5TyXuOQrs.png" /><p>Mod Types 模型类型，我一般就直接用 Textools 和 Concept Matrix Pose 这俩搜索。 </p><img src="https://i.loli.net/2021/06/06/dSzUrFbVINiCJXa.png" width="80%"/><h1 id="0x05-补充说明"><a href="#0x05-补充说明" class="headerlink" title="0x05 补充说明"></a>0x05 补充说明</h1><ol><li><p>弹窗提示 <code>Please locate the following directory</code><br> 打开 TexTool 后，在 <code>选项-自定义</code> 里设置 FFXIV 文件夹，即游戏安装路径，如图所示👇<br> <img src="https://files.alexhchu.com/2021/08/25/54920f00ca013.png"></p></li><li><p>TexTool 不起作用 / mod 无效 / 游戏打不开等<br> 试一下 TexTool 的 <code>Rebuild Cache</code> 或 <code>初始化</code>，一般都能解决。另外注意 mod 的说明页会指明适用于哪些种族，并不是所有的都通用🆘</p></li><li><p>TB2.0 只有男性 mod<br> 女性 mod 一般用 <a href="https://www.xivmodarchive.com/modid/29029">Bibo+</a>，通常 mod 的标题或说明中会写明基础依赖是什么。</p></li></ol><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://github.com/TexTools/FFXIV_TexTools_UI">TexTools/FFXIV_TexTools_UI</a></li><li><a href="https://ngabbs.com/read.php?tid=21744373">[幻想科技]如何使用Textools更改Mod模型的光效、颜色、金属质感 - 更新v1.1</a></li><li><a href="https://docs.google.com/document/d/1M04dbdV1qUt0EzRalvwbB1oI3aPT6t8KEf9KgQfGn6E/edit#">TexTools Item Metadata Settings Guide</a></li></ul>]]></content>
    
    
    <summary type="html">材质、贴图等，也就是通常说的 Mod</summary>
    
    
    
    <category term="Game" scheme="https://jckling.github.io/categories/Game/"/>
    
    
    <category term="FFXIV" scheme="https://jckling.github.io/tags/FFXIV/"/>
    
  </entry>
  
  <entry>
    <title>FF14 CMTool 使用教程</title>
    <link href="https://jckling.github.io/2021/04/26/Game/FFXIV/FF14-CMTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://jckling.github.io/2021/04/26/Game/FFXIV/FF14-CMTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-04-26T13:00:14.000Z</published>
    <updated>2021-08-31T06:40:08.564Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary flat"><p>🕹️ FF14 幻化人：陆行鸟 - 晨曦王座 - 啃咸鱼的懒熊（原ID：Mosom）<br>招待码 <code>0295-a3be-vax6-04fv</code>，<a href="ff.sdo.com/entertain">登陆页面</a> 点击【被招待者】，在页面上输入招待码，马上结成招待关系！</p><p>🙈 一个只扔了截图的微博：<a href="https://weibo.com/u/6595471688">@啃咸鱼的懒熊</a></p></div><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>在群里看到一张公式光的截图 👇 然后从群友那里得知是用动作调整工具 CMT 弄出来的。</p><img src="https://i.loli.net/2021/06/06/6aeNRXEhLdGKfP5.jpg" width="50%" /><p>立马 Google 了起来，相关的中文资料真的少，搜索 <code>CMT FF14</code> 出来几个结果；然后又看到 Github 开源项目（果然是你）。</p><p>结合几年前的中文教程和最新的软件包，周末花了一整天的时间研究怎么用这工具（另一天研究 TexTool 去了），感谢油管教程🙏 视频链接附在文末了！</p><p>CMTool 的功能十分强大，包括但不限于：</p><ul><li>人物修改（捏人）</li><li>装备替换</li><li>动作替换</li><li>时间天气修改</li></ul><p>现在的 CMTool 支持中文，所以还是很好弄明白的！</p><h1 id="0x01-安装"><a href="#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h1><p>CMTool 是开源软件，所以直接上 Github 下载就好啦：<a href="https://github.com/imchillin/CMTool/releases">imchillin/CMTool</a> ，需要帮助的朋友可以留言我发给你（不过能访问我的博客应该没有这个问题😂</p><p>直接下载 zip 压缩包然后解压到想要安装的目录即可。</p><img src="https://i.loli.net/2021/06/06/CrDgwxQfsHtza5o.png" width="80%"/><p>2.0.14.2 版本解压之后包含以下文件，ConceptMatrix 就是咱们要用的工具了。</p><img src="https://i.loli.net/2021/06/06/RrZMwpqXVHvyt4N.png" width="80%"/><p><strong>注意：</strong> 这个工具要在登录 FF14 之后再启动，否则确认之后一堆弹窗（选择 yes/no 都无所谓）。</p><img src="https://www.z4a.net/images/2021/05/03/crash.gif" /><h1 id="0x02-功能介绍"><a href="#0x02-功能介绍" class="headerlink" title="0x02 功能介绍"></a>0x02 功能介绍</h1><p>我就用了几个小时，理解不对的地方还麻烦兄弟们指正了。</p><h2 id="目标基本设置"><a href="#目标基本设置" class="headerlink" title="目标基本设置"></a>目标基本设置</h2><p><strong>Gpose 模式</strong> 就是游戏里的 <code>/gpose</code> 指令，直接点并不会切换为观景模式😂</p><p><strong>目标模式</strong> 用于对选中的目标修改渲染，例如人物数据、装备等，意思是可以把画面中选中的人物修改成设定的样子（不仅可以修改自己，也可以修改别人）。</p><p>PS：用 CMTool 所做的所有修改仅自己可见。</p><p><strong>保存外观</strong> 可以保存玩家角色的当前外观（人物数据、装备），如果开启目标模式，就可以保存选中人物的当前外观，也就是说可以保存别人的外观然后刷新到自己身上。</p><p>保存状态和读取状态暂时还没搞明白。</p><p><strong>模型列表</strong> 里可以选择替换成任意模型（坐骑、宠物、野怪、NPC 等等）。</p><p><strong>强制动作</strong> 可以让角色做出动作和表情，刷新后得过会儿才会开始做动作，而且貌似不能带着动作进入 gpose 模式😢</p><p>通常的使用方式是保存外观后再修改人物数据，然后读取恢复；或者直接重载进程。</p><img src="https://i.loli.net/2021/06/06/ASkzNj9qIbwLB5Q.png" /><h2 id="目标属性"><a href="#目标属性" class="headerlink" title="目标属性"></a>目标属性</h2><p>目标属性包括人物数据的颜色部分，大小和高级设置没有用过，湿衣效果和 Gpose 模式中的相同。</p><img src="https://i.loli.net/2021/06/06/riDGl4BIQ5ztnXx.png" /><h2 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h2><p>包括到 5.5 的装备、商城装备以及 NPC 装备，非常适合 COS（当然也可以直接用 <code>目标基本设置 - 模型列表</code> 变成 NPC），还提供染色功能。当前试穿的装备可以一键保存，之后再直接读取即可。</p><img src="https://i.loli.net/2021/06/06/ydL1viTzCr4N6ph.png" /><h2 id="动作矩阵"><a href="#动作矩阵" class="headerlink" title="动作矩阵"></a>动作矩阵</h2><p>只能在 Gpose 模式下使用，通常用目标模式选中需要修改动作的人物，然后 <strong>启用编辑</strong>，<strong>加载CMP文件</strong> 就能显示动作了，不过需要用 <code>目标基本设置 - X/Y/Z轴位置</code> 调整目标位置，还要用图中下半部分的选项调整肢体位置，否则经常悬空穿模什么的…</p><p>右边选择身体部位，左边一般用角色模型属性中的旋转。</p><p>注意：启用编辑后所有目标都被强行固定，不过还是会在漂移，所以启用前一定要暂停目标动作。</p><img src="https://i.loli.net/2021/06/06/yWpaeus5IwGko8C.png" /><h2 id="世界"><a href="#世界" class="headerlink" title="世界"></a>世界</h2><p>进入 Gpose 模式前可以修改时间和天气，进入 Gpose 模式后只能改变天气。<strong>解除角色渲染限制</strong> 应该是用来匹配修改时间天气后的环境，通常有改就启用。<strong>刷新按钮</strong> 用于读取当前游戏中的天气。</p><p>左侧镜头设置可以在 Gpose 模式下精细地调整镜头，但是遇到立体模型（无法穿透）还是会被挤过去，类似于对着墙壁可以怼脸截图那样。</p><p><strong>gpose滤镜</strong> 提供了一些简单的修图功能，自带一些残念的滤镜，不过滤镜一般就直接用 <a href="https://gposers.com/gshade/">GShade</a> 。</p><p>这里的镜头设置和滤镜都可以保存之后再读取，因为感觉不通用所以一直没用过保存功能xd</p><img src="https://i.loli.net/2021/06/06/TOZ6NRJ8sfVta2X.png" /><h1 id="0x03-实例"><a href="#0x03-实例" class="headerlink" title="0x03 实例"></a>0x03 实例</h1><h2 id="单人"><a href="#单人" class="headerlink" title="单人"></a>单人</h2><p>这是 <a href="https://www.xivmodarchive.com/modid/29432">Hugo Boss</a> 中的一个动作，呆——</p><img src="https://i.loli.net/2021/06/06/fFpgoV91hGTx3AP.jpg" width="50%"/><h2 id="双人"><a href="#双人" class="headerlink" title="双人"></a>双人</h2><p>首先，叫上一个黑皮人男，然后给不同的目标加载不同的姿势，调整位置和转向，完成。</p><p>我忘记是哪两个动作了233333</p><img src="https://i.loli.net/2021/06/06/Yurzqd2CsQviTt6.jpg" /><h2 id="多人（暂无）"><a href="#多人（暂无）" class="headerlink" title="多人（暂无）"></a>多人（暂无）</h2><p>我就是亲友少qwq</p><h1 id="0x04-CMP下载"><a href="#0x04-CMP下载" class="headerlink" title="0x04 CMP下载"></a>0x04 CMP下载</h1><p>我只在 <a href="https://www.xivmodarchive.com/search?sortby=rank&sortorder=desc&types=11">XIV Mod Archive</a> 下载过动作（cmp 文件后缀），搜索方法见 <a href="https://jckling.github.io/2021/04/29/Game/FFXIV/FF14-TexTool%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">FF14 TexTools 使用教程</a> 。</p><img src="https://i.loli.net/2021/06/06/1g4XqyrGvxoN3ed.png" /><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://github.com/imchillin/CMTool">imchillin/CMTool</a></li><li><a href="https://www.gamemale.com/thread-71758-1-1.html">[资源] FF14拓展工具CMTool入门指引</a></li><li><a href="https://www.gamemale.com/thread-77507-1-1.html">[问题] 各位大佬FF14的CMT的姿势是从哪下载的？</a></li><li><a href="https://www.youtube.com/watch?v=KeyWlQl-RRU&t=618s">How to use CMTools in FFXIV</a></li></ul>]]></content>
    
    
    <summary type="html">国服玩家将其简称为 CMT（大概吧）</summary>
    
    
    
    <category term="Game" scheme="https://jckling.github.io/categories/Game/"/>
    
    
    <category term="FFXIV" scheme="https://jckling.github.io/tags/FFXIV/"/>
    
  </entry>
  
</feed>
